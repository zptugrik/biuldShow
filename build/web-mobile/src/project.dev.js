window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  1: [ function(require, module, exports) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        cachedSetTimeout = "function" === typeof setTimeout ? setTimeout : defaultSetTimout;
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        cachedClearTimeout = "function" === typeof clearTimeout ? clearTimeout : defaultClearTimeout;
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) return setTimeout(fun, 0);
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) return clearTimeout(marker);
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) return;
      draining = false;
      currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1;
      queue.length && drainQueue();
    }
    function drainQueue() {
      if (draining) return;
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) currentQueue && currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
      queue.push(new Item(fun, args));
      1 !== queue.length || draining || runTimeout(drainQueue);
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = "";
    process.versions = {};
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
      return [];
    };
    process.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process.cwd = function() {
      return "/";
    };
    process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process.umask = function() {
      return 0;
    };
  }, {} ],
  2: [ function(require, module, exports) {
    (function() {
      var object = "undefined" != typeof exports ? exports : "undefined" != typeof self ? self : $.global;
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      function InvalidCharacterError(message) {
        this.message = message;
      }
      InvalidCharacterError.prototype = new Error();
      InvalidCharacterError.prototype.name = "InvalidCharacterError";
      object.btoa || (object.btoa = function(input) {
        var str = String(input);
        for (var block, charCode, idx = 0, map = chars, output = ""; str.charAt(0 | idx) || (map = "=", 
        idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
          charCode = str.charCodeAt(idx += .75);
          if (charCode > 255) throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
          block = block << 8 | charCode;
        }
        return output;
      });
      object.atob || (object.atob = function(input) {
        var str = String(input).replace(/[=]+$/, "");
        if (str.length % 4 == 1) throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
        for (var bc = 0, bs, buffer, idx = 0, output = ""; buffer = str.charAt(idx++); ~buffer && (bs = bc % 4 ? 64 * bs + buffer : buffer, 
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) buffer = chars.indexOf(buffer);
        return output;
      });
    })();
  }, {} ],
  3: [ function(require, module, exports) {
    function Address(faker) {
      var f = faker.fake, Helpers = faker.helpers;
      this.zipCode = function(format) {
        if ("undefined" === typeof format) {
          var localeFormat = faker.definitions.address.postcode;
          format = "string" === typeof localeFormat ? localeFormat : faker.random.arrayElement(localeFormat);
        }
        return Helpers.replaceSymbols(format);
      };
      this.city = function(format) {
        var formats = [ "{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}", "{{address.cityPrefix}} {{name.firstName}}", "{{name.firstName}}{{address.citySuffix}}", "{{name.lastName}}{{address.citySuffix}}" ];
        "number" !== typeof format && (format = faker.random.number(formats.length - 1));
        return f(formats[format]);
      };
      this.cityPrefix = function() {
        return faker.random.arrayElement(faker.definitions.address.city_prefix);
      };
      this.citySuffix = function() {
        return faker.random.arrayElement(faker.definitions.address.city_suffix);
      };
      this.streetName = function() {
        var result;
        var suffix = faker.address.streetSuffix();
        "" !== suffix && (suffix = " " + suffix);
        switch (faker.random.number(1)) {
         case 0:
          result = faker.name.lastName() + suffix;
          break;

         case 1:
          result = faker.name.firstName() + suffix;
        }
        return result;
      };
      this.streetAddress = function(useFullAddress) {
        void 0 === useFullAddress && (useFullAddress = false);
        var address = "";
        switch (faker.random.number(2)) {
         case 0:
          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
          break;

         case 1:
          address = Helpers.replaceSymbolWithNumber("####") + " " + faker.address.streetName();
          break;

         case 2:
          address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
        }
        return useFullAddress ? address + " " + faker.address.secondaryAddress() : address;
      };
      this.streetSuffix = function() {
        return faker.random.arrayElement(faker.definitions.address.street_suffix);
      };
      this.streetPrefix = function() {
        return faker.random.arrayElement(faker.definitions.address.street_prefix);
      };
      this.secondaryAddress = function() {
        return Helpers.replaceSymbolWithNumber(faker.random.arrayElement([ "Apt. ###", "Suite ###" ]));
      };
      this.county = function() {
        return faker.random.arrayElement(faker.definitions.address.county);
      };
      this.country = function() {
        return faker.random.arrayElement(faker.definitions.address.country);
      };
      this.countryCode = function() {
        return faker.random.arrayElement(faker.definitions.address.country_code);
      };
      this.state = function(useAbbr) {
        return faker.random.arrayElement(faker.definitions.address.state);
      };
      this.stateAbbr = function() {
        return faker.random.arrayElement(faker.definitions.address.state_abbr);
      };
      this.latitude = function() {
        return (faker.random.number(18e5) / 1e4 - 90).toFixed(4);
      };
      this.longitude = function() {
        return (faker.random.number(36e5) / 1e4 - 180).toFixed(4);
      };
      return this;
    }
    module.exports = Address;
  }, {} ],
  4: [ function(require, module, exports) {
    var Commerce = function(faker) {
      var self = this;
      self.color = function() {
        return faker.random.arrayElement(faker.definitions.commerce.color);
      };
      self.department = function() {
        return faker.random.arrayElement(faker.definitions.commerce.department);
      };
      self.productName = function() {
        return faker.commerce.productAdjective() + " " + faker.commerce.productMaterial() + " " + faker.commerce.product();
      };
      self.price = function(min, max, dec, symbol) {
        min = min || 0;
        max = max || 1e3;
        dec = void 0 === dec ? 2 : dec;
        symbol = symbol || "";
        if (min < 0 || max < 0) return symbol + 0;
        var randValue = faker.random.number({
          max: max,
          min: min
        });
        return symbol + (Math.round(randValue * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
      };
      self.productAdjective = function() {
        return faker.random.arrayElement(faker.definitions.commerce.product_name.adjective);
      };
      self.productMaterial = function() {
        return faker.random.arrayElement(faker.definitions.commerce.product_name.material);
      };
      self.product = function() {
        return faker.random.arrayElement(faker.definitions.commerce.product_name.product);
      };
      return self;
    };
    module["exports"] = Commerce;
  }, {} ],
  5: [ function(require, module, exports) {
    var Company = function(faker) {
      var self = this;
      var f = faker.fake;
      this.suffixes = function() {
        return faker.definitions.company.suffix.slice(0);
      };
      this.companyName = function(format) {
        var formats = [ "{{name.lastName}} {{company.companySuffix}}", "{{name.lastName}} - {{name.lastName}}", "{{name.lastName}}, {{name.lastName}} and {{name.lastName}}" ];
        "number" !== typeof format && (format = faker.random.number(formats.length - 1));
        return f(formats[format]);
      };
      this.companySuffix = function() {
        return faker.random.arrayElement(faker.company.suffixes());
      };
      this.catchPhrase = function() {
        return f("{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}");
      };
      this.bs = function() {
        return f("{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}");
      };
      this.catchPhraseAdjective = function() {
        return faker.random.arrayElement(faker.definitions.company.adjective);
      };
      this.catchPhraseDescriptor = function() {
        return faker.random.arrayElement(faker.definitions.company.descriptor);
      };
      this.catchPhraseNoun = function() {
        return faker.random.arrayElement(faker.definitions.company.noun);
      };
      this.bsAdjective = function() {
        return faker.random.arrayElement(faker.definitions.company.bs_adjective);
      };
      this.bsBuzz = function() {
        return faker.random.arrayElement(faker.definitions.company.bs_verb);
      };
      this.bsNoun = function() {
        return faker.random.arrayElement(faker.definitions.company.bs_noun);
      };
    };
    module["exports"] = Company;
  }, {} ],
  6: [ function(require, module, exports) {
    var Database = function(faker) {
      var self = this;
      self.column = function() {
        return faker.random.arrayElement(faker.definitions.database.column);
      };
      self.column.schema = {
        description: "Generates a column name.",
        sampleResults: [ "id", "title", "createdAt" ]
      };
      self.type = function() {
        return faker.random.arrayElement(faker.definitions.database.type);
      };
      self.type.schema = {
        description: "Generates a column type.",
        sampleResults: [ "byte", "int", "varchar", "timestamp" ]
      };
      self.collation = function() {
        return faker.random.arrayElement(faker.definitions.database.collation);
      };
      self.collation.schema = {
        description: "Generates a collation.",
        sampleResults: [ "utf8_unicode_ci", "utf8_bin" ]
      };
      self.engine = function() {
        return faker.random.arrayElement(faker.definitions.database.engine);
      };
      self.engine.schema = {
        description: "Generates a storage engine.",
        sampleResults: [ "MyISAM", "InnoDB" ]
      };
    };
    module["exports"] = Database;
  }, {} ],
  7: [ function(require, module, exports) {
    var _Date = function(faker) {
      var self = this;
      self.past = function(years, refDate) {
        var date = refDate ? new Date(Date.parse(refDate)) : new Date();
        var range = {
          min: 1e3,
          max: 365 * (years || 1) * 24 * 3600 * 1e3
        };
        var past = date.getTime();
        past -= faker.random.number(range);
        date.setTime(past);
        return date;
      };
      self.future = function(years, refDate) {
        var date = refDate ? new Date(Date.parse(refDate)) : new Date();
        var range = {
          min: 1e3,
          max: 365 * (years || 1) * 24 * 3600 * 1e3
        };
        var future = date.getTime();
        future += faker.random.number(range);
        date.setTime(future);
        return date;
      };
      self.between = function(from, to) {
        var fromMilli = Date.parse(from);
        var dateOffset = faker.random.number(Date.parse(to) - fromMilli);
        var newDate = new Date(fromMilli + dateOffset);
        return newDate;
      };
      self.recent = function(days) {
        var date = new Date();
        var range = {
          min: 1e3,
          max: 24 * (days || 1) * 3600 * 1e3
        };
        var future = date.getTime();
        future -= faker.random.number(range);
        date.setTime(future);
        return date;
      };
      self.month = function(options) {
        options = options || {};
        var type = "wide";
        options.abbr && (type = "abbr");
        options.context && "undefined" !== typeof faker.definitions.date.month[type + "_context"] && (type += "_context");
        var source = faker.definitions.date.month[type];
        return faker.random.arrayElement(source);
      };
      self.weekday = function(options) {
        options = options || {};
        var type = "wide";
        options.abbr && (type = "abbr");
        options.context && "undefined" !== typeof faker.definitions.date.weekday[type + "_context"] && (type += "_context");
        var source = faker.definitions.date.weekday[type];
        return faker.random.arrayElement(source);
      };
      return self;
    };
    module["exports"] = _Date;
  }, {} ],
  8: [ function(require, module, exports) {
    function Fake(faker) {
      this.fake = function fake(str) {
        var res = "";
        if ("string" !== typeof str || 0 === str.length) {
          res = "string parameter is required!";
          return res;
        }
        var start = str.search("{{");
        var end = str.search("}}");
        if (-1 === start && -1 === end) return str;
        var token = str.substr(start + 2, end - start - 2);
        var method = token.replace("}}", "").replace("{{", "");
        var regExp = /\(([^)]+)\)/;
        var matches = regExp.exec(method);
        var parameters = "";
        if (matches) {
          method = method.replace(regExp, "");
          parameters = matches[1];
        }
        var parts = method.split(".");
        if ("undefined" === typeof faker[parts[0]]) throw new Error("Invalid module: " + parts[0]);
        if ("undefined" === typeof faker[parts[0]][parts[1]]) throw new Error("Invalid method: " + parts[0] + "." + parts[1]);
        var fn = faker[parts[0]][parts[1]];
        var params;
        try {
          params = JSON.parse(parameters);
        } catch (err) {
          params = parameters;
        }
        var result;
        result = "string" === typeof params && 0 === params.length ? fn.call(this) : fn.call(this, params);
        res = str.replace("{{" + token + "}}", result);
        return fake(res);
      };
      return this;
    }
    module["exports"] = Fake;
  }, {} ],
  9: [ function(require, module, exports) {
    var Finance = function(faker) {
      var ibanLib = require("./iban");
      var Helpers = faker.helpers, self = this;
      self.account = function(length) {
        length = length || 8;
        var template = "";
        for (var i = 0; i < length; i++) template += "#";
        length = null;
        return Helpers.replaceSymbolWithNumber(template);
      };
      self.accountName = function() {
        return [ Helpers.randomize(faker.definitions.finance.account_type), "Account" ].join(" ");
      };
      self.mask = function(length, parens, ellipsis) {
        length = 0 != length && length && "undefined" != typeof length ? length : 4;
        parens = null === parens || parens;
        ellipsis = null === ellipsis || ellipsis;
        var template = "";
        for (var i = 0; i < length; i++) template += "#";
        template = ellipsis ? [ "...", template ].join("") : template;
        template = parens ? [ "(", template, ")" ].join("") : template;
        template = Helpers.replaceSymbolWithNumber(template);
        return template;
      };
      self.amount = function(min, max, dec, symbol) {
        min = min || 0;
        max = max || 1e3;
        dec = void 0 === dec ? 2 : dec;
        symbol = symbol || "";
        var randValue = faker.random.number({
          max: max,
          min: min,
          precision: Math.pow(10, -dec)
        });
        return symbol + randValue.toFixed(dec);
      };
      self.transactionType = function() {
        return Helpers.randomize(faker.definitions.finance.transaction_type);
      };
      self.currencyCode = function() {
        return faker.random.objectElement(faker.definitions.finance.currency)["code"];
      };
      self.currencyName = function() {
        return faker.random.objectElement(faker.definitions.finance.currency, "key");
      };
      self.currencySymbol = function() {
        var symbol;
        while (!symbol) symbol = faker.random.objectElement(faker.definitions.finance.currency)["symbol"];
        return symbol;
      };
      self.bitcoinAddress = function() {
        var addressLength = faker.random.number({
          min: 27,
          max: 34
        });
        var address = faker.random.arrayElement([ "1", "3" ]);
        for (var i = 0; i < addressLength - 1; i++) address += faker.random.alphaNumeric().toUpperCase();
        return address;
      };
      self.iban = function(formatted) {
        var ibanFormat = faker.random.arrayElement(ibanLib.formats);
        var s = "";
        var count = 0;
        for (var b = 0; b < ibanFormat.bban.length; b++) {
          var bban = ibanFormat.bban[b];
          var c = bban.count;
          count += bban.count;
          while (c > 0) {
            if ("a" == bban.type) s += faker.random.arrayElement(ibanLib.alpha); else if ("c" == bban.type) faker.random.number(100) < 80 ? s += faker.random.number(9) : s += faker.random.arrayElement(ibanLib.alpha); else if (c >= 3 && faker.random.number(100) < 30) if (faker.random.boolean()) {
              s += faker.random.arrayElement(ibanLib.pattern100);
              c -= 2;
            } else {
              s += faker.random.arrayElement(ibanLib.pattern10);
              c--;
            } else s += faker.random.number(9);
            c--;
          }
          s = s.substring(0, count);
        }
        var checksum = 98 - ibanLib.mod97(ibanLib.toDigitString(s + ibanFormat.country + "00"));
        checksum < 10 && (checksum = "0" + checksum);
        var iban = ibanFormat.country + checksum + s;
        return formatted ? iban.match(/.{1,4}/g).join(" ") : iban;
      };
      self.bic = function() {
        var vowels = [ "A", "E", "I", "O", "U" ];
        var prob = faker.random.number(100);
        return Helpers.replaceSymbols("???") + faker.random.arrayElement(vowels) + faker.random.arrayElement(ibanLib.iso3166) + Helpers.replaceSymbols("?") + "1" + (prob < 10 ? Helpers.replaceSymbols("?" + faker.random.arrayElement(vowels) + "?") : prob < 40 ? Helpers.replaceSymbols("###") : "");
      };
    };
    module["exports"] = Finance;
  }, {
    "./iban": 12
  } ],
  10: [ function(require, module, exports) {
    var Hacker = function(faker) {
      var self = this;
      self.abbreviation = function() {
        return faker.random.arrayElement(faker.definitions.hacker.abbreviation);
      };
      self.adjective = function() {
        return faker.random.arrayElement(faker.definitions.hacker.adjective);
      };
      self.noun = function() {
        return faker.random.arrayElement(faker.definitions.hacker.noun);
      };
      self.verb = function() {
        return faker.random.arrayElement(faker.definitions.hacker.verb);
      };
      self.ingverb = function() {
        return faker.random.arrayElement(faker.definitions.hacker.ingverb);
      };
      self.phrase = function() {
        var data = {
          abbreviation: self.abbreviation,
          adjective: self.adjective,
          ingverb: self.ingverb,
          noun: self.noun,
          verb: self.verb
        };
        var phrase = faker.random.arrayElement([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!", "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!", "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!", "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!", "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!", "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!" ]);
        return faker.helpers.mustache(phrase, data);
      };
      return self;
    };
    module["exports"] = Hacker;
  }, {} ],
  11: [ function(require, module, exports) {
    var Helpers = function(faker) {
      var self = this;
      self.randomize = function(array) {
        array = array || [ "a", "b", "c" ];
        return faker.random.arrayElement(array);
      };
      self.slugify = function(string) {
        string = string || "";
        return string.replace(/ /g, "-").replace(/[^\w\.\-]+/g, "");
      };
      self.replaceSymbolWithNumber = function(string, symbol) {
        string = string || "";
        void 0 === symbol && (symbol = "#");
        var str = "";
        for (var i = 0; i < string.length; i++) string.charAt(i) == symbol ? str += faker.random.number(9) : str += string.charAt(i);
        return str;
      };
      self.replaceSymbols = function(string) {
        string = string || "";
        var alpha = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
        var str = "";
        for (var i = 0; i < string.length; i++) "#" == string.charAt(i) ? str += faker.random.number(9) : "?" == string.charAt(i) ? str += faker.random.arrayElement(alpha) : str += string.charAt(i);
        return str;
      };
      self.shuffle = function(o) {
        if ("undefined" === typeof o || 0 === o.length) return [];
        o = o || [ "a", "b", "c" ];
        for (var j, x, i = o.length - 1; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], 
        o[j] = x) ;
        return o;
      };
      self.mustache = function(str, data) {
        if ("undefined" === typeof str) return "";
        for (var p in data) {
          var re = new RegExp("{{" + p + "}}", "g");
          str = str.replace(re, data[p]);
        }
        return str;
      };
      self.createCard = function() {
        return {
          name: faker.name.findName(),
          username: faker.internet.userName(),
          email: faker.internet.email(),
          address: {
            streetA: faker.address.streetName(),
            streetB: faker.address.streetAddress(),
            streetC: faker.address.streetAddress(true),
            streetD: faker.address.secondaryAddress(),
            city: faker.address.city(),
            state: faker.address.state(),
            country: faker.address.country(),
            zipcode: faker.address.zipCode(),
            geo: {
              lat: faker.address.latitude(),
              lng: faker.address.longitude()
            }
          },
          phone: faker.phone.phoneNumber(),
          website: faker.internet.domainName(),
          company: {
            name: faker.company.companyName(),
            catchPhrase: faker.company.catchPhrase(),
            bs: faker.company.bs()
          },
          posts: [ {
            words: faker.lorem.words(),
            sentence: faker.lorem.sentence(),
            sentences: faker.lorem.sentences(),
            paragraph: faker.lorem.paragraph()
          }, {
            words: faker.lorem.words(),
            sentence: faker.lorem.sentence(),
            sentences: faker.lorem.sentences(),
            paragraph: faker.lorem.paragraph()
          }, {
            words: faker.lorem.words(),
            sentence: faker.lorem.sentence(),
            sentences: faker.lorem.sentences(),
            paragraph: faker.lorem.paragraph()
          } ],
          accountHistory: [ faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction() ]
        };
      };
      self.contextualCard = function() {
        var name = faker.name.firstName(), userName = faker.internet.userName(name);
        return {
          name: name,
          username: userName,
          avatar: faker.internet.avatar(),
          email: faker.internet.email(userName),
          dob: faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
          phone: faker.phone.phoneNumber(),
          address: {
            street: faker.address.streetName(true),
            suite: faker.address.secondaryAddress(),
            city: faker.address.city(),
            zipcode: faker.address.zipCode(),
            geo: {
              lat: faker.address.latitude(),
              lng: faker.address.longitude()
            }
          },
          website: faker.internet.domainName(),
          company: {
            name: faker.company.companyName(),
            catchPhrase: faker.company.catchPhrase(),
            bs: faker.company.bs()
          }
        };
      };
      self.userCard = function() {
        return {
          name: faker.name.findName(),
          username: faker.internet.userName(),
          email: faker.internet.email(),
          address: {
            street: faker.address.streetName(true),
            suite: faker.address.secondaryAddress(),
            city: faker.address.city(),
            zipcode: faker.address.zipCode(),
            geo: {
              lat: faker.address.latitude(),
              lng: faker.address.longitude()
            }
          },
          phone: faker.phone.phoneNumber(),
          website: faker.internet.domainName(),
          company: {
            name: faker.company.companyName(),
            catchPhrase: faker.company.catchPhrase(),
            bs: faker.company.bs()
          }
        };
      };
      self.createTransaction = function() {
        return {
          amount: faker.finance.amount(),
          date: new Date(2012, 1, 2),
          business: faker.company.companyName(),
          name: [ faker.finance.accountName(), faker.finance.mask() ].join(" "),
          type: self.randomize(faker.definitions.finance.transaction_type),
          account: faker.finance.account()
        };
      };
      return self;
    };
    module["exports"] = Helpers;
  }, {} ],
  12: [ function(require, module, exports) {
    module["exports"] = {
      alpha: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ],
      pattern10: [ "01", "02", "03", "04", "05", "06", "07", "08", "09" ],
      pattern100: [ "001", "002", "003", "004", "005", "006", "007", "008", "009" ],
      toDigitString: function(str) {
        return str.replace(/[A-Z]/gi, function(match) {
          return match.toUpperCase().charCodeAt(0) - 55;
        });
      },
      mod97: function(digitStr) {
        var m = 0;
        for (var i = 0; i < digitStr.length; i++) m = (10 * m + (0 | digitStr[i])) % 97;
        return m;
      },
      formats: [ {
        country: "AL",
        total: 28,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "c",
          count: 16
        } ],
        format: "ALkk bbbs sssx cccc cccc cccc cccc"
      }, {
        country: "AD",
        total: 24,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "c",
          count: 12
        } ],
        format: "ADkk bbbb ssss cccc cccc cccc"
      }, {
        country: "AT",
        total: 20,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "n",
          count: 11
        } ],
        format: "ATkk bbbb bccc cccc cccc"
      }, {
        country: "AZ",
        total: 28,
        bban: [ {
          type: "c",
          count: 4
        }, {
          type: "n",
          count: 20
        } ],
        format: "AZkk bbbb cccc cccc cccc cccc cccc"
      }, {
        country: "BH",
        total: 22,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "c",
          count: 14
        } ],
        format: "BHkk bbbb cccc cccc cccc cc"
      }, {
        country: "BE",
        total: 16,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 9
        } ],
        format: "BEkk bbbc cccc ccxx"
      }, {
        country: "BA",
        total: 20,
        bban: [ {
          type: "n",
          count: 6
        }, {
          type: "n",
          count: 10
        } ],
        format: "BAkk bbbs sscc cccc ccxx"
      }, {
        country: "BR",
        total: 29,
        bban: [ {
          type: "n",
          count: 13
        }, {
          type: "n",
          count: 10
        }, {
          type: "a",
          count: 1
        }, {
          type: "c",
          count: 1
        } ],
        format: "BRkk bbbb bbbb ssss sccc cccc ccct n"
      }, {
        country: "BG",
        total: 22,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 6
        }, {
          type: "c",
          count: 8
        } ],
        format: "BGkk bbbb ssss ddcc cccc cc"
      }, {
        country: "CR",
        total: 21,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 14
        } ],
        format: "CRkk bbbc cccc cccc cccc c"
      }, {
        country: "HR",
        total: 21,
        bban: [ {
          type: "n",
          count: 7
        }, {
          type: "n",
          count: 10
        } ],
        format: "HRkk bbbb bbbc cccc cccc c"
      }, {
        country: "CY",
        total: 28,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "c",
          count: 16
        } ],
        format: "CYkk bbbs ssss cccc cccc cccc cccc"
      }, {
        country: "CZ",
        total: 24,
        bban: [ {
          type: "n",
          count: 10
        }, {
          type: "n",
          count: 10
        } ],
        format: "CZkk bbbb ssss sscc cccc cccc"
      }, {
        country: "DK",
        total: 18,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 10
        } ],
        format: "DKkk bbbb cccc cccc cc"
      }, {
        country: "DO",
        total: 28,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 20
        } ],
        format: "DOkk bbbb cccc cccc cccc cccc cccc"
      }, {
        country: "TL",
        total: 23,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 16
        } ],
        format: "TLkk bbbc cccc cccc cccc cxx"
      }, {
        country: "EE",
        total: 20,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 12
        } ],
        format: "EEkk bbss cccc cccc cccx"
      }, {
        country: "FO",
        total: 18,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 10
        } ],
        format: "FOkk bbbb cccc cccc cx"
      }, {
        country: "FI",
        total: 18,
        bban: [ {
          type: "n",
          count: 6
        }, {
          type: "n",
          count: 8
        } ],
        format: "FIkk bbbb bbcc cccc cx"
      }, {
        country: "FR",
        total: 27,
        bban: [ {
          type: "n",
          count: 10
        }, {
          type: "c",
          count: 11
        }, {
          type: "n",
          count: 2
        } ],
        format: "FRkk bbbb bggg ggcc cccc cccc cxx"
      }, {
        country: "GE",
        total: 22,
        bban: [ {
          type: "c",
          count: 2
        }, {
          type: "n",
          count: 16
        } ],
        format: "GEkk bbcc cccc cccc cccc cc"
      }, {
        country: "DE",
        total: 22,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "n",
          count: 10
        } ],
        format: "DEkk bbbb bbbb cccc cccc cc"
      }, {
        country: "GI",
        total: 23,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "c",
          count: 15
        } ],
        format: "GIkk bbbb cccc cccc cccc ccc"
      }, {
        country: "GR",
        total: 27,
        bban: [ {
          type: "n",
          count: 7
        }, {
          type: "c",
          count: 16
        } ],
        format: "GRkk bbbs sssc cccc cccc cccc ccc"
      }, {
        country: "GL",
        total: 18,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 10
        } ],
        format: "GLkk bbbb cccc cccc cc"
      }, {
        country: "GT",
        total: 28,
        bban: [ {
          type: "c",
          count: 4
        }, {
          type: "c",
          count: 4
        }, {
          type: "c",
          count: 16
        } ],
        format: "GTkk bbbb mmtt cccc cccc cccc cccc"
      }, {
        country: "HU",
        total: 28,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "n",
          count: 16
        } ],
        format: "HUkk bbbs sssk cccc cccc cccc cccx"
      }, {
        country: "IS",
        total: 26,
        bban: [ {
          type: "n",
          count: 6
        }, {
          type: "n",
          count: 16
        } ],
        format: "ISkk bbbb sscc cccc iiii iiii ii"
      }, {
        country: "IE",
        total: 22,
        bban: [ {
          type: "c",
          count: 4
        }, {
          type: "n",
          count: 6
        }, {
          type: "n",
          count: 8
        } ],
        format: "IEkk aaaa bbbb bbcc cccc cc"
      }, {
        country: "IL",
        total: 23,
        bban: [ {
          type: "n",
          count: 6
        }, {
          type: "n",
          count: 13
        } ],
        format: "ILkk bbbn nncc cccc cccc ccc"
      }, {
        country: "IT",
        total: 27,
        bban: [ {
          type: "a",
          count: 1
        }, {
          type: "n",
          count: 10
        }, {
          type: "c",
          count: 12
        } ],
        format: "ITkk xaaa aabb bbbc cccc cccc ccc"
      }, {
        country: "JO",
        total: 30,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 18
        } ],
        format: "JOkk bbbb nnnn cccc cccc cccc cccc cc"
      }, {
        country: "KZ",
        total: 20,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "c",
          count: 13
        } ],
        format: "KZkk bbbc cccc cccc cccc"
      }, {
        country: "XK",
        total: 20,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 12
        } ],
        format: "XKkk bbbb cccc cccc cccc"
      }, {
        country: "KW",
        total: 30,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "c",
          count: 22
        } ],
        format: "KWkk bbbb cccc cccc cccc cccc cccc cc"
      }, {
        country: "LV",
        total: 21,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "c",
          count: 13
        } ],
        format: "LVkk bbbb cccc cccc cccc c"
      }, {
        country: "LB",
        total: 28,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "c",
          count: 20
        } ],
        format: "LBkk bbbb cccc cccc cccc cccc cccc"
      }, {
        country: "LI",
        total: 21,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "c",
          count: 12
        } ],
        format: "LIkk bbbb bccc cccc cccc c"
      }, {
        country: "LT",
        total: 20,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "n",
          count: 11
        } ],
        format: "LTkk bbbb bccc cccc cccc"
      }, {
        country: "LU",
        total: 20,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "c",
          count: 13
        } ],
        format: "LUkk bbbc cccc cccc cccc"
      }, {
        country: "MK",
        total: 19,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "c",
          count: 10
        }, {
          type: "n",
          count: 2
        } ],
        format: "MKkk bbbc cccc cccc cxx"
      }, {
        country: "MT",
        total: 31,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 5
        }, {
          type: "c",
          count: 18
        } ],
        format: "MTkk bbbb ssss sccc cccc cccc cccc ccc"
      }, {
        country: "MR",
        total: 27,
        bban: [ {
          type: "n",
          count: 10
        }, {
          type: "n",
          count: 13
        } ],
        format: "MRkk bbbb bsss sscc cccc cccc cxx"
      }, {
        country: "MU",
        total: 30,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 15
        }, {
          type: "a",
          count: 3
        } ],
        format: "MUkk bbbb bbss cccc cccc cccc 000d dd"
      }, {
        country: "MC",
        total: 27,
        bban: [ {
          type: "n",
          count: 10
        }, {
          type: "c",
          count: 11
        }, {
          type: "n",
          count: 2
        } ],
        format: "MCkk bbbb bsss sscc cccc cccc cxx"
      }, {
        country: "MD",
        total: 24,
        bban: [ {
          type: "c",
          count: 2
        }, {
          type: "c",
          count: 18
        } ],
        format: "MDkk bbcc cccc cccc cccc cccc"
      }, {
        country: "ME",
        total: 22,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 15
        } ],
        format: "MEkk bbbc cccc cccc cccc xx"
      }, {
        country: "NL",
        total: 18,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 10
        } ],
        format: "NLkk bbbb cccc cccc cc"
      }, {
        country: "NO",
        total: 15,
        bban: [ {
          type: "n",
          count: 4
        }, {
          type: "n",
          count: 7
        } ],
        format: "NOkk bbbb cccc ccx"
      }, {
        country: "PK",
        total: 24,
        bban: [ {
          type: "c",
          count: 4
        }, {
          type: "n",
          count: 16
        } ],
        format: "PKkk bbbb cccc cccc cccc cccc"
      }, {
        country: "PS",
        total: 29,
        bban: [ {
          type: "c",
          count: 4
        }, {
          type: "n",
          count: 9
        }, {
          type: "n",
          count: 12
        } ],
        format: "PSkk bbbb xxxx xxxx xccc cccc cccc c"
      }, {
        country: "PL",
        total: 28,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "n",
          count: 16
        } ],
        format: "PLkk bbbs sssx cccc cccc cccc cccc"
      }, {
        country: "PT",
        total: 25,
        bban: [ {
          type: "n",
          count: 8
        }, {
          type: "n",
          count: 13
        } ],
        format: "PTkk bbbb ssss cccc cccc cccx x"
      }, {
        country: "QA",
        total: 29,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "c",
          count: 21
        } ],
        format: "QAkk bbbb cccc cccc cccc cccc cccc c"
      }, {
        country: "RO",
        total: 24,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "c",
          count: 16
        } ],
        format: "ROkk bbbb cccc cccc cccc cccc"
      }, {
        country: "SM",
        total: 27,
        bban: [ {
          type: "a",
          count: 1
        }, {
          type: "n",
          count: 10
        }, {
          type: "c",
          count: 12
        } ],
        format: "SMkk xaaa aabb bbbc cccc cccc ccc"
      }, {
        country: "SA",
        total: 24,
        bban: [ {
          type: "n",
          count: 2
        }, {
          type: "c",
          count: 18
        } ],
        format: "SAkk bbcc cccc cccc cccc cccc"
      }, {
        country: "RS",
        total: 22,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 15
        } ],
        format: "RSkk bbbc cccc cccc cccc xx"
      }, {
        country: "SK",
        total: 24,
        bban: [ {
          type: "n",
          count: 10
        }, {
          type: "n",
          count: 10
        } ],
        format: "SKkk bbbb ssss sscc cccc cccc"
      }, {
        country: "SI",
        total: 19,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "n",
          count: 10
        } ],
        format: "SIkk bbss sccc cccc cxx"
      }, {
        country: "ES",
        total: 24,
        bban: [ {
          type: "n",
          count: 10
        }, {
          type: "n",
          count: 10
        } ],
        format: "ESkk bbbb gggg xxcc cccc cccc"
      }, {
        country: "SE",
        total: 24,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 17
        } ],
        format: "SEkk bbbc cccc cccc cccc cccc"
      }, {
        country: "CH",
        total: 21,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "c",
          count: 12
        } ],
        format: "CHkk bbbb bccc cccc cccc c"
      }, {
        country: "TN",
        total: 24,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "n",
          count: 15
        } ],
        format: "TNkk bbss sccc cccc cccc cccc"
      }, {
        country: "TR",
        total: 26,
        bban: [ {
          type: "n",
          count: 5
        }, {
          type: "c",
          count: 1
        }, {
          type: "c",
          count: 16
        } ],
        format: "TRkk bbbb bxcc cccc cccc cccc cc"
      }, {
        country: "AE",
        total: 23,
        bban: [ {
          type: "n",
          count: 3
        }, {
          type: "n",
          count: 16
        } ],
        format: "AEkk bbbc cccc cccc cccc ccc"
      }, {
        country: "GB",
        total: 22,
        bban: [ {
          type: "a",
          count: 4
        }, {
          type: "n",
          count: 6
        }, {
          type: "n",
          count: 8
        } ],
        format: "GBkk bbbb ssss sscc cccc cc"
      }, {
        country: "VG",
        total: 24,
        bban: [ {
          type: "c",
          count: 4
        }, {
          type: "n",
          count: 16
        } ],
        format: "VGkk bbbb cccc cccc cccc cccc"
      } ],
      iso3166: [ "AC", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CP", "CR", "CS", "CS", "CU", "CV", "CW", "CX", "CY", "CZ", "DD", "DE", "DG", "DJ", "DK", "DM", "DO", "DZ", "EA", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "EU", "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "IC", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NT", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SU", "SV", "SX", "SY", "SZ", "TA", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "YU", "ZA", "ZM", "ZR", "ZW" ]
    };
  }, {} ],
  13: [ function(require, module, exports) {
    var Image = function(faker) {
      var self = this;
      self.image = function(width, height, randomize) {
        var categories = [ "abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport" ];
        return self[faker.random.arrayElement(categories)](width, height, randomize);
      };
      self.avatar = function() {
        return faker.internet.avatar();
      };
      self.imageUrl = function(width, height, category, randomize, https) {
        var width = width || 640;
        var height = height || 480;
        var protocol = "http://";
        "undefined" !== typeof https && true === https && (protocol = "https://");
        var url = protocol + "lorempixel.com/" + width + "/" + height;
        "undefined" !== typeof category && (url += "/" + category);
        randomize && (url += "?" + faker.random.number());
        return url;
      };
      self.abstract = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "abstract", randomize);
      };
      self.animals = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "animals", randomize);
      };
      self.business = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "business", randomize);
      };
      self.cats = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "cats", randomize);
      };
      self.city = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "city", randomize);
      };
      self.food = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "food", randomize);
      };
      self.nightlife = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "nightlife", randomize);
      };
      self.fashion = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "fashion", randomize);
      };
      self.people = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "people", randomize);
      };
      self.nature = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "nature", randomize);
      };
      self.sports = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "sports", randomize);
      };
      self.technics = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "technics", randomize);
      };
      self.transport = function(width, height, randomize) {
        return faker.image.imageUrl(width, height, "transport", randomize);
      };
      self.dataUri = function(width, height) {
        var rawPrefix = "data:image/svg+xml;charset=UTF-8,";
        var svgString = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="' + width + '" height="' + height + '"> <rect width="100%" height="100%" fill="grey"/>  <text x="0" y="20" font-size="20" text-anchor="start" fill="white">' + width + "x" + height + "</text> </svg>";
        return rawPrefix + encodeURIComponent(svgString);
      };
    };
    module["exports"] = Image;
  }, {} ],
  14: [ function(require, module, exports) {
    function Faker(opts) {
      var self = this;
      opts = opts || {};
      var locales = self.locales || opts.locales || {};
      var locale = self.locale || opts.locale || "en";
      var localeFallback = self.localeFallback || opts.localeFallback || "en";
      self.locales = locales;
      self.locale = locale;
      self.localeFallback = localeFallback;
      self.definitions = {};
      function bindAll(obj) {
        Object.keys(obj).forEach(function(meth) {
          "function" === typeof obj[meth] && (obj[meth] = obj[meth].bind(obj));
        });
        return obj;
      }
      var Fake = require("./fake");
      self.fake = new Fake(self).fake;
      var Random = require("./random");
      self.random = bindAll(new Random(self));
      var Helpers = require("./helpers");
      self.helpers = new Helpers(self);
      var Name = require("./name");
      self.name = bindAll(new Name(self));
      var Address = require("./address");
      self.address = bindAll(new Address(self));
      var Company = require("./company");
      self.company = bindAll(new Company(self));
      var Finance = require("./finance");
      self.finance = bindAll(new Finance(self));
      var Image = require("./image");
      self.image = bindAll(new Image(self));
      var Lorem = require("./lorem");
      self.lorem = bindAll(new Lorem(self));
      var Hacker = require("./hacker");
      self.hacker = bindAll(new Hacker(self));
      var Internet = require("./internet");
      self.internet = bindAll(new Internet(self));
      var Database = require("./database");
      self.database = bindAll(new Database(self));
      var Phone = require("./phone_number");
      self.phone = bindAll(new Phone(self));
      var _Date = require("./date");
      self.date = bindAll(new _Date(self));
      var Commerce = require("./commerce");
      self.commerce = bindAll(new Commerce(self));
      var System = require("./system");
      self.system = bindAll(new System(self));
      var _definitions = {
        name: [ "first_name", "last_name", "prefix", "suffix", "title", "male_first_name", "female_first_name", "male_middle_name", "female_middle_name", "male_last_name", "female_last_name" ],
        address: [ "city_prefix", "city_suffix", "street_suffix", "county", "country", "country_code", "state", "state_abbr", "street_prefix", "postcode" ],
        company: [ "adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb", "suffix" ],
        lorem: [ "words" ],
        hacker: [ "abbreviation", "adjective", "noun", "verb", "ingverb" ],
        phone_number: [ "formats" ],
        finance: [ "account_type", "transaction_type", "currency", "iban" ],
        internet: [ "avatar_uri", "domain_suffix", "free_email", "example_email", "password" ],
        commerce: [ "color", "department", "product_name", "price", "categories" ],
        database: [ "collation", "column", "engine", "type" ],
        system: [ "mimeTypes" ],
        date: [ "month", "weekday" ],
        title: "",
        separator: ""
      };
      Object.keys(_definitions).forEach(function(d) {
        "undefined" === typeof self.definitions[d] && (self.definitions[d] = {});
        if ("string" === typeof _definitions[d]) {
          self.definitions[d] = _definitions[d];
          return;
        }
        _definitions[d].forEach(function(p) {
          Object.defineProperty(self.definitions[d], p, {
            get: function() {
              return "undefined" === typeof self.locales[self.locale][d] || "undefined" === typeof self.locales[self.locale][d][p] ? self.locales[localeFallback][d][p] : self.locales[self.locale][d][p];
            }
          });
        });
      });
    }
    Faker.prototype.seed = function(value) {
      var Random = require("./random");
      this.seedValue = value;
      this.random = new Random(this, this.seedValue);
    };
    module["exports"] = Faker;
  }, {
    "./address": 3,
    "./commerce": 4,
    "./company": 5,
    "./database": 6,
    "./date": 7,
    "./fake": 8,
    "./finance": 9,
    "./hacker": 10,
    "./helpers": 11,
    "./image": 13,
    "./internet": 15,
    "./lorem": 109,
    "./name": 110,
    "./phone_number": 111,
    "./random": 112,
    "./system": 113
  } ],
  15: [ function(require, module, exports) {
    var random_ua = require("../vendor/user-agent");
    var Internet = function(faker) {
      var self = this;
      self.avatar = function() {
        return faker.random.arrayElement(faker.definitions.internet.avatar_uri);
      };
      self.avatar.schema = {
        description: "Generates a URL for an avatar.",
        sampleResults: [ "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg" ]
      };
      self.email = function(firstName, lastName, provider) {
        provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);
        return faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
      };
      self.email.schema = {
        description: "Generates a valid email address based on optional input criteria",
        sampleResults: [ "foo.bar@gmail.com" ],
        properties: {
          firstName: {
            type: "string",
            required: false,
            description: "The first name of the user"
          },
          lastName: {
            type: "string",
            required: false,
            description: "The last name of the user"
          },
          provider: {
            type: "string",
            required: false,
            description: "The domain of the user"
          }
        }
      };
      self.exampleEmail = function(firstName, lastName) {
        var provider = faker.random.arrayElement(faker.definitions.internet.example_email);
        return self.email(firstName, lastName, provider);
      };
      self.userName = function(firstName, lastName) {
        var result;
        firstName = firstName || faker.name.firstName();
        lastName = lastName || faker.name.lastName();
        switch (faker.random.number(2)) {
         case 0:
          result = firstName + faker.random.number(99);
          break;

         case 1:
          result = firstName + faker.random.arrayElement([ ".", "_" ]) + lastName;
          break;

         case 2:
          result = firstName + faker.random.arrayElement([ ".", "_" ]) + lastName + faker.random.number(99);
        }
        result = result.toString().replace(/'/g, "");
        result = result.replace(/ /g, "");
        return result;
      };
      self.userName.schema = {
        description: "Generates a username based on one of several patterns. The pattern is chosen randomly.",
        sampleResults: [ "Kirstin39", "Kirstin.Smith", "Kirstin.Smith39", "KirstinSmith", "KirstinSmith39" ],
        properties: {
          firstName: {
            type: "string",
            required: false,
            description: "The first name of the user"
          },
          lastName: {
            type: "string",
            required: false,
            description: "The last name of the user"
          }
        }
      };
      self.protocol = function() {
        var protocols = [ "http", "https" ];
        return faker.random.arrayElement(protocols);
      };
      self.protocol.schema = {
        description: "Randomly generates http or https",
        sampleResults: [ "https", "http" ]
      };
      self.url = function() {
        return faker.internet.protocol() + "://" + faker.internet.domainName();
      };
      self.url.schema = {
        description: "Generates a random URL. The URL could be secure or insecure.",
        sampleResults: [ "http://rashawn.name", "https://rashawn.name" ]
      };
      self.domainName = function() {
        return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
      };
      self.domainName.schema = {
        description: "Generates a random domain name.",
        sampleResults: [ "marvin.org" ]
      };
      self.domainSuffix = function() {
        return faker.random.arrayElement(faker.definitions.internet.domain_suffix);
      };
      self.domainSuffix.schema = {
        description: "Generates a random domain suffix.",
        sampleResults: [ "net" ]
      };
      self.domainWord = function() {
        return faker.name.firstName().replace(/([\\~#&*{}/:<>?|\"'])/gi, "").toLowerCase();
      };
      self.domainWord.schema = {
        description: "Generates a random domain word.",
        sampleResults: [ "alyce" ]
      };
      self.ip = function() {
        var randNum = function() {
          return faker.random.number(255).toFixed(0);
        };
        var result = [];
        for (var i = 0; i < 4; i++) result[i] = randNum();
        return result.join(".");
      };
      self.ip.schema = {
        description: "Generates a random IP.",
        sampleResults: [ "97.238.241.11" ]
      };
      self.ipv6 = function() {
        var randHash = function() {
          var result = "";
          for (var i = 0; i < 4; i++) result += faker.random.arrayElement([ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" ]);
          return result;
        };
        var result = [];
        for (var i = 0; i < 8; i++) result[i] = randHash();
        return result.join(":");
      };
      self.ipv6.schema = {
        description: "Generates a random IPv6 address.",
        sampleResults: [ "2001:0db8:6276:b1a7:5213:22f1:25df:c8a0" ]
      };
      self.userAgent = function() {
        return random_ua.generate();
      };
      self.userAgent.schema = {
        description: "Generates a random user agent.",
        sampleResults: [ "Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1" ]
      };
      self.color = function(baseRed255, baseGreen255, baseBlue255) {
        baseRed255 = baseRed255 || 0;
        baseGreen255 = baseGreen255 || 0;
        baseBlue255 = baseBlue255 || 0;
        var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
        var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
        var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
        var redStr = red.toString(16);
        var greenStr = green.toString(16);
        var blueStr = blue.toString(16);
        return "#" + (1 === redStr.length ? "0" : "") + redStr + (1 === greenStr.length ? "0" : "") + greenStr + (1 === blueStr.length ? "0" : "") + blueStr;
      };
      self.color.schema = {
        description: "Generates a random hexadecimal color.",
        sampleResults: [ "#06267f" ],
        properties: {
          baseRed255: {
            type: "number",
            required: false,
            description: "The red value. Valid values are 0 - 255."
          },
          baseGreen255: {
            type: "number",
            required: false,
            description: "The green value. Valid values are 0 - 255."
          },
          baseBlue255: {
            type: "number",
            required: false,
            description: "The blue value. Valid values are 0 - 255."
          }
        }
      };
      self.mac = function() {
        var i, mac = "";
        for (i = 0; i < 12; i++) {
          mac += faker.random.number(15).toString(16);
          i % 2 == 1 && 11 != i && (mac += ":");
        }
        return mac;
      };
      self.mac.schema = {
        description: "Generates a random mac address.",
        sampleResults: [ "78:06:cc:ae:b3:81" ]
      };
      self.password = function(len, memorable, pattern, prefix) {
        len = len || 15;
        "undefined" === typeof memorable && (memorable = false);
        var consonant, letter, password, vowel;
        letter = /[a-zA-Z]$/;
        vowel = /[aeiouAEIOU]$/;
        consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;
        var _password = function(length, memorable, pattern, prefix) {
          var char, n;
          null == length && (length = 10);
          null == memorable && (memorable = true);
          null == pattern && (pattern = /\w/);
          null == prefix && (prefix = "");
          if (prefix.length >= length) return prefix;
          memorable && (pattern = prefix.match(consonant) ? vowel : consonant);
          n = faker.random.number(94) + 33;
          char = String.fromCharCode(n);
          memorable && (char = char.toLowerCase());
          if (!char.match(pattern)) return _password(length, memorable, pattern, prefix);
          return _password(length, memorable, pattern, "" + prefix + char);
        };
        return _password(len, memorable, pattern, prefix);
      };
      self.password.schema = {
        description: "Generates a random password.",
        sampleResults: [ "AM7zl6Mg", "susejofe" ],
        properties: {
          length: {
            type: "number",
            required: false,
            description: "The number of characters in the password."
          },
          memorable: {
            type: "boolean",
            required: false,
            description: "Whether a password should be easy to remember."
          },
          pattern: {
            type: "regex",
            required: false,
            description: "A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on."
          },
          prefix: {
            type: "string",
            required: false,
            description: "A value to prepend to the generated password. The prefix counts towards the length of the password."
          }
        }
      };
    };
    module["exports"] = Internet;
  }, {
    "../vendor/user-agent": 116
  } ],
  16: [ function(require, module, exports) {
    module["exports"] = [ "#####", "####", "###" ];
  }, {} ],
  17: [ function(require, module, exports) {
    module["exports"] = [ "#{city_prefix} #{Name.first_name}#{city_suffix}", "#{city_prefix} #{Name.first_name}", "#{Name.first_name}#{city_suffix}", "#{Name.last_name}#{city_suffix}" ];
  }, {} ],
  18: [ function(require, module, exports) {
    module["exports"] = [ "North", "East", "West", "South", "New", "Lake", "Port" ];
  }, {} ],
  19: [ function(require, module, exports) {
    module["exports"] = [ "town", "ton", "land", "ville", "berg", "burgh", "borough", "bury", "view", "port", "mouth", "stad", "furt", "chester", "mouth", "fort", "haven", "side", "shire" ];
  }, {} ],
  20: [ function(require, module, exports) {
    module["exports"] = [ "Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica (the territory South of 60 deg S)", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Bouvet Island (Bouvetoya)", "Brazil", "British Indian Ocean Territory (Chagos Archipelago)", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Faroe Islands", "Falkland Islands (Malvinas)", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Democratic People's Republic of Korea", "Republic of Korea", "Kuwait", "Kyrgyz Republic", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macao", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands Antilles", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestinian Territory", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Barthelemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard & Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands, British", "Virgin Islands, U.S.", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe" ];
  }, {} ],
  21: [ function(require, module, exports) {
    module["exports
  }, {} ],
  22: [ function(require, module, exports) {
    module["exports"] = [ "Avon", "Bedfordshire", "Berkshire", "Borders", "Buckinghamshire", "Cambridgeshire" ];
  }, {} ],
  23: [ function(require, module, exports) {
    module["exports"] = [ "United States of America" ];
  }, {} ],
  24: [ function(require, module, exports) {
    var address = {};
    module["exports"] = address;
    address.city_prefix = require("./city_prefix");
    address.city_suffix = require("./city_suffix");
    address.county = require("./county");
    address.country = require("./country");
    address.country_code = require("./country_code");
    address.building_number = require("./building_number");
    address.street_suffix = require("./street_suffix");
    address.secondary_address = require("./secondary_address");
    address.postcode = require("./postcode");
    address.postcode_by_state = require("./postcode_by_state");
    address.state = require("./state");
    address.state_abbr = require("./state_abbr");
    address.time_zone = require("./time_zone");
    address.city = require("./city");
    address.street_name = require("./street_name");
    address.street_address = require("./street_address");
    address.default_country = require("./default_country");
  }, {
    "./building_number": 16,
    "./city": 17,
    "./city_prefix": 18,
    "./city_suffix": 19,
    "./country": 20,
    "./country_code": 21,
    "./county": 22,
    "./default_country": 23,
    "./postcode": 25,
    "./postcode_by_state": 26,
    "./secondary_address": 27,
    "./state": 28,
    "./state_abbr": 29,
    "./street_address": 30,
    "./street_name": 31,
    "./street_suffix": 32,
    "./time_zone": 33
  } ],
  25: [ function(require, module, exports) {
    module["exports"] = [ "#####", "#####-####" ];
  }, {} ],
  26: [ function(require, module, exports) {
    arguments[4][25][0].apply(exports, arguments);
  }, {
    dup: 25
  } ],
  27: [ function(require, module, exports) {
    module["exports"] = [ "Apt. ###", "Suite ###" ];
  }, {} ],
  28: [ function(require, module, exports) {
    module["exports"] = [ "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" ];
  }, {} ],
  29: [ function(require, module, exports) {
    module["exports"] = [ "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY" ];
  }, {} ],
  30: [ function(require, module, exports) {
    module["exports"] = [ "#{building_number} #{street_name}" ];
  }, {} ],
  31: [ function(require, module, exports) {
    module["exports"] = [ "#{Name.first_name} #{street_suffix}", "#{Name.last_name} #{street_suffix}" ];
  }, {} ],
  32: [ function(require, module, exports) {
    module["exports"] = [ "Alley", "Avenue", "Branch", "Bridge", "Brook", "Brooks", "Burg", "Burgs", "Bypass", "Camp", "Canyon", "Cape", "Causeway", "Center", "Centers", "Circle", "Circles", "Cliff", "Cliffs", "Club", "Common", "Corner", "Corners", "Course", "Court", "Courts", "Cove", "Coves", "Creek", "Crescent", "Crest", "Crossing", "Crossroad", "Curve", "Dale", "Dam", "Divide", "Drive", "Drive", "Drives", "Estate", "Estates", "Expressway", "Extension", "Extensions", "Fall", "Falls", "Ferry", "Field", "Fields", "Flat", "Flats", "Ford", "Fords", "Forest", "Forge", "Forges", "Fork", "Forks", "Fort", "Freeway", "Garden", "Gardens", "Gateway", "Glen", "Glens", "Green", "Greens", "Grove", "Groves", "Harbor", "Harbors", "Haven", "Heights", "Highway", "Hill", "Hills", "Hollow", "Inlet", "Inlet", "Island", "Island", "Islands", "Islands", "Isle", "Isle", "Junction", "Junctions", "Key", "Keys", "Knoll", "Knolls", "Lake", "Lakes", "Land", "Landing", "Lane", "Light", "Lights", "Loaf", "Lock", "Locks", "Locks", "Lodge", "Lodge", "Loop", "Mall", "Manor", "Manors", "Meadow", "Meadows", "Mews", "Mill", "Mills", "Mission", "Mission", "Motorway", "Mount", "Mountain", "Mountain", "Mountains", "Mountains", "Neck", "Orchard", "Oval", "Overpass", "Park", "Parks", "Parkway", "Parkways", "Pass", "Passage", "Path", "Pike", "Pine", "Pines", "Place", "Plain", "Plains", "Plains", "Plaza", "Plaza", "Point", "Points", "Port", "Port", "Ports", "Ports", "Prairie", "Prairie", "Radial", "Ramp", "Ranch", "Rapid", "Rapids", "Rest", "Ridge", "Ridges", "River", "Road", "Road", "Roads", "Roads", "Route", "Row", "Rue", "Run", "Shoal", "Shoals", "Shore", "Shores", "Skyway", "Spring", "Springs", "Springs", "Spur", "Spurs", "Square", "Square", "Squares", "Squares", "Station", "Station", "Stravenue", "Stravenue", "Stream", "Stream", "Street", "Street", "Streets", "Summit", "Summit", "Terrace", "Throughway", "Trace", "Track", "Trafficway", "Trail", "Trail", "Tunnel", "Tunnel", "Turnpike", "Turnpike", "Underpass", "Union", "Unions", "Valley", "Valleys", "Via", "Viaduct", "View", "Views", "Village", "Village", "Villages", "Ville", "Vista", "Vista", "Walk", "Walks", "Wall", "Way", "Ways", "Well", "Wells" ];
  }, {} ],
  33: [ function(require, module, exports) {
    module["exports"] = [ "Pacific/Midway", "Pacific/Pago_Pago", "Pacific/Honolulu", "America/Juneau", "America/Los_Angeles", "America/Tijuana", "America/Denver", "America/Phoenix", "America/Chihuahua", "America/Mazatlan", "America/Chicago", "America/Regina", "America/Mexico_City", "America/Mexico_City", "America/Monterrey", "America/Guatemala", "America/New_York", "America/Indiana/Indianapolis", "America/Bogota", "America/Lima", "America/Lima", "America/Halifax", "America/Caracas", "America/La_Paz", "America/Santiago", "America/St_Johns", "America/Sao_Paulo", "America/Argentina/Buenos_Aires", "America/Guyana", "America/Godthab", "Atlantic/South_Georgia", "Atlantic/Azores", "Atlantic/Cape_Verde", "Europe/Dublin", "Europe/London", "Europe/Lisbon", "Europe/London", "Africa/Casablanca", "Africa/Monrovia", "Etc/UTC", "Europe/Belgrade", "Europe/Bratislava", "Europe/Budapest", "Europe/Ljubljana", "Europe/Prague", "Europe/Sarajevo", "Europe/Skopje", "Europe/Warsaw", "Europe/Zagreb", "Europe/Brussels", "Europe/Copenhagen", "Europe/Madrid", "Europe/Paris", "Europe/Amsterdam", "Europe/Berlin", "Europe/Berlin", "Europe/Rome", "Europe/Stockholm", "Europe/Vienna", "Africa/Algiers", "Europe/Bucharest", "Africa/Cairo", "Europe/Helsinki", "Europe/Kiev", "Europe/Riga", "Europe/Sofia", "Europe/Tallinn", "Europe/Vilnius", "Europe/Athens", "Europe/Istanbul", "Europe/Minsk", "Asia/Jerusalem", "Africa/Harare", "Africa/Johannesburg", "Europe/Moscow", "Europe/Moscow", "Europe/Moscow", "Asia/Kuwait", "Asia/Riyadh", "Africa/Nairobi", "Asia/Baghdad", "Asia/Tehran", "Asia/Muscat", "Asia/Muscat", "Asia/Baku", "Asia/Tbilisi", "Asia/Yerevan", "Asia/Kabul", "Asia/Yekaterinburg", "Asia/Karachi", "Asia/Karachi", "Asia/Tashkent", "Asia/Kolkata", "Asia/Kolkata", "Asia/Kolkata", "Asia/Kolkata", "Asia/Kathmandu", "Asia/Dhaka", "Asia/Dhaka", "Asia/Colombo", "Asia/Almaty", "Asia/Novosibirsk", "Asia/Rangoon", "Asia/Bangkok", "Asia/Bangkok", "Asia/Jakarta", "Asia/Krasnoyarsk", "Asia/Shanghai", "Asia/Chongqing", "Asia/Hong_Kong", "Asia/Urumqi", "Asia/Kuala_Lumpur", "Asia/Singapore", "Asia/Taipei", "Australia/Perth", "Asia/Irkutsk", "Asia/Ulaanbaatar", "Asia/Seoul", "Asia/Tokyo", "Asia/Tokyo", "Asia/Tokyo", "Asia/Yakutsk", "Australia/Darwin", "Australia/Adelaide", "Australia/Melbourne", "Australia/Melbourne", "Australia/Sydney", "Australia/Brisbane", "Australia/Hobart", "Asia/Vladivostok", "Pacific/Guam", "Pacific/Port_Moresby", "Asia/Magadan", "Asia/Magadan", "Pacific/Noumea", "Pacific/Fiji", "Asia/Kamchatka", "Pacific/Majuro", "Pacific/Auckland", "Pacific/Auckland", "Pacific/Tongatapu", "Pacific/Fakaofo", "Pacific/Apia" ];
  }, {} ],
  34: [ function(require, module, exports) {
    module["exports"] = [ "#{Name.name}", "#{Company.name}" ];
  }, {} ],
  35: [ function(require, module, exports) {
    var app = {};
    module["exports"] = app;
    app.name = require("./name");
    app.version = require("./version");
    app.author = require("./author");
  }, {
    "./author": 34,
    "./name": 36,
    "./version": 37
  } ],
  36: [ function(require, module, exports) {
    module["exports"] = [ "Redhold", "Treeflex", "Trippledex", "Kanlam", "Bigtax", "Daltfresh", "Toughjoyfax", "Mat Lam Tam", "Otcom", "Tres-Zap", "Y-Solowarm", "Tresom", "Voltsillam", "Biodex", "Greenlam", "Viva", "Matsoft", "Temp", "Zoolab", "Subin", "Rank", "Job", "Stringtough", "Tin", "It", "Home Ing", "Zamit", "Sonsing", "Konklab", "Alpha", "Latlux", "Voyatouch", "Alphazap", "Holdlamis", "Zaam-Dox", "Sub-Ex", "Quo Lux", "Bamity", "Ventosanzap", "Lotstring", "Hatity", "Tempsoft", "Overhold", "Fixflex", "Konklux", "Zontrax", "Tampflex", "Span", "Namfix", "Transcof", "Stim", "Fix San", "Sonair", "Stronghold", "Fintone", "Y-find", "Opela", "Lotlux", "Ronstring", "Zathin", "Duobam", "Keylex" ];
  }, {} ],
  37: [ function(require, module, exports) {
    module["exports"] = [ "0.#.#", "0.##", "#.##", "#.#", "#.#.#" ];
  }, {} ],
  38: [ function(require, module, exports) {
    module["exports"] = [ "2011-10-12", "2012-11-12", "2015-11-11", "2013-9-12" ];
  }, {} ],
  39: [ function(require, module, exports) {
    module["exports"] = [ "1234-2121-1221-1211", "1212-1221-1121-1234", "1211-1221-1234-2201", "1228-1221-1221-1431" ];
  }, {} ],
  40: [ function(require, module, exports) {
    module["exports"] = [ "visa", "mastercard", "americanexpress", "discover" ];
  }, {} ],
  41: [ function(require, module, exports) {
    var business = {};
    module["exports"] = business;
    business.credit_card_numbers = require("./credit_card_numbers");
    business.credit_card_expiry_dates = require("./credit_card_expiry_dates");
    business.credit_card_types = require("./credit_card_types");
  }, {
    "./credit_card_expiry_dates": 38,
    "./credit_card_numbers": 39,
    "./credit_card_types": 40
  } ],
  42: [ function(require, module, exports) {
    module["exports"] = [ "###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####" ];
  }, {} ],
  43: [ function(require, module, exports) {
    var cell_phone = {};
    module["exports"] = cell_phone;
    cell_phone.formats = require("./formats");
  }, {
    "./formats": 42
  } ],
  44: [ function(require, module, exports) {
    module["exports"] = [ "red", "green", "blue", "yellow", "purple", "mint green", "teal", "white", "black", "orange", "pink", "grey", "maroon", "violet", "turquoise", "tan", "sky blue", "salmon", "plum", "orchid", "olive", "magenta", "lime", "ivory", "indigo", "gold", "fuchsia", "cyan", "azure", "lavender", "silver" ];
  }, {} ],
  45: [ function(require, module, exports) {
    module["exports"] = [ "Books", "Movies", "Music", "Games", "Electronics", "Computers", "Home", "Garden", "Tools", "Grocery", "Health", "Beauty", "Toys", "Kids", "Baby", "Clothing", "Shoes", "Jewelery", "Sports", "Outdoors", "Automotive", "Industrial" ];
  }, {} ],
  46: [ function(require, module, exports) {
    var commerce = {};
    module["exports"] = commerce;
    commerce.color = require("./color");
    commerce.department = require("./department");
    commerce.product_name = require("./product_name");
  }, {
    "./color": 44,
    "./department": 45,
    "./product_name": 47
  } ],
  47: [ function(require, module, exports) {
    module["exports"] = {
      adjective: [ "Small", "Ergonomic", "Rustic", "Intelligent", "Gorgeous", "Incredible", "Fantastic", "Practical", "Sleek", "Awesome", "Generic", "Handcrafted", "Handmade", "Licensed", "Refined", "Unbranded", "Tasty" ],
      material: [ "Steel", "Wooden", "Concrete", "Plastic", "Cotton", "Granite", "Rubber", "Metal", "Soft", "Fresh", "Frozen" ],
      product: [ "Chair", "Car", "Computer", "Keyboard", "Mouse", "Bike", "Ball", "Gloves", "Pants", "Shirt", "Table", "Shoes", "Hat", "Towels", "Soap", "Tuna", "Chicken", "Fish", "Cheese", "Bacon", "Pizza", "Salad", "Sausages", "Chips" ]
    };
  }, {} ],
  48: [ function(require, module, exports) {
    module["exports"] = [ "Adaptive", "Advanced", "Ameliorated", "Assimilated", "Automated", "Balanced", "Business-focused", "Centralized", "Cloned", "Compatible", "Configurable", "Cross-group", "Cross-platform", "Customer-focused", "Customizable", "Decentralized", "De-engineered", "Devolved", "Digitized", "Distributed", "Diverse", "Down-sized", "Enhanced", "Enterprise-wide", "Ergonomic", "Exclusive", "Expanded", "Extended", "Face to face", "Focused", "Front-line", "Fully-configurable", "Function-based", "Fundamental", "Future-proofed", "Grass-roots", "Horizontal", "Implemented", "Innovative", "Integrated", "Intuitive", "Inverse", "Managed", "Mandatory", "Monitored", "Multi-channelled", "Multi-lateral", "Multi-layered", "Multi-tiered", "Networked", "Object-based", "Open-architected", "Open-source", "Operative", "Optimized", "Optional", "Organic", "Organized", "Persevering", "Persistent", "Phased", "Polarised", "Pre-emptive", "Proactive", "Profit-focused", "Profound", "Programmable", "Progressive", "Public-key", "Quality-focused", "Reactive", "Realigned", "Re-contextualized", "Re-engineered", "Reduced", "Reverse-engineered", "Right-sized", "Robust", "Seamless", "Secured", "Self-enabling", "Sharable", "Stand-alone", "Streamlined", "Switchable", "Synchronised", "Synergistic", "Synergized", "Team-oriented", "Total", "Triple-buffered", "Universal", "Up-sized", "Upgradable", "User-centric", "User-friendly", "Versatile", "Virtual", "Visionary", "Vision-oriented" ];
  }, {} ],
  49: [ function(require, module, exports) {
    module["exports"] = [ "clicks-and-mortar", "value-added", "vertical", "proactive", "robust", "revolutionary", "scalable", "leading-edge", "innovative", "intuitive", "strategic", "e-business", "mission-critical", "sticky", "one-to-one", "24/7", "end-to-end", "global", "B2B", "B2C", "granular", "frictionless", "virtual", "viral", "dynamic", "24/365", "best-of-breed", "killer", "magnetic", "bleeding-edge", "web-enabled", "interactive", "dot-com", "sexy", "back-end", "real-time", "efficient", "front-end", "distributed", "seamless", "extensible", "turn-key", "world-class", "open-source", "cross-platform", "cross-media", "synergistic", "bricks-and-clicks", "out-of-the-box", "enterprise", "integrated", "impactful", "wireless", "transparent", "next-generation", "cutting-edge", "user-centric", "visionary", "customized", "ubiquitous", "plug-and-play", "collaborative", "compelling", "holistic", "rich" ];
  }, {} ],
  50: [ function(require, module, exports) {
    module["exports"] = [ "synergies", "web-readiness", "paradigms", "markets", "partnerships", "infrastructures", "platforms", "initiatives", "channels", "eyeballs", "communities", "ROI", "solutions", "e-tailers", "e-services", "action-items", "portals", "niches", "technologies", "content", "vortals", "supply-chains", "convergence", "relationships", "architectures", "interfaces", "e-markets", "e-commerce", "systems", "bandwidth", "infomediaries", "models", "mindshare", "deliverables", "users", "schemas", "networks", "applications", "metrics", "e-business", "functionalities", "experiences", "web services", "methodologies" ];
  }, {} ],
  51: [ function(require, module, exports) {
    module["exports"] = [ "implement", "utilize", "integrate", "streamline", "optimize", "evolve", "transform", "embrace", "enable", "orchestrate", "leverage", "reinvent", "aggregate", "architect", "enhance", "incentivize", "morph", "empower", "envisioneer", "monetize", "harness", "facilitate", "seize", "disintermediate", "synergize", "strategize", "deploy", "brand", "grow", "target", "syndicate", "synthesize", "deliver", "mesh", "incubate", "engage", "maximize", "benchmark", "expedite", "reintermediate", "whiteboard", "visualize", "repurpose", "innovate", "scale", "unleash", "drive", "extend", "engineer", "revolutionize", "generate", "exploit", "transition", "e-enable", "iterate", "cultivate", "matrix", "productize", "redefine", "recontextualize" ];
  }, {} ],
  52: [ function(require, module, exports) {
    module["exports"] = [ "24 hour", "24/7", "3rd generation", "4th generation", "5th generation", "6th generation", "actuating", "analyzing", "asymmetric", "asynchronous", "attitude-oriented", "background", "bandwidth-monitored", "bi-directional", "bifurcated", "bottom-line", "clear-thinking", "client-driven", "client-server", "coherent", "cohesive", "composite", "context-sensitive", "contextually-based", "content-based", "dedicated", "demand-driven", "didactic", "directional", "discrete", "disintermediate", "dynamic", "eco-centric", "empowering", "encompassing", "even-keeled", "executive", "explicit", "exuding", "fault-tolerant", "foreground", "fresh-thinking", "full-range", "global", "grid-enabled", "heuristic", "high-level", "holistic", "homogeneous", "human-resource", "hybrid", "impactful", "incremental", "intangible", "interactive", "intermediate", "leading edge", "local", "logistical", "maximized", "methodical", "mission-critical", "mobile", "modular", "motivating", "multimedia", "multi-state", "multi-tasking", "national", "needs-based", "neutral", "next generation", "non-volatile", "object-oriented", "optimal", "optimizing", "radical", "real-time", "reciprocal", "regional", "responsive", "scalable", "secondary", "solution-oriented", "stable", "static", "systematic", "systemic", "system-worthy", "tangible", "tertiary", "transitional", "uniform", "upward-trending", "user-facing", "value-added", "web-enabled", "well-modulated", "zero administration", "zero defect", "zero tolerance" ];
  }, {} ],
  53: [ function(require, module, exports) {
    var company = {};
    module["exports"] = company;
    company.suffix = require("./suffix");
    company.adjective = require("./adjective");
    company.descriptor = require("./descriptor");
    company.noun = require("./noun");
    company.bs_verb = require("./bs_verb");
    company.bs_adjective = require("./bs_adjective");
    company.bs_noun = require("./bs_noun");
    company.name = require("./name");
  }, {
    "./adjective": 48,
    "./bs_adjective": 49,
    "./bs_noun": 50,
    "./bs_verb": 51,
    "./descriptor": 52,
    "./name": 54,
    "./noun": 55,
    "./suffix": 56
  } ],
  54: [ function(require, module, exports) {
    module["exports"] = [ "#{Name.last_name} #{suffix}", "#{Name.last_name}-#{Name.last_name}", "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}" ];
  }, {} ],
  55: [ function(require, module, exports) {
    module["exports"] = [ "ability", "access", "adapter", "algorithm", "alliance", "analyzer", "application", "approach", "architecture", "archive", "artificial intelligence", "array", "attitude", "benchmark", "budgetary management", "capability", "capacity", "challenge", "circuit", "collaboration", "complexity", "concept", "conglomeration", "contingency", "core", "customer loyalty", "database", "data-warehouse", "definition", "emulation", "encoding", "encryption", "extranet", "firmware", "flexibility", "focus group", "forecast", "frame", "framework", "function", "functionalities", "Graphic Interface", "groupware", "Graphical User Interface", "hardware", "help-desk", "hierarchy", "hub", "implementation", "info-mediaries", "infrastructure", "initiative", "installation", "instruction set", "interface", "internet solution", "intranet", "knowledge user", "knowledge base", "local area network", "leverage", "matrices", "matrix", "methodology", "middleware", "migration", "model", "moderator", "monitoring", "moratorium", "neural-net", "open architecture", "open system", "orchestration", "paradigm", "parallelism", "policy", "portal", "pricing structure", "process improvement", "product", "productivity", "project", "projection", "protocol", "secured line", "service-desk", "software", "solution", "standardization", "strategy", "structure", "success", "superstructure", "support", "synergy", "system engine", "task-force", "throughput", "time-frame", "toolset", "utilisation", "website", "workforce" ];
  }, {} ],
  56: [ function(require, module, exports) {
    module["exports"] = [ "Inc", "and Sons", "LLC", "Group" ];
  }, {} ],
  57: [ function(require, module, exports) {
    module["exports"] = [ "/34##-######-####L/", "/37##-######-####L/" ];
  }, {} ],
  58: [ function(require, module, exports) {
    module["exports"] = [ "/30[0-5]#-######-###L/", "/368#-######-###L/" ];
  }, {} ],
  59: [ function(require, module, exports) {
    module["exports"] = [ "/6011-####-####-###L/", "/65##-####-####-###L/", "/64[4-9]#-####-####-###L/", "/6011-62##-####-####-###L/", "/65##-62##-####-####-###L/", "/64[4-9]#-62##-####-####-###L/" ];
  }, {} ],
  60: [ function(require, module, exports) {
    var credit_card = {};
    module["exports"] = credit_card;
    credit_card.visa = require("./visa");
    credit_card.mastercard = require("./mastercard");
    credit_card.discover = require("./discover");
    credit_card.american_express = require("./american_express");
    credit_card.diners_club = require("./diners_club");
    credit_card.jcb = require("./jcb");
    credit_card.switch = require("./switch");
    credit_card.solo = require("./solo");
    credit_card.maestro = require("./maestro");
    credit_card.laser = require("./laser");
  }, {
    "./american_express": 57,
    "./diners_club": 58,
    "./discover": 59,
    "./jcb": 61,
    "./laser": 62,
    "./maestro": 63,
    "./mastercard": 64,
    "./solo": 65,
    "./switch": 66,
    "./visa": 67
  } ],
  61: [ function(require, module, exports) {
    module["exports"] = [ "/3528-####-####-###L/", "/3529-####-####-###L/", "/35[3-8]#-####-####-###L/" ];
  }, {} ],
  62: [ function(require, module, exports) {
    module["exports"] = [ "/6304###########L/", "/6706###########L/", "/6771###########L/", "/6709###########L/", "/6304#########{5,6}L/", "/6706#########{5,6}L/", "/6771#########{5,6}L/", "/6709#########{5,6}L/" ];
  }, {} ],
  63: [ function(require, module, exports) {
    module["exports"] = [ "/50#{9,16}L/", "/5[6-8]#{9,16}L/", "/56##{9,16}L/" ];
  }, {} ],
  64: [ function(require, module, exports) {
    module["exports"] = [ "/5[1-5]##-####-####-###L/", "/6771-89##-####-###L/" ];
  }, {} ],
  65: [ function(require, module, exports) {
    module["exports"] = [ "/6767-####-####-###L/", "/6767-####-####-####-#L/", "/6767-####-####-####-##L/" ];
  }, {} ],
  66: [ function(require, module, exports) {
    module["exports"] = [ "/6759-####-####-###L/", "/6759-####-####-####-#L/", "/6759-####-####-####-##L/" ];
  }, {} ],
  67: [ function(require, module, exports) {
    module["exports"] = [ "/4###########L/", "/4###-####-####-###L/" ];
  }, {} ],
  68: [ function(require, module, exports) {
    module["exports"] = [ "utf8_unicode_ci", "utf8_general_ci", "utf8_bin", "ascii_bin", "ascii_general_ci", "cp1250_bin", "cp1250_general_ci" ];
  }, {} ],
  69: [ function(require, module, exports) {
    module["exports"] = [ "id", "title", "name", "email", "phone", "token", "group", "category", "password", "comment", "avatar", "status", "createdAt", "updatedAt" ];
  }, {} ],
  70: [ function(require, module, exports) {
    module["exports"] = [ "InnoDB", "MyISAM", "MEMORY", "CSV", "BLACKHOLE", "ARCHIVE" ];
  }, {} ],
  71: [ function(require, module, exports) {
    var database = {};
    module["exports"] = database;
    database.collation = require("./collation");
    database.column = require("./column");
    database.engine = require("./engine");
    database.type = require("./type");
  }, {
    "./collation": 68,
    "./column": 69,
    "./engine": 70,
    "./type": 72
  } ],
  72: [ function(require, module, exports) {
    module["exports"] = [ "int", "varchar", "text", "date", "datetime", "tinyint", "time", "timestamp", "smallint", "mediumint", "bigint", "decimal", "float", "double", "real", "bit", "boolean", "serial", "blob", "binary", "enum", "set", "geometry", "point" ];
  }, {} ],
  73: [ function(require, module, exports) {
    var date = {};
    module["exports"] = date;
    date.month = require("./month");
    date.weekday = require("./weekday");
  }, {
    "./month": 74,
    "./weekday": 75
  } ],
  74: [ function(require, module, exports) {
    module["exports"] = {
      wide: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
      wide_context: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
      abbr: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
      abbr_context: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
    };
  }, {} ],
  75: [ function(require, module, exports) {
    module["exports"] = {
      wide: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
      wide_context: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
      abbr: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
      abbr_context: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
    };
  }, {} ],
  76: [ function(require, module, exports) {
    module["exports"] = [ "Checking", "Savings", "Money Market", "Investment", "Home Loan", "Credit Card", "Auto Loan", "Personal Loan" ];
  }, {} ],
  77: [ function(require, module, exports) {
    module["exports"] = {
      "UAE Dirham": {
        code: "AED",
        symbol: ""
      },
      Afghani: {
        code: "AFN",
        symbol: "\u060b"
      },
      Lek: {
        code: "ALL",
        symbol: "Lek"
      },
      "Armenian Dram": {
        code: "AMD",
        symbol: ""
      },
      "Netherlands Antillian Guilder": {
        code: "ANG",
        symbol: "\u0192"
      },
      Kwanza: {
        code: "AOA",
        symbol: ""
      },
      "Argentine Peso": {
        code: "ARS",
        symbol: "$"
      },
      "Australian Dollar": {
        code: "AUD",
        symbol: "$"
      },
      "Aruban Guilder": {
        code: "AWG",
        symbol: "\u0192"
      },
      "Azerbaijanian Manat": {
        code: "AZN",
        symbol: "\u043c\u0430\u043d"
      },
      "Convertible Marks": {
        code: "BAM",
        symbol: "KM"
      },
      "Barbados Dollar": {
        code: "BBD",
        symbol: "$"
      },
      Taka: {
        code: "BDT",
        symbol: ""
      },
      "Bulgarian Lev": {
        code: "BGN",
        symbol: "\u043b\u0432"
      },
      "Bahraini Dinar": {
        code: "BHD",
        symbol: ""
      },
      "Burundi Franc": {
        code: "BIF",
        symbol: ""
      },
      "Bermudian Dollar (customarily known as Bermuda Dollar)": {
        code: "BMD",
        symbol: "$"
      },
      "Brunei Dollar": {
        code: "BND",
        symbol: "$"
      },
      "Boliviano Mvdol": {
        code: "BOB BOV",
        symbol: "$b"
      },
      "Brazilian Real": {
        code: "BRL",
        symbol: "R$"
      },
      "Bahamian Dollar": {
        code: "BSD",
        symbol: "$"
      },
      Pula: {
        code: "BWP",
        symbol: "P"
      },
      "Belarussian Ruble": {
        code: "BYR",
        symbol: "p."
      },
      "Belize Dollar": {
        code: "BZD",
        symbol: "BZ$"
      },
      "Canadian Dollar": {
        code: "CAD",
        symbol: "$"
      },
      "Congolese Franc": {
        code: "CDF",
        symbol: ""
      },
      "Swiss Franc": {
        code: "CHF",
        symbol: "CHF"
      },
      "Chilean Peso Unidades de fomento": {
        code: "CLP CLF",
        symbol: "$"
      },
      "Yuan Renminbi": {
        code: "CNY",
        symbol: "\xa5"
      },
      "Colombian Peso Unidad de Valor Real": {
        code: "COP COU",
        symbol: "$"
      },
      "Costa Rican Colon": {
        code: "CRC",
        symbol: "\u20a1"
      },
      "Cuban Peso Peso Convertible": {
        code: "CUP CUC",
        symbol: "\u20b1"
      },
      "Cape Verde Escudo": {
        code: "CVE",
        symbol: ""
      },
      "Czech Koruna": {
        code: "CZK",
        symbol: "K\u010d"
      },
      "Djibouti Franc": {
        code: "DJF",
        symbol: ""
      },
      "Danish Krone": {
        code: "DKK",
        symbol: "kr"
      },
      "Dominican Peso": {
        code: "DOP",
        symbol: "RD$"
      },
      "Algerian Dinar": {
        code: "DZD",
        symbol: ""
      },
      Kroon: {
        code: "EEK",
        symbol: ""
      },
      "Egyptian Pound": {
        code: "EGP",
        symbol: "\xa3"
      },
      Nakfa: {
        code: "ERN",
        symbol: ""
      },
      "Ethiopian Birr": {
        code: "ETB",
        symbol: ""
      },
      Euro: {
        code: "EUR",
        symbol: "\u20ac"
      },
      "Fiji Dollar": {
        code: "FJD",
        symbol: "$"
      },
      "Falkland Islands Pound": {
        code: "FKP",
        symbol: "\xa3"
      },
      "Pound Sterling": {
        code: "GBP",
        symbol: "\xa3"
      },
      Lari: {
        code: "GEL",
        symbol: ""
      },
      Cedi: {
        code: "GHS",
        symbol: ""
      },
      "Gibraltar Pound": {
        code: "GIP",
        symbol: "\xa3"
      },
      Dalasi: {
        code: "GMD",
        symbol: ""
      },
      "Guinea Franc": {
        code: "GNF",
        symbol: ""
      },
      Quetzal: {
        code: "GTQ",
        symbol: "Q"
      },
      "Guyana Dollar": {
        code: "GYD",
        symbol: "$"
      },
      "Hong Kong Dollar": {
        code: "HKD",
        symbol: "$"
      },
      Lempira: {
        code: "HNL",
        symbol: "L"
      },
      "Croatian Kuna": {
        code: "HRK",
        symbol: "kn"
      },
      "Gourde US Dollar": {
        code: "HTG USD",
        symbol: ""
      },
      Forint: {
        code: "HUF",
        symbol: "Ft"
      },
      Rupiah: {
        code: "IDR",
        symbol: "Rp"
      },
      "New Israeli Sheqel": {
        code: "ILS",
        symbol: "\u20aa"
      },
      "Indian Rupee": {
        code: "INR",
        symbol: ""
      },
      "Indian Rupee Ngultrum": {
        code: "INR BTN",
        symbol: ""
      },
      "Iraqi Dinar": {
        code: "IQD",
        symbol: ""
      },
      "Iranian Rial": {
        code: "IRR",
        symbol: "\ufdfc"
      },
      "Iceland Krona": {
        code: "ISK",
        symbol: "kr"
      },
      "Jamaican Dollar": {
        code: "JMD",
        symbol: "J$"
      },
      "Jordanian Dinar": {
        code: "JOD",
        symbol: ""
      },
      Yen: {
        code: "JPY",
        symbol: "\xa5"
      },
      "Kenyan Shilling": {
        code: "KES",
        symbol: ""
      },
      Som: {
        code: "KGS",
        symbol: "\u043b\u0432"
      },
      Riel: {
        code: "KHR",
        symbol: "\u17db"
      },
      "Comoro Franc": {
        code: "KMF",
        symbol: ""
      },
      "North Korean Won": {
        code: "KPW",
        symbol: "\u20a9"
      },
      Won: {
        code: "KRW",
        symbol: "\u20a9"
      },
      "Kuwaiti Dinar": {
        code: "KWD",
        symbol: ""
      },
      "Cayman Islands Dollar": {
        code: "KYD",
        symbol: "$"
      },
      Tenge: {
        code: "KZT",
        symbol: "\u043b\u0432"
      },
      Kip: {
        code: "LAK",
        symbol: "\u20ad"
      },
      "Lebanese Pound": {
        code: "LBP",
        symbol: "\xa3"
      },
      "Sri Lanka Rupee": {
        code: "LKR",
        symbol: "\u20a8"
      },
      "Liberian Dollar": {
        code: "LRD",
        symbol: "$"
      },
      "Lithuanian Litas": {
        code: "LTL",
        symbol: "Lt"
      },
      "Latvian Lats": {
        code: "LVL",
        symbol: "Ls"
      },
      "Libyan Dinar": {
        code: "LYD",
        symbol: ""
      },
      "Moroccan Dirham": {
        code: "MAD",
        symbol: ""
      },
      "Moldovan Leu": {
        code: "MDL",
        symbol: ""
      },
      "Malagasy Ariary": {
        code: "MGA",
        symbol: ""
      },
      Denar: {
        code: "MKD",
        symbol: "\u0434\u0435\u043d"
      },
      Kyat: {
        code: "MMK",
        symbol: ""
      },
      Tugrik: {
        code: "MNT",
        symbol: "\u20ae"
      },
      Pataca: {
        code: "MOP",
        symbol: ""
      },
      Ouguiya: {
        code: "MRO",
        symbol: ""
      },
      "Mauritius Rupee": {
        code: "MUR",
        symbol: "\u20a8"
      },
      Rufiyaa: {
        code: "MVR",
        symbol: ""
      },
      Kwacha: {
        code: "MWK",
        symbol: ""
      },
      "Mexican Peso Mexican Unidad de Inversion (UDI)": {
        code: "MXN MXV",
        symbol: "$"
      },
      "Malaysian Ringgit": {
        code: "MYR",
        symbol: "RM"
      },
      Metical: {
        code: "MZN",
        symbol: "MT"
      },
      Naira: {
        code: "NGN",
        symbol: "\u20a6"
      },
      "Cordoba Oro": {
        code: "NIO",
        symbol: "C$"
      },
      "Norwegian Krone": {
        code: "NOK",
        symbol: "kr"
      },
      "Nepalese Rupee": {
        code: "NPR",
        symbol: "\u20a8"
      },
      "New Zealand Dollar": {
        code: "NZD",
        symbol: "$"
      },
      "Rial Omani": {
        code: "OMR",
        symbol: "\ufdfc"
      },
      "Balboa US Dollar": {
        code: "PAB USD",
        symbol: "B/."
      },
      "Nuevo Sol": {
        code: "PEN",
        symbol: "S/."
      },
      Kina: {
        code: "PGK",
        symbol: ""
      },
      "Philippine Peso": {
        code: "PHP",
        symbol: "Php"
      },
      "Pakistan Rupee": {
        code: "PKR",
        symbol: "\u20a8"
      },
      Zloty: {
        code: "PLN",
        symbol: "z\u0142"
      },
      Guarani: {
        code: "PYG",
        symbol: "Gs"
      },
      "Qatari Rial": {
        code: "QAR",
        symbol: "\ufdfc"
      },
      "New Leu": {
        code: "RON",
        symbol: "lei"
      },
      "Serbian Dinar": {
        code: "RSD",
        symbol: "\u0414\u0438\u043d."
      },
      "Russian Ruble": {
        code: "RUB",
        symbol: "\u0440\u0443\u0431"
      },
      "Rwanda Franc": {
        code: "RWF",
        symbol: ""
      },
      "Saudi Riyal": {
        code: "SAR",
        symbol: "\ufdfc"
      },
      "Solomon Islands Dollar": {
        code: "SBD",
        symbol: "$"
      },
      "Seychelles Rupee": {
        code: "SCR",
        symbol: "\u20a8"
      },
      "Sudanese Pound": {
        code: "SDG",
        symbol: ""
      },
      "Swedish Krona": {
        code: "SEK",
        symbol: "kr"
      },
      "Singapore Dollar": {
        code: "SGD",
        symbol: "$"
      },
      "Saint Helena Pound": {
        code: "SHP",
        symbol: "\xa3"
      },
      Leone: {
        code: "SLL",
        symbol: ""
      },
      "Somali Shilling": {
        code: "SOS",
        symbol: "S"
      },
      "Surinam Dollar": {
        code: "SRD",
        symbol: "$"
      },
      Dobra: {
        code: "STD",
        symbol: ""
      },
      "El Salvador Colon US Dollar": {
        code: "SVC USD",
        symbol: "$"
      },
      "Syrian Pound": {
        code: "SYP",
        symbol: "\xa3"
      },
      Lilangeni: {
        code: "SZL",
        symbol: ""
      },
      Baht: {
        code: "THB",
        symbol: "\u0e3f"
      },
      Somoni: {
        code: "TJS",
        symbol: ""
      },
      Manat: {
        code: "TMT",
        symbol: ""
      },
      "Tunisian Dinar": {
        code: "TND",
        symbol: ""
      },
      "Pa'anga": {
        code: "TOP",
        symbol: ""
      },
      "Turkish Lira": {
        code: "TRY",
        symbol: "TL"
      },
      "Trinidad and Tobago Dollar": {
        code: "TTD",
        symbol: "TT$"
      },
      "New Taiwan Dollar": {
        code: "TWD",
        symbol: "NT$"
      },
      "Tanzanian Shilling": {
        code: "TZS",
        symbol: ""
      },
      Hryvnia: {
        code: "UAH",
        symbol: "\u20b4"
      },
      "Uganda Shilling": {
        code: "UGX",
        symbol: ""
      },
      "US Dollar": {
        code: "USD",
        symbol: "$"
      },
      "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
        code: "UYU UYI",
        symbol: "$U"
      },
      "Uzbekistan Sum": {
        code: "UZS",
        symbol: "\u043b\u0432"
      },
      "Bolivar Fuerte": {
        code: "VEF",
        symbol: "Bs"
      },
      Dong: {
        code: "VND",
        symbol: "\u20ab"
      },
      Vatu: {
        code: "VUV",
        symbol: ""
      },
      Tala: {
        code: "WST",
        symbol: ""
      },
      "CFA Franc BEAC": {
        code: "XAF",
        symbol: ""
      },
      Silver: {
        code: "XAG",
        symbol: ""
      },
      Gold: {
        code: "XAU",
        symbol: ""
      },
      "Bond Markets Units European Composite Unit (EURCO)": {
        code: "XBA",
        symbol: ""
      },
      "European Monetary Unit (E.M.U.-6)": {
        code: "XBB",
        symbol: ""
      },
      "European Unit of Account 9(E.U.A.-9)": {
        code: "XBC",
        symbol: ""
      },
      "European Unit of Account 17(E.U.A.-17)": {
        code: "XBD",
        symbol: ""
      },
      "East Caribbean Dollar": {
        code: "XCD",
        symbol: "$"
      },
      SDR: {
        code: "XDR",
        symbol: ""
      },
      "UIC-Franc": {
        code: "XFU",
        symbol: ""
      },
      "CFA Franc BCEAO": {
        code: "XOF",
        symbol: ""
      },
      Palladium: {
        code: "XPD",
        symbol: ""
      },
      "CFP Franc": {
        code: "XPF",
        symbol: ""
      },
      Platinum: {
        code: "XPT",
        symbol: ""
      },
      "Codes specifically reserved for testing purposes": {
        code: "XTS",
        symbol: ""
      },
      "Yemeni Rial": {
        code: "YER",
        symbol: "\ufdfc"
      },
      Rand: {
        code: "ZAR",
        symbol: "R"
      },
      "Rand Loti": {
        code: "ZAR LSL",
        symbol: ""
      },
      "Rand Namibia Dollar": {
        code: "ZAR NAD",
        symbol: ""
      },
      "Zambian Kwacha": {
        code: "ZMK",
        symbol: ""
      },
      "Zimbabwe Dollar": {
        code: "ZWL",
        symbol: ""
      }
    };
  }, {} ],
  78: [ function(require, module, exports) {
    var finance = {};
    module["exports"] = finance;
    finance.account_type = require("./account_type");
    finance.transaction_type = require("./transaction_type");
    finance.currency = require("./currency");
  }, {
    "./account_type": 76,
    "./currency": 77,
    "./transaction_type": 79
  } ],
  79: [ function(require, module, exports) {
    module["exports"] = [ "deposit", "withdrawal", "payment", "invoice" ];
  }, {} ],
  80: [ function(require, module, exports) {
    module["exports"] = [ "TCP", "HTTP", "SDD", "RAM", "GB", "CSS", "SSL", "AGP", "SQL", "FTP", "PCI", "AI", "ADP", "RSS", "XML", "EXE", "COM", "HDD", "THX", "SMTP", "SMS", "USB", "PNG", "SAS", "IB", "SCSI", "JSON", "XSS", "JBOD" ];
  }, {} ],
  81: [ function(require, module, exports) {
    module["exports"] = [ "auxiliary", "primary", "back-end", "digital", "open-source", "virtual", "cross-platform", "redundant", "online", "haptic", "multi-byte", "bluetooth", "wireless", "1080p", "neural", "optical", "solid state", "mobile" ];
  }, {} ],
  82: [ function(require, module, exports) {
    var hacker = {};
    module["exports"] = hacker;
    hacker.abbreviation = require("./abbreviation");
    hacker.adjective = require("./adjective");
    hacker.noun = require("./noun");
    hacker.verb = require("./verb");
    hacker.ingverb = require("./ingverb");
  }, {
    "./abbreviation": 80,
    "./adjective": 81,
    "./ingverb": 83,
    "./noun": 84,
    "./verb": 85
  } ],
  83: [ function(require, module, exports) {
    module["exports"] = [ "backing up", "bypassing", "hacking", "overriding", "compressing", "copying", "navigating", "indexing", "connecting", "generating", "quantifying", "calculating", "synthesizing", "transmitting", "programming", "parsing" ];
  }, {} ],
  84: [ function(require, module, exports) {
    module["exports"] = [ "driver", "protocol", "bandwidth", "panel", "microchip", "program", "port", "card", "array", "interface", "system", "sensor", "firewall", "hard drive", "pixel", "alarm", "feed", "monitor", "application", "transmitter", "bus", "circuit", "capacitor", "matrix" ];
  }, {} ],
  85: [ function(require, module, exports) {
    module["exports"] = [ "back up", "bypass", "hack", "override", "compress", "copy", "navigate", "index", "connect", "generate", "quantify", "calculate", "synthesize", "input", "transmit", "program", "reboot", "parse" ];
  }, {} ],
  86: [ function(require, module, exports) {
    var en = {};
    module["exports"] = en;
    en.title = "English";
    en.separator = " & ";
    en.address = require("./address");
    en.credit_card = require("./credit_card");
    en.company = require("./company");
    en.internet = require("./internet");
    en.database = require("./database");
    en.lorem = require("./lorem");
    en.name = require("./name");
    en.phone_number = require("./phone_number");
    en.cell_phone = require("./cell_phone");
    en.business = require("./business");
    en.commerce = require("./commerce");
    en.team = require("./team");
    en.hacker = require("./hacker");
    en.app = require("./app");
    en.finance = require("./finance");
    en.date = require("./date");
    en.system = require("./system");
  }, {
    "./address": 24,
    "./app": 35,
    "./business": 41,
    "./cell_phone": 43,
    "./commerce": 46,
    "./company": 53,
    "./credit_card": 60,
    "./database": 71,
    "./date": 73,
    "./finance": 78,
    "./hacker": 82,
    "./internet": 91,
    "./lorem": 92,
    "./name": 96,
    "./phone_number": 103,
    "./system": 104,
    "./team": 107
  } ],
  87: [ function(require, module, exports) {
    module["exports"] = [ "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg" ];
  }, {} ],
  88: [ function(require, module, exports) {
    module["exports"] = [ "com", "biz", "info", "name", "net", "org" ];
  }, {} ],
  89: [ function(require, module, exports) {
    module["exports"] = [ "example.org", "example.com", "example.net" ];
  }, {} ],
  90: [ function(require, module, exports) {
    module["exports"] = [ "gmail.com", "yahoo.com", "hotmail.com" ];
  }, {} ],
  91: [ function(require, module, exports) {
    var internet = {};
    module["exports"] = internet;
    internet.free_email = require("./free_email");
    internet.example_email = require("./example_email");
    internet.domain_suffix = require("./domain_suffix");
    internet.avatar_uri = require("./avatar_uri");
  }, {
    "./avatar_uri": 87,
    "./domain_suffix": 88,
    "./example_email": 89,
    "./free_email": 90
  } ],
  92: [ function(require, module, exports) {
    var lorem = {};
    module["exports"] = lorem;
    lorem.words = require("./words");
    lorem.supplemental = require("./supplemental");
  }, {
    "./supplemental": 93,
    "./words": 94
  } ],
  93: [ function(require, module, exports) {
    module["exports"] = [ "abbas", "abduco", "abeo", "abscido", "absconditus", "absens", "absorbeo", "absque", "abstergo", "absum", "abundans", "abutor", "accedo", "accendo", "acceptus", "accipio", "accommodo", "accusator", "acer", "acerbitas", "acervus", "acidus", "acies", "acquiro", "acsi", "adamo", "adaugeo", "addo", "adduco", "ademptio", "adeo", "adeptio", "adfectus", "adfero", "adficio", "adflicto", "adhaero", "adhuc", "adicio", "adimpleo", "adinventitias", "adipiscor", "adiuvo", "administratio", "admiratio", "admitto", "admoneo", "admoveo", "adnuo", "adopto", "adsidue", "adstringo", "adsuesco", "adsum", "adulatio", "adulescens", "adultus", "aduro", "advenio", "adversus", "advoco", "aedificium", "aeger", "aegre", "aegrotatio", "aegrus", "aeneus", "aequitas", "aequus", "aer", "aestas", "aestivus", "aestus", "aetas", "aeternus", "ager", "aggero", "aggredior", "agnitio", "agnosco", "ago", "ait", "aiunt", "alienus", "alii", "alioqui", "aliqua", "alius", "allatus", "alo", "alter", "altus", "alveus", "amaritudo", "ambitus", "ambulo", "amicitia", "amiculum", "amissio", "amita", "amitto", "amo", "amor", "amoveo", "amplexus", "amplitudo", "amplus", "ancilla", "angelus", "angulus", "angustus", "animadverto", "animi", "animus", "annus", "anser", "ante", "antea", "antepono", "antiquus", "aperio", "aperte", "apostolus", "apparatus", "appello", "appono", "appositus", "approbo", "apto", "aptus", "apud", "aqua", "ara", "aranea", "arbitro", "arbor", "arbustum", "arca", "arceo", "arcesso", "arcus", "argentum", "argumentum", "arguo", "arma", "armarium", "armo", "aro", "ars", "articulus", "artificiose", "arto", "arx", "ascisco", "ascit", "asper", "aspicio", "asporto", "assentator", "astrum", "atavus", "ater", "atqui", "atrocitas", "atrox", "attero", "attollo", "attonbitus", "auctor", "auctus", "audacia", "audax", "audentia", "audeo", "audio", "auditor", "aufero", "aureus", "auris", "aurum", "aut", "autem", "autus", "auxilium", "avaritia", "avarus", "aveho", "averto", "avoco", "baiulus", "balbus", "barba", "bardus", "basium", "beatus", "bellicus", "bellum", "bene", "beneficium", "benevolentia", "benigne", "bestia", "bibo", "bis", "blandior", "bonus", "bos", "brevis", "cado", "caecus", "caelestis", "caelum", "calamitas", "calcar", "calco", "calculus", "callide", "campana", "candidus", "canis", "canonicus", "canto", "capillus", "capio", "capitulus", "capto", "caput", "carbo", "carcer", "careo", "caries", "cariosus", "caritas", "carmen", "carpo", "carus", "casso", "caste", "casus", "catena", "caterva", "cattus", "cauda", "causa", "caute", "caveo", "cavus", "cedo", "celebrer", "celer", "celo", "cena", "cenaculum", "ceno", "censura", "centum", "cerno", "cernuus", "certe", "certo", "certus", "cervus", "cetera", "charisma", "chirographum", "cibo", "cibus", "cicuta", "cilicium", "cimentarius", "ciminatio", "cinis", "circumvenio", "cito", "civis", "civitas", "clam", "clamo", "claro", "clarus", "claudeo", "claustrum", "clementia", "clibanus", "coadunatio", "coaegresco", "coepi", "coerceo", "cogito", "cognatus", "cognomen", "cogo", "cohaero", "cohibeo", "cohors", "colligo", "colloco", "collum", "colo", "color", "coma", "combibo", "comburo", "comedo", "comes", "cometes", "comis", "comitatus", "commemoro", "comminor", "commodo", "communis", "comparo", "compello", "complectus", "compono", "comprehendo", "comptus", "conatus", "concedo", "concido", "conculco", "condico", "conduco", "confero", "confido", "conforto", "confugo", "congregatio", "conicio", "coniecto", "conitor", "coniuratio", "conor", "conqueror", "conscendo", "conservo", "considero", "conspergo", "constans", "consuasor", "contabesco", "contego", "contigo", "contra", "conturbo", "conventus", "convoco", "copia", "copiose", "cornu", "corona", "corpus", "correptius", "corrigo", "corroboro", "corrumpo", "coruscus", "cotidie", "crapula", "cras", "crastinus", "creator", "creber", "crebro", "credo", "creo", "creptio", "crepusculum", "cresco", "creta", "cribro", "crinis", "cruciamentum", "crudelis", "cruentus", "crur", "crustulum", "crux", "cubicularis", "cubitum", "cubo", "cui", "cuius", "culpa", "culpo", "cultellus", "cultura", "cum", "cunabula", "cunae", "cunctatio", "cupiditas", "cupio", "cuppedia", "cupressus", "cur", "cura", "curatio", "curia", "curiositas", "curis", "curo", "curriculum", "currus", "cursim", "curso", "cursus", "curto", "curtus", "curvo", "curvus", "custodia", "damnatio", "damno", "dapifer", "debeo", "debilito", "decens", "decerno", "decet", "decimus", "decipio", "decor", "decretum", "decumbo", "dedecor", "dedico", "deduco", "defaeco", "defendo", "defero", "defessus", "defetiscor", "deficio", "defigo", "defleo", "defluo", "defungo", "degenero", "degero", "degusto", "deinde", "delectatio", "delego", "deleo", "delibero", "delicate", "delinquo", "deludo", "demens", "demergo", "demitto", "demo", "demonstro", "demoror", "demulceo", "demum", "denego", "denique", "dens", "denuncio", "denuo", "deorsum", "depereo", "depono", "depopulo", "deporto", "depraedor", "deprecator", "deprimo", "depromo", "depulso", "deputo", "derelinquo", "derideo", "deripio", "desidero", "desino", "desipio", "desolo", "desparatus", "despecto", "despirmatio", "infit", "inflammatio", "paens", "patior", "patria", "patrocinor", "patruus", "pauci", "paulatim", "pauper", "pax", "peccatus", "pecco", "pecto", "pectus", "pecunia", "pecus", "peior", "pel", "ocer", "socius", "sodalitas", "sol", "soleo", "solio", "solitudo", "solium", "sollers", "sollicito", "solum", "solus", "solutio", "solvo", "somniculosus", "somnus", "sonitus", "sono", "sophismata", "sopor", "sordeo", "sortitus", "spargo", "speciosus", "spectaculum", "speculum", "sperno", "spero", "spes", "spiculum", "spiritus", "spoliatio", "sponte", "stabilis", "statim", "statua", "stella", "stillicidium", "stipes", "stips", "sto", "strenuus", "strues", "studio", "stultus", "suadeo", "suasoria", "sub", "subito", "subiungo", "sublime", "subnecto", "subseco", "substantia", "subvenio", "succedo", "succurro", "sufficio", "suffoco", "suffragium", "suggero", "sui", "sulum", "sum", "summa", "summisse", "summopere", "sumo", "sumptus", "supellex", "super", "suppellex", "supplanto", "suppono", "supra", "surculus", "surgo", "sursum", "suscipio", "suspendo", "sustineo", "suus", "synagoga", "tabella", "tabernus", "tabesco", "tabgo", "tabula", "taceo", "tactus", "taedium", "talio", "talis", "talus", "tam", "tamdiu", "tamen", "tametsi", "tamisium", "tamquam", "tandem", "tantillus", "tantum", "tardus", "tego", "temeritas", "temperantia", "templum", "temptatio", "tempus", "tenax", "tendo", "teneo", "tener", "tenuis", "tenus", "tepesco", "tepidus", "ter", "terebro", "teres", "terga", "tergeo", "tergiversatio", "tergo", "tergum", "termes", "terminatio", "tero", "terra", "terreo", "territo", "terror", "tersus", "tertius", "testimonium", "texo", "textilis", "textor", "textus", "thalassinus", "theatrum", "theca", "thema", "theologus", "thermae", "thesaurus", "thesis", "thorax", "thymbra", "thymum", "tibi", "timidus", "timor", "titulus", "tolero", "tollo", "tondeo", "tonsor", "torqueo", "torrens", "tot", "totidem", "toties", "totus", "tracto", "trado", "traho", "trans", "tredecim", "tremo", "trepide", "tres", "tribuo", "tricesimus", "triduana", "triginta", "tripudio", "tristis", "triumphus", "trucido", "truculenter", "tubineus", "tui", "tum", "tumultus", "tunc", "turba", "turbo", "turpe", "turpis", "tutamen", "tutis", "tyrannus", "uberrime", "ubi", "ulciscor", "ullus", "ulterius", "ultio", "ultra", "umbra", "umerus", "umquam", "una", "unde", "undique", "universe", "unus", "urbanus", "urbs", "uredo", "usitas", "usque", "ustilo", "ustulo", "usus", "uter", "uterque", "utilis", "utique", "utor", "utpote", "utrimque", "utroque", "utrum", "uxor", "vaco", "vacuus", "vado", "vae", "valde", "valens", "valeo", "valetudo", "validus", "vallum", "vapulus", "varietas", "varius", "vehemens", "vel", "velociter", "velum", "velut", "venia", "venio", "ventito", "ventosus", "ventus", "venustas", "ver", "verbera", "verbum", "vere", "verecundia", "vereor", "vergo", "veritas", "vero", "versus", "verto", "verumtamen", "verus", "vesco", "vesica", "vesper", "vespillo", "vester", "vestigium", "vestrum", "vetus", "via", "vicinus", "vicissitudo", "victoria", "victus", "videlicet", "video", "viduata", "viduo", "vigilo", "vigor", "vilicus", "vilis", "vilitas", "villa", "vinco", "vinculum", "vindico", "vinitor", "vinum", "vir", "virga", "virgo", "viridis", "viriliter", "virtus", "vis", "viscus", "vita", "vitiosus", "vitium", "vito", "vivo", "vix", "vobis", "vociferor", "voco", "volaticus", "volo", "volubilis", "voluntarius", "volup", "volutabrum", "volva", "vomer", "vomica", "vomito", "vorago", "vorax", "voro", "vos", "votum", "voveo", "vox", "vulariter", "vulgaris", "vulgivagus", "vulgo", "vulgus", "vulnero", "vulnus", "vulpes", "vulticulus", "vultuosus", "xiphias" ];
  }, {} ],
  94: [ function(require, module, exports) {
    module["exports"] = [ "alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "aut", "odit", "aut", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "voluptatem", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "quia", "dolor", "sit", "amet", "consectetur", "adipisci", "velit", "sed", "quia", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "et", "dolore", "magnam", "aliquam", "quaerat", "voluptatem", "ut", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "enim", "ipsam", "voluptatem", "quia", "voluptas", "sit", "suscipit", "laboriosam", "nisi", "ut", "aliquid", "ex", "ea", "commodi", "consequatur", "quis", "autem", "vel", "eum", "iure", "reprehenderit", "qui", "in", "ea", "voluptate", "velit", "esse", "quam", "nihil", "molestiae", "et", "iusto", "odio", "dignissimos", "ducimus", "qui", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "dolores", "et", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "non", "provident", "sed", "ut", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "sunt", "in", "culpa", "qui", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "et", "dolorum", "fuga", "et", "harum", "quidem", "rerum", "facilis", "est", "et", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "est", "eligendi", "optio", "cumque", "nihil", "impedit", "quo", "porro", "quisquam", "est", "qui", "minus", "id", "quod", "maxime", "placeat", "facere", "possimus", "omnis", "voluptas", "assumenda", "est", "omnis", "dolor", "repellendus", "temporibus", "autem", "quibusdam", "et", "aut", "consequatur", "vel", "illum", "qui", "dolorem", "eum", "fugiat", "quo", "voluptas", "nulla", "pariatur", "at", "vero", "eos", "et", "accusamus", "officiis", "debitis", "aut", "rerum", "necessitatibus", "saepe", "eveniet", "ut", "et", "voluptates", "repudiandae", "sint", "et", "molestiae", "non", "recusandae", "itaque", "earum", "rerum", "hic", "tenetur", "a", "sapiente", "delectus", "ut", "aut", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat" ];
  }, {} ],
  95: [ function(require, module, exports) {
    module["exports"] = [ "Aaliyah", "Aaron", "Abagail", "Abbey", "Abbie", "Abbigail", "Abby", "Abdiel", "Abdul", "Abdullah", "Abe", "Abel", "Abelardo", "Abigail", "Abigale", "Abigayle", "Abner", "Abraham", "Ada", "Adah", "Adalberto", "Adaline", "Adam", "Adan", "Addie", "Addison", "Adela", "Adelbert", "Adele", "Adelia", "Adeline", "Adell", "Adella", "Adelle", "Aditya", "Adolf", "Adolfo", "Adolph", "Adolphus", "Adonis", "Adrain", "Adrian", "Adriana", "Adrianna", "Adriel", "Adrien", "Adrienne", "Afton", "Aglae", "Agnes", "Agustin", "Agustina", "Ahmad", "Ahmed", "Aida", "Aidan", "Aiden", "Aileen", "Aimee", "Aisha", "Aiyana", "Akeem", "Al", "Alaina", "Alan", "Alana", "Alanis", "Alanna", "Alayna", "Alba", "Albert", "Alberta", "Albertha", "Alberto", "Albin", "Albina", "Alda", "Alden", "Alec", "Aleen", "Alejandra", "Alejandrin", "Alek", "Alena", "Alene", "Alessandra", "Alessandro", "Alessia", "Aletha", "Alex", "Alexa", "Alexander", "Alexandra", "Alexandre", "Alexandrea", "Alexandria", "Alexandrine", "Alexandro", "Alexane", "Alexanne", "Alexie", "Alexis", "Alexys", "Alexzander", "Alf", "Alfonso", "Alfonzo", "Alford", "Alfred", "Alfreda", "Alfredo", "Ali", "Alia", "Alice", "Alicia", "Alisa", "Alisha", "Alison", "Alivia", "Aliya", "Aliyah", "Aliza", "Alize", "Allan", "Allen", "Allene", "Allie", "Allison", "Ally", "Alphonso", "Alta", "Althea", "Alva", "Alvah", "Alvena", "Alvera", "Alverta", "Alvina", "Alvis", "Alyce", "Alycia", "Alysa", "Alysha", "Alyson", "Alysson", "Amalia", "Amanda", "Amani", "Amara", "Amari", "Amaya", "Amber", "Ambrose", "Amelia", "Amelie", "Amely", "America", "Americo", "Amie", "Amina", "Amir", "Amira", "Amiya", "Amos", "Amparo", "Amy", "Amya", "Ana", "Anabel", "Anabelle", "Anahi", "Anais", "Anastacio", "Anastasia", "Anderson", "Andre", "Andreane", "Andreanne", "Andres", "Andrew", "Andy", "Angel", "Angela", "Angelica", "Angelina", "Angeline", "Angelita", "Angelo", "Angie", "Angus", "Anibal", "Anika", "Anissa", "Anita", "Aniya", "Aniyah", "Anjali", "Anna", "Annabel", "Annabell", "Annabelle", "Annalise", "Annamae", "Annamarie", "Anne", "Annetta", "Annette", "Annie", "Ansel", "Ansley", "Anthony", "Antoinette", "Antone", "Antonetta", "Antonette", "Antonia", "Antonietta", "Antonina", "Antonio", "Antwan", "Antwon", "Anya", "April", "Ara", "Araceli", "Aracely", "Arch", "Archibald", "Ardella", "Arden", "Ardith", "Arely", "Ari", "Ariane", "Arianna", "Aric", "Ariel", "Arielle", "Arjun", "Arlene", "Arlie", "Arlo", "Armand", "Armando", "Armani", "Arnaldo", "Arne", "Arno", "Arnold", "Arnoldo", "Arnulfo", "Aron", "Art", "Arthur", "Arturo", "Arvel", "Arvid", "Arvilla", "Aryanna", "Asa", "Asha", "Ashlee", "Ashleigh", "Ashley", "Ashly", "Ashlynn", "Ashton", "Ashtyn", "Asia", "Assunta", "Astrid", "Athena", "Aubree", "Aubrey", "Audie", "Audra", "Audreanne", "Audrey", "August", "Augusta", "Augustine", "Augustus", "Aurelia", "Aurelie", "Aurelio", "Aurore", "Austen", "Austin", "Austyn", "Autumn", "Ava", "Avery", "Avis", "Axel", "Ayana", "Ayden", "Ayla", "Aylin", "Baby", "Bailee", "Bailey", "Barbara", "Barney", "Baron", "Barrett", "Barry", "Bart", "Bartholome", "Barton", "Baylee", "Beatrice", "Beau", "Beaulah", "Bell", "Bella", "Belle", "Ben", "Benedict", "Benjamin", "Bennett", "Bennie", "Benny", "Benton", "Berenice", "Bernadette", "Bernadine", "Bernard", "Bernardo", "Berneice", "Bernhard", "Bernice", "Bernie", "Berniece", "Bernita", "Berry", "Bert", "Berta", "Bertha", "Bertram", "Bertrand", "Beryl", "Bessie", "Beth", "Bethany", "Bethel", "Betsy", "Bette", "Bettie", "Betty", "Bettye", "Beulah", "Beverly", "Bianka", "Bill", "Billie", "Billy", "Birdie", "Blair", "Blaise", "Blake", "Blanca", "Blanche", "Blaze", "Bo", "Bobbie", "Bobby", "Bonita", "Bonnie", "Boris", "Boyd", "Brad", "Braden", "Bradford", "Bradley", "Bradly", "Brady", "Braeden", "Brain", "Brandi", "Brando", "Brandon", "Brandt", "Brandy", "Brandyn", "Brannon", "Branson", "Brant", "Braulio", "Braxton", "Brayan", "Breana", "Breanna", "Breanne", "Brenda", "Brendan", "Brenden", "Brendon", "Brenna", "Brennan", "Brennon", "Brent", "Bret", "Brett", "Bria", "Brian", "Briana", "Brianne", "Brice", "Bridget", "Bridgette", "Bridie", "Brielle", "Brigitte", "Brionna", "Brisa", "Britney", "Brittany", "Brock", "Broderick", "Brody", "Brook", "Brooke", "Brooklyn", "Brooks", "Brown", "Bruce", "Bryana", "Bryce", "Brycen", "Bryon", "Buck", "Bud", "Buddy", "Buford", "Bulah", "Burdette", "Burley", "Burnice", "Buster", "Cade", "Caden", "Caesar", "Caitlyn", "Cale", "Caleb", "Caleigh", "Cali", "Calista", "Callie", "Camden", "Cameron", "Camila", "Camilla", "Camille", "Camren", "Camron", "Camryn", "Camylle", "Candace", "Candelario", "Candice", "Candida", "Candido", "Cara", "Carey", "Carissa", "Carlee", "Carleton", "Carley", "Carli", "Carlie", "Carlo", "Carlos", "Carlotta", "Carmel", "Carmela", "Carmella", "Carmelo", "Carmen", "Carmine", "Carol", "Carolanne", "Carole", "Carolina", "Caroline", "Carolyn", "Carolyne", "Carrie", "Carroll", "Carson", "Carter", "Cary", "Casandra", "Casey", "Casimer", "Casimir", "Casper", "Cassandra", "Cassandre", "Cassidy", "Cassie", "Catalina", "Caterina", "Catharine", "Catherine", "Cathrine", "Cathryn", "Cathy", "Cayla", "Ceasar", "Cecelia", "Cecil", "Cecile", "Cecilia", "Cedrick", "Celestine", "Celestino", "Celia", "Celine", "Cesar", "Chad", "Chadd", "Chadrick", "Chaim", "Chance", "Chandler", "Chanel", "Chanelle", "Charity", "Charlene", "Charles", "Charley", "Charlie", "Charlotte", "Chase", "Chasity", "Chauncey", "Chaya", "Chaz", "Chelsea", "Chelsey", "Chelsie", "Chesley", "Chester", "Chet", "Cheyanne", "Cheyenne", "Chloe", "Chris", "Christ", "Christa", "Christelle", "Christian", "Christiana", "Christina", "Christine", "Christop", "Christophe", "Christopher", "Christy", "Chyna", "Ciara", "Cicero", "Cielo", "Cierra", "Cindy", "Citlalli", "Clair", "Claire", "Clara", "Clarabelle", "Clare", "Clarissa", "Clark", "Claud", "Claude", "Claudia", "Claudie", "Claudine", "Clay", "Clemens", "Clement", "Clementina", "Clementine", "Clemmie", "Cleo", "Cleora", "Cleta", "Cletus", "Cleve", "Cleveland", "Clifford", "Clifton", "Clint", "Clinton", "Clotilde", "Clovis", "Cloyd", "Clyde", "Coby", "Cody", "Colby", "Cole", "Coleman", "Colin", "Colleen", "Collin", "Colt", "Colten", "Colton", "Columbus", "Concepcion", "Conner", "Connie", "Connor", "Conor", "Conrad", "Constance", "Constantin", "Consuelo", "Cooper", "Cora", "Coralie", "Corbin", "Cordelia", "Cordell", "Cordia", "Cordie", "Corene", "Corine", "Cornelius", "Cornell", "Corrine", "Cortez", "Cortney", "Cory", "Coty", "Courtney", "Coy", "Craig", "Crawford", "Creola", "Cristal", "Cristian", "Cristina", "Cristobal", "Cristopher", "Cruz", "Crystal", "Crystel", "Cullen", "Curt", "Curtis", "Cydney", "Cynthia", "Cyril", "Cyrus", "Dagmar", "Dahlia", "Daija", "Daisha", "Daisy", "Dakota", "Dale", "Dallas", "Dallin", "Dalton", "Damaris", "Dameon", "Damian", "Damien", "Damion", "Damon", "Dan", "Dana", "Dandre", "Dane", "D'angelo", "Dangelo", "Danial", "Daniela", "Daniella", "Danielle", "Danika", "Dannie", "Danny", "Dante", "Danyka", "Daphne", "Daphnee", "Daphney", "Darby", "Daren", "Darian", "Dariana", "Darien", "Dario", "Darion", "Darius", "Darlene", "Daron", "Darrel", "Darrell", "Darren", "Darrick", "Darrin", "Darrion", "Darron", "Darryl", "Darwin", "Daryl", "Dashawn", "Dasia", "Dave", "David", "Davin", "Davion", "Davon", "Davonte", "Dawn", "Dawson", "Dax", "Dayana", "Dayna", "Dayne", "Dayton", "Dean", "Deangelo", "Deanna", "Deborah", "Declan", "Dedric", "Dedrick", "Dee", "Deion", "Deja", "Dejah", "Dejon", "Dejuan", "Delaney", "Delbert", "Delfina", "Delia", "Delilah", "Dell", "Della", "Delmer", "Delores", "Delpha", "Delphia", "Delphine", "Delta", "Demarco", "Demarcus", "Demario", "Demetris", "Demetrius", "Demond", "Dena", "Denis", "Dennis", "Deon", "Deondre", "Deontae", "Deonte", "Dereck", "Derek", "Derick", "Deron", "Derrick", "Deshaun", "Deshawn", "Desiree", "Desmond", "Dessie", "Destany", "Destin", "Destinee", "Destiney", "Destini", "Destiny", "Devan", "Devante", "Deven", "Devin", "Devon", "Devonte", "Devyn", "Dewayne", "Dewitt", "Dexter", "Diamond", "Diana", "Dianna", "Diego", "Dillan", "Dillon", "Dimitri", "Dina", "Dino", "Dion", "Dixie", "Dock", "Dolly", "Dolores", "Domenic", "Domenica", "Domenick", "Domenico", "Domingo", "Dominic", "Dominique", "Don", "Donald", "Donato", "Donavon", "Donna", "Donnell", "Donnie", "Donny", "Dora", "Dorcas", "Dorian", "Doris", "Dorothea", "Dorothy", "Dorris", "Dortha", "Dorthy", "Doug", "Douglas", "Dovie", "Doyle", "Drake", "Drew", "Duane", "Dudley", "Dulce", "Duncan", "Durward", "Dustin", "Dusty", "Dwight", "Dylan", "Earl", "Earlene", "Earline", "Earnest", "Earnestine", "Easter", "Easton", "Ebba", "Ebony", "Ed", "Eda", "Edd", "Eddie", "Eden", "Edgar", "Edgardo", "Edison", "Edmond", "Edmund", "Edna", "Eduardo", "Edward", "Edwardo", "Edwin", "Edwina", "Edyth", "Edythe", "Effie", "Efrain", "Efren", "Eileen", "Einar", "Eino", "Eladio", "Elaina", "Elbert", "Elda", "Eldon", "Eldora", "Eldred", "Eldridge", "Eleanora", "Eleanore", "Eleazar", "Electa", "Elena", "Elenor", "Elenora", "Eleonore", "Elfrieda", "Eli", "Elian", "Eliane", "Elias", "Eliezer", "Elijah", "Elinor", "Elinore", "Elisa", "Elisabeth", "Elise", "Eliseo", "Elisha", "Elissa", "Eliza", "Elizabeth", "Ella", "Ellen", "Ellie", "Elliot", "Elliott", "Ellis", "Ellsworth", "Elmer", "Elmira", "Elmo", "Elmore", "Elna", "Elnora", "Elody", "Eloisa", "Eloise", "Elouise", "Eloy", "Elroy", "Elsa", "Else", "Elsie", "Elta", "Elton", "Elva", "Elvera", "Elvie", "Elvis", "Elwin", "Elwyn", "Elyse", "Elyssa", "Elza", "Emanuel", "Emelia", "Emelie", "Emely", "Emerald", "Emerson", "Emery", "Emie", "Emil", "Emile", "Emilia", "Emiliano", "Emilie", "Emilio", "Emily", "Emma", "Emmalee", "Emmanuel", "Emmanuelle", "Emmet", "Emmett", "Emmie", "Emmitt", "Emmy", "Emory", "Ena", "Enid", "Enoch", "Enola", "Enos", "Enrico", "Enrique", "Ephraim", "Era", "Eriberto", "Eric", "Erica", "Erich", "Erick", "Ericka", "Erik", "Erika", "Erin", "Erling", "Erna", "Ernest", "Ernestina", "Ernestine", "Ernesto", "Ernie", "Ervin", "Erwin", "Eryn", "Esmeralda", "Esperanza", "Esta", "Esteban", "Estefania", "Estel", "Estell", "Estella", "Estelle", "Estevan", "Esther", "Estrella", "Etha", "Ethan", "Ethel", "Ethelyn", "Ethyl", "Ettie", "Eudora", "Eugene", "Eugenia", "Eula", "Eulah", "Eulalia", "Euna", "Eunice", "Eusebio", "Eva", "Evalyn", "Evan", "Evangeline", "Evans", "Eve", "Eveline", "Evelyn", "Everardo", "Everett", "Everette", "Evert", "Evie", "Ewald", "Ewell", "Ezekiel", "Ezequiel", "Ezra", "Fabian", "Fabiola", "Fae", "Fannie", "Fanny", "Fatima", "Faustino", "Fausto", "Favian", "Fay", "Faye", "Federico", "Felicia", "Felicita", "Felicity", "Felipa", "Felipe", "Felix", "Felton", "Fermin", "Fern", "Fernando", "Ferne", "Fidel", "Filiberto", "Filomena", "Finn", "Fiona", "Flavie", "Flavio", "Fleta", "Fletcher", "Flo", "Florence", "Florencio", "Florian", "Florida", "Florine", "Flossie", "Floy", "Floyd", "Ford", "Forest", "Forrest", "Foster", "Frances", "Francesca", "Francesco", "Francis", "Francisca", "Francisco", "Franco", "Frank", "Frankie", "Franz", "Fred", "Freda", "Freddie", "Freddy", "Frederic", "Frederick", "Frederik", "Frederique", "Fredrick", "Fredy", "Freeda", "Freeman", "Freida", "Frida", "Frieda", "Friedrich", "Fritz", "Furman", "Gabe", "Gabriel", "Gabriella", "Gabrielle", "Gaetano", "Gage", "Gail", "Gardner", "Garett", "Garfield", "Garland", "Garnet", "Garnett", "Garret", "Garrett", "Garrick", "Garrison", "Garry", "Garth", "Gaston", "Gavin", "Gay", "Gayle", "Gaylord", "Gene", "General", "Genesis", "Genevieve", "Gennaro", "Genoveva", "Geo", "Geoffrey", "George", "Georgette", "Georgiana", "Georgianna", "Geovanni", "Geovanny", "Geovany", "Gerald", "Geraldine", "Gerard", "Gerardo", "Gerda", "Gerhard", "Germaine", "German", "Gerry", "Gerson", "Gertrude", "Gia", "Gianni", "Gideon", "Gilbert", "Gilberto", "Gilda", "Giles", "Gillian", "Gina", "Gino", "Giovani", "Giovanna", "Giovanni", "Giovanny", "Gisselle", "Giuseppe", "Gladyce", "Gladys", "Glen", "Glenda", "Glenna", "Glennie", "Gloria", "Godfrey", "Golda", "Golden", "Gonzalo", "Gordon", "Grace", "Gracie", "Graciela", "Grady", "Graham", "Grant", "Granville", "Grayce", "Grayson", "Green", "Greg", "Gregg", "Gregoria", "Gregorio", "Gregory", "Greta", "Gretchen", "Greyson", "Griffin", "Grover", "Guadalupe", "Gudrun", "Guido", "Guillermo", "Guiseppe", "Gunnar", "Gunner", "Gus", "Gussie", "Gust", "Gustave", "Guy", "Gwen", "Gwendolyn", "Hadley", "Hailee", "Hailey", "Hailie", "Hal", "Haleigh", "Haley", "Halie", "Halle", "Hallie", "Hank", "Hanna", "Hannah", "Hans", "Hardy", "Harley", "Harmon", "Harmony", "Harold", "Harrison", "Harry", "Harvey", "Haskell", "Hassan", "Hassie", "Hattie", "Haven", "Hayden", "Haylee", "Hayley", "Haylie", "Hazel", "Hazle", "Heath", "Heather", "Heaven", "Heber", "Hector", "Heidi", "Helen", "Helena", "Helene", "Helga", "Hellen", "Helmer", "Heloise", "Henderson", "Henri", "Henriette", "Henry", "Herbert", "Herman", "Hermann", "Hermina", "Herminia", "Herminio", "Hershel", "Herta", "Hertha", "Hester", "Hettie", "Hilario", "Hilbert", "Hilda", "Hildegard", "Hillard", "Hillary", "Hilma", "Hilton", "Hipolito", "Hiram", "Hobart", "Holden", "Hollie", "Hollis", "Holly", "Hope", "Horace", "Horacio", "Hortense", "Hosea", "Houston", "Howard", "Howell", "Hoyt", "Hubert", "Hudson", "Hugh", "Hulda", "Humberto", "Hunter", "Hyman", "Ian", "Ibrahim", "Icie", "Ida", "Idell", "Idella", "Ignacio", "Ignatius", "Ike", "Ila", "Ilene", "Iliana", "Ima", "Imani", "Imelda", "Immanuel", "Imogene", "Ines", "Irma", "Irving", "Irwin", "Isaac", "Isabel", "Isabell", "Isabella", "Isabelle", "Isac", "Isadore", "Isai", "Isaiah", "Isaias", "Isidro", "Ismael", "Isobel", "Isom", "Israel", "Issac", "Itzel", "Iva", "Ivah", "Ivory", "Ivy", "Izabella", "Izaiah", "Jabari", "Jace", "Jacey", "Jacinthe", "Jacinto", "Jack", "Jackeline", "Jackie", "Jacklyn", "Jackson", "Jacky", "Jaclyn", "Jacquelyn", "Jacques", "Jacynthe", "Jada", "Jade", "Jaden", "Jadon", "Jadyn", "Jaeden", "Jaida", "Jaiden", "Jailyn", "Jaime", "Jairo", "Jakayla", "Jake", "Jakob", "Jaleel", "Jalen", "Jalon", "Jalyn", "Jamaal", "Jamal", "Jamar", "Jamarcus", "Jamel", "Jameson", "Jamey", "Jamie", "Jamil", "Jamir", "Jamison", "Jammie", "Jan", "Jana", "Janae", "Jane", "Janelle", "Janessa", "Janet", "Janice", "Janick", "Janie", "Janis", "Janiya", "Jannie", "Jany", "Jaquan", "Jaquelin", "Jaqueline", "Jared", "Jaren", "Jarod", "Jaron", "Jarred", "Jarrell", "Jarret", "Jarrett", "Jarrod", "Jarvis", "Jasen", "Jasmin", "Jason", "Jasper", "Jaunita", "Javier", "Javon", "Javonte", "Jay", "Jayce", "Jaycee", "Jayda", "Jayde", "Jayden", "Jaydon", "Jaylan", "Jaylen", "Jaylin", "Jaylon", "Jayme", "Jayne", "Jayson", "Jazlyn", "Jazmin", "Jazmyn", "Jazmyne", "Jean", "Jeanette", "Jeanie", "Jeanne", "Jed", "Jedediah", "Jedidiah", "Jeff", "Jefferey", "Jeffery", "Jeffrey", "Jeffry", "Jena", "Jenifer", "Jennie", "Jennifer", "Jennings", "Jennyfer", "Jensen", "Jerad", "Jerald", "Jeramie", "Jeramy", "Jerel", "Jeremie", "Jeremy", "Jermain", "Jermaine", "Jermey", "Jerod", "Jerome", "Jeromy", "Jerrell", "Jerrod", "Jerrold", "Jerry", "Jess", "Jesse", "Jessica", "Jessie", "Jessika", "Jessy", "Jessyca", "Jesus", "Jett", "Jettie", "Jevon", "Jewel", "Jewell", "Jillian", "Jimmie", "Jimmy", "Jo", "Joan", "Joana", "Joanie", "Joanne", "Joannie", "Joanny", "Joany", "Joaquin", "Jocelyn", "Jodie", "Jody", "Joe", "Joel", "Joelle", "Joesph", "Joey", "Johan", "Johann", "Johanna", "Johathan", "John", "Johnathan", "Johnathon", "Johnnie", "Johnny", "Johnpaul", "Johnson", "Jolie", "Jon", "Jonas", "Jonatan", "Jonathan", "Jonathon", "Jordan", "Jordane", "Jordi", "Jordon", "Jordy", "Jordyn", "Jorge", "Jose", "Josefa", "Josefina", "Joseph", "Josephine", "Josh", "Joshua", "Joshuah", "Josiah", "Josiane", "Josianne", "Josie", "Josue", "Jovan", "Jovani", "Jovanny", "Jovany", "Joy", "Joyce", "Juana", "Juanita", "Judah", "Judd", "Jude", "Judge", "Judson", "Judy", "Jules", "Julia", "Julian", "Juliana", "Julianne", "Julie", "Julien", "Juliet", "Julio", "Julius", "June", "Junior", "Junius", "Justen", "Justice", "Justina", "Justine", "Juston", "Justus", "Justyn", "Juvenal", "Juwan", "Kacey", "Kaci", "Kacie", "Kade", "Kaden", "Kadin", "Kaela", "Kaelyn", "Kaia", "Kailee", "Kailey", "Kailyn", "Kaitlin", "Kaitlyn", "Kale", "Kaleb", "Kaleigh", "Kaley", "Kali", "Kallie", "Kameron", "Kamille", "Kamren", "Kamron", "Kamryn", "Kane", "Kara", "Kareem", "Karelle", "Karen", "Kari", "Kariane", "Karianne", "Karina", "Karine", "Karl", "Karlee", "Karley", "Karli", "Karlie", "Karolann", "Karson", "Kasandra", "Kasey", "Kassandra", "Katarina", "Katelin", "Katelyn", "Katelynn", "Katharina", "Katherine", "Katheryn", "Kathleen", "Kathlyn", "Kathryn", "Kathryne", "Katlyn", "Katlynn", "Katrina", "Katrine", "Kattie", "Kavon", "Kay", "Kaya", "Kaycee", "Kayden", "Kayla", "Kaylah", "Kaylee", "Kayleigh", "Kayley", "Kayli", "Kaylie", "Kaylin", "Keagan", "Keanu", "Keara", "Keaton", "Keegan", "Keeley", "Keely", "Keenan", "Keira", "Keith", "Kellen", "Kelley", "Kelli", "Kellie", "Kelly", "Kelsi", "Kelsie", "Kelton", "Kelvin", "Ken", "Kendall", "Kendra", "Kendrick", "Kenna", "Kennedi", "Kennedy", "Kenneth", "Kennith", "Kenny", "Kenton", "Kenya", "Kenyatta", "Kenyon", "Keon", "Keshaun", "Keshawn", "Keven", "Kevin", "Kevon", "Keyon", "Keyshawn", "Khalid", "Khalil", "Kian", "Kiana", "Kianna", "Kiara", "Kiarra", "Kiel", "Kiera", "Kieran", "Kiley", "Kim", "Kimberly", "King", "Kip", "Kira", "Kirk", "Kirsten", "Kirstin", "Kitty", "Kobe", "Koby", "Kody", "Kolby", "Kole", "Korbin", "Korey", "Kory", "Kraig", "Kris", "Krista", "Kristian", "Kristin", "Kristina", "Kristofer", "Kristoffer", "Kristopher", "Kristy", "Krystal", "Krystel", "Krystina", "Kurt", "Kurtis", "Kyla", "Kyle", "Kylee", "Kyleigh", "Kyler", "Kylie", "Kyra", "Lacey", "Lacy", "Ladarius", "Lafayette", "Laila", "Laisha", "Lamar", "Lambert", "Lamont", "Lance", "Landen", "Lane", "Laney", "Larissa", "Laron", "Larry", "Larue", "Laura", "Laurel", "Lauren", "Laurence", "Lauretta", "Lauriane", "Laurianne", "Laurie", "Laurine", "Laury", "Lauryn", "Lavada", "Lavern", "Laverna", "Laverne", "Lavina", "Lavinia", "Lavon", "Lavonne", "Lawrence", "Lawson", "Layla", "Layne", "Lazaro", "Lea", "Leann", "Leanna", "Leanne", "Leatha", "Leda", "Lee", "Leif", "Leila", "Leilani", "Lela", "Lelah", "Leland", "Lelia", "Lempi", "Lemuel", "Lenna", "Lennie", "Lenny", "Lenora", "Lenore", "Leo", "Leola", "Leon", "Leonard", "Leonardo", "Leone", "Leonel", "Leonie", "Leonor", "Leonora", "Leopold", "Leopoldo", "Leora", "Lera", "Lesley", "Leslie", "Lesly", "Lessie", "Lester", "Leta", "Letha", "Letitia", "Levi", "Lew", "Lewis", "Lexi", "Lexie", "Lexus", "Lia", "Liam", "Liana", "Libbie", "Libby", "Lila", "Lilian", "Liliana", "Liliane", "Lilla", "Lillian", "Lilliana", "Lillie", "Lilly", "Lily", "Lilyan", "Lina", "Lincoln", "Linda", "Lindsay", "Lindsey", "Linnea", "Linnie", "Linwood", "Lionel", "Lisa", "Lisandro", "Lisette", "Litzy", "Liza", "Lizeth", "Lizzie", "Llewellyn", "Lloyd", "Logan", "Lois", "Lola", "Lolita", "Loma", "Lon", "London", "Lonie", "Lonnie", "Lonny", "Lonzo", "Lora", "Loraine", "Loren", "Lorena", "Lorenz", "Lorenza", "Lorenzo", "Lori", "Lorine", "Lorna", "Lottie", "Lou", "Louie", "Louisa", "Lourdes", "Louvenia", "Lowell", "Loy", "Loyal", "Loyce", "Lucas", "Luciano", "Lucie", "Lucienne", "Lucile", "Lucinda", "Lucio", "Lucious", "Lucius", "Lucy", "Ludie", "Ludwig", "Lue", "Luella", "Luigi", "Luis", "Luisa", "Lukas", "Lula", "Lulu", "Luna", "Lupe", "Lura", "Lurline", "Luther", "Luz", "Lyda", "Lydia", "Lyla", "Lynn", "Lyric", "Lysanne", "Mabel", "Mabelle", "Mable", "Mac", "Macey", "Maci", "Macie", "Mack", "Mackenzie", "Macy", "Madaline", "Madalyn", "Maddison", "Madeline", "Madelyn", "Madelynn", "Madge", "Madie", "Madilyn", "Madisen", "Madison", "Madisyn", "Madonna", "Madyson", "Mae", "Maegan", "Maeve", "Mafalda", "Magali", "Magdalen", "Magdalena", "Maggie", "Magnolia", "Magnus", "Maia", "Maida", "Maiya", "Major", "Makayla", "Makenna", "Makenzie", "Malachi", "Malcolm", "Malika", "Malinda", "Mallie", "Mallory", "Malvina", "Mandy", "Manley", "Manuel", "Manuela", "Mara", "Marc", "Marcel", "Marcelina", "Marcelino", "Marcella", "Marcelle", "Marcellus", "Marcelo", "Marcia", "Marco", "Marcos", "Marcus", "Margaret", "Margarete", "Margarett", "Margaretta", "Margarette", "Margarita", "Marge", "Margie", "Margot", "Margret", "Marguerite", "Maria", "Mariah", "Mariam", "Marian", "Mariana", "Mariane", "Marianna", "Marianne", "Mariano", "Maribel", "Marie", "Mariela", "Marielle", "Marietta", "Marilie", "Marilou", "Marilyne", "Marina", "Mario", "Marion", "Marisa", "Marisol", "Maritza", "Marjolaine", "Marjorie", "Marjory", "Mark", "Markus", "Marlee", "Marlen", "Marlene", "Marley", "Marlin", "Marlon", "Marques", "Marquis", "Marquise", "Marshall", "Marta", "Martin", "Martina", "Martine", "Marty", "Marvin", "Mary", "Maryam", "Maryjane", "Maryse", "Mason", "Mateo", "Mathew", "Mathias", "Mathilde", "Matilda", "Matilde", "Matt", "Matteo", "Mattie", "Maud", "Maude", "Maudie", "Maureen", "Maurice", "Mauricio", "Maurine", "Maverick", "Mavis", "Max", "Maxie", "Maxime", "Maximilian", "Maximillia", "Maximillian", "Maximo", "Maximus", "Maxine", "Maxwell", "May", "Maya", "Maybell", "Maybelle", "Maye", "Maymie", "Maynard", "Mayra", "Mazie", "Mckayla", "Mckenna", "Mckenzie", "Meagan", "Meaghan", "Meda", "Megane", "Meggie", "Meghan", "Mekhi", "Melany", "Melba", "Melisa", "Melissa", "Mellie", "Melody", "Melvin", "Melvina", "Melyna", "Melyssa", "Mercedes", "Meredith", "Merl", "Merle", "Merlin", "Merritt", "Mertie", "Mervin", "Meta", "Mia", "Micaela", "Micah", "Michael", "Michaela", "Michale", "Micheal", "Michel", "Michele", "Michelle", "Miguel", "Mikayla", "Mike", "Mikel", "Milan", "Miles", "Milford", "Miller", "Millie", "Milo", "Milton", "Mina", "Minerva", "Minnie", "Miracle", "Mireille", "Mireya", "Misael", "Missouri", "Misty", "Mitchel", "Mitchell", "Mittie", "Modesta", "Modesto", "Mohamed", "Mohammad", "Mohammed", "Moises", "Mollie", "Molly", "Mona", "Monica", "Monique", "Monroe", "Monserrat", "Monserrate", "Montana", "Monte", "Monty", "Morgan", "Moriah", "Morris", "Mortimer", "Morton", "Mose", "Moses", "Moshe", "Mossie", "Mozell", "Mozelle", "Muhammad", "Muriel", "Murl", "Murphy", "Murray", "Mustafa", "Mya", "Myah", "Mylene", "Myles", "Myra", "Myriam", "Myrl", "Myrna", "Myron", "Myrtice", "Myrtie", "Myrtis", "Myrtle", "Nadia", "Nakia", "Name", "Nannie", "Naomi", "Naomie", "Napoleon", "Narciso", "Nash", "Nasir", "Nat", "Natalia", "Natalie", "Natasha", "Nathan", "Nathanael", "Nathanial", "Nathaniel", "Nathen", "Nayeli", "Neal", "Ned", "Nedra", "Neha", "Neil", "Nelda", "Nella", "Nelle", "Nellie", "Nels", "Nelson", "Neoma", "Nestor", "Nettie", "Neva", "Newell", "Newton", "Nia", "Nicholas", "Nicholaus", "Nichole", "Nick", "Nicklaus", "Nickolas", "Nico", "Nicola", "Nicolas", "Nicole", "Nicolette", "Nigel", "Nikita", "Nikki", "Nikko", "Niko", "Nikolas", "Nils", "Nina", "Noah", "Noble", "Noe", "Noel", "Noelia", "Noemi", "Noemie", "Noemy", "Nola", "Nolan", "Nona", "Nora", "Norbert", "Norberto", "Norene", "Norma", "Norris", "Norval", "Norwood", "Nova", "Novella", "Nya", "Nyah", "Nyasia", "Obie", "Oceane", "Ocie", "Octavia", "Oda", "Odell", "Odessa", "Odie", "Ofelia", "Okey", "Ola", "Olaf", "Ole", "Olen", "Oleta", "Olga", "Olin", "Oliver", "Ollie", "Oma", "Omari", "Omer", "Ona", "Onie", "Opal", "Ophelia", "Ora", "Oral", "Oran", "Oren", "Orie", "Orin", "Orion", "Orland", "Orlando", "Orlo", "Orpha", "Orrin", "Orval", "Orville", "Osbaldo", "Osborne", "Oscar", "Osvaldo", "Oswald", "Oswaldo", "Otha", "Otho", "Otilia", "Otis", "Ottilie", "Ottis", "Otto", "Ova", "Owen", "Ozella", "Pablo", "Paige", "Palma", "Pamela", "Pansy", "Paolo", "Paris", "Parker", "Pascale", "Pasquale", "Pat", "Patience", "Patricia", "Patrick", "Patsy", "Pattie", "Paul", "Paula", "Pauline", "Paxton", "Payton", "Pearl", "Pearlie", "Pearline", "Pedro", "Peggie", "Penelope", "Percival", "Percy", "Perry", "Pete", "Peter", "Petra", "Peyton", "Philip", "Phoebe", "Phyllis", "Pierce", "Pierre", "Pietro", "Pink", "Pinkie", "Piper", "Polly", "Porter", "Precious", "Presley", "Preston", "Price", "Prince", "Princess", "Priscilla", "Providenci", "Prudence", "Queen", "Queenie", "Quentin", "Quincy", "Quinn", "Quinten", "Quinton", "Rachael", "Rachel", "Rachelle", "Rae", "Raegan", "Rafael", "Rafaela", "Raheem", "Rahsaan", "Rahul", "Raina", "Raleigh", "Ralph", "Ramiro", "Ramon", "Ramona", "Randal", "Randall", "Randi", "Randy", "Ransom", "Raoul", "Raphael", "Raphaelle", "Raquel", "Rashad", "Rashawn", "Rasheed", "Raul", "Raven", "Ray", "Raymond", "Raymundo", "Reagan", "Reanna", "Reba", "Rebeca", "Rebecca", "Rebeka", "Rebekah", "Reece", "Reed", "Reese", "Regan", "Reggie", "Reginald", "Reid", "Reilly", "Reina", "Reinhold", "Remington", "Rene", "Renee", "Ressie", "Reta", "Retha", "Retta", "Reuben", "Reva", "Rex", "Rey", "Reyes", "Reymundo", "Reyna", "Reynold", "Rhea", "Rhett", "Rhianna", "Rhiannon", "Rhoda", "Ricardo", "Richard", "Richie", "Richmond", "Rick", "Rickey", "Rickie", "Ricky", "Rico", "Rigoberto", "Riley", "Rita", "River", "Robb", "Robbie", "Robert", "Roberta", "Roberto", "Robin", "Robyn", "Rocio", "Rocky", "Rod", "Roderick", "Rodger", "Rodolfo", "Rodrick", "Rodrigo", "Roel", "Rogelio", "Roger", "Rogers", "Rolando", "Rollin", "Roma", "Romaine", "Roman", "Ron", "Ronaldo", "Ronny", "Roosevelt", "Rory", "Rosa", "Rosalee", "Rosalia", "Rosalind", "Rosalinda", "Rosalyn", "Rosamond", "Rosanna", "Rosario", "Roscoe", "Rose", "Rosella", "Roselyn", "Rosemarie", "Rosemary", "Rosendo", "Rosetta", "Rosie", "Rosina", "Roslyn", "Ross", "Rossie", "Rowan", "Rowena", "Rowland", "Roxane", "Roxanne", "Roy", "Royal", "Royce", "Rozella", "Ruben", "Rubie", "Ruby", "Rubye", "Rudolph", "Rudy", "Rupert", "Russ", "Russel", "Russell", "Rusty", "Ruth", "Ruthe", "Ruthie", "Ryan", "Ryann", "Ryder", "Rylan", "Rylee", "Ryleigh", "Ryley", "Sabina", "Sabrina", "Sabryna", "Sadie", "Sadye", "Sage", "Saige", "Sallie", "Sally", "Salma", "Salvador", "Salvatore", "Sam", "Samanta", "Samantha", "Samara", "Samir", "Sammie", "Sammy", "Samson", "Sandra", "Sandrine", "Sandy", "Sanford", "Santa", "Santiago", "Santina", "Santino", "Santos", "Sarah", "Sarai", "Sarina", "Sasha", "Saul", "Savanah", "Savanna", "Savannah", "Savion", "Scarlett", "Schuyler", "Scot", "Scottie", "Scotty", "Seamus", "Sean", "Sebastian", "Sedrick", "Selena", "Selina", "Selmer", "Serena", "Serenity", "Seth", "Shad", "Shaina", "Shakira", "Shana", "Shane", "Shanel", "Shanelle", "Shania", "Shanie", "Shaniya", "Shanna", "Shannon", "Shanny", "Shanon", "Shany", "Sharon", "Shaun", "Shawn", "Shawna", "Shaylee", "Shayna", "Shayne", "Shea", "Sheila", "Sheldon", "Shemar", "Sheridan", "Sherman", "Sherwood", "Shirley", "Shyann", "Shyanne", "Sibyl", "Sid", "Sidney", "Sienna", "Sierra", "Sigmund", "Sigrid", "Sigurd", "Silas", "Sim", "Simeon", "Simone", "Sincere", "Sister", "Skye", "Skyla", "Skylar", "Sofia", "Soledad", "Solon", "Sonia", "Sonny", "Sonya", "Sophia", "Sophie", "Spencer", "Stacey", "Stacy", "Stan", "Stanford", "Stanley", "Stanton", "Stefan", "Stefanie", "Stella", "Stephan", "Stephania", "Stephanie", "Stephany", "Stephen", "Stephon", "Sterling", "Steve", "Stevie", "Stewart", "Stone", "Stuart", "Summer", "Sunny", "Susan", "Susana", "Susanna", "Susie", "Suzanne", "Sven", "Syble", "Sydnee", "Sydney", "Sydni", "Sydnie", "Sylvan", "Sylvester", "Sylvia", "Tabitha", "Tad", "Talia", "Talon", "Tamara", "Tamia", "Tania", "Tanner", "Tanya", "Tara", "Taryn", "Tate", "Tatum", "Tatyana", "Taurean", "Tavares", "Taya", "Taylor", "Teagan", "Ted", "Telly", "Terence", "Teresa", "Terrance", "Terrell", "Terrence", "Terrill", "Terry", "Tess", "Tessie", "Tevin", "Thad", "Thaddeus", "Thalia", "Thea", "Thelma", "Theo", "Theodora", "Theodore", "Theresa", "Therese", "Theresia", "Theron", "Thomas", "Thora", "Thurman", "Tia", "Tiana", "Tianna", "Tiara", "Tierra", "Tiffany", "Tillman", "Timmothy", "Timmy", "Timothy", "Tina", "Tito", "Titus", "Tobin", "Toby", "Tod", "Tom", "Tomas", "Tomasa", "Tommie", "Toney", "Toni", "Tony", "Torey", "Torrance", "Torrey", "Toy", "Trace", "Tracey", "Tracy", "Travis", "Travon", "Tre", "Tremaine", "Tremayne", "Trent", "Trenton", "Tressa", "Tressie", "Treva", "Trever", "Trevion", "Trevor", "Trey", "Trinity", "Trisha", "Tristian", "Tristin", "Triston", "Troy", "Trudie", "Trycia", "Trystan", "Turner", "Twila", "Tyler", "Tyra", "Tyree", "Tyreek", "Tyrel", "Tyrell", "Tyrese", "Tyrique", "Tyshawn", "Tyson", "Ubaldo", "Ulices", "Ulises", "Una", "Unique", "Urban", "Uriah", "Uriel", "Ursula", "Vada", "Valentin", "Valentina", "Valentine", "Valerie", "Vallie", "Van", "Vance", "Vanessa", "Vaughn", "Veda", "Velda", "Vella", "Velma", "Velva", "Vena", "Verda", "Verdie", "Vergie", "Verla", "Verlie", "Vern", "Verna", "Verner", "Vernice", "Vernie", "Vernon", "Verona", "Veronica", "Vesta", "Vicenta", "Vicente", "Vickie", "Vicky", "Victor", "Victoria", "Vida", "Vidal", "Vilma", "Vince", "Vincent", "Vincenza", "Vincenzo", "Vinnie", "Viola", "Violet", "Violette", "Virgie", "Virgil", "Virginia", "Virginie", "Vita", "Vito", "Viva", "Vivian", "Viviane", "Vivianne", "Vivien", "Vivienne", "Vladimir", "Wade", "Waino", "Waldo", "Walker", "Wallace", "Walter", "Walton", "Wanda", "Ward", "Warren", "Watson", "Wava", "Waylon", "Wayne", "Webster", "Weldon", "Wellington", "Wendell", "Wendy", "Werner", "Westley", "Weston", "Whitney", "Wilber", "Wilbert", "Wilburn", "Wiley", "Wilford", "Wilfred", "Wilfredo", "Wilfrid", "Wilhelm", "Wilhelmine", "Will", "Willa", "Willard", "William", "Willie", "Willis", "Willow", "Willy", "Wilma", "Wilmer", "Wilson", "Wilton", "Winfield", "Winifred", "Winnifred", "Winona", "Winston", "Woodrow", "Wyatt", "Wyman", "Xander", "Xavier", "Xzavier", "Yadira", "Yasmeen", "Yasmin", "Yasmine", "Yazmin", "Yesenia", "Yessenia", "Yolanda", "Yoshiko", "Yvette", "Yvonne", "Zachariah", "Zachary", "Zachery", "Zack", "Zackary", "Zackery", "Zakary", "Zander", "Zane", "Zaria", "Zechariah", "Zelda", "Zella", "Zelma", "Zena", "Zetta", "Zion", "Zita", "Zoe", "Zoey", "Zoie", "Zoila", "Zola", "Zora", "Zula" ];
  }, {} ],
  96: [ function(require, module, exports) {
    var name = {};
    module["exports"] = name;
    name.first_name = require("./first_name");
    name.last_name = require("./last_name");
    name.prefix = require("./prefix");
    name.suffix = require("./suffix");
    name.title = require("./title");
    name.name = require("./name");
  }, {
    "./first_name": 95,
    "./last_name": 97,
    "./name": 98,
    "./prefix": 99,
    "./suffix": 100,
    "./title": 101
  } ],
  97: [ function(require, module, exports) {
    module["exports"] = [ "Abbott", "Abernathy", "Abshire", "Adams", "Altenwerth", "Anderson", "Ankunding", "Armstrong", "Auer", "Aufderhar", "Bahringer", "Bailey", "Balistreri", "Barrows", "Bartell", "Bartoletti", "Barton", "Bashirian", "Batz", "Bauch", "Baumbach", "Bayer", "Beahan", "Beatty", "Bechtelar", "Becker", "Bednar", "Beer", "Beier", "Berge", "Bergnaum", "Bergstrom", "Bernhard", "Bernier", "Bins", "Blanda", "Blick", "Block", "Bode", "Boehm", "Bogan", "Bogisich", "Borer", "Bosco", "Botsford", "Boyer", "Boyle", "Bradtke", "Brakus", "Braun", "Breitenberg", "Brekke", "Brown", "Bruen", "Buckridge", "Carroll", "Carter", "Cartwright", "Casper", "Cassin", "Champlin", "Christiansen", "Cole", "Collier", "Collins", "Conn", "Connelly", "Conroy", "Considine", "Corkery", "Cormier", "Corwin", "Cremin", "Crist", "Crona", "Cronin", "Crooks", "Cruickshank", "Cummerata", "Cummings", "Dach", "D'Amore", "Daniel", "Dare", "Daugherty", "Davis", "Deckow", "Denesik", "Dibbert", "Dickens", "Dicki", "Dickinson", "Dietrich", "Donnelly", "Dooley", "Douglas", "Doyle", "DuBuque", "Durgan", "Ebert", "Effertz", "Eichmann", "Emard", "Emmerich", "Erdman", "Ernser", "Fadel", "Fahey", "Farrell", "Fay", "Feeney", "Feest", "Feil", "Ferry", "Fisher", "Flatley", "Frami", "Franecki", "Friesen", "Fritsch", "Funk", "Gaylord", "Gerhold", "Gerlach", "Gibson", "Gislason", "Gleason", "Gleichner", "Glover", "Goldner", "Goodwin", "Gorczany", "Gottlieb", "Goyette", "Grady", "Graham", "Grant", "Green", "Greenfelder", "Greenholt", "Grimes", "Gulgowski", "Gusikowski", "Gutkowski", "Gutmann", "Haag", "Hackett", "Hagenes", "Hahn", "Haley", "Halvorson", "Hamill", "Hammes", "Hand", "Hane", "Hansen", "Harber", "Harris", "Hartmann", "Harvey", "Hauck", "Hayes", "Heaney", "Heathcote", "Hegmann", "Heidenreich", "Heller", "Herman", "Hermann", "Hermiston", "Herzog", "Hessel", "Hettinger", "Hickle", "Hilll", "Hills", "Hilpert", "Hintz", "Hirthe", "Hodkiewicz", "Hoeger", "Homenick", "Hoppe", "Howe", "Howell", "Hudson", "Huel", "Huels", "Hyatt", "Jacobi", "Jacobs", "Jacobson", "Jakubowski", "Jaskolski", "Jast", "Jenkins", "Jerde", "Johns", "Johnson", "Johnston", "Jones", "Kassulke", "Kautzer", "Keebler", "Keeling", "Kemmer", "Kerluke", "Kertzmann", "Kessler", "Kiehn", "Kihn", "Kilback", "King", "Kirlin", "Klein", "Kling", "Klocko", "Koch", "Koelpin", "Koepp", "Kohler", "Konopelski", "Koss", "Kovacek", "Kozey", "Krajcik", "Kreiger", "Kris", "Kshlerin", "Kub", "Kuhic", "Kuhlman", "Kuhn", "Kulas", "Kunde", "Kunze", "Kuphal", "Kutch", "Kuvalis", "Labadie", "Lakin", "Lang", "Langosh", "Langworth", "Larkin", "Larson", "Leannon", "Lebsack", "Ledner", "Leffler", "Legros", "Lehner", "Lemke", "Lesch", "Leuschke", "Lind", "Lindgren", "Littel", "Little", "Lockman", "Lowe", "Lubowitz", "Lueilwitz", "Luettgen", "Lynch", "Macejkovic", "MacGyver", "Maggio", "Mann", "Mante", "Marks", "Marquardt", "Marvin", "Mayer", "Mayert", "McClure", "McCullough", "McDermott", "McGlynn", "McKenzie", "McLaughlin", "Medhurst", "Mertz", "Metz", "Miller", "Mills", "Mitchell", "Moen", "Mohr", "Monahan", "Moore", "Morar", "Morissette", "Mosciski", "Mraz", "Mueller", "Muller", "Murazik", "Murphy", "Murray", "Nader", "Nicolas", "Nienow", "Nikolaus", "Nitzsche", "Nolan", "Oberbrunner", "O'Connell", "O'Conner", "O'Hara", "O'Keefe", "O'Kon", "Okuneva", "Olson", "Ondricka", "O'Reilly", "Orn", "Ortiz", "Osinski", "Pacocha", "Padberg", "Pagac", "Parisian", "Parker", "Paucek", "Pfannerstill", "Pfeffer", "Pollich", "Pouros", "Powlowski", "Predovic", "Price", "Prohaska", "Prosacco", "Purdy", "Quigley", "Quitzon", "Rath", "Ratke", "Rau", "Raynor", "Reichel", "Reichert", "Reilly", "Reinger", "Rempel", "Renner", "Reynolds", "Rice", "Rippin", "Ritchie", "Robel", "Roberts", "Rodriguez", "Rogahn", "Rohan", "Rolfson", "Romaguera", "Roob", "Rosenbaum", "Rowe", "Ruecker", "Runolfsdottir", "Runolfsson", "Runte", "Russel", "Rutherford", "Ryan", "Sanford", "Satterfield", "Sauer", "Sawayn", "Schaden", "Schaefer", "Schamberger", "Schiller", "Schimmel", "Schinner", "Schmeler", "Schmidt", "Schmitt", "Schneider", "Schoen", "Schowalter", "Schroeder", "Schulist", "Schultz", "Schumm", "Schuppe", "Schuster", "Senger", "Shanahan", "Shields", "Simonis", "Sipes", "Skiles", "Smith", "Smitham", "Spencer", "Spinka", "Sporer", "Stamm", "Stanton", "Stark", "Stehr", "Steuber", "Stiedemann", "Stokes", "Stoltenberg", "Stracke", "Streich", "Stroman", "Strosin", "Swaniawski", "Swift", "Terry", "Thiel", "Thompson", "Tillman", "Torp", "Torphy", "Towne", "Toy", "Trantow", "Tremblay", "Treutel", "Tromp", "Turcotte", "Turner", "Ullrich", "Upton", "Vandervort", "Veum", "Volkman", "Von", "VonRueden", "Waelchi", "Walker", "Walsh", "Walter", "Ward", "Waters", "Watsica", "Weber", "Wehner", "Weimann", "Weissnat", "Welch", "West", "White", "Wiegand", "Wilderman", "Wilkinson", "Will", "Williamson", "Willms", "Windler", "Wintheiser", "Wisoky", "Wisozk", "Witting", "Wiza", "Wolf", "Wolff", "Wuckert", "Wunsch", "Wyman", "Yost", "Yundt", "Zboncak", "Zemlak", "Ziemann", "Zieme", "Zulauf" ];
  }, {} ],
  98: [ function(require, module, exports) {
    module["exports"] = [ "#{prefix} #{first_name} #{last_name}", "#{first_name} #{last_name} #{suffix}", "#{first_name} #{last_name}", "#{first_name} #{last_name}", "#{first_name} #{last_name}", "#{first_name} #{last_name}" ];
  }, {} ],
  99: [ function(require, module, exports) {
    module["exports"] = [ "Mr.", "Mrs.", "Ms.", "Miss", "Dr." ];
  }, {} ],
  100: [ function(require, module, exports) {
    module["exports"] = [ "Jr.", "Sr.", "I", "II", "III", "IV", "V", "MD", "DDS", "PhD", "DVM" ];
  }, {} ],
  101: [ function(require, module, exports) {
    module["exports"] = {
      descriptor: [ "Lead", "Senior", "Direct", "Corporate", "Dynamic", "Future", "Product", "National", "Regional", "District", "Central", "Global", "Customer", "Investor", "Dynamic", "International", "Legacy", "Forward", "Internal", "Human", "Chief", "Principal" ],
      level: [ "Solutions", "Program", "Brand", "Security", "Research", "Marketing", "Directives", "Implementation", "Integration", "Functionality", "Response", "Paradigm", "Tactics", "Identity", "Markets", "Group", "Division", "Applications", "Optimization", "Operations", "Infrastructure", "Intranet", "Communications", "Web", "Branding", "Quality", "Assurance", "Mobility", "Accounts", "Data", "Creative", "Configuration", "Accountability", "Interactions", "Factors", "Usability", "Metrics" ],
      job: [ "Supervisor", "Associate", "Executive", "Liaison", "Officer", "Manager", "Engineer", "Specialist", "Director", "Coordinator", "Administrator", "Architect", "Analyst", "Designer", "Planner", "Orchestrator", "Technician", "Developer", "Producer", "Consultant", "Assistant", "Facilitator", "Agent", "Representative", "Strategist" ]
    };
  }, {} ],
  102: [ function(require, module, exports) {
    module["exports"] = [ "###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####", "###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####", "###-###-#### x###", "(###) ###-#### x###", "1-###-###-#### x###", "###.###.#### x###", "###-###-#### x####", "(###) ###-#### x####", "1-###-###-#### x####", "###.###.#### x####", "###-###-#### x#####", "(###) ###-#### x#####", "1-###-###-#### x#####", "###.###.#### x#####" ];
  }, {} ],
  103: [ function(require, module, exports) {
    var phone_number = {};
    module["exports"] = phone_number;
    phone_number.formats = require("./formats");
  }, {
    "./formats": 102
  } ],
  104: [ function(require, module, exports) {
    var system = {};
    module["exports"] = system;
    system.mimeTypes = require("./mimeTypes");
  }, {
    "./mimeTypes": 105
  } ],
  105: [ function(require, module, exports) {
    module["exports"] = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana"
      },
      "application/3gpp-ims+xml": {
        source: "iana"
      },
      "application/a2l": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: [ "ez" ]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: [ "aw" ]
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "atom" ]
      },
      "application/atomcat+xml": {
        source: "iana",
        extensions: [ "atomcat" ]
      },
      "application/atomdeleted+xml": {
        source: "iana"
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        extensions: [ "atomsvc" ]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana"
      },
      "application/bacnet-xdd+zip": {
        source: "iana"
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: [ "bdoc" ]
      },
      "application/beep+xml": {
        source: "iana"
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana"
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/cbor": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana"
      },
      "application/ccxml+xml": {
        source: "iana",
        extensions: [ "ccxml" ]
      },
      "application/cdfx+xml": {
        source: "iana"
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: [ "cdmia" ]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: [ "cdmic" ]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: [ "cdmid" ]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: [ "cdmio" ]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: [ "cdmiq" ]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana"
      },
      "application/cellml+xml": {
        source: "iana"
      },
      "application/cfw": {
        source: "iana"
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana"
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana"
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana"
      },
      "application/cstadata+xml": {
        source: "iana"
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: [ "cu" ]
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        extensions: [ "mdp" ]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        extensions: [ "davmount" ]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana"
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        extensions: [ "dbk" ]
      },
      "application/dskpp+xml": {
        source: "iana"
      },
      "application/dssc+der": {
        source: "iana",
        extensions: [ "dssc" ]
      },
      "application/dssc+xml": {
        source: "iana",
        extensions: [ "xdssc" ]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: [ "ecma" ]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana"
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana"
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana"
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana"
      },
      "application/emma+xml": {
        source: "iana",
        extensions: [ "emma" ]
      },
      "application/emotionml+xml": {
        source: "iana"
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana"
      },
      "application/epub+zip": {
        source: "iana",
        extensions: [ "epub" ]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: [ "exi" ]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana"
      },
      "application/fits": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: [ "pfr" ]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false,
        extensions: [ "woff" ]
      },
      "application/font-woff2": {
        compressible: false,
        extensions: [ "woff2" ]
      },
      "application/framework-attributes+xml": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "apache",
        extensions: [ "gml" ]
      },
      "application/gpx+xml": {
        source: "apache",
        extensions: [ "gpx" ]
      },
      "application/gxf": {
        source: "apache",
        extensions: [ "gxf" ]
      },
      "application/gzip": {
        source: "iana",
        compressible: false
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana"
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: [ "stk" ]
      },
      "application/ibe-key-request+xml": {
        source: "iana"
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana"
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana"
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        extensions: [ "ink", "inkml" ]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: [ "ipfix" ]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana"
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: [ "jar", "war", "ear" ]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: [ "ser" ]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: [ "class" ]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: [ "js" ]
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: [ "json", "map" ]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: [ "json5" ]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: [ "jsonml" ]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana"
      },
      "application/kpml-response+xml": {
        source: "iana"
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: [ "jsonld" ]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana"
      },
      "application/lost+xml": {
        source: "iana",
        extensions: [ "lostxml" ]
      },
      "application/lostsync+xml": {
        source: "iana"
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: [ "hqx" ]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: [ "cpt" ]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        extensions: [ "mads" ]
      },
      "application/manifest+json": {
        charset: "UTF-8",
        compressible: true,
        extensions: [ "webmanifest" ]
      },
      "application/marc": {
        source: "iana",
        extensions: [ "mrc" ]
      },
      "application/marcxml+xml": {
        source: "iana",
        extensions: [ "mrcx" ]
      },
      "application/mathematica": {
        source: "iana",
        extensions: [ "ma", "nb", "mb" ]
      },
      "application/mathml+xml": {
        source: "iana",
        extensions: [ "mathml" ]
      },
      "application/mathml-content+xml": {
        source: "iana"
      },
      "application/mathml-presentation+xml": {
        source: "iana"
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana"
      },
      "application/mbms-deregister+xml": {
        source: "iana"
      },
      "application/mbms-envelope+xml": {
        source: "iana"
      },
      "application/mbms-msk+xml": {
        source: "iana"
      },
      "application/mbms-msk-response+xml": {
        source: "iana"
      },
      "application/mbms-protection-description+xml": {
        source: "iana"
      },
      "application/mbms-reception-report+xml": {
        source: "iana"
      },
      "application/mbms-register+xml": {
        source: "iana"
      },
      "application/mbms-register-response+xml": {
        source: "iana"
      },
      "application/mbms-schedule+xml": {
        source: "iana"
      },
      "application/mbms-user-service-description+xml": {
        source: "iana"
      },
      "application/mbox": {
        source: "iana",
        extensions: [ "mbox" ]
      },
      "application/media-policy-dataset+xml": {
        source: "iana"
      },
      "application/media_control+xml": {
        source: "iana"
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        extensions: [ "mscml" ]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        extensions: [ "metalink" ]
      },
      "application/metalink4+xml": {
        source: "iana",
        extensions: [ "meta4" ]
      },
      "application/mets+xml": {
        source: "iana",
        extensions: [ "mets" ]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mods+xml": {
        source: "iana",
        extensions: [ "mods" ]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: [ "m21", "mp21" ]
      },
      "application/mp4": {
        source: "iana",
        extensions: [ "mp4s", "m4p" ]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana"
      },
      "application/mrb-publish+xml": {
        source: "iana"
      },
      "application/msc-ivr+xml": {
        source: "iana"
      },
      "application/msc-mixer+xml": {
        source: "iana"
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: [ "doc", "dot" ]
      },
      "application/mxf": {
        source: "iana",
        extensions: [ "mxf" ]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana"
      },
      "application/news-groupinfo": {
        source: "iana"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana"
      },
      "application/nss": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: [ "bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer" ]
      },
      "application/oda": {
        source: "iana",
        extensions: [ "oda" ]
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        extensions: [ "opf" ]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: [ "ogx" ]
      },
      "application/omdoc+xml": {
        source: "apache",
        extensions: [ "omdoc" ]
      },
      "application/onenote": {
        source: "apache",
        extensions: [ "onetoc", "onetoc2", "onetmp", "onepkg" ]
      },
      "application/oxps": {
        source: "iana",
        extensions: [ "oxps" ]
      },
      "application/p2p-overlay+xml": {
        source: "iana"
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        extensions: [ "xer" ]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: [ "pdf" ]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: [ "pgp" ]
      },
      "application/pgp-keys": {
        source: "iana"
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: [ "asc", "sig" ]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: [ "prf" ]
      },
      "application/pidf+xml": {
        source: "iana"
      },
      "application/pidf-diff+xml": {
        source: "iana"
      },
      "application/pkcs10": {
        source: "iana",
        extensions: [ "p10" ]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: [ "p7m", "p7c" ]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: [ "p7s" ]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: [ "p8" ]
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: [ "ac" ]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: [ "cer" ]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: [ "crl" ]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: [ "pkipath" ]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: [ "pki" ]
      },
      "application/pls+xml": {
        source: "iana",
        extensions: [ "pls" ]
      },
      "application/poc-settings+xml": {
        source: "iana"
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: [ "ai", "eps", "ps" ]
      },
      "application/provenance+xml": {
        source: "iana"
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: [ "cww" ]
      },
      "application/prs.hpub+zip": {
        source: "iana"
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana"
      },
      "application/pskc+xml": {
        source: "iana",
        extensions: [ "pskcxml" ]
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "rdf" ]
      },
      "application/reginfo+xml": {
        source: "iana",
        extensions: [ "rif" ]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: [ "rnc" ]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        extensions: [ "rl" ]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        extensions: [ "rld" ]
      },
      "application/rfc+xml": {
        source: "iana"
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana"
      },
      "application/rls-services+xml": {
        source: "iana",
        extensions: [ "rs" ]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: [ "gbr" ]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: [ "mft" ]
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: [ "roa" ]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        extensions: [ "rsd" ]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: [ "rss" ]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: [ "rtf" ]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana"
      },
      "application/samlmetadata+xml": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        extensions: [ "sbml" ]
      },
      "application/scaip+xml": {
        source: "iana"
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: [ "scq" ]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: [ "scs" ]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: [ "spq" ]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: [ "spp" ]
      },
      "application/sdp": {
        source: "iana",
        extensions: [ "sdp" ]
      },
      "application/sep+xml": {
        source: "iana"
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: [ "setpay" ]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: [ "setreg" ]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        extensions: [ "shf" ]
      },
      "application/sieve": {
        source: "iana"
      },
      "application/simple-filter+xml": {
        source: "iana"
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        extensions: [ "smi", "smil" ]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: [ "rq" ]
      },
      "application/sparql-results+xml": {
        source: "iana",
        extensions: [ "srx" ]
      },
      "application/spirits-event+xml": {
        source: "iana"
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: [ "gram" ]
      },
      "application/srgs+xml": {
        source: "iana",
        extensions: [ "grxml" ]
      },
      "application/sru+xml": {
        source: "iana",
        extensions: [ "sru" ]
      },
      "application/ssdl+xml": {
        source: "apache",
        extensions: [ "ssdl" ]
      },
      "application/ssml+xml": {
        source: "iana",
        extensions: [ "ssml" ]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        extensions: [ "tei", "teicorpus" ]
      },
      "application/thraud+xml": {
        source: "iana",
        extensions: [ "tfi" ]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: [ "tsd" ]
      },
      "application/ttml+xml": {
        source: "iana"
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana"
      },
      "application/urc-ressheet+xml": {
        source: "iana"
      },
      "application/urc-targetdesc+xml": {
        source: "iana"
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana"
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana"
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana"
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: [ "plb" ]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: [ "psb" ]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: [ "pvb" ]
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana"
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana"
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana"
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: [ "tcap" ]
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: [ "pwn" ]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: [ "aso" ]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: [ "imp" ]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: [ "acu" ]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: [ "atc", "acutc" ]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        extensions: [ "air" ]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: [ "fcdt" ]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: [ "fxp", "fxpl" ]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        extensions: [ "xdp" ]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: [ "xfdf" ]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: [ "ahead" ]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: [ "azf" ]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: [ "azs" ]
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: [ "azw" ]
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: [ "acc" ]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: [ "ami" ]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: [ "apk" ]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: [ "cii" ]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: [ "fti" ]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: [ "atx" ]
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        extensions: [ "mpkg" ]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: [ "m3u8" ]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: [ "pkpass" ]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: [ "swi" ]
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: [ "iota" ]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: [ "aep" ]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avistar+xml": {
        source: "iana"
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana"
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: [ "mpm" ]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: [ "bmi" ]
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: [ "rep" ]
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        extensions: [ "cdxml" ]
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: [ "mmd" ]
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: [ "cdy" ]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana"
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: [ "cla" ]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: [ "rp9" ]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: [ "c4g", "c4d", "c4f", "c4p", "c4u" ]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: [ "c11amc" ]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: [ "c11amz" ]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: [ "csp" ]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: [ "cdbcmsg" ]
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: [ "cmc" ]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: [ "clkx" ]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: [ "clkk" ]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: [ "clkp" ]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: [ "clkt" ]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: [ "clkw" ]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        extensions: [ "wbs" ]
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: [ "pml" ]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana"
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: [ "ppd" ]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: [ "car" ]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: [ "pcurl" ]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana"
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: [ "dart" ]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: [ "rdz" ]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: [ "uvf", "uvvf", "uvd", "uvvd" ]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        extensions: [ "uvt", "uvvt" ]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: [ "uvx", "uvvx" ]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: [ "uvz", "uvvz" ]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: [ "fe_launch" ]
      },
      "application/vnd.desmume-movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana"
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: [ "dna" ]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: [ "mlp" ]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: [ "dpg" ]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: [ "dfac" ]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: [ "kpxx" ]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: [ "ait" ]
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana"
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana"
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana"
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana"
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana"
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana"
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana"
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: [ "svc" ]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: [ "geo" ]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: [ "mag" ]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana"
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: [ "nml" ]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana"
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: [ "esf" ]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: [ "msf" ]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: [ "qam" ]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: [ "slt" ]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: [ "ssf" ]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        extensions: [ "es3", "et3" ]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana"
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana"
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana"
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana"
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana"
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana"
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana"
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana"
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana"
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana"
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana"
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: [ "ez2" ]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: [ "ez3" ]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: [ "fdf" ]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: [ "mseed" ]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: [ "seed", "dataless" ]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: [ "gph" ]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: [ "ftc" ]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: [ "fm", "frame", "maker", "book" ]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: [ "fnc" ]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: [ "ltf" ]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: [ "fsc" ]
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: [ "oas" ]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: [ "oa2" ]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: [ "oa3" ]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: [ "fg5" ]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: [ "bh2" ]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: [ "ddd" ]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: [ "xdw" ]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: [ "xbd" ]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: [ "fzs" ]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: [ "txd" ]
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana"
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: [ "ggb" ]
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: [ "ggt" ]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: [ "gex", "gre" ]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: [ "gxt" ]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: [ "g2w" ]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: [ "g3w" ]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: [ "gmx" ]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: [ "gdoc" ]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: [ "gslides" ]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: [ "gsheet" ]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "kml" ]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: [ "kmz" ]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana"
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana"
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana"
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: [ "gqf", "gqs" ]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: [ "gac" ]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: [ "ghf" ]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: [ "gim" ]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: [ "grv" ]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: [ "gtm" ]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: [ "tpl" ]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: [ "vcg" ]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        extensions: [ "hal" ]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        extensions: [ "zmm" ]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: [ "hbci" ]
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: [ "les" ]
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: [ "hpgl" ]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: [ "hpid" ]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: [ "hps" ]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: [ "jlt" ]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: [ "pcl" ]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: [ "pclxl" ]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: [ "sfd-hdstx" ]
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: [ "mpy" ]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: [ "afp", "listafp", "list3820" ]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: [ "irm" ]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: [ "sc" ]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: [ "icc", "icm" ]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: [ "igl" ]
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: [ "ivp" ]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: [ "ivu" ]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana"
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana"
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: [ "igm" ]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: [ "xpw", "xpx" ]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: [ "i2g" ]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: [ "qbo" ]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: [ "qfx" ]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana"
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana"
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana"
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana"
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana"
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana"
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana"
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: [ "rcprofile" ]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        extensions: [ "irp" ]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: [ "xpr" ]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: [ "fcs" ]
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: [ "jam" ]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: [ "rms" ]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: [ "jisp" ]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: [ "joda" ]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: [ "ktz", "ktr" ]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: [ "karbon" ]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: [ "chrt" ]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: [ "kfo" ]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: [ "flw" ]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: [ "kon" ]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: [ "kpr", "kpt" ]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: [ "ksp" ]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: [ "kwd", "kwt" ]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: [ "htke" ]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: [ "kia" ]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: [ "kne", "knp" ]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: [ "skp", "skd", "skt", "skm" ]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: [ "sse" ]
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        extensions: [ "lasxml" ]
      },
      "application/vnd.liberty-request+xml": {
        source: "iana"
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: [ "lbd" ]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        extensions: [ "lbe" ]
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: [ "123" ]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: [ "apr" ]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: [ "pre" ]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: [ "nsf" ]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: [ "org" ]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: [ "scm" ]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: [ "lwp" ]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: [ "portpkg" ]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana"
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana"
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana"
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana"
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: [ "mcd" ]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: [ "mc1" ]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: [ "cdkey" ]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: [ "mwf" ]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: [ "mfm" ]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: [ "flo" ]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: [ "igx" ]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: [ "mif" ]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: [ "daf" ]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: [ "dis" ]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: [ "mbk" ]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: [ "mqy" ]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: [ "msl" ]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: [ "plc" ]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: [ "txf" ]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: [ "mpn" ]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: [ "mpc" ]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "xul" ]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: [ "cil" ]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: [ "cab" ]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: [ "xls", "xlm", "xla", "xlc", "xlt", "xlw" ]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: [ "xlam" ]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: [ "xlsb" ]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: [ "xlsm" ]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: [ "xltm" ]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: [ "eot" ]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: [ "chm" ]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: [ "ims" ]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: [ "lrm" ]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana"
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: [ "thmx" ]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: [ "cat" ]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: [ "stl" ]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana"
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: [ "ppt", "pps", "pot" ]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: [ "ppam" ]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: [ "pptm" ]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: [ "sldm" ]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: [ "ppsm" ]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: [ "potm" ]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana"
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache"
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: [ "mpp", "mpt" ]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: [ "docm" ]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: [ "dotm" ]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: [ "wps", "wks", "wcm", "wdb" ]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: [ "wpl" ]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: [ "xps" ]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: [ "mseq" ]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: [ "mus" ]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: [ "msty" ]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: [ "taglet" ]
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: [ "nlu" ]
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: [ "ntf", "nitf" ]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: [ "nnd" ]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: [ "nns" ]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: [ "nnw" ]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana"
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana"
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana"
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana"
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana"
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: [ "ngdat" ]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: [ "n-gage" ]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana"
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: [ "rpst" ]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: [ "rpss" ]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: [ "edm" ]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: [ "edx" ]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: [ "ext" ]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: [ "odc" ]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: [ "otc" ]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: [ "odb" ]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: [ "odf" ]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: [ "odft" ]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: [ "odg" ]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: [ "otg" ]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: [ "odi" ]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: [ "oti" ]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: [ "odp" ]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: [ "otp" ]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: [ "ods" ]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: [ "ots" ]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: [ "odt" ]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: [ "odm" ]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: [ "ott" ]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: [ "oth" ]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana"
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana"
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana"
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana"
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana"
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana"
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana"
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana"
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana"
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: [ "xo" ]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana"
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana"
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana"
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana"
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana"
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana"
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        extensions: [ "dd2" ]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana"
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana"
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana"
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana"
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana"
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana"
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana"
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana"
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana"
      },
      "application/vnd.omads-email+xml": {
        source: "iana"
      },
      "application/vnd.omads-file+xml": {
        source: "iana"
      },
      "application/vnd.omads-folder+xml": {
        source: "iana"
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana"
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: [ "oxt" ]
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml-template": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: [ "pptx" ]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: [ "sldx" ]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: [ "ppsx" ]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "apache",
        extensions: [ "potx" ]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: [ "xlsx" ]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "apache",
        extensions: [ "xltx" ]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: [ "docx" ]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "apache",
        extensions: [ "dotx" ]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana"
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana"
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: [ "mgp" ]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: [ "dp" ]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: [ "esa" ]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana"
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: [ "pdb", "pqa", "oprc" ]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos+xml": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "apache"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: [ "paw" ]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: [ "str" ]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: [ "ei6" ]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: [ "efif" ]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: [ "wg" ]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana"
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: [ "plf" ]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: [ "pbd" ]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: [ "box" ]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: [ "mgz" ]
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: [ "qps" ]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: [ "ptid" ]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana"
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: [ "qxd", "qxt", "qwd", "qwt", "qxl", "qxb" ]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana"
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana"
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: [ "bed" ]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: [ "mxl" ]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        extensions: [ "musicxml" ]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: [ "cryptonote" ]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: [ "cod" ]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: [ "rm" ]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: [ "rmvb" ]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        extensions: [ "link66" ]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: [ "st" ]
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: [ "see" ]
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: [ "sema" ]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: [ "semd" ]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: [ "semf" ]
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: [ "ifm" ]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: [ "itp" ]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: [ "iif" ]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: [ "ipk" ]
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: [ "twd", "twds" ]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: [ "mmf" ]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: [ "teacher" ]
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana"
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        extensions: [ "sdkm", "sdkd" ]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: [ "dxp" ]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: [ "sfs" ]
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: [ "sdc" ]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: [ "sda" ]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: [ "sdd" ]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: [ "smf" ]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: [ "sdw", "vor" ]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: [ "sgl" ]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: [ "smzip" ]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: [ "sm" ]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana"
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: [ "sxc" ]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: [ "stc" ]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: [ "sxd" ]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: [ "std" ]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: [ "sxi" ]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: [ "sti" ]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: [ "sxm" ]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: [ "sxw" ]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: [ "sxg" ]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: [ "stw" ]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: [ "sus", "susp" ]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: [ "svd" ]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: [ "sis", "sisx" ]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        extensions: [ "xsm" ]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        extensions: [ "bdm" ]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        extensions: [ "xdm" ]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana"
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: [ "tao" ]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: [ "pcap", "cap", "dmp" ]
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana"
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: [ "tmo" ]
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: [ "tpt" ]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: [ "mxs" ]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: [ "tra" ]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: [ "ufd", "ufdl" ]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: [ "utz" ]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: [ "umj" ]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: [ "unityweb" ]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        extensions: [ "uoml" ]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: [ "vcx" ]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: [ "vsd", "vst", "vss", "vsw" ]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: [ "vis" ]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: [ "vsf" ]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        extensions: [ "wbxml" ]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: [ "wmlc" ]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: [ "wmlsc" ]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: [ "wtb" ]
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: [ "nbp" ]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: [ "wpd" ]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: [ "wqd" ]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: [ "stf" ]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana"
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana"
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: [ "xar" ]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: [ "xfdl" ]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana"
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: [ "hvd" ]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: [ "hvs" ]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: [ "hvp" ]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: [ "osf" ]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        extensions: [ "osfpvg" ]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: [ "saf" ]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: [ "spf" ]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: [ "cmp" ]
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: [ "zir", "zirz" ]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        extensions: [ "zaz" ]
      },
      "application/voicexml+xml": {
        source: "iana",
        extensions: [ "vxml" ]
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/watcherinfo+xml": {
        source: "iana"
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: [ "wgt" ]
      },
      "application/winhlp": {
        source: "apache",
        extensions: [ "hlp" ]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        extensions: [ "wsdl" ]
      },
      "application/wspolicy+xml": {
        source: "iana",
        extensions: [ "wspolicy" ]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: [ "7z" ]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: [ "abw" ]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: [ "ace" ]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: [ "dmg" ]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: [ "aab", "x32", "u32", "vox" ]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: [ "aam" ]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: [ "aas" ]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: [ "bcpio" ]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: [ "bdoc" ]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: [ "torrent" ]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: [ "blb", "blorb" ]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: [ "bz" ]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: [ "bz2", "boz" ]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: [ "cbr", "cba", "cbt", "cbz", "cb7" ]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: [ "vcd" ]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: [ "cfs" ]
      },
      "application/x-chat": {
        source: "apache",
        extensions: [ "chat" ]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: [ "pgn" ]
      },
      "application/x-chrome-extension": {
        extensions: [ "crx" ]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: [ "cco" ]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: [ "nsc" ]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: [ "cpio" ]
      },
      "application/x-csh": {
        source: "apache",
        extensions: [ "csh" ]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: [ "deb", "udeb" ]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: [ "dgc" ]
      },
      "application/x-director": {
        source: "apache",
        extensions: [ "dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa" ]
      },
      "application/x-doom": {
        source: "apache",
        extensions: [ "wad" ]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        extensions: [ "ncx" ]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        extensions: [ "dtb" ]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        extensions: [ "res" ]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: [ "dvi" ]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: [ "evy" ]
      },
      "application/x-eva": {
        source: "apache",
        extensions: [ "eva" ]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: [ "bdf" ]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: [ "gsf" ]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: [ "psf" ]
      },
      "application/x-font-otf": {
        source: "apache",
        compressible: true,
        extensions: [ "otf" ]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: [ "pcf" ]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: [ "snf" ]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-ttf": {
        source: "apache",
        compressible: true,
        extensions: [ "ttf", "ttc" ]
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: [ "pfa", "pfb", "pfm", "afm" ]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: [ "arc" ]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: [ "spl" ]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: [ "gca" ]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: [ "ulx" ]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: [ "gnumeric" ]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: [ "gramps" ]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: [ "gtar" ]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: [ "hdf" ]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: [ "php" ]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: [ "install" ]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: [ "iso" ]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: [ "jardiff" ]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: [ "jnlp" ]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: [ "latex" ]
      },
      "application/x-lua-bytecode": {
        extensions: [ "luac" ]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: [ "lzh", "lha" ]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: [ "run" ]
      },
      "application/x-mie": {
        source: "apache",
        extensions: [ "mie" ]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: [ "prc", "mobi" ]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: [ "application" ]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: [ "lnk" ]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: [ "wmd" ]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: [ "wmz" ]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: [ "xbap" ]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: [ "mdb" ]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: [ "obd" ]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: [ "crd" ]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: [ "clp" ]
      },
      "application/x-msdos-program": {
        extensions: [ "exe" ]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: [ "exe", "dll", "com", "bat", "msi" ]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: [ "mvb", "m13", "m14" ]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: [ "wmf", "wmz", "emf", "emz" ]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: [ "mny" ]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: [ "pub" ]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: [ "scd" ]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: [ "trm" ]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: [ "wri" ]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: [ "nc", "cdf" ]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: [ "pac" ]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: [ "nzb" ]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: [ "pl", "pm" ]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: [ "prc", "pdb" ]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: [ "p12", "pfx" ]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: [ "p7b", "spc" ]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: [ "p7r" ]
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: [ "rar" ]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: [ "rpm" ]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: [ "ris" ]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: [ "sea" ]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: [ "sh" ]
      },
      "application/x-shar": {
        source: "apache",
        extensions: [ "shar" ]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: [ "swf" ]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: [ "xap" ]
      },
      "application/x-sql": {
        source: "apache",
        extensions: [ "sql" ]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: [ "sit" ]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: [ "sitx" ]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: [ "srt" ]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: [ "sv4cpio" ]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: [ "sv4crc" ]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: [ "t3" ]
      },
      "application/x-tads": {
        source: "apache",
        extensions: [ "gam" ]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: [ "tar" ]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: [ "tcl", "tk" ]
      },
      "application/x-tex": {
        source: "apache",
        extensions: [ "tex" ]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: [ "tfm" ]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: [ "texinfo", "texi" ]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: [ "obj" ]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: [ "ustar" ]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: [ "src" ]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: [ "webapp" ]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "apache",
        extensions: [ "der", "crt", "pem" ]
      },
      "application/x-xfig": {
        source: "apache",
        extensions: [ "fig" ]
      },
      "application/x-xliff+xml": {
        source: "apache",
        extensions: [ "xlf" ]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: [ "xpi" ]
      },
      "application/x-xz": {
        source: "apache",
        extensions: [ "xz" ]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: [ "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8" ]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana"
      },
      "application/xaml+xml": {
        source: "apache",
        extensions: [ "xaml" ]
      },
      "application/xcap-att+xml": {
        source: "iana"
      },
      "application/xcap-caps+xml": {
        source: "iana"
      },
      "application/xcap-diff+xml": {
        source: "iana",
        extensions: [ "xdf" ]
      },
      "application/xcap-el+xml": {
        source: "iana"
      },
      "application/xcap-error+xml": {
        source: "iana"
      },
      "application/xcap-ns+xml": {
        source: "iana"
      },
      "application/xcon-conference-info+xml": {
        source: "iana"
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana"
      },
      "application/xenc+xml": {
        source: "iana",
        extensions: [ "xenc" ]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "xhtml", "xht" ]
      },
      "application/xhtml-voice+xml": {
        source: "apache"
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: [ "xml", "xsl", "xsd" ]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: [ "dtd" ]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana"
      },
      "application/xmpp+xml": {
        source: "iana"
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "xop" ]
      },
      "application/xproc+xml": {
        source: "apache",
        extensions: [ "xpl" ]
      },
      "application/xslt+xml": {
        source: "iana",
        extensions: [ "xslt" ]
      },
      "application/xspf+xml": {
        source: "apache",
        extensions: [ "xspf" ]
      },
      "application/xv+xml": {
        source: "iana",
        extensions: [ "mxml", "xhvml", "xvml", "xvm" ]
      },
      "application/yang": {
        source: "iana",
        extensions: [ "yang" ]
      },
      "application/yin+xml": {
        source: "iana",
        extensions: [ "yin" ]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: [ "zip" ]
      },
      "application/zlib": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana"
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: [ "adp" ]
      },
      "audio/amr": {
        source: "iana"
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: [ "au", "snd" ]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: [ "mid", "midi", "kar", "rmi" ]
      },
      "audio/mobile-xmf": {
        source: "iana"
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: [ "mp4a", "m4a" ]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: [ "mpga", "mp2", "mp2a", "mp3", "m2a", "m3a" ]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: [ "oga", "ogg", "spx" ]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: [ "s3m" ]
      },
      "audio/silk": {
        source: "apache",
        extensions: [ "sil" ]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: [ "uva", "uvva" ]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: [ "eol" ]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: [ "dra" ]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: [ "dts" ]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: [ "dtshd" ]
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: [ "lvp" ]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: [ "pya" ]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: [ "ecelp4800" ]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: [ "ecelp7470" ]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: [ "ecelp9600" ]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: [ "rip" ]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: [ "wav" ]
      },
      "audio/wave": {
        compressible: false,
        extensions: [ "wav" ]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: [ "weba" ]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: [ "aac" ]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: [ "aif", "aiff", "aifc" ]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: [ "caf" ]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: [ "flac" ]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: [ "m4a" ]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: [ "mka" ]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: [ "m3u" ]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: [ "wax" ]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: [ "wma" ]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: [ "ram", "ra" ]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: [ "rmp" ]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: [ "ra" ]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: [ "wav" ]
      },
      "audio/xm": {
        source: "apache",
        extensions: [ "xm" ]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: [ "cdx" ]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: [ "cif" ]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: [ "cmdf" ]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: [ "cml" ]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: [ "csml" ]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: [ "xyz" ]
      },
      "font/opentype": {
        compressible: true,
        extensions: [ "otf" ]
      },
      "image/bmp": {
        source: "apache",
        compressible: true,
        extensions: [ "bmp" ]
      },
      "image/cgm": {
        source: "iana",
        extensions: [ "cgm" ]
      },
      "image/fits": {
        source: "iana"
      },
      "image/g3fax": {
        source: "iana",
        extensions: [ "g3" ]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: [ "gif" ]
      },
      "image/ief": {
        source: "iana",
        extensions: [ "ief" ]
      },
      "image/jp2": {
        source: "iana"
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: [ "jpeg", "jpg", "jpe" ]
      },
      "image/jpm": {
        source: "iana"
      },
      "image/jpx": {
        source: "iana"
      },
      "image/ktx": {
        source: "iana",
        extensions: [ "ktx" ]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: [ "png" ]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: [ "btif" ]
      },
      "image/prs.pti": {
        source: "iana"
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: [ "sgi" ]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "svg", "svgz" ]
      },
      "image/t38": {
        source: "iana"
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: [ "tiff", "tif" ]
      },
      "image/tiff-fx": {
        source: "iana"
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: [ "psd" ]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana"
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: [ "uvi", "uvvi", "uvg", "uvvg" ]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: [ "djvu", "djv" ]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: [ "sub" ]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: [ "dwg" ]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: [ "dxf" ]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: [ "fbs" ]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: [ "fpx" ]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: [ "fst" ]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: [ "mmr" ]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: [ "rlc" ]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana"
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: [ "mdi" ]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: [ "wdp" ]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: [ "npx" ]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana"
      },
      "image/vnd.valve.source.texture": {
        source: "iana"
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: [ "wbmp" ]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: [ "xif" ]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana"
      },
      "image/webp": {
        source: "apache",
        extensions: [ "webp" ]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: [ "3ds" ]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: [ "ras" ]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: [ "cmx" ]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: [ "fh", "fhc", "fh4", "fh5", "fh7" ]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: [ "ico" ]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: [ "jng" ]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: [ "sid" ]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: [ "bmp" ]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: [ "pcx" ]
      },
      "image/x-pict": {
        source: "apache",
        extensions: [ "pic", "pct" ]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: [ "pnm" ]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: [ "pbm" ]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: [ "pgm" ]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: [ "ppm" ]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: [ "rgb" ]
      },
      "image/x-tga": {
        source: "apache",
        extensions: [ "tga" ]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: [ "xbm" ]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: [ "xpm" ]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: [ "xwd" ]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana"
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana"
      },
      "message/global-delivery-status": {
        source: "iana"
      },
      "message/global-disposition-notification": {
        source: "iana"
      },
      "message/global-headers": {
        source: "iana"
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: [ "eml", "mime" ]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana"
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: [ "igs", "iges" ]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: [ "msh", "mesh", "silo" ]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        extensions: [ "dae" ]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: [ "dwf" ]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: [ "gdl" ]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: [ "gtw" ]
      },
      "model/vnd.moml+xml": {
        source: "iana"
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: [ "mts" ]
      },
      "model/vnd.opengex": {
        source: "iana"
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana"
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana"
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana"
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: [ "vtu" ]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: [ "wrl", "vrml" ]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: [ "x3db", "x3dbz" ]
      },
      "model/x3d+fastinfoset": {
        source: "iana"
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: [ "x3dv", "x3dvz" ]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: [ "x3d", "x3dz" ]
      },
      "model/x3d-vrml": {
        source: "iana"
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana",
        compressible: false
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: [ "appcache", "manifest" ]
      },
      "text/calendar": {
        source: "iana",
        extensions: [ "ics", "ifb" ]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: [ "coffee", "litcoffee" ]
      },
      "text/css": {
        source: "iana",
        compressible: true,
        extensions: [ "css" ]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: [ "csv" ]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/hjson": {
        extensions: [ "hjson" ]
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: [ "html", "htm", "shtml" ]
      },
      "text/jade": {
        extensions: [ "jade" ]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: [ "jsx" ]
      },
      "text/less": {
        extensions: [ "less" ]
      },
      "text/markdown": {
        source: "iana"
      },
      "text/mathml": {
        source: "nginx",
        extensions: [ "mml" ]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        compressible: true,
        extensions: [ "n3" ]
      },
      "text/parameters": {
        source: "iana"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: [ "txt", "text", "conf", "def", "list", "log", "in", "ini" ]
      },
      "text/provenance-notation": {
        source: "iana"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: [ "dsc" ]
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: [ "rtx" ]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: [ "rtf" ]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: [ "sgml", "sgm" ]
      },
      "text/stylus": {
        extensions: [ "stylus", "styl" ]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: [ "tsv" ]
      },
      "text/troff": {
        source: "iana",
        extensions: [ "t", "tr", "roff", "man", "me", "ms" ]
      },
      "text/turtle": {
        source: "iana",
        extensions: [ "ttl" ]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: [ "uri", "uris", "urls" ]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: [ "vcard" ]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: [ "curl" ]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: [ "dcurl" ]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: [ "mcurl" ]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: [ "scurl" ]
      },
      "text/vnd.debian.copyright": {
        source: "iana"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: [ "sub" ]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: [ "fly" ]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: [ "flx" ]
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: [ "gv" ]
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: [ "3dml" ]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: [ "spot" ]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        extensions: [ "jad" ]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: [ "wml" ]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: [ "wmls" ]
      },
      "text/vtt": {
        charset: "UTF-8",
        compressible: true,
        extensions: [ "vtt" ]
      },
      "text/x-asm": {
        source: "apache",
        extensions: [ "s", "asm" ]
      },
      "text/x-c": {
        source: "apache",
        extensions: [ "c", "cc", "cxx", "cpp", "h", "hh", "dic" ]
      },
      "text/x-component": {
        source: "nginx",
        extensions: [ "htc" ]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: [ "f", "for", "f77", "f90" ]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: [ "hbs" ]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: [ "java" ]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: [ "lua" ]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: [ "markdown", "md", "mkd" ]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: [ "nfo" ]
      },
      "text/x-opml": {
        source: "apache",
        extensions: [ "opml" ]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: [ "p", "pas" ]
      },
      "text/x-processing": {
        compressible: true,
        extensions: [ "pde" ]
      },
      "text/x-sass": {
        extensions: [ "sass" ]
      },
      "text/x-scss": {
        extensions: [ "scss" ]
      },
      "text/x-setext": {
        source: "apache",
        extensions: [ "etx" ]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: [ "sfv" ]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: [ "ymp" ]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: [ "uu" ]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: [ "vcs" ]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: [ "vcf" ]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: [ "xml" ]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        extensions: [ "yaml", "yml" ]
      },
      "video/1d-interleaved-parityfec": {
        source: "apache"
      },
      "video/3gpp": {
        source: "apache",
        extensions: [ "3gp", "3gpp" ]
      },
      "video/3gpp-tt": {
        source: "apache"
      },
      "video/3gpp2": {
        source: "apache",
        extensions: [ "3g2" ]
      },
      "video/bmpeg": {
        source: "apache"
      },
      "video/bt656": {
        source: "apache"
      },
      "video/celb": {
        source: "apache"
      },
      "video/dv": {
        source: "apache"
      },
      "video/h261": {
        source: "apache",
        extensions: [ "h261" ]
      },
      "video/h263": {
        source: "apache",
        extensions: [ "h263" ]
      },
      "video/h263-1998": {
        source: "apache"
      },
      "video/h263-2000": {
        source: "apache"
      },
      "video/h264": {
        source: "apache",
        extensions: [ "h264" ]
      },
      "video/h264-rcdo": {
        source: "apache"
      },
      "video/h264-svc": {
        source: "apache"
      },
      "video/jpeg": {
        source: "apache",
        extensions: [ "jpgv" ]
      },
      "video/jpeg2000": {
        source: "apache"
      },
      "video/jpm": {
        source: "apache",
        extensions: [ "jpm", "jpgm" ]
      },
      "video/mj2": {
        source: "apache",
        extensions: [ "mj2", "mjp2" ]
      },
      "video/mp1s": {
        source: "apache"
      },
      "video/mp2p": {
        source: "apache"
      },
      "video/mp2t": {
        source: "apache",
        extensions: [ "ts" ]
      },
      "video/mp4": {
        source: "apache",
        compressible: false,
        extensions: [ "mp4", "mp4v", "mpg4" ]
      },
      "video/mp4v-es": {
        source: "apache"
      },
      "video/mpeg": {
        source: "apache",
        compressible: false,
        extensions: [ "mpeg", "mpg", "mpe", "m1v", "m2v" ]
      },
      "video/mpeg4-generic": {
        source: "apache"
      },
      "video/mpv": {
        source: "apache"
      },
      "video/nv": {
        source: "apache"
      },
      "video/ogg": {
        source: "apache",
        compressible: false,
        extensions: [ "ogv" ]
      },
      "video/parityfec": {
        source: "apache"
      },
      "video/pointer": {
        source: "apache"
      },
      "video/quicktime": {
        source: "apache",
        compressible: false,
        extensions: [ "qt", "mov" ]
      },
      "video/raw": {
        source: "apache"
      },
      "video/rtp-enc-aescm128": {
        source: "apache"
      },
      "video/rtx": {
        source: "apache"
      },
      "video/smpte292m": {
        source: "apache"
      },
      "video/ulpfec": {
        source: "apache"
      },
      "video/vc1": {
        source: "apache"
      },
      "video/vnd.cctv": {
        source: "apache"
      },
      "video/vnd.dece.hd": {
        source: "apache",
        extensions: [ "uvh", "uvvh" ]
      },
      "video/vnd.dece.mobile": {
        source: "apache",
        extensions: [ "uvm", "uvvm" ]
      },
      "video/vnd.dece.mp4": {
        source: "apache"
      },
      "video/vnd.dece.pd": {
        source: "apache",
        extensions: [ "uvp", "uvvp" ]
      },
      "video/vnd.dece.sd": {
        source: "apache",
        extensions: [ "uvs", "uvvs" ]
      },
      "video/vnd.dece.video": {
        source: "apache",
        extensions: [ "uvv", "uvvv" ]
      },
      "video/vnd.directv.mpeg": {
        source: "apache"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "apache"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "apache"
      },
      "video/vnd.dvb.file": {
        source: "apache",
        extensions: [ "dvb" ]
      },
      "video/vnd.fvt": {
        source: "apache",
        extensions: [ "fvt" ]
      },
      "video/vnd.hns.video": {
        source: "apache"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "apache"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "apache"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "apache"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "apache"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "apache"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "apache"
      },
      "video/vnd.motorola.video": {
        source: "apache"
      },
      "video/vnd.motorola.videop": {
        source: "apache"
      },
      "video/vnd.mpegurl": {
        source: "apache",
        extensions: [ "mxu", "m4u" ]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "apache",
        extensions: [ "pyv" ]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "apache"
      },
      "video/vnd.nokia.videovoip": {
        source: "apache"
      },
      "video/vnd.objectvideo": {
        source: "apache"
      },
      "video/vnd.sealed.mpeg1": {
        source: "apache"
      },
      "video/vnd.sealed.mpeg4": {
        source: "apache"
      },
      "video/vnd.sealed.swf": {
        source: "apache"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "apache"
      },
      "video/vnd.uvvu.mp4": {
        source: "apache",
        extensions: [ "uvu", "uvvu" ]
      },
      "video/vnd.vivo": {
        source: "apache",
        extensions: [ "viv" ]
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: [ "webm" ]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: [ "f4v" ]
      },
      "video/x-fli": {
        source: "apache",
        extensions: [ "fli" ]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: [ "flv" ]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: [ "m4v" ]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: [ "mkv", "mk3d", "mks" ]
      },
      "video/x-mng": {
        source: "apache",
        extensions: [ "mng" ]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: [ "asf", "asx" ]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: [ "vob" ]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: [ "wm" ]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: [ "wmv" ]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: [ "wmx" ]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: [ "wvx" ]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: [ "avi" ]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: [ "movie" ]
      },
      "video/x-smv": {
        source: "apache",
        extensions: [ "smv" ]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: [ "ice" ]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }, {} ],
  106: [ function(require, module, exports) {
    module["exports"] = [ "ants", "bats", "bears", "bees", "birds", "buffalo", "cats", "chickens", "cattle", "dogs", "dolphins", "ducks", "elephants", "fishes", "foxes", "frogs", "geese", "goats", "horses", "kangaroos", "lions", "monkeys", "owls", "oxen", "penguins", "people", "pigs", "rabbits", "sheep", "tigers", "whales", "wolves", "zebras", "banshees", "crows", "black cats", "chimeras", "ghosts", "conspirators", "dragons", "dwarves", "elves", "enchanters", "exorcists", "sons", "foes", "giants", "gnomes", "goblins", "gooses", "griffins", "lycanthropes", "nemesis", "ogres", "oracles", "prophets", "sorcerors", "spiders", "spirits", "vampires", "warlocks", "vixens", "werewolves", "witches", "worshipers", "zombies", "druids" ];
  }, {} ],
  107: [ function(require, module, exports) {
    var team = {};
    module["exports"] = team;
    team.creature = require("./creature");
    team.name = require("./name");
  }, {
    "./creature": 106,
    "./name": 108
  } ],
  108: [ function(require, module, exports) {
    module["exports"] = [ "#{Address.state} #{creature}" ];
  }, {} ],
  109: [ function(require, module, exports) {
    var Lorem = function(faker) {
      var self = this;
      var Helpers = faker.helpers;
      self.word = function(num) {
        return faker.random.arrayElement(faker.definitions.lorem.words);
      };
      self.words = function(num) {
        "undefined" == typeof num && (num = 3);
        var words = [];
        for (var i = 0; i < num; i++) words.push(faker.lorem.word());
        return words.join(" ");
      };
      self.sentence = function(wordCount, range) {
        "undefined" == typeof wordCount && (wordCount = faker.random.number({
          min: 3,
          max: 10
        }));
        var sentence = faker.lorem.words(wordCount);
        return sentence.charAt(0).toUpperCase() + sentence.slice(1) + ".";
      };
      self.slug = function(wordCount) {
        var words = faker.lorem.words(wordCount);
        return Helpers.slugify(words);
      };
      self.sentences = function(sentenceCount, separator) {
        "undefined" === typeof sentenceCount && (sentenceCount = faker.random.number({
          min: 2,
          max: 6
        }));
        "undefined" == typeof separator && (separator = " ");
        var sentences = [];
        for (sentenceCount; sentenceCount > 0; sentenceCount--) sentences.push(faker.lorem.sentence());
        return sentences.join(separator);
      };
      self.paragraph = function(sentenceCount) {
        "undefined" == typeof sentenceCount && (sentenceCount = 3);
        return faker.lorem.sentences(sentenceCount + faker.random.number(3));
      };
      self.paragraphs = function(paragraphCount, separator) {
        "undefined" === typeof separator && (separator = "\n \r");
        "undefined" == typeof paragraphCount && (paragraphCount = 3);
        var paragraphs = [];
        for (paragraphCount; paragraphCount > 0; paragraphCount--) paragraphs.push(faker.lorem.paragraph());
        return paragraphs.join(separator);
      };
      self.text = function loremText(times) {
        var loremMethods = [ "lorem.word", "lorem.words", "lorem.sentence", "lorem.sentences", "lorem.paragraph", "lorem.paragraphs", "lorem.lines" ];
        var randomLoremMethod = faker.random.arrayElement(loremMethods);
        return faker.fake("{{" + randomLoremMethod + "}}");
      };
      self.lines = function lines(lineCount) {
        "undefined" === typeof lineCount && (lineCount = faker.random.number({
          min: 1,
          max: 5
        }));
        return faker.lorem.sentences(lineCount, "\n");
      };
      return self;
    };
    module["exports"] = Lorem;
  }, {} ],
  110: [ function(require, module, exports) {
    function Name(faker) {
      this.firstName = function(gender) {
        if ("undefined" !== typeof faker.definitions.name.male_first_name && "undefined" !== typeof faker.definitions.name.female_first_name) {
          "number" !== typeof gender && (gender = faker.random.number(1));
          return 0 === gender ? faker.random.arrayElement(faker.locales[faker.locale].name.male_first_name) : faker.random.arrayElement(faker.locales[faker.locale].name.female_first_name);
        }
        return faker.random.arrayElement(faker.definitions.name.first_name);
      };
      this.lastName = function(gender) {
        if ("undefined" !== typeof faker.definitions.name.male_last_name && "undefined" !== typeof faker.definitions.name.female_last_name) {
          "number" !== typeof gender && (gender = faker.random.number(1));
          return 0 === gender ? faker.random.arrayElement(faker.locales[faker.locale].name.male_last_name) : faker.random.arrayElement(faker.locales[faker.locale].name.female_last_name);
        }
        return faker.random.arrayElement(faker.definitions.name.last_name);
      };
      this.findName = function(firstName, lastName, gender) {
        var r = faker.random.number(8);
        var prefix, suffix;
        "number" !== typeof gender && (gender = faker.random.number(1));
        firstName = firstName || faker.name.firstName(gender);
        lastName = lastName || faker.name.lastName(gender);
        switch (r) {
         case 0:
          prefix = faker.name.prefix(gender);
          if (prefix) return prefix + " " + firstName + " " + lastName;

         case 1:
          suffix = faker.name.suffix(gender);
          if (suffix) return firstName + " " + lastName + " " + suffix;
        }
        return firstName + " " + lastName;
      };
      this.jobTitle = function() {
        return faker.name.jobDescriptor() + " " + faker.name.jobArea() + " " + faker.name.jobType();
      };
      this.prefix = function(gender) {
        if ("undefined" !== typeof faker.definitions.name.male_prefix && "undefined" !== typeof faker.definitions.name.female_prefix) {
          "number" !== typeof gender && (gender = faker.random.number(1));
          return 0 === gender ? faker.random.arrayElement(faker.locales[faker.locale].name.male_prefix) : faker.random.arrayElement(faker.locales[faker.locale].name.female_prefix);
        }
        return faker.random.arrayElement(faker.definitions.name.prefix);
      };
      this.suffix = function() {
        return faker.random.arrayElement(faker.definitions.name.suffix);
      };
      this.title = function() {
        var descriptor = faker.random.arrayElement(faker.definitions.name.title.descriptor), level = faker.random.arrayElement(faker.definitions.name.title.level), job = faker.random.arrayElement(faker.definitions.name.title.job);
        return descriptor + " " + level + " " + job;
      };
      this.jobDescriptor = function() {
        return faker.random.arrayElement(faker.definitions.name.title.descriptor);
      };
      this.jobArea = function() {
        return faker.random.arrayElement(faker.definitions.name.title.level);
      };
      this.jobType = function() {
        return faker.random.arrayElement(faker.definitions.name.title.job);
      };
    }
    module["exports"] = Name;
  }, {} ],
  111: [ function(require, module, exports) {
    var Phone = function(faker) {
      var self = this;
      self.phoneNumber = function(format) {
        format = format || faker.phone.phoneFormats();
        return faker.helpers.replaceSymbolWithNumber(format);
      };
      self.phoneNumberFormat = function(phoneFormatsArrayIndex) {
        phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
        return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
      };
      self.phoneFormats = function() {
        return faker.random.arrayElement(faker.definitions.phone_number.formats);
      };
      return self;
    };
    module["exports"] = Phone;
  }, {} ],
  112: [ function(require, module, exports) {
    var mersenne = require("../vendor/mersenne");
    function Random(faker, seed) {
      seed && (Array.isArray(seed) && seed.length ? mersenne.seed_array(seed) : mersenne.seed(seed));
      this.number = function(options) {
        "number" === typeof options && (options = {
          max: options
        });
        options = options || {};
        "undefined" === typeof options.min && (options.min = 0);
        "undefined" === typeof options.max && (options.max = 99999);
        "undefined" === typeof options.precision && (options.precision = 1);
        var max = options.max;
        max >= 0 && (max += options.precision);
        var randomNumber = options.precision * Math.floor(mersenne.rand(max / options.precision, options.min / options.precision));
        return randomNumber;
      };
      this.arrayElement = function(array) {
        array = array || [ "a", "b", "c" ];
        var r = faker.random.number({
          max: array.length - 1
        });
        return array[r];
      };
      this.objectElement = function(object, field) {
        object = object || {
          foo: "bar",
          too: "car"
        };
        var array = Object.keys(object);
        var key = faker.random.arrayElement(array);
        return "key" === field ? key : object[key];
      };
      this.uuid = function() {
        var self = this;
        var RFC4122_TEMPLATE = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
        var replacePlaceholders = function(placeholder) {
          var random = self.number({
            min: 0,
            max: 15
          });
          var value = "x" == placeholder ? random : 3 & random | 8;
          return value.toString(16);
        };
        return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
      };
      this.boolean = function() {
        return !!faker.random.number(1);
      };
      this.word = function randomWord(type) {
        var wordMethods = [ "commerce.department", "commerce.productName", "commerce.productAdjective", "commerce.productMaterial", "commerce.product", "commerce.color", "company.catchPhraseAdjective", "company.catchPhraseDescriptor", "company.catchPhraseNoun", "company.bsAdjective", "company.bsBuzz", "company.bsNoun", "address.streetSuffix", "address.county", "address.country", "address.state", "finance.accountName", "finance.transactionType", "finance.currencyName", "hacker.noun", "hacker.verb", "hacker.adjective", "hacker.ingverb", "hacker.abbreviation", "name.jobDescriptor", "name.jobArea", "name.jobType" ];
        var randomWordMethod = faker.random.arrayElement(wordMethods);
        return faker.fake("{{" + randomWordMethod + "}}");
      };
      this.words = function randomWords(count) {
        var words = [];
        "undefined" === typeof count && (count = faker.random.number({
          min: 1,
          max: 3
        }));
        for (var i = 0; i < count; i++) words.push(faker.random.word());
        return words.join(" ");
      };
      this.image = function randomImage() {
        return faker.image.image();
      };
      this.locale = function randomLocale() {
        return faker.random.arrayElement(Object.keys(faker.locales));
      };
      this.alphaNumeric = function alphaNumeric(count) {
        "undefined" === typeof count && (count = 1);
        var wholeString = "";
        for (var i = 0; i < count; i++) wholeString += faker.random.arrayElement([ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ]);
        return wholeString;
      };
      return this;
    }
    module["exports"] = Random;
  }, {
    "../vendor/mersenne": 115
  } ],
  113: [ function(require, module, exports) {
    function System(faker) {
      this.fileName = function(ext, type) {
        var str = faker.fake("{{random.words}}.{{system.fileExt}}");
        str = str.replace(/ /g, "_");
        str = str.replace(/\,/g, "_");
        str = str.replace(/\-/g, "_");
        str = str.replace(/\\/g, "_");
        str = str.replace(/\//g, "_");
        str = str.toLowerCase();
        return str;
      };
      this.commonFileName = function(ext, type) {
        var str = faker.random.words() + "." + (ext || faker.system.commonFileExt());
        str = str.replace(/ /g, "_");
        str = str.replace(/\,/g, "_");
        str = str.replace(/\-/g, "_");
        str = str.replace(/\\/g, "_");
        str = str.replace(/\//g, "_");
        str = str.toLowerCase();
        return str;
      };
      this.mimeType = function() {
        return faker.random.arrayElement(Object.keys(faker.definitions.system.mimeTypes));
      };
      this.commonFileType = function() {
        var types = [ "video", "audio", "image", "text", "application" ];
        return faker.random.arrayElement(types);
      };
      this.commonFileExt = function(type) {
        var types = [ "application/pdf", "audio/mpeg", "audio/wav", "image/png", "image/jpeg", "image/gif", "video/mp4", "video/mpeg", "text/html" ];
        return faker.system.fileExt(faker.random.arrayElement(types));
      };
      this.fileType = function() {
        var types = [];
        var mimes = faker.definitions.system.mimeTypes;
        Object.keys(mimes).forEach(function(m) {
          var parts = m.split("/");
          -1 === types.indexOf(parts[0]) && types.push(parts[0]);
        });
        return faker.random.arrayElement(types);
      };
      this.fileExt = function(mimeType) {
        var exts = [];
        var mimes = faker.definitions.system.mimeTypes;
        if ("object" === typeof mimes[mimeType]) return faker.random.arrayElement(mimes[mimeType].extensions);
        Object.keys(mimes).forEach(function(m) {
          mimes[m].extensions instanceof Array && mimes[m].extensions.forEach(function(ext) {
            exts.push(ext);
          });
        });
        return faker.random.arrayElement(exts);
      };
      this.directoryPath = function() {};
      this.filePath = function() {};
      this.semver = function() {
        return [ faker.random.number(9), faker.random.number(9), faker.random.number(9) ].join(".");
      };
    }
    module["exports"] = System;
  }, {} ],
  114: [ function(require, module, exports) {
    var Faker = require("../lib");
    var faker = new Faker({
      locale: "en",
      localeFallback: "en"
    });
    faker.locales["en"] = require("../lib/locales/en");
    faker.locales["en"] = require("../lib/locales/en");
    module["exports"] = faker;
  }, {
    "../lib": 14,
    "../lib/locales/en": 86
  } ],
  115: [ function(require, module, exports) {
    function MersenneTwister19937() {
      var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
      N = 624;
      M = 397;
      MATRIX_A = 2567483615;
      UPPER_MASK = 2147483648;
      LOWER_MASK = 2147483647;
      var mt = new Array(N);
      var mti = N + 1;
      function unsigned32(n1) {
        return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
      }
      function subtraction32(n1, n2) {
        return n1 < n2 ? unsigned32(4294967296 - (n2 - n1) & 4294967295) : n1 - n2;
      }
      function addition32(n1, n2) {
        return unsigned32(n1 + n2 & 4294967295);
      }
      function multiplication32(n1, n2) {
        var sum = 0;
        for (var i = 0; i < 32; ++i) n1 >>> i & 1 && (sum = addition32(sum, unsigned32(n2 << i)));
        return sum;
      }
      this.init_genrand = function(s) {
        mt[0] = unsigned32(4294967295 & s);
        for (mti = 1; mti < N; mti++) {
          mt[mti] = addition32(multiplication32(1812433253, unsigned32(mt[mti - 1] ^ mt[mti - 1] >>> 30)), mti);
          mt[mti] = unsigned32(4294967295 & mt[mti]);
        }
      };
      this.init_by_array = function(init_key, key_length) {
        var i, j, k;
        this.init_genrand(19650218);
        i = 1;
        j = 0;
        k = N > key_length ? N : key_length;
        for (;k; k--) {
          mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i - 1] ^ mt[i - 1] >>> 30), 1664525)), init_key[j]), j);
          mt[i] = unsigned32(4294967295 & mt[i]);
          i++;
          j++;
          if (i >= N) {
            mt[0] = mt[N - 1];
            i = 1;
          }
          j >= key_length && (j = 0);
        }
        for (k = N - 1; k; k--) {
          mt[i] = subtraction32(unsigned32((dbg = mt[i]) ^ multiplication32(unsigned32(mt[i - 1] ^ mt[i - 1] >>> 30), 1566083941)), i);
          mt[i] = unsigned32(4294967295 & mt[i]);
          i++;
          if (i >= N) {
            mt[0] = mt[N - 1];
            i = 1;
          }
        }
        mt[0] = 2147483648;
      };
      var mag01 = [ 0, MATRIX_A ];
      this.genrand_int32 = function() {
        var y;
        if (mti >= N) {
          var kk;
          mti == N + 1 && this.init_genrand(5489);
          for (kk = 0; kk < N - M; kk++) {
            y = unsigned32(mt[kk] & UPPER_MASK | mt[kk + 1] & LOWER_MASK);
            mt[kk] = unsigned32(mt[kk + M] ^ y >>> 1 ^ mag01[1 & y]);
          }
          for (;kk < N - 1; kk++) {
            y = unsigned32(mt[kk] & UPPER_MASK | mt[kk + 1] & LOWER_MASK);
            mt[kk] = unsigned32(mt[kk + (M - N)] ^ y >>> 1 ^ mag01[1 & y]);
          }
          y = unsigned32(mt[N - 1] & UPPER_MASK | mt[0] & LOWER_MASK);
          mt[N - 1] = unsigned32(mt[M - 1] ^ y >>> 1 ^ mag01[1 & y]);
          mti = 0;
        }
        y = mt[mti++];
        y = unsigned32(y ^ y >>> 11);
        y = unsigned32(y ^ y << 7 & 2636928640);
        y = unsigned32(y ^ y << 15 & 4022730752);
        y = unsigned32(y ^ y >>> 18);
        return y;
      };
      this.genrand_int31 = function() {
        return this.genrand_int32() >>> 1;
      };
      this.genrand_real1 = function() {
        return this.genrand_int32() * (1 / 4294967295);
      };
      this.genrand_real2 = function() {
        return this.genrand_int32() * (1 / 4294967296);
      };
      this.genrand_real3 = function() {
        return (this.genrand_int32() + .5) * (1 / 4294967296);
      };
      this.genrand_res53 = function() {
        var a = this.genrand_int32() >>> 5, b = this.genrand_int32() >>> 6;
        return (67108864 * a + b) * (1 / 9007199254740992);
      };
    }
    exports.MersenneTwister19937 = MersenneTwister19937;
    var gen = new MersenneTwister19937();
    gen.init_genrand(new Date().getTime() % 1e9);
    exports.rand = function(max, min) {
      if (void 0 === max) {
        min = 0;
        max = 32768;
      }
      return Math.floor(gen.genrand_real2() * (max - min) + min);
    };
    exports.seed = function(S) {
      if ("number" != typeof S) throw new Error("seed(S) must take numeric argument; is " + typeof S);
      gen.init_genrand(S);
    };
    exports.seed_array = function(A) {
      if ("object" != typeof A) throw new Error("seed_array(A) must take array of numbers; is " + typeof A);
      gen.init_by_array(A);
    };
  }, {} ],
  116: [ function(require, module, exports) {
    function rnd(a, b) {
      a = a || 0;
      b = b || 100;
      if ("number" === typeof b && "number" === typeof a) return function(min, max) {
        if (min > max) throw new RangeError("expected min <= max; got min = " + min + ", max = " + max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }(a, b);
      if ("[object Array]" === Object.prototype.toString.call(a)) return a[Math.floor(Math.random() * a.length)];
      if (a && "object" === typeof a) return function(obj) {
        var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;
        for (key in obj) if (obj.hasOwnProperty(key)) {
          max = obj[key] + min;
          return_val = key;
          if (rand >= min && rand <= max) break;
          min += obj[key];
        }
        return return_val;
      }(a);
      throw new TypeError("Invalid arguments passed to rnd. (" + (b ? a + ", " + b : a) + ")");
    }
    function randomLang() {
      return rnd([ "AB", "AF", "AN", "AR", "AS", "AZ", "BE", "BG", "BN", "BO", "BR", "BS", "CA", "CE", "CO", "CS", "CU", "CY", "DA", "DE", "EL", "EN", "EO", "ES", "ET", "EU", "FA", "FI", "FJ", "FO", "FR", "FY", "GA", "GD", "GL", "GV", "HE", "HI", "HR", "HT", "HU", "HY", "ID", "IS", "IT", "JA", "JV", "KA", "KG", "KO", "KU", "KW", "KY", "LA", "LB", "LI", "LN", "LT", "LV", "MG", "MK", "MN", "MO", "MS", "MT", "MY", "NB", "NE", "NL", "NN", "NO", "OC", "PL", "PT", "RM", "RO", "RU", "SC", "SE", "SK", "SL", "SO", "SQ", "SR", "SV", "SW", "TK", "TR", "TY", "UK", "UR", "UZ", "VI", "VO", "YI", "ZH" ]);
    }
    function randomBrowserAndOS() {
      var browser = rnd({
        chrome: .45132810566,
        iexplorer: .27477061836,
        firefox: .19384170608,
        safari: .06186781118,
        opera: .01574236955
      }), os = {
        chrome: {
          win: .89,
          mac: .09,
          lin: .02
        },
        firefox: {
          win: .83,
          mac: .16,
          lin: .01
        },
        opera: {
          win: .91,
          mac: .03,
          lin: .06
        },
        safari: {
          win: .04,
          mac: .96
        },
        iexplorer: [ "win" ]
      };
      return [ browser, rnd(os[browser]) ];
    }
    function randomProc(arch) {
      var procs = {
        lin: [ "i686", "x86_64" ],
        mac: {
          Intel: .48,
          PPC: .01,
          "U; Intel": .48,
          "U; PPC": .01
        },
        win: [ "", "WOW64", "Win64; x64" ]
      };
      return rnd(procs[arch]);
    }
    function randomRevision(dots) {
      var return_val = "";
      for (var x = 0; x < dots; x++) return_val += "." + rnd(0, 9);
      return return_val;
    }
    var version_string = {
      net: function() {
        return [ rnd(1, 4), rnd(0, 9), rnd(1e4, 99999), rnd(0, 9) ].join(".");
      },
      nt: function() {
        return rnd(5, 6) + "." + rnd(0, 3);
      },
      ie: function() {
        return rnd(7, 11);
      },
      trident: function() {
        return rnd(3, 7) + "." + rnd(0, 1);
      },
      osx: function(delim) {
        return [ 10, rnd(5, 10), rnd(0, 9) ].join(delim || ".");
      },
      chrome: function() {
        return [ rnd(13, 39), 0, rnd(800, 899), 0 ].join(".");
      },
      presto: function() {
        return "2.9." + rnd(160, 190);
      },
      presto2: function() {
        return rnd(10, 12) + ".00";
      },
      safari: function() {
        return rnd(531, 538) + "." + rnd(0, 2) + "." + rnd(0, 2);
      }
    };
    var browser = {
      firefox: function firefox(arch) {
        var firefox_ver = rnd(5, 15) + randomRevision(2), gecko_ver = "Gecko/20100101 Firefox/" + firefox_ver, proc = randomProc(arch), os_ver = "win" === arch ? "(Windows NT " + version_string.nt() + (proc ? "; " + proc : "") : "mac" === arch ? "(Macintosh; " + proc + " Mac OS X " + version_string.osx() : "(X11; Linux " + proc;
        return "Mozilla/5.0 " + os_ver + "; rv:" + firefox_ver.slice(0, -2) + ") " + gecko_ver;
      },
      iexplorer: function iexplorer() {
        var ver = version_string.ie();
        if (ver >= 11) return "Mozilla/5.0 (Windows NT 6." + rnd(1, 3) + "; Trident/7.0; " + rnd([ "Touch; ", "" ]) + "rv:11.0) like Gecko";
        return "Mozilla/5.0 (compatible; MSIE " + ver + ".0; Windows NT " + version_string.nt() + "; Trident/" + version_string.trident() + (1 === rnd(0, 1) ? "; .NET CLR " + version_string.net() : "") + ")";
      },
      opera: function opera(arch) {
        var presto_ver = " Presto/" + version_string.presto() + " Version/" + version_string.presto2() + ")", os_ver = "win" === arch ? "(Windows NT " + version_string.nt() + "; U; " + randomLang() + presto_ver : "lin" === arch ? "(X11; Linux " + randomProc(arch) + "; U; " + randomLang() + presto_ver : "(Macintosh; Intel Mac OS X " + version_string.osx() + " U; " + randomLang() + " Presto/" + version_string.presto() + " Version/" + version_string.presto2() + ")";
        return "Opera/" + rnd(9, 14) + "." + rnd(0, 99) + " " + os_ver;
      },
      safari: function safari(arch) {
        var safari = version_string.safari(), ver = rnd(4, 7) + "." + rnd(0, 1) + "." + rnd(0, 10), os_ver = "mac" === arch ? "(Macintosh; " + randomProc("mac") + " Mac OS X " + version_string.osx("_") + " rv:" + rnd(2, 6) + ".0; " + randomLang() + ") " : "(Windows; U; Windows NT " + version_string.nt() + ")";
        return "Mozilla/5.0 " + os_ver + "AppleWebKit/" + safari + " (KHTML, like Gecko) Version/" + ver + " Safari/" + safari;
      },
      chrome: function chrome(arch) {
        var safari = version_string.safari(), os_ver = "mac" === arch ? "(Macintosh; " + randomProc("mac") + " Mac OS X " + version_string.osx("_") + ") " : "win" === arch ? "(Windows; U; Windows NT " + version_string.nt() + ")" : "(X11; Linux " + randomProc(arch);
        return "Mozilla/5.0 " + os_ver + " AppleWebKit/" + safari + " (KHTML, like Gecko) Chrome/" + version_string.chrome() + " Safari/" + safari;
      }
    };
    exports.generate = function generate() {
      var random = randomBrowserAndOS();
      return browser[random[0]](random[1]);
    };
  }, {} ],
  117: [ function(require, module, exports) {
    (function(global) {
      var _gsScope = "undefined" !== typeof module && module.exports && "undefined" !== typeof global ? global : this || window;
      (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function() {
        "use strict";
        _gsScope._gsDefine("TweenMax", [ "core.Animation", "core.SimpleTimeline", "TweenLite" ], function(Animation, SimpleTimeline, TweenLite) {
          var _slice = function(a) {
            var b = [], l = a.length, i;
            for (i = 0; i !== l; b.push(a[i++])) ;
            return b;
          }, _applyCycle = function(vars, targets, i) {
            var alt = vars.cycle, p, val;
            for (p in alt) {
              val = alt[p];
              vars[p] = "function" === typeof val ? val(i, targets[i]) : val[i % val.length];
            }
            delete vars.cycle;
          }, TweenMax = function(target, duration, vars) {
            TweenLite.call(this, target, duration, vars);
            this._cycle = 0;
            this._yoyo = true === this.vars.yoyo || !!this.vars.yoyoEase;
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._repeat && this._uncache(true);
            this.render = TweenMax.prototype.render;
          }, _tinyNum = 1e-10, TweenLiteInternals = TweenLite._internals, _isSelector = TweenLiteInternals.isSelector, _isArray = TweenLiteInternals.isArray, p = TweenMax.prototype = TweenLite.to({}, .1, {}), _blankArray = [];
          TweenMax.version = "2.0.2";
          p.constructor = TweenMax;
          p.kill()._gc = false;
          TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
          TweenMax.getTweensOf = TweenLite.getTweensOf;
          TweenMax.lagSmoothing = TweenLite.lagSmoothing;
          TweenMax.ticker = TweenLite.ticker;
          TweenMax.render = TweenLite.render;
          p.invalidate = function() {
            this._yoyo = true === this.vars.yoyo || !!this.vars.yoyoEase;
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._yoyoEase = null;
            this._uncache(true);
            return TweenLite.prototype.invalidate.call(this);
          };
          p.updateTo = function(vars, resetDuration) {
            var curRatio = this.ratio, immediate = this.vars.immediateRender || vars.immediateRender, p;
            if (resetDuration && this._startTime < this._timeline._time) {
              this._startTime = this._timeline._time;
              this._uncache(false);
              this._gc ? this._enabled(true, false) : this._timeline.insert(this, this._startTime - this._delay);
            }
            for (p in vars) this.vars[p] = vars[p];
            if (this._initted || immediate) if (resetDuration) {
              this._initted = false;
              immediate && this.render(0, true, true);
            } else {
              this._gc && this._enabled(true, false);
              this._notifyPluginsOfEnabled && this._firstPT && TweenLite._onPluginEvent("_onDisable", this);
              if (this._time / this._duration > .998) {
                var prevTime = this._totalTime;
                this.render(0, true, false);
                this._initted = false;
                this.render(prevTime, true, false);
              } else {
                this._initted = false;
                this._init();
                if (this._time > 0 || immediate) {
                  var inv = 1 / (1 - curRatio), pt = this._firstPT, endValue;
                  while (pt) {
                    endValue = pt.s + pt.c;
                    pt.c *= inv;
                    pt.s = endValue - pt.c;
                    pt = pt._next;
                  }
                }
              }
            }
            return this;
          };
          p.render = function(time, suppressEvents, force) {
            this._initted || 0 === this._duration && this.vars.repeat && this.invalidate();
            var totalDur = this._dirty ? this.totalDuration() : this._totalDuration, prevTime = this._time, prevTotalTime = this._totalTime, prevCycle = this._cycle, duration = this._duration, prevRawPrevTime = this._rawPrevTime, isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime, yoyoEase;
            if (time >= totalDur - 1e-7 && time >= 0) {
              this._totalTime = totalDur;
              this._cycle = this._repeat;
              if (this._yoyo && 0 !== (1 & this._cycle)) {
                this._time = 0;
                this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
              } else {
                this._time = duration;
                this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
              }
              if (!this._reversed) {
                isComplete = true;
                callback = "onComplete";
                force = force || this._timeline.autoRemoveChildren;
              }
              if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                this._startTime === this._timeline._duration && (time = 0);
                if ((prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || prevRawPrevTime === _tinyNum && "isPause" !== this.data) && prevRawPrevTime !== time) {
                  force = true;
                  prevRawPrevTime > _tinyNum && (callback = "onReverseComplete");
                }
                this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum;
              }
            } else if (time < 1e-7) {
              this._totalTime = this._time = this._cycle = 0;
              this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
              if (0 !== prevTotalTime || 0 === duration && prevRawPrevTime > 0) {
                callback = "onReverseComplete";
                isComplete = this._reversed;
              }
              if (time < 0) {
                this._active = false;
                if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                  prevRawPrevTime >= 0 && (force = true);
                  this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum;
                }
              }
              this._initted || (force = true);
            } else {
              this._totalTime = this._time = time;
              if (0 !== this._repeat) {
                cycleDuration = duration + this._repeatDelay;
                this._cycle = this._totalTime / cycleDuration >> 0;
                0 !== this._cycle && this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time && this._cycle--;
                this._time = this._totalTime - this._cycle * cycleDuration;
                if (this._yoyo && 0 !== (1 & this._cycle)) {
                  this._time = duration - this._time;
                  yoyoEase = this._yoyoEase || this.vars.yoyoEase;
                  if (yoyoEase) {
                    if (!this._yoyoEase) if (true !== yoyoEase || this._initted) this._yoyoEase = yoyoEase = true === yoyoEase ? this._ease : yoyoEase instanceof Ease ? yoyoEase : Ease.map[yoyoEase]; else {
                      yoyoEase = this.vars.ease;
                      this._yoyoEase = yoyoEase = yoyoEase ? yoyoEase instanceof Ease ? yoyoEase : "function" === typeof yoyoEase ? new Ease(yoyoEase, this.vars.easeParams) : Ease.map[yoyoEase] || TweenLite.defaultEase : TweenLite.defaultEase;
                    }
                    this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;
                  }
                }
                this._time > duration ? this._time = duration : this._time < 0 && (this._time = 0);
              }
              if (this._easeType && !yoyoEase) {
                r = this._time / duration;
                type = this._easeType;
                pow = this._easePower;
                (1 === type || 3 === type && r >= .5) && (r = 1 - r);
                3 === type && (r *= 2);
                1 === pow ? r *= r : 2 === pow ? r *= r * r : 3 === pow ? r *= r * r * r : 4 === pow && (r *= r * r * r * r);
                1 === type ? this.ratio = 1 - r : 2 === type ? this.ratio = r : this._time / duration < .5 ? this.ratio = r / 2 : this.ratio = 1 - r / 2;
              } else yoyoEase || (this.ratio = this._ease.getRatio(this._time / duration));
            }
            if (prevTime === this._time && !force && prevCycle === this._cycle) {
              prevTotalTime !== this._totalTime && this._onUpdate && (suppressEvents || this._callback("onUpdate"));
              return;
            }
            if (!this._initted) {
              this._init();
              if (!this._initted || this._gc) return;
              if (!force && this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration)) {
                this._time = prevTime;
                this._totalTime = prevTotalTime;
                this._rawPrevTime = prevRawPrevTime;
                this._cycle = prevCycle;
                TweenLiteInternals.lazyTweens.push(this);
                this._lazy = [ time, suppressEvents ];
                return;
              }
              !this._time || isComplete || yoyoEase ? isComplete && this._ease._calcEnd && !yoyoEase && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1)) : this.ratio = this._ease.getRatio(this._time / duration);
            }
            false !== this._lazy && (this._lazy = false);
            this._active || !this._paused && this._time !== prevTime && time >= 0 && (this._active = true);
            if (0 === prevTotalTime) {
              2 === this._initted && time > 0 && this._init();
              this._startAt && (time >= 0 ? this._startAt.render(time, true, force) : callback || (callback = "_dummyGS"));
              this.vars.onStart && (0 === this._totalTime && 0 !== duration || suppressEvents || this._callback("onStart"));
            }
            pt = this._firstPT;
            while (pt) {
              pt.f ? pt.t[pt.p](pt.c * this.ratio + pt.s) : pt.t[pt.p] = pt.c * this.ratio + pt.s;
              pt = pt._next;
            }
            if (this._onUpdate) {
              time < 0 && this._startAt && this._startTime && this._startAt.render(time, true, force);
              suppressEvents || (this._totalTime !== prevTotalTime || callback) && this._callback("onUpdate");
            }
            this._cycle !== prevCycle && (suppressEvents || this._gc || this.vars.onRepeat && this._callback("onRepeat"));
            if (callback && (!this._gc || force)) {
              time < 0 && this._startAt && !this._onUpdate && this._startTime && this._startAt.render(time, true, force);
              if (isComplete) {
                this._timeline.autoRemoveChildren && this._enabled(false, false);
                this._active = false;
              }
              !suppressEvents && this.vars[callback] && this._callback(callback);
              0 === duration && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum && (this._rawPrevTime = 0);
            }
          };
          TweenMax.to = function(target, duration, vars) {
            return new TweenMax(target, duration, vars);
          };
          TweenMax.from = function(target, duration, vars) {
            vars.runBackwards = true;
            vars.immediateRender = false != vars.immediateRender;
            return new TweenMax(target, duration, vars);
          };
          TweenMax.fromTo = function(target, duration, fromVars, toVars) {
            toVars.startAt = fromVars;
            toVars.immediateRender = false != toVars.immediateRender && false != fromVars.immediateRender;
            return new TweenMax(target, duration, toVars);
          };
          TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            stagger = stagger || 0;
            var delay = 0, a = [], finalComplete = function() {
              vars.onComplete && vars.onComplete.apply(vars.onCompleteScope || this, arguments);
              onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
            }, cycle = vars.cycle, fromCycle = vars.startAt && vars.startAt.cycle, l, copy, i, p;
            if (!_isArray(targets)) {
              "string" === typeof targets && (targets = TweenLite.selector(targets) || targets);
              _isSelector(targets) && (targets = _slice(targets));
            }
            targets = targets || [];
            if (stagger < 0) {
              targets = _slice(targets);
              targets.reverse();
              stagger *= -1;
            }
            l = targets.length - 1;
            for (i = 0; i <= l; i++) {
              copy = {};
              for (p in vars) copy[p] = vars[p];
              if (cycle) {
                _applyCycle(copy, targets, i);
                if (null != copy.duration) {
                  duration = copy.duration;
                  delete copy.duration;
                }
              }
              if (fromCycle) {
                fromCycle = copy.startAt = {};
                for (p in vars.startAt) fromCycle[p] = vars.startAt[p];
                _applyCycle(copy.startAt, targets, i);
              }
              copy.delay = delay + (copy.delay || 0);
              i === l && onCompleteAll && (copy.onComplete = finalComplete);
              a[i] = new TweenMax(targets[i], duration, copy);
              delay += stagger;
            }
            return a;
          };
          TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            vars.runBackwards = true;
            vars.immediateRender = false != vars.immediateRender;
            return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
          };
          TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            toVars.startAt = fromVars;
            toVars.immediateRender = false != toVars.immediateRender && false != fromVars.immediateRender;
            return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
          };
          TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
            return new TweenMax(callback, 0, {
              delay: delay,
              onComplete: callback,
              onCompleteParams: params,
              callbackScope: scope,
              onReverseComplete: callback,
              onReverseCompleteParams: params,
              immediateRender: false,
              useFrames: useFrames,
              overwrite: 0
            });
          };
          TweenMax.set = function(target, vars) {
            return new TweenMax(target, 0, vars);
          };
          TweenMax.isTweening = function(target) {
            return TweenLite.getTweensOf(target, true).length > 0;
          };
          var _getChildrenOf = function(timeline, includeTimelines) {
            var a = [], cnt = 0, tween = timeline._first;
            while (tween) {
              if (tween instanceof TweenLite) a[cnt++] = tween; else {
                includeTimelines && (a[cnt++] = tween);
                a = a.concat(_getChildrenOf(tween, includeTimelines));
                cnt = a.length;
              }
              tween = tween._next;
            }
            return a;
          }, getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
            return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline, includeTimelines));
          };
          TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
            null == tweens && (tweens = true);
            null == delayedCalls && (delayedCalls = true);
            var a = getAllTweens(false != timelines), l = a.length, allTrue = tweens && delayedCalls && timelines, isDC, tween, i;
            for (i = 0; i < l; i++) {
              tween = a[i];
              (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) && (complete ? tween.totalTime(tween._reversed ? 0 : tween.totalDuration()) : tween._enabled(false, false));
            }
          };
          TweenMax.killChildTweensOf = function(parent, complete) {
            if (null == parent) return;
            var tl = TweenLiteInternals.tweenLookup, a, curParent, p, i, l;
            "string" === typeof parent && (parent = TweenLite.selector(parent) || parent);
            _isSelector(parent) && (parent = _slice(parent));
            if (_isArray(parent)) {
              i = parent.length;
              while (--i > -1) TweenMax.killChildTweensOf(parent[i], complete);
              return;
            }
            a = [];
            for (p in tl) {
              curParent = tl[p].target.parentNode;
              while (curParent) {
                curParent === parent && (a = a.concat(tl[p].tweens));
                curParent = curParent.parentNode;
              }
            }
            l = a.length;
            for (i = 0; i < l; i++) {
              complete && a[i].totalTime(a[i].totalDuration());
              a[i]._enabled(false, false);
            }
          };
          var _changePause = function(pause, tweens, delayedCalls, timelines) {
            tweens = false !== tweens;
            delayedCalls = false !== delayedCalls;
            timelines = false !== timelines;
            var a = getAllTweens(timelines), allTrue = tweens && delayedCalls && timelines, i = a.length, isDC, tween;
            while (--i > -1) {
              tween = a[i];
              (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) && tween.paused(pause);
            }
          };
          TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
            _changePause(true, tweens, delayedCalls, timelines);
          };
          TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
            _changePause(false, tweens, delayedCalls, timelines);
          };
          TweenMax.globalTimeScale = function(value) {
            var tl = Animation._rootTimeline, t = TweenLite.ticker.time;
            if (!arguments.length) return tl._timeScale;
            value = value || _tinyNum;
            tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;
            tl = Animation._rootFramesTimeline;
            t = TweenLite.ticker.frame;
            tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;
            tl._timeScale = Animation._rootTimeline._timeScale = value;
            return value;
          };
          p.progress = function(value, suppressEvents) {
            return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 !== (1 & this._cycle) ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents) : this._time / this.duration();
          };
          p.totalProgress = function(value, suppressEvents) {
            return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this._totalTime / this.totalDuration();
          };
          p.time = function(value, suppressEvents) {
            if (!arguments.length) return this._time;
            this._dirty && this.totalDuration();
            value > this._duration && (value = this._duration);
            this._yoyo && 0 !== (1 & this._cycle) ? value = this._duration - value + this._cycle * (this._duration + this._repeatDelay) : 0 !== this._repeat && (value += this._cycle * (this._duration + this._repeatDelay));
            return this.totalTime(value, suppressEvents);
          };
          p.duration = function(value) {
            if (!arguments.length) return this._duration;
            return Animation.prototype.duration.call(this, value);
          };
          p.totalDuration = function(value) {
            if (!arguments.length) {
              if (this._dirty) {
                this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;
                this._dirty = false;
              }
              return this._totalDuration;
            }
            return -1 === this._repeat ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));
          };
          p.repeat = function(value) {
            if (!arguments.length) return this._repeat;
            this._repeat = value;
            return this._uncache(true);
          };
          p.repeatDelay = function(value) {
            if (!arguments.length) return this._repeatDelay;
            this._repeatDelay = value;
            return this._uncache(true);
          };
          p.yoyo = function(value) {
            if (!arguments.length) return this._yoyo;
            this._yoyo = value;
            return this;
          };
          return TweenMax;
        }, true);
        _gsScope._gsDefine("TimelineLite", [ "core.Animation", "core.SimpleTimeline", "TweenLite" ], function(Animation, SimpleTimeline, TweenLite) {
          var TimelineLite = function(vars) {
            SimpleTimeline.call(this, vars);
            this._labels = {};
            this.autoRemoveChildren = true === this.vars.autoRemoveChildren;
            this.smoothChildTiming = true === this.vars.smoothChildTiming;
            this._sortChildren = true;
            this._onUpdate = this.vars.onUpdate;
            var v = this.vars, val, p;
            for (p in v) {
              val = v[p];
              _isArray(val) && -1 !== val.join("").indexOf("{self}") && (v[p] = this._swapSelfInParams(val));
            }
            _isArray(v.tweens) && this.add(v.tweens, 0, v.align, v.stagger);
          }, _tinyNum = 1e-10, TweenLiteInternals = TweenLite._internals, _internals = TimelineLite._internals = {}, _isSelector = TweenLiteInternals.isSelector, _isArray = TweenLiteInternals.isArray, _lazyTweens = TweenLiteInternals.lazyTweens, _lazyRender = TweenLiteInternals.lazyRender, _globals = _gsScope._gsDefine.globals, _copy = function(vars) {
            var copy = {}, p;
            for (p in vars) copy[p] = vars[p];
            return copy;
          }, _applyCycle = function(vars, targets, i) {
            var alt = vars.cycle, p, val;
            for (p in alt) {
              val = alt[p];
              vars[p] = "function" === typeof val ? val(i, targets[i]) : val[i % val.length];
            }
            delete vars.cycle;
          }, _pauseCallback = _internals.pauseCallback = function() {}, _slice = function(a) {
            var b = [], l = a.length, i;
            for (i = 0; i !== l; b.push(a[i++])) ;
            return b;
          }, p = TimelineLite.prototype = new SimpleTimeline();
          TimelineLite.version = "2.0.2";
          p.constructor = TimelineLite;
          p.kill()._gc = p._forcingPlayhead = p._hasPause = false;
          p.to = function(target, duration, vars, position) {
            var Engine = vars.repeat && _globals.TweenMax || TweenLite;
            return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);
          };
          p.from = function(target, duration, vars, position) {
            return this.add((vars.repeat && _globals.TweenMax || TweenLite).from(target, duration, vars), position);
          };
          p.fromTo = function(target, duration, fromVars, toVars, position) {
            var Engine = toVars.repeat && _globals.TweenMax || TweenLite;
            return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
          };
          p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            var tl = new TimelineLite({
              onComplete: onCompleteAll,
              onCompleteParams: onCompleteAllParams,
              callbackScope: onCompleteAllScope,
              smoothChildTiming: this.smoothChildTiming
            }), cycle = vars.cycle, copy, i;
            "string" === typeof targets && (targets = TweenLite.selector(targets) || targets);
            targets = targets || [];
            _isSelector(targets) && (targets = _slice(targets));
            stagger = stagger || 0;
            if (stagger < 0) {
              targets = _slice(targets);
              targets.reverse();
              stagger *= -1;
            }
            for (i = 0; i < targets.length; i++) {
              copy = _copy(vars);
              if (copy.startAt) {
                copy.startAt = _copy(copy.startAt);
                copy.startAt.cycle && _applyCycle(copy.startAt, targets, i);
              }
              if (cycle) {
                _applyCycle(copy, targets, i);
                if (null != copy.duration) {
                  duration = copy.duration;
                  delete copy.duration;
                }
              }
              tl.to(targets[i], duration, copy, i * stagger);
            }
            return this.add(tl, position);
          };
          p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            vars.immediateRender = false != vars.immediateRender;
            vars.runBackwards = true;
            return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
          };
          p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            toVars.startAt = fromVars;
            toVars.immediateRender = false != toVars.immediateRender && false != fromVars.immediateRender;
            return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
          };
          p.call = function(callback, params, scope, position) {
            return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
          };
          p.set = function(target, vars, position) {
            position = this._parseTimeOrLabel(position, 0, true);
            null == vars.immediateRender && (vars.immediateRender = position === this._time && !this._paused);
            return this.add(new TweenLite(target, 0, vars), position);
          };
          TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
            vars = vars || {};
            null == vars.smoothChildTiming && (vars.smoothChildTiming = true);
            var tl = new TimelineLite(vars), root = tl._timeline, hasNegativeStart, time, tween, next;
            null == ignoreDelayedCalls && (ignoreDelayedCalls = true);
            root._remove(tl, true);
            tl._startTime = 0;
            tl._rawPrevTime = tl._time = tl._totalTime = root._time;
            tween = root._first;
            while (tween) {
              next = tween._next;
              if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                time = tween._startTime - tween._delay;
                time < 0 && (hasNegativeStart = 1);
                tl.add(tween, time);
              }
              tween = next;
            }
            root.add(tl, 0);
            hasNegativeStart && tl.totalDuration();
            return tl;
          };
          p.add = function(value, position, align, stagger) {
            var curTime, l, i, child, tl, beforeRawTime;
            "number" !== typeof position && (position = this._parseTimeOrLabel(position, 0, true, value));
            if (!(value instanceof Animation)) {
              if (value instanceof Array || value && value.push && _isArray(value)) {
                align = align || "normal";
                stagger = stagger || 0;
                curTime = position;
                l = value.length;
                for (i = 0; i < l; i++) {
                  _isArray(child = value[i]) && (child = new TimelineLite({
                    tweens: child
                  }));
                  this.add(child, curTime);
                  "string" !== typeof child && "function" !== typeof child && ("sequence" === align ? curTime = child._startTime + child.totalDuration() / child._timeScale : "start" === align && (child._startTime -= child.delay()));
                  curTime += stagger;
                }
                return this._uncache(true);
              }
              if ("string" === typeof value) return this.addLabel(value, position);
              if ("function" !== typeof value) throw "Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.";
              value = TweenLite.delayedCall(0, value);
            }
            SimpleTimeline.prototype.add.call(this, value, position);
            if (value._time) {
              curTime = Math.max(0, Math.min(value.totalDuration(), (this.rawTime() - value._startTime) * value._timeScale));
              Math.abs(curTime - value._totalTime) > 1e-5 && value.render(curTime, false, false);
            }
            if ((this._gc || this._time === this._duration) && !this._paused && this._duration < this.duration()) {
              tl = this;
              beforeRawTime = tl.rawTime() > value._startTime;
              while (tl._timeline) {
                beforeRawTime && tl._timeline.smoothChildTiming ? tl.totalTime(tl._totalTime, true) : tl._gc && tl._enabled(true, false);
                tl = tl._timeline;
              }
            }
            return this;
          };
          p.remove = function(value) {
            if (value instanceof Animation) {
              this._remove(value, false);
              var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline;
              value._startTime = (value._paused ? value._pauseTime : tl._time) - (value._reversed ? value.totalDuration() - value._totalTime : value._totalTime) / value._timeScale;
              return this;
            }
            if (value instanceof Array || value && value.push && _isArray(value)) {
              var i = value.length;
              while (--i > -1) this.remove(value[i]);
              return this;
            }
            if ("string" === typeof value) return this.removeLabel(value);
            return this.kill(null, value);
          };
          p._remove = function(tween, skipDisable) {
            SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
            var last = this._last;
            if (last) {
              if (this._time > this.duration()) {
                this._time = this._duration;
                this._totalTime = this._totalDuration;
              }
            } else this._time = this._totalTime = this._duration = this._totalDuration = 0;
            return this;
          };
          p.append = function(value, offsetOrLabel) {
            return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
          };
          p.insert = p.insertMultiple = function(value, position, align, stagger) {
            return this.add(value, position || 0, align, stagger);
          };
          p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
            return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
          };
          p.addLabel = function(label, position) {
            this._labels[label] = this._parseTimeOrLabel(position);
            return this;
          };
          p.addPause = function(position, callback, params, scope) {
            var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
            t.vars.onComplete = t.vars.onReverseComplete = callback;
            t.data = "isPause";
            this._hasPause = true;
            return this.add(t, position);
          };
          p.removeLabel = function(label) {
            delete this._labels[label];
            return this;
          };
          p.getLabelTime = function(label) {
            return null != this._labels[label] ? this._labels[label] : -1;
          };
          p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
            var clippedDuration, i;
            if (ignore instanceof Animation && ignore.timeline === this) this.remove(ignore); else if (ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))) {
              i = ignore.length;
              while (--i > -1) ignore[i] instanceof Animation && ignore[i].timeline === this && this.remove(ignore[i]);
            }
            clippedDuration = "number" !== typeof timeOrLabel || offsetOrLabel ? this.duration() > 99999999999 ? this.recent().endTime(false) : this._duration : 0;
            if ("string" === typeof offsetOrLabel) return this._parseTimeOrLabel(offsetOrLabel, appendIfAbsent && "number" === typeof timeOrLabel && null == this._labels[offsetOrLabel] ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
            offsetOrLabel = offsetOrLabel || 0;
            if ("string" !== typeof timeOrLabel || !isNaN(timeOrLabel) && null == this._labels[timeOrLabel]) null == timeOrLabel && (timeOrLabel = clippedDuration); else {
              i = timeOrLabel.indexOf("=");
              if (-1 === i) {
                if (null == this._labels[timeOrLabel]) return appendIfAbsent ? this._labels[timeOrLabel] = clippedDuration + offsetOrLabel : offsetOrLabel;
                return this._labels[timeOrLabel] + offsetOrLabel;
              }
              offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
              timeOrLabel = i > 1 ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : clippedDuration;
            }
            return Number(timeOrLabel) + offsetOrLabel;
          };
          p.seek = function(position, suppressEvents) {
            return this.totalTime("number" === typeof position ? position : this._parseTimeOrLabel(position), false !== suppressEvents);
          };
          p.stop = function() {
            return this.paused(true);
          };
          p.gotoAndPlay = function(position, suppressEvents) {
            return this.play(position, suppressEvents);
          };
          p.gotoAndStop = function(position, suppressEvents) {
            return this.pause(position, suppressEvents);
          };
          p.render = function(time, suppressEvents, force) {
            this._gc && this._enabled(true, false);
            var prevTime = this._time, totalDur = this._dirty ? this.totalDuration() : this._totalDuration, prevStart = this._startTime, prevTimeScale = this._timeScale, prevPaused = this._paused, tween, isComplete, next, callback, internalForce, pauseTween, curTime;
            prevTime !== this._time && (time += this._time - prevTime);
            if (time >= totalDur - 1e-7 && time >= 0) {
              this._totalTime = this._time = totalDur;
              if (!this._reversed && !this._hasPausedChild()) {
                isComplete = true;
                callback = "onComplete";
                internalForce = !!this._timeline.autoRemoveChildren;
                if (0 === this._duration && (time <= 0 && time >= -1e-7 || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) && this._rawPrevTime !== time && this._first) {
                  internalForce = true;
                  this._rawPrevTime > _tinyNum && (callback = "onReverseComplete");
                }
              }
              this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
              time = totalDur + 1e-4;
            } else if (time < 1e-7) {
              this._totalTime = this._time = 0;
              if (0 !== prevTime || 0 === this._duration && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)) {
                callback = "onReverseComplete";
                isComplete = this._reversed;
              }
              if (time < 0) {
                this._active = false;
                if (this._timeline.autoRemoveChildren && this._reversed) {
                  internalForce = isComplete = true;
                  callback = "onReverseComplete";
                } else this._rawPrevTime >= 0 && this._first && (internalForce = true);
                this._rawPrevTime = time;
              } else {
                this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
                if (0 === time && isComplete) {
                  tween = this._first;
                  while (tween && 0 === tween._startTime) {
                    tween._duration || (isComplete = false);
                    tween = tween._next;
                  }
                }
                time = 0;
                this._initted || (internalForce = true);
              }
            } else {
              if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                if (time >= prevTime) {
                  tween = this._first;
                  while (tween && tween._startTime <= time && !pauseTween) {
                    tween._duration || "isPause" !== tween.data || tween.ratio || 0 === tween._startTime && 0 === this._rawPrevTime || (pauseTween = tween);
                    tween = tween._next;
                  }
                } else {
                  tween = this._last;
                  while (tween && tween._startTime >= time && !pauseTween) {
                    tween._duration || "isPause" === tween.data && tween._rawPrevTime > 0 && (pauseTween = tween);
                    tween = tween._prev;
                  }
                }
                if (pauseTween) {
                  this._time = time = pauseTween._startTime;
                  this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);
                }
              }
              this._totalTime = this._time = this._rawPrevTime = time;
            }
            if (!(this._time !== prevTime && this._first || force || internalForce || pauseTween)) return;
            this._initted || (this._initted = true);
            this._active || !this._paused && this._time !== prevTime && time > 0 && (this._active = true);
            0 === prevTime && this.vars.onStart && (0 === this._time && this._duration || suppressEvents || this._callback("onStart"));
            curTime = this._time;
            if (curTime >= prevTime) {
              tween = this._first;
              while (tween) {
                next = tween._next;
                if (curTime !== this._time || this._paused && !prevPaused) break;
                if (tween._active || tween._startTime <= curTime && !tween._paused && !tween._gc) {
                  pauseTween === tween && this.pause();
                  tween._reversed ? tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force) : tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                }
                tween = next;
              }
            } else {
              tween = this._last;
              while (tween) {
                next = tween._prev;
                if (curTime !== this._time || this._paused && !prevPaused) break;
                if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
                  if (pauseTween === tween) {
                    pauseTween = tween._prev;
                    while (pauseTween && pauseTween.endTime() > this._time) {
                      pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
                      pauseTween = pauseTween._prev;
                    }
                    pauseTween = null;
                    this.pause();
                  }
                  tween._reversed ? tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force) : tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                }
                tween = next;
              }
            }
            if (this._onUpdate && !suppressEvents) {
              _lazyTweens.length && _lazyRender();
              this._callback("onUpdate");
            }
            if (callback && !this._gc && (prevStart === this._startTime || prevTimeScale !== this._timeScale) && (0 === this._time || totalDur >= this.totalDuration())) {
              if (isComplete) {
                _lazyTweens.length && _lazyRender();
                this._timeline.autoRemoveChildren && this._enabled(false, false);
                this._active = false;
              }
              !suppressEvents && this.vars[callback] && this._callback(callback);
            }
          };
          p._hasPausedChild = function() {
            var tween = this._first;
            while (tween) {
              if (tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()) return true;
              tween = tween._next;
            }
            return false;
          };
          p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
            ignoreBeforeTime = ignoreBeforeTime || -9999999999;
            var a = [], tween = this._first, cnt = 0;
            while (tween) {
              if (tween._startTime < ignoreBeforeTime) ; else if (tween instanceof TweenLite) false !== tweens && (a[cnt++] = tween); else {
                false !== timelines && (a[cnt++] = tween);
                if (false !== nested) {
                  a = a.concat(tween.getChildren(true, tweens, timelines));
                  cnt = a.length;
                }
              }
              tween = tween._next;
            }
            return a;
          };
          p.getTweensOf = function(target, nested) {
            var disabled = this._gc, a = [], cnt = 0, tweens, i;
            disabled && this._enabled(true, true);
            tweens = TweenLite.getTweensOf(target);
            i = tweens.length;
            while (--i > -1) (tweens[i].timeline === this || nested && this._contains(tweens[i])) && (a[cnt++] = tweens[i]);
            disabled && this._enabled(false, true);
            return a;
          };
          p.recent = function() {
            return this._recent;
          };
          p._contains = function(tween) {
            var tl = tween.timeline;
            while (tl) {
              if (tl === this) return true;
              tl = tl.timeline;
            }
            return false;
          };
          p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
            ignoreBeforeTime = ignoreBeforeTime || 0;
            var tween = this._first, labels = this._labels, p;
            while (tween) {
              tween._startTime >= ignoreBeforeTime && (tween._startTime += amount);
              tween = tween._next;
            }
            if (adjustLabels) for (p in labels) labels[p] >= ignoreBeforeTime && (labels[p] += amount);
            return this._uncache(true);
          };
          p._kill = function(vars, target) {
            if (!vars && !target) return this._enabled(false, false);
            var tweens = target ? this.getTweensOf(target) : this.getChildren(true, true, false), i = tweens.length, changed = false;
            while (--i > -1) tweens[i]._kill(vars, target) && (changed = true);
            return changed;
          };
          p.clear = function(labels) {
            var tweens = this.getChildren(false, true, true), i = tweens.length;
            this._time = this._totalTime = 0;
            while (--i > -1) tweens[i]._enabled(false, false);
            false !== labels && (this._labels = {});
            return this._uncache(true);
          };
          p.invalidate = function() {
            var tween = this._first;
            while (tween) {
              tween.invalidate();
              tween = tween._next;
            }
            return Animation.prototype.invalidate.call(this);
          };
          p._enabled = function(enabled, ignoreTimeline) {
            if (enabled === this._gc) {
              var tween = this._first;
              while (tween) {
                tween._enabled(enabled, true);
                tween = tween._next;
              }
            }
            return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
          };
          p.totalTime = function(time, suppressEvents, uncapped) {
            this._forcingPlayhead = true;
            var val = Animation.prototype.totalTime.apply(this, arguments);
            this._forcingPlayhead = false;
            return val;
          };
          p.duration = function(value) {
            if (!arguments.length) {
              this._dirty && this.totalDuration();
              return this._duration;
            }
            0 !== this.duration() && 0 !== value && this.timeScale(this._duration / value);
            return this;
          };
          p.totalDuration = function(value) {
            if (!arguments.length) {
              if (this._dirty) {
                var max = 0, tween = this._last, prevStart = 999999999999, prev, end;
                while (tween) {
                  prev = tween._prev;
                  tween._dirty && tween.totalDuration();
                  if (tween._startTime > prevStart && this._sortChildren && !tween._paused && !this._calculatingDuration) {
                    this._calculatingDuration = 1;
                    this.add(tween, tween._startTime - tween._delay);
                    this._calculatingDuration = 0;
                  } else prevStart = tween._startTime;
                  if (tween._startTime < 0 && !tween._paused) {
                    max -= tween._startTime;
                    if (this._timeline.smoothChildTiming) {
                      this._startTime += tween._startTime / this._timeScale;
                      this._time -= tween._startTime;
                      this._totalTime -= tween._startTime;
                      this._rawPrevTime -= tween._startTime;
                    }
                    this.shiftChildren(-tween._startTime, false, -9999999999);
                    prevStart = 0;
                  }
                  end = tween._startTime + tween._totalDuration / tween._timeScale;
                  end > max && (max = end);
                  tween = prev;
                }
                this._duration = this._totalDuration = max;
                this._dirty = false;
              }
              return this._totalDuration;
            }
            return value && this.totalDuration() ? this.timeScale(this._totalDuration / value) : this;
          };
          p.paused = function(value) {
            if (!value) {
              var tween = this._first, time = this._time;
              while (tween) {
                tween._startTime === time && "isPause" === tween.data && (tween._rawPrevTime = 0);
                tween = tween._next;
              }
            }
            return Animation.prototype.paused.apply(this, arguments);
          };
          p.usesFrames = function() {
            var tl = this._timeline;
            while (tl._timeline) tl = tl._timeline;
            return tl === Animation._rootFramesTimeline;
          };
          p.rawTime = function(wrapRepeats) {
            return wrapRepeats && (this._paused || this._repeat && this.time() > 0 && this.totalProgress() < 1) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
          };
          return TimelineLite;
        }, true);
        _gsScope._gsDefine("TimelineMax", [ "TimelineLite", "TweenLite", "easing.Ease" ], function(TimelineLite, TweenLite, Ease) {
          var TimelineMax = function(vars) {
            TimelineLite.call(this, vars);
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._cycle = 0;
            this._yoyo = true === this.vars.yoyo;
            this._dirty = true;
          }, _tinyNum = 1e-10, TweenLiteInternals = TweenLite._internals, _lazyTweens = TweenLiteInternals.lazyTweens, _lazyRender = TweenLiteInternals.lazyRender, _globals = _gsScope._gsDefine.globals, _easeNone = new Ease(null, null, 1, 0), p = TimelineMax.prototype = new TimelineLite();
          p.constructor = TimelineMax;
          p.kill()._gc = false;
          TimelineMax.version = "2.0.2";
          p.invalidate = function() {
            this._yoyo = true === this.vars.yoyo;
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._uncache(true);
            return TimelineLite.prototype.invalidate.call(this);
          };
          p.addCallback = function(callback, position, params, scope) {
            return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
          };
          p.removeCallback = function(callback, position) {
            if (callback) if (null == position) this._kill(null, callback); else {
              var a = this.getTweensOf(callback, false), i = a.length, time = this._parseTimeOrLabel(position);
              while (--i > -1) a[i]._startTime === time && a[i]._enabled(false, false);
            }
            return this;
          };
          p.removePause = function(position) {
            return this.removeCallback(TimelineLite._internals.pauseCallback, position);
          };
          p.tweenTo = function(position, vars) {
            vars = vars || {};
            var copy = {
              ease: _easeNone,
              useFrames: this.usesFrames(),
              immediateRender: false,
              lazy: false
            }, Engine = vars.repeat && _globals.TweenMax || TweenLite, duration, p, t;
            for (p in vars) copy[p] = vars[p];
            copy.time = this._parseTimeOrLabel(position);
            duration = Math.abs(Number(copy.time) - this._time) / this._timeScale || .001;
            t = new Engine(this, duration, copy);
            copy.onStart = function() {
              t.target.paused(true);
              t.vars.time === t.target.time() || duration !== t.duration() || t.isFromTo || t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale).render(t.time(), true, true);
              vars.onStart && vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []);
            };
            return t;
          };
          p.tweenFromTo = function(fromPosition, toPosition, vars) {
            vars = vars || {};
            fromPosition = this._parseTimeOrLabel(fromPosition);
            vars.startAt = {
              onComplete: this.seek,
              onCompleteParams: [ fromPosition ],
              callbackScope: this
            };
            vars.immediateRender = false !== vars.immediateRender;
            var t = this.tweenTo(toPosition, vars);
            t.isFromTo = 1;
            return t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || .001);
          };
          p.render = function(time, suppressEvents, force) {
            this._gc && this._enabled(true, false);
            var prevTime = this._time, totalDur = this._dirty ? this.totalDuration() : this._totalDuration, dur = this._duration, prevTotalTime = this._totalTime, prevStart = this._startTime, prevTimeScale = this._timeScale, prevRawPrevTime = this._rawPrevTime, prevPaused = this._paused, prevCycle = this._cycle, tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
            prevTime !== this._time && (time += this._time - prevTime);
            if (time >= totalDur - 1e-7 && time >= 0) {
              if (!this._locked) {
                this._totalTime = totalDur;
                this._cycle = this._repeat;
              }
              if (!this._reversed && !this._hasPausedChild()) {
                isComplete = true;
                callback = "onComplete";
                internalForce = !!this._timeline.autoRemoveChildren;
                if (0 === this._duration && (time <= 0 && time >= -1e-7 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) && prevRawPrevTime !== time && this._first) {
                  internalForce = true;
                  prevRawPrevTime > _tinyNum && (callback = "onReverseComplete");
                }
              }
              this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
              if (this._yoyo && 0 !== (1 & this._cycle)) this._time = time = 0; else {
                this._time = dur;
                time = dur + 1e-4;
              }
            } else if (time < 1e-7) {
              this._locked || (this._totalTime = this._cycle = 0);
              this._time = 0;
              if (0 !== prevTime || 0 === dur && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked) {
                callback = "onReverseComplete";
                isComplete = this._reversed;
              }
              if (time < 0) {
                this._active = false;
                if (this._timeline.autoRemoveChildren && this._reversed) {
                  internalForce = isComplete = true;
                  callback = "onReverseComplete";
                } else prevRawPrevTime >= 0 && this._first && (internalForce = true);
                this._rawPrevTime = time;
              } else {
                this._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
                if (0 === time && isComplete) {
                  tween = this._first;
                  while (tween && 0 === tween._startTime) {
                    tween._duration || (isComplete = false);
                    tween = tween._next;
                  }
                }
                time = 0;
                this._initted || (internalForce = true);
              }
            } else {
              0 === dur && prevRawPrevTime < 0 && (internalForce = true);
              this._time = this._rawPrevTime = time;
              if (!this._locked) {
                this._totalTime = time;
                if (0 !== this._repeat) {
                  cycleDuration = dur + this._repeatDelay;
                  this._cycle = this._totalTime / cycleDuration >> 0;
                  0 !== this._cycle && this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time && this._cycle--;
                  this._time = this._totalTime - this._cycle * cycleDuration;
                  this._yoyo && 0 !== (1 & this._cycle) && (this._time = dur - this._time);
                  if (this._time > dur) {
                    this._time = dur;
                    time = dur + 1e-4;
                  } else this._time < 0 ? this._time = time = 0 : time = this._time;
                }
              }
              if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                time = this._time;
                if (time >= prevTime || this._repeat && prevCycle !== this._cycle) {
                  tween = this._first;
                  while (tween && tween._startTime <= time && !pauseTween) {
                    tween._duration || "isPause" !== tween.data || tween.ratio || 0 === tween._startTime && 0 === this._rawPrevTime || (pauseTween = tween);
                    tween = tween._next;
                  }
                } else {
                  tween = this._last;
                  while (tween && tween._startTime >= time && !pauseTween) {
                    tween._duration || "isPause" === tween.data && tween._rawPrevTime > 0 && (pauseTween = tween);
                    tween = tween._prev;
                  }
                }
                if (pauseTween && pauseTween._startTime < dur) {
                  this._time = time = pauseTween._startTime;
                  this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);
                }
              }
            }
            if (this._cycle !== prevCycle && !this._locked) {
              var backwards = this._yoyo && 0 !== (1 & prevCycle), wrap = backwards === (this._yoyo && 0 !== (1 & this._cycle)), recTotalTime = this._totalTime, recCycle = this._cycle, recRawPrevTime = this._rawPrevTime, recTime = this._time;
              this._totalTime = prevCycle * dur;
              this._cycle < prevCycle ? backwards = !backwards : this._totalTime += dur;
              this._time = prevTime;
              this._rawPrevTime = 0 === dur ? prevRawPrevTime - 1e-4 : prevRawPrevTime;
              this._cycle = prevCycle;
              this._locked = true;
              prevTime = backwards ? 0 : dur;
              this.render(prevTime, suppressEvents, 0 === dur);
              if (!suppressEvents && !this._gc && this.vars.onRepeat) {
                this._cycle = recCycle;
                this._locked = false;
                this._callback("onRepeat");
              }
              if (prevTime !== this._time) return;
              if (wrap) {
                this._cycle = prevCycle;
                this._locked = true;
                prevTime = backwards ? dur + 1e-4 : -1e-4;
                this.render(prevTime, true, false);
              }
              this._locked = false;
              if (this._paused && !prevPaused) return;
              this._time = recTime;
              this._totalTime = recTotalTime;
              this._cycle = recCycle;
              this._rawPrevTime = recRawPrevTime;
            }
            if (!(this._time !== prevTime && this._first || force || internalForce || pauseTween)) {
              prevTotalTime !== this._totalTime && this._onUpdate && (suppressEvents || this._callback("onUpdate"));
              return;
            }
            this._initted || (this._initted = true);
            this._active || !this._paused && this._totalTime !== prevTotalTime && time > 0 && (this._active = true);
            0 === prevTotalTime && this.vars.onStart && (0 === this._totalTime && this._totalDuration || suppressEvents || this._callback("onStart"));
            curTime = this._time;
            if (curTime >= prevTime) {
              tween = this._first;
              while (tween) {
                next = tween._next;
                if (curTime !== this._time || this._paused && !prevPaused) break;
                if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {
                  pauseTween === tween && this.pause();
                  tween._reversed ? tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force) : tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                }
                tween = next;
              }
            } else {
              tween = this._last;
              while (tween) {
                next = tween._prev;
                if (curTime !== this._time || this._paused && !prevPaused) break;
                if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
                  if (pauseTween === tween) {
                    pauseTween = tween._prev;
                    while (pauseTween && pauseTween.endTime() > this._time) {
                      pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
                      pauseTween = pauseTween._prev;
                    }
                    pauseTween = null;
                    this.pause();
                  }
                  tween._reversed ? tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force) : tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                }
                tween = next;
              }
            }
            if (this._onUpdate && !suppressEvents) {
              _lazyTweens.length && _lazyRender();
              this._callback("onUpdate");
            }
            if (callback && !this._locked && !this._gc && (prevStart === this._startTime || prevTimeScale !== this._timeScale) && (0 === this._time || totalDur >= this.totalDuration())) {
              if (isComplete) {
                _lazyTweens.length && _lazyRender();
                this._timeline.autoRemoveChildren && this._enabled(false, false);
                this._active = false;
              }
              !suppressEvents && this.vars[callback] && this._callback(callback);
            }
          };
          p.getActive = function(nested, tweens, timelines) {
            null == nested && (nested = true);
            null == tweens && (tweens = true);
            null == timelines && (timelines = false);
            var a = [], all = this.getChildren(nested, tweens, timelines), cnt = 0, l = all.length, i, tween;
            for (i = 0; i < l; i++) {
              tween = all[i];
              tween.isActive() && (a[cnt++] = tween);
            }
            return a;
          };
          p.getLabelAfter = function(time) {
            time || 0 !== time && (time = this._time);
            var labels = this.getLabelsArray(), l = labels.length, i;
            for (i = 0; i < l; i++) if (labels[i].time > time) return labels[i].name;
            return null;
          };
          p.getLabelBefore = function(time) {
            null == time && (time = this._time);
            var labels = this.getLabelsArray(), i = labels.length;
            while (--i > -1) if (labels[i].time < time) return labels[i].name;
            return null;
          };
          p.getLabelsArray = function() {
            var a = [], cnt = 0, p;
            for (p in this._labels) a[cnt++] = {
              time: this._labels[p],
              name: p
            };
            a.sort(function(a, b) {
              return a.time - b.time;
            });
            return a;
          };
          p.invalidate = function() {
            this._locked = false;
            return TimelineLite.prototype.invalidate.call(this);
          };
          p.progress = function(value, suppressEvents) {
            return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 !== (1 & this._cycle) ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents) : this._time / this.duration() || 0;
          };
          p.totalProgress = function(value, suppressEvents) {
            return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this._totalTime / this.totalDuration() || 0;
          };
          p.totalDuration = function(value) {
            if (!arguments.length) {
              if (this._dirty) {
                TimelineLite.prototype.totalDuration.call(this);
                this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;
              }
              return this._totalDuration;
            }
            return -1 !== this._repeat && value ? this.timeScale(this.totalDuration() / value) : this;
          };
          p.time = function(value, suppressEvents) {
            if (!arguments.length) return this._time;
            this._dirty && this.totalDuration();
            value > this._duration && (value = this._duration);
            this._yoyo && 0 !== (1 & this._cycle) ? value = this._duration - value + this._cycle * (this._duration + this._repeatDelay) : 0 !== this._repeat && (value += this._cycle * (this._duration + this._repeatDelay));
            return this.totalTime(value, suppressEvents);
          };
          p.repeat = function(value) {
            if (!arguments.length) return this._repeat;
            this._repeat = value;
            return this._uncache(true);
          };
          p.repeatDelay = function(value) {
            if (!arguments.length) return this._repeatDelay;
            this._repeatDelay = value;
            return this._uncache(true);
          };
          p.yoyo = function(value) {
            if (!arguments.length) return this._yoyo;
            this._yoyo = value;
            return this;
          };
          p.currentLabel = function(value) {
            if (!arguments.length) return this.getLabelBefore(this._time + 1e-8);
            return this.seek(value, true);
          };
          return TimelineMax;
        }, true);
        (function() {
          var _RAD2DEG = 180 / Math.PI, _r1 = [], _r2 = [], _r3 = [], _corProps = {}, _globals = _gsScope._gsDefine.globals, Segment = function(a, b, c, d) {
            c === d && (c = d - (d - b) / 1e6);
            a === b && (b = a + (c - a) / 1e6);
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.da = d - a;
            this.ca = c - a;
            this.ba = b - a;
          }, _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,", cubicToQuadratic = function(a, b, c, d) {
            var q1 = {
              a: a
            }, q2 = {}, q3 = {}, q4 = {
              c: d
            }, mab = (a + b) / 2, mbc = (b + c) / 2, mcd = (c + d) / 2, mabc = (mab + mbc) / 2, mbcd = (mbc + mcd) / 2, m8 = (mbcd - mabc) / 8;
            q1.b = mab + (a - mab) / 4;
            q2.b = mabc + m8;
            q1.c = q2.a = (q1.b + q2.b) / 2;
            q2.c = q3.a = (mabc + mbcd) / 2;
            q3.b = mbcd - m8;
            q4.b = mcd + (d - mcd) / 4;
            q3.c = q4.a = (q3.b + q4.b) / 2;
            return [ q1, q2, q3, q4 ];
          }, _calculateControlPoints = function(a, curviness, quad, basic, correlate) {
            var l = a.length - 1, ii = 0, cp1 = a[0].a, i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
            for (i = 0; i < l; i++) {
              seg = a[ii];
              p1 = seg.a;
              p2 = seg.d;
              p3 = a[ii + 1].d;
              if (correlate) {
                r1 = _r1[i];
                r2 = _r2[i];
                tl = (r2 + r1) * curviness * .25 / (basic ? .5 : _r3[i] || .5);
                m1 = p2 - (p2 - p1) * (basic ? .5 * curviness : 0 !== r1 ? tl / r1 : 0);
                m2 = p2 + (p3 - p2) * (basic ? .5 * curviness : 0 !== r2 ? tl / r2 : 0);
                mm = p2 - (m1 + ((m2 - m1) * (3 * r1 / (r1 + r2) + .5) / 4 || 0));
              } else {
                m1 = p2 - (p2 - p1) * curviness * .5;
                m2 = p2 + (p3 - p2) * curviness * .5;
                mm = p2 - (m1 + m2) / 2;
              }
              m1 += mm;
              m2 += mm;
              seg.c = cp2 = m1;
              seg.b = 0 !== i ? cp1 : cp1 = seg.a + .6 * (seg.c - seg.a);
              seg.da = p2 - p1;
              seg.ca = cp2 - p1;
              seg.ba = cp1 - p1;
              if (quad) {
                qb = cubicToQuadratic(p1, cp1, cp2, p2);
                a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                ii += 4;
              } else ii++;
              cp1 = m2;
            }
            seg = a[ii];
            seg.b = cp1;
            seg.c = cp1 + .4 * (seg.d - cp1);
            seg.da = seg.d - seg.a;
            seg.ca = seg.c - seg.a;
            seg.ba = cp1 - seg.a;
            if (quad) {
              qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
              a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
            }
          }, _parseAnchors = function(values, p, correlate, prepend) {
            var a = [], l, i, p1, p2, p3, tmp;
            if (prepend) {
              values = [ prepend ].concat(values);
              i = values.length;
              while (--i > -1) "string" === typeof (tmp = values[i][p]) && "=" === tmp.charAt(1) && (values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)));
            }
            l = values.length - 2;
            if (l < 0) {
              a[0] = new Segment(values[0][p], 0, 0, values[0][p]);
              return a;
            }
            for (i = 0; i < l; i++) {
              p1 = values[i][p];
              p2 = values[i + 1][p];
              a[i] = new Segment(p1, 0, 0, p2);
              if (correlate) {
                p3 = values[i + 2][p];
                _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
                _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
              }
            }
            a[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);
            return a;
          }, bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
            var obj = {}, props = [], first = prepend || values[0], i, p, a, j, r, l, seamless, last;
            correlate = "string" === typeof correlate ? "," + correlate + "," : _correlate;
            null == curviness && (curviness = 1);
            for (p in values[0]) props.push(p);
            if (values.length > 1) {
              last = values[values.length - 1];
              seamless = true;
              i = props.length;
              while (--i > -1) {
                p = props[i];
                if (Math.abs(first[p] - last[p]) > .05) {
                  seamless = false;
                  break;
                }
              }
              if (seamless) {
                values = values.concat();
                prepend && values.unshift(prepend);
                values.push(values[1]);
                prepend = values[values.length - 3];
              }
            }
            _r1.length = _r2.length = _r3.length = 0;
            i = props.length;
            while (--i > -1) {
              p = props[i];
              _corProps[p] = -1 !== correlate.indexOf("," + p + ",");
              obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
            }
            i = _r1.length;
            while (--i > -1) {
              _r1[i] = Math.sqrt(_r1[i]);
              _r2[i] = Math.sqrt(_r2[i]);
            }
            if (!basic) {
              i = props.length;
              while (--i > -1) if (_corProps[p]) {
                a = obj[props[i]];
                l = a.length - 1;
                for (j = 0; j < l; j++) {
                  r = a[j + 1].da / _r2[j] + a[j].da / _r1[j] || 0;
                  _r3[j] = (_r3[j] || 0) + r * r;
                }
              }
              i = _r3.length;
              while (--i > -1) _r3[i] = Math.sqrt(_r3[i]);
            }
            i = props.length;
            j = quadratic ? 4 : 1;
            while (--i > -1) {
              p = props[i];
              a = obj[p];
              _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]);
              if (seamless) {
                a.splice(0, j);
                a.splice(a.length - j, j);
              }
            }
            return obj;
          }, _parseBezierData = function(values, type, prepend) {
            type = type || "soft";
            var obj = {}, inc = "cubic" === type ? 3 : 2, soft = "soft" === type, props = [], a, b, c, d, cur, i, j, l, p, cnt, tmp;
            soft && prepend && (values = [ prepend ].concat(values));
            if (null == values || values.length < inc + 1) throw "invalid Bezier data";
            for (p in values[0]) props.push(p);
            i = props.length;
            while (--i > -1) {
              p = props[i];
              obj[p] = cur = [];
              cnt = 0;
              l = values.length;
              for (j = 0; j < l; j++) {
                a = null == prepend ? values[j][p] : "string" === typeof (tmp = values[j][p]) && "=" === tmp.charAt(1) ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
                soft && j > 1 && j < l - 1 && (cur[cnt++] = (a + cur[cnt - 2]) / 2);
                cur[cnt++] = a;
              }
              l = cnt - inc + 1;
              cnt = 0;
              for (j = 0; j < l; j += inc) {
                a = cur[j];
                b = cur[j + 1];
                c = cur[j + 2];
                d = 2 === inc ? 0 : cur[j + 3];
                cur[cnt++] = tmp = 3 === inc ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
              }
              cur.length = cnt;
            }
            return obj;
          }, _addCubicLengths = function(a, steps, resolution) {
            var inc = 1 / resolution, j = a.length, d, d1, s, da, ca, ba, p, i, inv, bez, index;
            while (--j > -1) {
              bez = a[j];
              s = bez.a;
              da = bez.d - s;
              ca = bez.c - s;
              ba = bez.b - s;
              d = d1 = 0;
              for (i = 1; i <= resolution; i++) {
                p = inc * i;
                inv = 1 - p;
                d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
                index = j * resolution + i - 1;
                steps[index] = (steps[index] || 0) + d * d;
              }
            }
          }, _parseLengthData = function(obj, resolution) {
            resolution = resolution >> 0 || 6;
            var a = [], lengths = [], d = 0, total = 0, threshold = resolution - 1, segments = [], curLS = [], p, i, l, index;
            for (p in obj) _addCubicLengths(obj[p], a, resolution);
            l = a.length;
            for (i = 0; i < l; i++) {
              d += Math.sqrt(a[i]);
              index = i % resolution;
              curLS[index] = d;
              if (index === threshold) {
                total += d;
                index = i / resolution >> 0;
                segments[index] = curLS;
                lengths[index] = total;
                d = 0;
                curLS = [];
              }
            }
            return {
              length: total,
              lengths: lengths,
              segments: segments
            };
          }, BezierPlugin = _gsScope._gsDefine.plugin({
            propName: "bezier",
            priority: -1,
            version: "1.3.8",
            API: 2,
            global: true,
            init: function(target, vars, tween) {
              this._target = target;
              vars instanceof Array && (vars = {
                values: vars
              });
              this._func = {};
              this._mod = {};
              this._props = [];
              this._timeRes = null == vars.timeResolution ? 6 : parseInt(vars.timeResolution, 10);
              var values = vars.values || [], first = {}, second = values[0], autoRotate = vars.autoRotate || tween.vars.orientToBezier, p, isFunc, i, j, prepend;
              this._autoRotate = autoRotate ? autoRotate instanceof Array ? autoRotate : [ [ "x", "y", "rotation", true === autoRotate ? 0 : Number(autoRotate) || 0 ] ] : null;
              for (p in second) this._props.push(p);
              i = this._props.length;
              while (--i > -1) {
                p = this._props[i];
                this._overwriteProps.push(p);
                isFunc = this._func[p] = "function" === typeof target[p];
                first[p] = isFunc ? target[p.indexOf("set") || "function" !== typeof target["get" + p.substr(3)] ? p : "get" + p.substr(3)]() : parseFloat(target[p]);
                prepend || first[p] !== values[0][p] && (prepend = first);
              }
              this._beziers = "cubic" !== vars.type && "quadratic" !== vars.type && "soft" !== vars.type ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, "thruBasic" === vars.type, vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
              this._segCount = this._beziers[p].length;
              if (this._timeRes) {
                var ld = _parseLengthData(this._beziers, this._timeRes);
                this._length = ld.length;
                this._lengths = ld.lengths;
                this._segments = ld.segments;
                this._l1 = this._li = this._s1 = this._si = 0;
                this._l2 = this._lengths[0];
                this._curSeg = this._segments[0];
                this._s2 = this._curSeg[0];
                this._prec = 1 / this._curSeg.length;
              }
              if (autoRotate = this._autoRotate) {
                this._initialRotations = [];
                autoRotate[0] instanceof Array || (this._autoRotate = autoRotate = [ autoRotate ]);
                i = autoRotate.length;
                while (--i > -1) {
                  for (j = 0; j < 3; j++) {
                    p = autoRotate[i][j];
                    this._func[p] = "function" === typeof target[p] && target[p.indexOf("set") || "function" !== typeof target["get" + p.substr(3)] ? p : "get" + p.substr(3)];
                  }
                  p = autoRotate[i][2];
                  this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                  this._overwriteProps.push(p);
                }
              }
              this._startRatio = tween.vars.runBackwards ? 1 : 0;
              return true;
            },
            set: function(v) {
              var segments = this._segCount, func = this._func, target = this._target, notStart = v !== this._startRatio, curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
              if (this._timeRes) {
                lengths = this._lengths;
                curSeg = this._curSeg;
                v *= this._length;
                i = this._li;
                if (v > this._l2 && i < segments - 1) {
                  l = segments - 1;
                  while (i < l && (this._l2 = lengths[++i]) <= v) ;
                  this._l1 = lengths[i - 1];
                  this._li = i;
                  this._curSeg = curSeg = this._segments[i];
                  this._s2 = curSeg[this._s1 = this._si = 0];
                } else if (v < this._l1 && i > 0) {
                  while (i > 0 && (this._l1 = lengths[--i]) >= v) ;
                  0 === i && v < this._l1 ? this._l1 = 0 : i++;
                  this._l2 = lengths[i];
                  this._li = i;
                  this._curSeg = curSeg = this._segments[i];
                  this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
                  this._s2 = curSeg[this._si];
                }
                curIndex = i;
                v -= this._l1;
                i = this._si;
                if (v > this._s2 && i < curSeg.length - 1) {
                  l = curSeg.length - 1;
                  while (i < l && (this._s2 = curSeg[++i]) <= v) ;
                  this._s1 = curSeg[i - 1];
                  this._si = i;
                } else if (v < this._s1 && i > 0) {
                  while (i > 0 && (this._s1 = curSeg[--i]) >= v) ;
                  0 === i && v < this._s1 ? this._s1 = 0 : i++;
                  this._s2 = curSeg[i];
                  this._si = i;
                }
                t = (i + (v - this._s1) / (this._s2 - this._s1)) * this._prec || 0;
              } else {
                curIndex = v < 0 ? 0 : v >= 1 ? segments - 1 : segments * v >> 0;
                t = (v - curIndex * (1 / segments)) * segments;
              }
              inv = 1 - t;
              i = this._props.length;
              while (--i > -1) {
                p = this._props[i];
                b = this._beziers[p][curIndex];
                val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
                this._mod[p] && (val = this._mod[p](val, target));
                func[p] ? target[p](val) : target[p] = val;
              }
              if (this._autoRotate) {
                var ar = this._autoRotate, b2, x1, y1, x2, y2, add, conv;
                i = ar.length;
                while (--i > -1) {
                  p = ar[i][2];
                  add = ar[i][3] || 0;
                  conv = true === ar[i][4] ? 1 : _RAD2DEG;
                  b = this._beziers[ar[i][0]];
                  b2 = this._beziers[ar[i][1]];
                  if (b && b2) {
                    b = b[curIndex];
                    b2 = b2[curIndex];
                    x1 = b.a + (b.b - b.a) * t;
                    x2 = b.b + (b.c - b.b) * t;
                    x1 += (x2 - x1) * t;
                    x2 += (b.c + (b.d - b.c) * t - x2) * t;
                    y1 = b2.a + (b2.b - b2.a) * t;
                    y2 = b2.b + (b2.c - b2.b) * t;
                    y1 += (y2 - y1) * t;
                    y2 += (b2.c + (b2.d - b2.c) * t - y2) * t;
                    val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];
                    this._mod[p] && (val = this._mod[p](val, target));
                    func[p] ? target[p](val) : target[p] = val;
                  }
                }
              }
            }
          }), p = BezierPlugin.prototype;
          BezierPlugin.bezierThrough = bezierThrough;
          BezierPlugin.cubicToQuadratic = cubicToQuadratic;
          BezierPlugin._autoCSS = true;
          BezierPlugin.quadraticToCubic = function(a, b, c) {
            return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
          };
          BezierPlugin._cssRegister = function() {
            var CSSPlugin = _globals.CSSPlugin;
            if (!CSSPlugin) return;
            var _internals = CSSPlugin._internals, _parseToProxy = _internals._parseToProxy, _setPluginRatio = _internals._setPluginRatio, CSSPropTween = _internals.CSSPropTween;
            _internals._registerComplexSpecialProp("bezier", {
              parser: function(t, e, prop, cssp, pt, plugin) {
                e instanceof Array && (e = {
                  values: e
                });
                plugin = new BezierPlugin();
                var values = e.values, l = values.length - 1, pluginValues = [], v = {}, i, p, data;
                if (l < 0) return pt;
                for (i = 0; i <= l; i++) {
                  data = _parseToProxy(t, values[i], cssp, pt, plugin, l !== i);
                  pluginValues[i] = data.end;
                }
                for (p in e) v[p] = e[p];
                v.values = pluginValues;
                pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
                pt.data = data;
                pt.plugin = plugin;
                pt.setRatio = _setPluginRatio;
                0 === v.autoRotate && (v.autoRotate = true);
                if (v.autoRotate && !(v.autoRotate instanceof Array)) {
                  i = true === v.autoRotate ? 0 : Number(v.autoRotate);
                  v.autoRotate = null != data.end.left ? [ [ "left", "top", "rotation", i, false ] ] : null != data.end.x && [ [ "x", "y", "rotation", i, false ] ];
                }
                if (v.autoRotate) {
                  cssp._transform || cssp._enableTransforms(false);
                  data.autoRotate = cssp._target._gsTransform;
                  data.proxy.rotation = data.autoRotate.rotation || 0;
                  cssp._overwriteProps.push("rotation");
                }
                plugin._onInitTween(data.proxy, v, cssp._tween);
                return pt;
              }
            });
          };
          p._mod = function(lookup) {
            var op = this._overwriteProps, i = op.length, val;
            while (--i > -1) {
              val = lookup[op[i]];
              val && "function" === typeof val && (this._mod[op[i]] = val);
            }
          };
          p._kill = function(lookup) {
            var a = this._props, p, i;
            for (p in this._beziers) if (p in lookup) {
              delete this._beziers[p];
              delete this._func[p];
              i = a.length;
              while (--i > -1) a[i] === p && a.splice(i, 1);
            }
            a = this._autoRotate;
            if (a) {
              i = a.length;
              while (--i > -1) lookup[a[i][2]] && a.splice(i, 1);
            }
            return this._super._kill.call(this, lookup);
          };
        })();
        _gsScope._gsDefine("plugins.CSSPlugin", [ "plugins.TweenPlugin", "TweenLite" ], function(TweenPlugin, TweenLite) {
          var CSSPlugin = function() {
            TweenPlugin.call(this, "css");
            this._overwriteProps.length = 0;
            this.setRatio = CSSPlugin.prototype.setRatio;
          }, _globals = _gsScope._gsDefine.globals, _hasPriority, _suffixMap, _cs, _overwriteProps, _specialProps = {}, p = CSSPlugin.prototype = new TweenPlugin("css");
          p.constructor = CSSPlugin;
          CSSPlugin.version = "2.0.2";
          CSSPlugin.API = 2;
          CSSPlugin.defaultTransformPerspective = 0;
          CSSPlugin.defaultSkewType = "compensated";
          CSSPlugin.defaultSmoothOrigin = true;
          p = "px";
          CSSPlugin.suffixMap = {
            top: p,
            right: p,
            bottom: p,
            left: p,
            width: p,
            height: p,
            fontSize: p,
            padding: p,
            margin: p,
            perspective: p,
            lineHeight: ""
          };
          var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g, _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g, _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, _NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g, _opacityExp = /opacity *= *([^)]*)/i, _opacityValExp = /opacity:([^;]*)/i, _alphaFilterExp = /alpha\(opacity *=.+?\)/i, _rgbhslExp = /^(rgb|hsl)/, _capsExp = /([A-Z])/g, _camelExp = /-([a-z])/gi, _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, _camelFunc = function(s, g) {
            return g.toUpperCase();
          }, _horizExp = /(?:Left|Right|Width)/i, _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi, _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i, _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, _complexExp = /[\s,\(]/i, _DEG2RAD = Math.PI / 180, _RAD2DEG = 180 / Math.PI, _forcePT = {}, _dummyElement = {
            style: {}
          }, _doc = _gsScope.document || {
            createElement: function() {
              return _dummyElement;
            }
          }, _createElement = function(type, ns) {
            return _doc.createElementNS ? _doc.createElementNS(ns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
          }, _tempDiv = _createElement("div"), _tempImg = _createElement("img"), _internals = CSSPlugin._internals = {
            _specialProps: _specialProps
          }, _agent = (_gsScope.navigator || {}).userAgent || "", _autoRound, _reqSafariFix, _isSafari, _isFirefox, _isSafariLT6, _ieVers, _supportsOpacity = function() {
            var i = _agent.indexOf("Android"), a = _createElement("a");
            _isSafari = -1 !== _agent.indexOf("Safari") && -1 === _agent.indexOf("Chrome") && (-1 === i || parseFloat(_agent.substr(i + 8, 2)) > 3);
            _isSafariLT6 = _isSafari && parseFloat(_agent.substr(_agent.indexOf("Version/") + 8, 2)) < 6;
            _isFirefox = -1 !== _agent.indexOf("Firefox");
            (/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(_agent) || /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(_agent)) && (_ieVers = parseFloat(RegExp.$1));
            if (!a) return false;
            a.style.cssText = "top:1px;opacity:.55;";
            return /^0.55/.test(a.style.opacity);
          }(), _getIEOpacity = function(v) {
            return _opacityExp.test("string" === typeof v ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ? parseFloat(RegExp.$1) / 100 : 1;
          }, _log = function(s) {
            _gsScope.console && console.log(s);
          }, _target, _index, _prefixCSS = "", _prefix = "", _checkPropPrefix = function(p, e) {
            e = e || _tempDiv;
            var s = e.style, a, i;
            if (void 0 !== s[p]) return p;
            p = p.charAt(0).toUpperCase() + p.substr(1);
            a = [ "O", "Moz", "ms", "Ms", "Webkit" ];
            i = 5;
            while (--i > -1 && void 0 === s[a[i] + p]) ;
            if (i >= 0) {
              _prefix = 3 === i ? "ms" : a[i];
              _prefixCSS = "-" + _prefix.toLowerCase() + "-";
              return _prefix + p;
            }
            return null;
          }, _getComputedStyle = ("undefined" !== typeof window ? window : _doc.defaultView || {
            getComputedStyle: function() {}
          }).getComputedStyle, _getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
            var rv;
            if (!_supportsOpacity && "opacity" === p) return _getIEOpacity(t);
            !calc && t.style[p] ? rv = t.style[p] : (cs = cs || _getComputedStyle(t)) ? rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase()) : t.currentStyle && (rv = t.currentStyle[p]);
            return null == dflt || rv && "none" !== rv && "auto" !== rv && "auto auto" !== rv ? rv : dflt;
          }, _convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
            if ("px" === sfx || !sfx && "lineHeight" !== p) return v;
            if ("auto" === sfx || !v) return 0;
            var horiz = _horizExp.test(p), node = t, style = _tempDiv.style, neg = v < 0, precise = 1 === v, pix, cache, time;
            neg && (v = -v);
            precise && (v *= 100);
            if ("lineHeight" !== p || sfx) if ("%" === sfx && -1 !== p.indexOf("border")) pix = v / 100 * (horiz ? t.clientWidth : t.clientHeight); else {
              style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
              if ("%" !== sfx && node.appendChild && "v" !== sfx.charAt(0) && "rem" !== sfx) style[horiz ? "borderLeftWidth" : "borderTopWidth"] = v + sfx; else {
                node = t.parentNode || _doc.body;
                -1 !== _getStyle(node, "display").indexOf("flex") && (style.position = "absolute");
                cache = node._gsCache;
                time = TweenLite.ticker.frame;
                if (cache && horiz && cache.time === time) return cache.width * v / 100;
                style[horiz ? "width" : "height"] = v + sfx;
              }
              node.appendChild(_tempDiv);
              pix = parseFloat(_tempDiv[horiz ? "offsetWidth" : "offsetHeight"]);
              node.removeChild(_tempDiv);
              if (horiz && "%" === sfx && false !== CSSPlugin.cacheWidths) {
                cache = node._gsCache = node._gsCache || {};
                cache.time = time;
                cache.width = pix / v * 100;
              }
              0 !== pix || recurse || (pix = _convertToPixels(t, p, v, sfx, true));
            } else {
              cache = _getComputedStyle(t).lineHeight;
              t.style.lineHeight = v;
              pix = parseFloat(_getComputedStyle(t).lineHeight);
              t.style.lineHeight = cache;
            }
            precise && (pix /= 100);
            return neg ? -pix : pix;
          }, _calculateOffset = _internals.calculateOffset = function(t, p, cs) {
            if ("absolute" !== _getStyle(t, "position", cs)) return 0;
            var dim = "left" === p ? "Left" : "Top", v = _getStyle(t, "margin" + dim, cs);
            return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
          }, _getAllStyles = function(t, cs) {
            var s = {}, i, tr, p;
            if (cs = cs || _getComputedStyle(t, null)) if (i = cs.length) while (--i > -1) {
              p = cs[i];
              -1 !== p.indexOf("-transform") && _transformPropCSS !== p || (s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p));
            } else for (i in cs) -1 !== i.indexOf("Transform") && _transformProp !== i || (s[i] = cs[i]); else if (cs = t.currentStyle || t.style) for (i in cs) "string" === typeof i && void 0 === s[i] && (s[i.replace(_camelExp, _camelFunc)] = cs[i]);
            _supportsOpacity || (s.opacity = _getIEOpacity(t));
            tr = _getTransform(t, cs, false);
            s.rotation = tr.rotation;
            s.skewX = tr.skewX;
            s.scaleX = tr.scaleX;
            s.scaleY = tr.scaleY;
            s.x = tr.x;
            s.y = tr.y;
            if (_supports3D) {
              s.z = tr.z;
              s.rotationX = tr.rotationX;
              s.rotationY = tr.rotationY;
              s.scaleZ = tr.scaleZ;
            }
            s.filters && delete s.filters;
            return s;
          }, _cssDif = function(t, s1, s2, vars, forceLookup) {
            var difs = {}, style = t.style, val, p, mpt;
            for (p in s2) if ("cssText" !== p && "length" !== p && isNaN(p) && (s1[p] !== (val = s2[p]) || forceLookup && forceLookup[p]) && -1 === p.indexOf("Origin") && ("number" === typeof val || "string" === typeof val)) {
              difs[p] = "auto" !== val || "left" !== p && "top" !== p ? "" !== val && "auto" !== val && "none" !== val || "string" !== typeof s1[p] || "" === s1[p].replace(_NaNExp, "") ? val : 0 : _calculateOffset(t, p);
              void 0 !== style[p] && (mpt = new MiniPropTween(style, p, style[p], mpt));
            }
            if (vars) for (p in vars) "className" !== p && (difs[p] = vars[p]);
            return {
              difs: difs,
              firstMPT: mpt
            };
          }, _dimensions = {
            width: [ "Left", "Right" ],
            height: [ "Top", "Bottom" ]
          }, _margins = [ "marginLeft", "marginRight", "marginTop", "marginBottom" ], _getDimension = function(t, p, cs) {
            if ("svg" === (t.nodeName + "").toLowerCase()) return (cs || _getComputedStyle(t))[p] || 0;
            if (t.getCTM && _isSVG(t)) return t.getBBox()[p] || 0;
            var v = parseFloat("width" === p ? t.offsetWidth : t.offsetHeight), a = _dimensions[p], i = a.length;
            cs = cs || _getComputedStyle(t, null);
            while (--i > -1) {
              v -= parseFloat(_getStyle(t, "padding" + a[i], cs, true)) || 0;
              v -= parseFloat(_getStyle(t, "border" + a[i] + "Width", cs, true)) || 0;
            }
            return v;
          }, _parsePosition = function(v, recObj) {
            if ("contain" === v || "auto" === v || "auto auto" === v) return v + " ";
            null != v && "" !== v || (v = "0 0");
            var a = v.split(" "), x = -1 !== v.indexOf("left") ? "0%" : -1 !== v.indexOf("right") ? "100%" : a[0], y = -1 !== v.indexOf("top") ? "0%" : -1 !== v.indexOf("bottom") ? "100%" : a[1], i;
            if (a.length > 3 && !recObj) {
              a = v.split(", ").join(",").split(",");
              v = [];
              for (i = 0; i < a.length; i++) v.push(_parsePosition(a[i]));
              return v.join(",");
            }
            null == y ? y = "center" === x ? "50%" : "0" : "center" === y && (y = "50%");
            ("center" === x || isNaN(parseFloat(x)) && -1 === (x + "").indexOf("=")) && (x = "50%");
            v = x + " " + y + (a.length > 2 ? " " + a[2] : "");
            if (recObj) {
              recObj.oxp = -1 !== x.indexOf("%");
              recObj.oyp = -1 !== y.indexOf("%");
              recObj.oxr = "=" === x.charAt(1);
              recObj.oyr = "=" === y.charAt(1);
              recObj.ox = parseFloat(x.replace(_NaNExp, ""));
              recObj.oy = parseFloat(y.replace(_NaNExp, ""));
              recObj.v = v;
            }
            return recObj || v;
          }, _parseChange = function(e, b) {
            "function" === typeof e && (e = e(_index, _target));
            return "string" === typeof e && "=" === e.charAt(1) ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : parseFloat(e) - parseFloat(b) || 0;
          }, _parseVal = function(v, d) {
            "function" === typeof v && (v = v(_index, _target));
            var isRelative = "string" === typeof v && "=" === v.charAt(1);
            "string" === typeof v && "v" === v.charAt(v.length - 2) && (v = (isRelative ? v.substr(0, 2) : 0) + window["inner" + ("vh" === v.substr(-2) ? "Height" : "Width")] * (parseFloat(isRelative ? v.substr(2) : v) / 100));
            return null == v ? d : isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
          }, _parseAngle = function(v, d, p, directionalEnd) {
            var min = 1e-6, cap, split, dif, result, isRelative;
            "function" === typeof v && (v = v(_index, _target));
            if (null == v) result = d; else if ("number" === typeof v) result = v; else {
              cap = 360;
              split = v.split("_");
              isRelative = "=" === v.charAt(1);
              dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * (-1 === v.indexOf("rad") ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
              if (split.length) {
                directionalEnd && (directionalEnd[p] = d + dif);
                if (-1 !== v.indexOf("short")) {
                  dif %= cap;
                  dif !== dif % (cap / 2) && (dif = dif < 0 ? dif + cap : dif - cap);
                }
                -1 !== v.indexOf("_cw") && dif < 0 ? dif = (dif + 9999999999 * cap) % cap - (dif / cap | 0) * cap : -1 !== v.indexOf("ccw") && dif > 0 && (dif = (dif - 9999999999 * cap) % cap - (dif / cap | 0) * cap);
              }
              result = d + dif;
            }
            result < min && result > -min && (result = 0);
            return result;
          }, _colorLookup = {
            aqua: [ 0, 255, 255 ],
            lime: [ 0, 255, 0 ],
            silver: [ 192, 192, 192 ],
            black: [ 0, 0, 0 ],
            maroon: [ 128, 0, 0 ],
            teal: [ 0, 128, 128 ],
            blue: [ 0, 0, 255 ],
            navy: [ 0, 0, 128 ],
            white: [ 255, 255, 255 ],
            fuchsia: [ 255, 0, 255 ],
            olive: [ 128, 128, 0 ],
            yellow: [ 255, 255, 0 ],
            orange: [ 255, 165, 0 ],
            gray: [ 128, 128, 128 ],
            purple: [ 128, 0, 128 ],
            green: [ 0, 128, 0 ],
            red: [ 255, 0, 0 ],
            pink: [ 255, 192, 203 ],
            cyan: [ 0, 255, 255 ],
            transparent: [ 255, 255, 255, 0 ]
          }, _hue = function(h, m1, m2) {
            h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
            return 255 * (6 * h < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : 3 * h < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) + .5 | 0;
          }, _parseColor = CSSPlugin.parseColor = function(v, toHSL) {
            var a, r, g, b, h, s, l, max, min, d, wasHSL;
            if (v) if ("number" === typeof v) a = [ v >> 16, v >> 8 & 255, 255 & v ]; else {
              "," === v.charAt(v.length - 1) && (v = v.substr(0, v.length - 1));
              if (_colorLookup[v]) a = _colorLookup[v]; else if ("#" === v.charAt(0)) {
                if (4 === v.length) {
                  r = v.charAt(1);
                  g = v.charAt(2);
                  b = v.charAt(3);
                  v = "#" + r + r + g + g + b + b;
                }
                v = parseInt(v.substr(1), 16);
                a = [ v >> 16, v >> 8 & 255, 255 & v ];
              } else if ("hsl" === v.substr(0, 3)) {
                a = wasHSL = v.match(_numExp);
                if (toHSL) {
                  if (-1 !== v.indexOf("=")) return v.match(_relNumExp);
                } else {
                  h = Number(a[0]) % 360 / 360;
                  s = Number(a[1]) / 100;
                  l = Number(a[2]) / 100;
                  g = l <= .5 ? l * (s + 1) : l + s - l * s;
                  r = 2 * l - g;
                  a.length > 3 && (a[3] = Number(a[3]));
                  a[0] = _hue(h + 1 / 3, r, g);
                  a[1] = _hue(h, r, g);
                  a[2] = _hue(h - 1 / 3, r, g);
                }
              } else a = v.match(_numExp) || _colorLookup.transparent;
              a[0] = Number(a[0]);
              a[1] = Number(a[1]);
              a[2] = Number(a[2]);
              a.length > 3 && (a[3] = Number(a[3]));
            } else a = _colorLookup.black;
            if (toHSL && !wasHSL) {
              r = a[0] / 255;
              g = a[1] / 255;
              b = a[2] / 255;
              max = Math.max(r, g, b);
              min = Math.min(r, g, b);
              l = (max + min) / 2;
              if (max === min) h = s = 0; else {
                d = max - min;
                s = l > .5 ? d / (2 - max - min) : d / (max + min);
                h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
                h *= 60;
              }
              a[0] = h + .5 | 0;
              a[1] = 100 * s + .5 | 0;
              a[2] = 100 * l + .5 | 0;
            }
            return a;
          }, _formatColors = function(s, toHSL) {
            var colors = s.match(_colorExp) || [], charIndex = 0, parsed = "", i, color, temp;
            if (!colors.length) return s;
            for (i = 0; i < colors.length; i++) {
              color = colors[i];
              temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);
              charIndex += temp.length + color.length;
              color = _parseColor(color, toHSL);
              3 === color.length && color.push(1);
              parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
            }
            return parsed + s.substr(charIndex);
          }, _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";
          for (p in _colorLookup) _colorExp += "|" + p + "\\b";
          _colorExp = new RegExp(_colorExp + ")", "gi");
          CSSPlugin.colorStringFilter = function(a) {
            var combined = a[0] + " " + a[1], toHSL;
            if (_colorExp.test(combined)) {
              toHSL = -1 !== combined.indexOf("hsl(") || -1 !== combined.indexOf("hsla(");
              a[0] = _formatColors(a[0], toHSL);
              a[1] = _formatColors(a[1], toHSL);
            }
            _colorExp.lastIndex = 0;
          };
          TweenLite.defaultStringFilter || (TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter);
          var _getFormatter = function(dflt, clr, collapsible, multi) {
            if (null == dflt) return function(v) {
              return v;
            };
            var dColor = clr ? (dflt.match(_colorExp) || [ "" ])[0] : "", dVals = dflt.split(dColor).join("").match(_valuesExp) || [], pfx = dflt.substr(0, dflt.indexOf(dVals[0])), sfx = ")" === dflt.charAt(dflt.length - 1) ? ")" : "", delim = -1 !== dflt.indexOf(" ") ? " " : ",", numVals = dVals.length, dSfx = numVals > 0 ? dVals[0].replace(_numExp, "") : "", formatter;
            if (!numVals) return function(v) {
              return v;
            };
            if (clr) {
              formatter = function(v) {
                var color, vals, i, a;
                if ("number" === typeof v) v += dSfx; else if (multi && _commasOutsideParenExp.test(v)) {
                  a = v.replace(_commasOutsideParenExp, "|").split("|");
                  for (i = 0; i < a.length; i++) a[i] = formatter(a[i]);
                  return a.join(",");
                }
                color = (v.match(_colorExp) || [ dColor ])[0];
                vals = v.split(color).join("").match(_valuesExp) || [];
                i = vals.length;
                if (numVals > i--) while (++i < numVals) vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];
                return pfx + vals.join(delim) + delim + color + sfx + (-1 !== v.indexOf("inset") ? " inset" : "");
              };
              return formatter;
            }
            formatter = function(v) {
              var vals, a, i;
              if ("number" === typeof v) v += dSfx; else if (multi && _commasOutsideParenExp.test(v)) {
                a = v.replace(_commasOutsideParenExp, "|").split("|");
                for (i = 0; i < a.length; i++) a[i] = formatter(a[i]);
                return a.join(",");
              }
              vals = v.match(_valuesExp) || [];
              i = vals.length;
              if (numVals > i--) while (++i < numVals) vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];
              return pfx + vals.join(delim) + sfx;
            };
            return formatter;
          }, _getEdgeParser = function(props) {
            props = props.split(",");
            return function(t, e, p, cssp, pt, plugin, vars) {
              var a = (e + "").split(" "), i;
              vars = {};
              for (i = 0; i < 4; i++) vars[props[i]] = a[i] = a[i] || a[(i - 1) / 2 >> 0];
              return cssp.parse(t, vars, pt, plugin);
            };
          }, _setPluginRatio = _internals._setPluginRatio = function(v) {
            this.plugin.setRatio(v);
            var d = this.data, proxy = d.proxy, mpt = d.firstMPT, min = 1e-6, val, pt, i, str, p;
            while (mpt) {
              val = proxy[mpt.v];
              mpt.r ? val = mpt.r(val) : val < min && val > -min && (val = 0);
              mpt.t[mpt.p] = val;
              mpt = mpt._next;
            }
            d.autoRotate && (d.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation);
            if (1 === v || 0 === v) {
              mpt = d.firstMPT;
              p = 1 === v ? "e" : "b";
              while (mpt) {
                pt = mpt.t;
                if (pt.type) {
                  if (1 === pt.type) {
                    str = pt.xs0 + pt.s + pt.xs1;
                    for (i = 1; i < pt.l; i++) str += pt["xn" + i] + pt["xs" + (i + 1)];
                    pt[p] = str;
                  }
                } else pt[p] = pt.s + pt.xs0;
                mpt = mpt._next;
              }
            }
          }, MiniPropTween = function(t, p, v, next, r) {
            this.t = t;
            this.p = p;
            this.v = v;
            this.r = r;
            if (next) {
              next._prev = this;
              this._next = next;
            }
          }, _parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
            var bpt = pt, start = {}, end = {}, transform = cssp._transform, oldForce = _forcePT, i, p, xp, mpt, firstPT;
            cssp._transform = null;
            _forcePT = vars;
            pt = firstPT = cssp.parse(t, vars, pt, plugin);
            _forcePT = oldForce;
            if (shallow) {
              cssp._transform = transform;
              if (bpt) {
                bpt._prev = null;
                bpt._prev && (bpt._prev._next = null);
              }
            }
            while (pt && pt !== bpt) {
              if (pt.type <= 1) {
                p = pt.p;
                end[p] = pt.s + pt.c;
                start[p] = pt.s;
                if (!shallow) {
                  mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
                  pt.c = 0;
                }
                if (1 === pt.type) {
                  i = pt.l;
                  while (--i > 0) {
                    xp = "xn" + i;
                    p = pt.p + "_" + xp;
                    end[p] = pt.data[xp];
                    start[p] = pt[xp];
                    shallow || (mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]));
                  }
                }
              }
              pt = pt._next;
            }
            return {
              proxy: start,
              end: end,
              firstMPT: mpt,
              pt: firstPT
            };
          }, CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
            this.t = t;
            this.p = p;
            this.s = s;
            this.c = c;
            this.n = n || p;
            t instanceof CSSPropTween || _overwriteProps.push(this.n);
            this.r = r ? "function" === typeof r ? r : Math.round : r;
            this.type = type || 0;
            if (pr) {
              this.pr = pr;
              _hasPriority = true;
            }
            this.b = void 0 === b ? s : b;
            this.e = void 0 === e ? s + c : e;
            if (next) {
              this._next = next;
              next._prev = this;
            }
          }, _addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) {
            var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
            pt.b = start;
            pt.e = pt.xs0 = end;
            return pt;
          }, _parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
            b = b || dflt || "";
            "function" === typeof e && (e = e(_index, _target));
            pt = new CSSPropTween(t, p, 0, 0, pt, setRatio ? 2 : 1, null, false, pr, b, e);
            e += "";
            if (clrs && _colorExp.test(e + b)) {
              e = [ b, e ];
              CSSPlugin.colorStringFilter(e);
              b = e[0];
              e = e[1];
            }
            var ba = b.split(", ").join(",").split(" "), ea = e.split(", ").join(",").split(" "), l = ba.length, autoRound = false !== _autoRound, i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
            if (-1 !== e.indexOf(",") || -1 !== b.indexOf(",")) {
              if (-1 !== (e + b).indexOf("rgb") || -1 !== (e + b).indexOf("hsl")) {
                ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
              } else {
                ba = ba.join(" ").split(",").join(", ").split(" ");
                ea = ea.join(" ").split(",").join(", ").split(" ");
              }
              l = ba.length;
            }
            if (l !== ea.length) {
              ba = (dflt || "").split(" ");
              l = ba.length;
            }
            pt.plugin = plugin;
            pt.setRatio = setRatio;
            _colorExp.lastIndex = 0;
            for (i = 0; i < l; i++) {
              bv = ba[i];
              ev = ea[i] + "";
              bn = parseFloat(bv);
              if (bn || 0 === bn) pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), !(!autoRound || -1 === ev.indexOf("px")) && Math.round, true); else if (clrs && _colorExp.test(bv)) {
                str = ev.indexOf(")") + 1;
                str = ")" + (str ? ev.substr(str) : "");
                useHSL = -1 !== ev.indexOf("hsl") && _supportsOpacity;
                temp = ev;
                bv = _parseColor(bv, useHSL);
                ev = _parseColor(ev, useHSL);
                hasAlpha = bv.length + ev.length > 6;
                if (hasAlpha && !_supportsOpacity && 0 === ev[3]) {
                  pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                  pt.e = pt.e.split(ea[i]).join("transparent");
                } else {
                  _supportsOpacity || (hasAlpha = false);
                  useHSL ? pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true).appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false).appendXtra("", bv[2], _parseChange(ev[2], bv[2]), hasAlpha ? "%," : "%" + str, false) : pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", Math.round, true).appendXtra("", bv[1], ev[1] - bv[1], ",", Math.round).appendXtra("", bv[2], ev[2] - bv[2], hasAlpha ? "," : str, Math.round);
                  if (hasAlpha) {
                    bv = bv.length < 4 ? 1 : bv[3];
                    pt.appendXtra("", bv, (ev.length < 4 ? 1 : ev[3]) - bv, str, false);
                  }
                }
                _colorExp.lastIndex = 0;
              } else {
                bnums = bv.match(_numExp);
                if (bnums) {
                  enums = ev.match(_relNumExp);
                  if (!enums || enums.length !== bnums.length) return pt;
                  ni = 0;
                  for (xi = 0; xi < bnums.length; xi++) {
                    cv = bnums[xi];
                    temp = bv.indexOf(cv, ni);
                    pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", !(!autoRound || "px" !== bv.substr(temp + cv.length, 2)) && Math.round, 0 === xi);
                    ni = temp + cv.length;
                  }
                  pt["xs" + pt.l] += bv.substr(ni);
                } else pt["xs" + pt.l] += pt.l || pt["xs" + pt.l] ? " " + ev : ev;
              }
            }
            if (-1 !== e.indexOf("=") && pt.data) {
              str = pt.xs0 + pt.data.s;
              for (i = 1; i < pt.l; i++) str += pt["xs" + i] + pt.data["xn" + i];
              pt.e = str + pt["xs" + i];
            }
            if (!pt.l) {
              pt.type = -1;
              pt.xs0 = pt.e;
            }
            return pt.xfirst || pt;
          }, i = 9;
          p = CSSPropTween.prototype;
          p.l = p.pr = 0;
          while (--i > 0) {
            p["xn" + i] = 0;
            p["xs" + i] = "";
          }
          p.xs0 = "";
          p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;
          p.appendXtra = function(pfx, s, c, sfx, r, pad) {
            var pt = this, l = pt.l;
            pt["xs" + l] += pad && (l || pt["xs" + l]) ? " " + pfx : pfx || "";
            if (!c && 0 !== l && !pt.plugin) {
              pt["xs" + l] += s + (sfx || "");
              return pt;
            }
            pt.l++;
            pt.type = pt.setRatio ? 2 : 1;
            pt["xs" + pt.l] = sfx || "";
            if (l > 0) {
              pt.data["xn" + l] = s + c;
              pt.rxp["xn" + l] = r;
              pt["xn" + l] = s;
              if (!pt.plugin) {
                pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
                pt.xfirst.xs0 = 0;
              }
              return pt;
            }
            pt.data = {
              s: s + c
            };
            pt.rxp = {};
            pt.s = s;
            pt.c = c;
            pt.r = r;
            return pt;
          };
          var SpecialProp = function(p, options) {
            options = options || {};
            this.p = options.prefix && _checkPropPrefix(p) || p;
            _specialProps[p] = _specialProps[this.p] = this;
            this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
            options.parser && (this.parse = options.parser);
            this.clrs = options.color;
            this.multi = options.multi;
            this.keyword = options.keyword;
            this.dflt = options.defaultValue;
            this.pr = options.priority || 0;
          }, _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
            "object" !== typeof options && (options = {
              parser: defaults
            });
            var a = p.split(","), d = options.defaultValue, i, temp;
            defaults = defaults || [ d ];
            for (i = 0; i < a.length; i++) {
              options.prefix = 0 === i && options.prefix;
              options.defaultValue = defaults[i] || d;
              temp = new SpecialProp(a[i], options);
            }
          }, _registerPluginProp = _internals._registerPluginProp = function(p) {
            if (!_specialProps[p]) {
              var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
              _registerComplexSpecialProp(p, {
                parser: function(t, e, p, cssp, pt, plugin, vars) {
                  var pluginClass = _globals.com.greensock.plugins[pluginName];
                  if (!pluginClass) {
                    _log("Error: " + pluginName + " js file not loaded.");
                    return pt;
                  }
                  pluginClass._cssRegister();
                  return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
                }
              });
            }
          };
          p = SpecialProp.prototype;
          p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
            var kwd = this.keyword, i, ba, ea, l, bi, ei;
            if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
              ba = b.replace(_commasOutsideParenExp, "|").split("|");
              ea = e.replace(_commasOutsideParenExp, "|").split("|");
            } else if (kwd) {
              ba = [ b ];
              ea = [ e ];
            }
            if (ea) {
              l = ea.length > ba.length ? ea.length : ba.length;
              for (i = 0; i < l; i++) {
                b = ba[i] = ba[i] || this.dflt;
                e = ea[i] = ea[i] || this.dflt;
                if (kwd) {
                  bi = b.indexOf(kwd);
                  ei = e.indexOf(kwd);
                  bi !== ei && (-1 === ei ? ba[i] = ba[i].split(kwd).join("") : -1 === bi && (ba[i] += " " + kwd));
                }
              }
              b = ba.join(", ");
              e = ea.join(", ");
            }
            return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
          };
          p.parse = function(t, e, p, cssp, pt, plugin, vars) {
            return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
          };
          CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
            _registerComplexSpecialProp(name, {
              parser: function(t, e, p, cssp, pt, plugin, vars) {
                var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
                rv.plugin = plugin;
                rv.setRatio = onInitTween(t, e, cssp._tween, p);
                return rv;
              },
              priority: priority
            });
          };
          CSSPlugin.useSVGTransformAttr = true;
          var _transformProps = "scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","), _transformProp = _checkPropPrefix("transform"), _transformPropCSS = _prefixCSS + "transform", _transformOriginProp = _checkPropPrefix("transformOrigin"), _supports3D = null !== _checkPropPrefix("perspective"), Transform = _internals.Transform = function() {
            this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
            this.force3D = !(false === CSSPlugin.defaultForce3D || !_supports3D) && (CSSPlugin.defaultForce3D || "auto");
          }, _SVGElement = _gsScope.SVGElement, _useSVGTransformAttr, _createSVG = function(type, container, attributes) {
            var element = _doc.createElementNS("http://www.w3.org/2000/svg", type), reg = /([a-z])([A-Z])/g, p;
            for (p in attributes) element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
            container.appendChild(element);
            return element;
          }, _docElement = _doc.documentElement || {}, _forceSVGTransformAttr = function() {
            var force = _ieVers || /Android/i.test(_agent) && !_gsScope.chrome, svg, rect, width;
            if (_doc.createElementNS && !force) {
              svg = _createSVG("svg", _docElement);
              rect = _createSVG("rect", svg, {
                width: 100,
                height: 50,
                x: 100
              });
              width = rect.getBoundingClientRect().width;
              rect.style[_transformOriginProp] = "50% 50%";
              rect.style[_transformProp] = "scaleX(0.5)";
              force = width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D);
              _docElement.removeChild(svg);
            }
            return force;
          }(), _parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
            var tm = e._gsTransform, m = _getMatrix(e, true), v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
            if (tm) {
              xOriginOld = tm.xOrigin;
              yOriginOld = tm.yOrigin;
            }
            if (!absolute || (v = absolute.split(" ")).length < 2) {
              b = e.getBBox();
              0 === b.x && 0 === b.y && b.width + b.height === 0 && (b = {
                x: parseFloat(e.hasAttribute("x") ? e.getAttribute("x") : e.hasAttribute("cx") ? e.getAttribute("cx") : 0) || 0,
                y: parseFloat(e.hasAttribute("y") ? e.getAttribute("y") : e.hasAttribute("cy") ? e.getAttribute("cy") : 0) || 0,
                width: 0,
                height: 0
              });
              local = _parsePosition(local).split(" ");
              v = [ (-1 !== local[0].indexOf("%") ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x, (-1 !== local[1].indexOf("%") ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y ];
            }
            decoratee.xOrigin = xOrigin = parseFloat(v[0]);
            decoratee.yOrigin = yOrigin = parseFloat(v[1]);
            if (absolute && m !== _identity2DMatrix) {
              a = m[0];
              b = m[1];
              c = m[2];
              d = m[3];
              tx = m[4];
              ty = m[5];
              determinant = a * d - b * c;
              if (determinant) {
                x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
                y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
                xOrigin = decoratee.xOrigin = v[0] = x;
                yOrigin = decoratee.yOrigin = v[1] = y;
              }
            }
            if (tm) {
              if (skipRecord) {
                decoratee.xOffset = tm.xOffset;
                decoratee.yOffset = tm.yOffset;
                tm = decoratee;
              }
              if (smoothOrigin || false !== smoothOrigin && false !== CSSPlugin.defaultSmoothOrigin) {
                x = xOrigin - xOriginOld;
                y = yOrigin - yOriginOld;
                tm.xOffset += x * m[0] + y * m[2] - x;
                tm.yOffset += x * m[1] + y * m[3] - y;
              } else tm.xOffset = tm.yOffset = 0;
            }
            skipRecord || e.setAttribute("data-svg-origin", v.join(" "));
          }, _getBBoxHack = function(swapIfPossible) {
            var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), oldParent = this.parentNode, oldSibling = this.nextSibling, oldCSS = this.style.cssText, bbox;
            _docElement.appendChild(svg);
            svg.appendChild(this);
            this.style.display = "block";
            if (swapIfPossible) try {
              bbox = this.getBBox();
              this._originalGetBBox = this.getBBox;
              this.getBBox = _getBBoxHack;
            } catch (e) {} else this._originalGetBBox && (bbox = this._originalGetBBox());
            oldSibling ? oldParent.insertBefore(this, oldSibling) : oldParent.appendChild(this);
            _docElement.removeChild(svg);
            this.style.cssText = oldCSS;
            return bbox;
          }, _getBBox = function(e) {
            try {
              return e.getBBox();
            } catch (error) {
              return _getBBoxHack.call(e, true);
            }
          }, _isSVG = function(e) {
            return !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
          }, _identity2DMatrix = [ 1, 0, 0, 1, 0, 0 ], _getMatrix = function(e, force2D) {
            var tm = e._gsTransform || new Transform(), rnd = 1e5, style = e.style, isDefault, s, m, n, dec, none;
            if (_transformProp) s = _getStyle(e, _transformPropCSS, null, true); else if (e.currentStyle) {
              s = e.currentStyle.filter.match(_ieGetMatrixExp);
              s = s && 4 === s.length ? [ s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), tm.x || 0, tm.y || 0 ].join(",") : "";
            }
            isDefault = !s || "none" === s || "matrix(1, 0, 0, 1, 0, 0)" === s;
            if (_transformProp && ((none = !_getComputedStyle(e) || "none" === _getComputedStyle(e).display) || !e.parentNode)) {
              if (none) {
                n = style.display;
                style.display = "block";
              }
              if (!e.parentNode) {
                dec = 1;
                _docElement.appendChild(e);
              }
              s = _getStyle(e, _transformPropCSS, null, true);
              isDefault = !s || "none" === s || "matrix(1, 0, 0, 1, 0, 0)" === s;
              n ? style.display = n : none && _removeProp(style, "display");
              dec && _docElement.removeChild(e);
            }
            if (tm.svg || e.getCTM && _isSVG(e)) {
              if (isDefault && -1 !== (style[_transformProp] + "").indexOf("matrix")) {
                s = style[_transformProp];
                isDefault = 0;
              }
              m = e.getAttribute("transform");
              if (isDefault && m) {
                m = e.transform.baseVal.consolidate().matrix;
                s = "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + m.e + "," + m.f + ")";
                isDefault = 0;
              }
            }
            if (isDefault) return _identity2DMatrix;
            m = (s || "").match(_numExp) || [];
            i = m.length;
            while (--i > -1) {
              n = Number(m[i]);
              m[i] = (dec = n - (n |= 0)) ? (dec * rnd + (dec < 0 ? -.5 : .5) | 0) / rnd + n : n;
            }
            return force2D && m.length > 6 ? [ m[0], m[1], m[4], m[5], m[12], m[13] ] : m;
          }, _getTransform = _internals.getTransform = function(t, cs, rec, parse) {
            if (t._gsTransform && rec && !parse) return t._gsTransform;
            var tm = rec && t._gsTransform || new Transform(), invX = tm.scaleX < 0, min = 2e-5, rnd = 1e5, zOrigin = _supports3D && (parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin) || 0, defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0, m, i, scaleX, scaleY, rotation, skewX;
            tm.svg = !!(t.getCTM && _isSVG(t));
            if (tm.svg) {
              _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
              _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
            }
            m = _getMatrix(t);
            if (m !== _identity2DMatrix) {
              if (16 === m.length) {
                var a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3], a12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7], a13 = m[8], a23 = m[9], a33 = m[10], a14 = m[12], a24 = m[13], a34 = m[14], a43 = m[11], angle = Math.atan2(a32, a33), t1, t2, t3, t4, cos, sin;
                if (tm.zOrigin) {
                  a34 = -tm.zOrigin;
                  a14 = a13 * a34 - m[12];
                  a24 = a23 * a34 - m[13];
                  a34 = a33 * a34 + tm.zOrigin - m[14];
                }
                tm.rotationX = angle * _RAD2DEG;
                if (angle) {
                  cos = Math.cos(-angle);
                  sin = Math.sin(-angle);
                  t1 = a12 * cos + a13 * sin;
                  t2 = a22 * cos + a23 * sin;
                  t3 = a32 * cos + a33 * sin;
                  a13 = a12 * -sin + a13 * cos;
                  a23 = a22 * -sin + a23 * cos;
                  a33 = a32 * -sin + a33 * cos;
                  a43 = a42 * -sin + a43 * cos;
                  a12 = t1;
                  a22 = t2;
                  a32 = t3;
                }
                angle = Math.atan2(-a31, a33);
                tm.rotationY = angle * _RAD2DEG;
                if (angle) {
                  cos = Math.cos(-angle);
                  sin = Math.sin(-angle);
                  t1 = a11 * cos - a13 * sin;
                  t2 = a21 * cos - a23 * sin;
                  t3 = a31 * cos - a33 * sin;
                  a23 = a21 * sin + a23 * cos;
                  a33 = a31 * sin + a33 * cos;
                  a43 = a41 * sin + a43 * cos;
                  a11 = t1;
                  a21 = t2;
                  a31 = t3;
                }
                angle = Math.atan2(a21, a11);
                tm.rotation = angle * _RAD2DEG;
                if (angle) {
                  cos = Math.cos(angle);
                  sin = Math.sin(angle);
                  t1 = a11 * cos + a21 * sin;
                  t2 = a12 * cos + a22 * sin;
                  t3 = a13 * cos + a23 * sin;
                  a21 = a21 * cos - a11 * sin;
                  a22 = a22 * cos - a12 * sin;
                  a23 = a23 * cos - a13 * sin;
                  a11 = t1;
                  a12 = t2;
                  a13 = t3;
                }
                if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) {
                  tm.rotationX = tm.rotation = 0;
                  tm.rotationY = 180 - tm.rotationY;
                }
                angle = Math.atan2(a12, a22);
                tm.scaleX = (Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + .5 | 0) / rnd;
                tm.scaleY = (Math.sqrt(a22 * a22 + a32 * a32) * rnd + .5 | 0) / rnd;
                tm.scaleZ = (Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + .5 | 0) / rnd;
                a11 /= tm.scaleX;
                a12 /= tm.scaleY;
                a21 /= tm.scaleX;
                a22 /= tm.scaleY;
                if (Math.abs(angle) > min) {
                  tm.skewX = angle * _RAD2DEG;
                  a12 = 0;
                  "simple" !== tm.skewType && (tm.scaleY *= 1 / Math.cos(angle));
                } else tm.skewX = 0;
                tm.perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
                tm.x = a14;
                tm.y = a24;
                tm.z = a34;
                if (tm.svg) {
                  tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
                  tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
                }
              } else if (!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) {
                var k = m.length >= 6, a = k ? m[0] : 1, b = m[1] || 0, c = m[2] || 0, d = k ? m[3] : 1;
                tm.x = m[4] || 0;
                tm.y = m[5] || 0;
                scaleX = Math.sqrt(a * a + b * b);
                scaleY = Math.sqrt(d * d + c * c);
                rotation = a || b ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0;
                skewX = c || d ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                tm.scaleX = scaleX;
                tm.scaleY = scaleY;
                tm.rotation = rotation;
                tm.skewX = skewX;
                if (_supports3D) {
                  tm.rotationX = tm.rotationY = tm.z = 0;
                  tm.perspective = defaultTransformPerspective;
                  tm.scaleZ = 1;
                }
                if (tm.svg) {
                  tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
                  tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
                }
              }
              if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) if (invX) {
                tm.scaleX *= -1;
                tm.skewX += tm.rotation <= 0 ? 180 : -180;
                tm.rotation += tm.rotation <= 0 ? 180 : -180;
              } else {
                tm.scaleY *= -1;
                tm.skewX += tm.skewX <= 0 ? 180 : -180;
              }
              tm.zOrigin = zOrigin;
              for (i in tm) tm[i] < min && tm[i] > -min && (tm[i] = 0);
            }
            if (rec) {
              t._gsTransform = tm;
              tm.svg && (_useSVGTransformAttr && t.style[_transformProp] ? TweenLite.delayedCall(.001, function() {
                _removeProp(t.style, _transformProp);
              }) : !_useSVGTransformAttr && t.getAttribute("transform") && TweenLite.delayedCall(.001, function() {
                t.removeAttribute("transform");
              }));
            }
            return tm;
          }, _setIETransformRatio = function(v) {
            var t = this.data, ang = -t.rotation * _DEG2RAD, skew = ang + t.skewX * _DEG2RAD, rnd = 1e5, a = (Math.cos(ang) * t.scaleX * rnd | 0) / rnd, b = (Math.sin(ang) * t.scaleX * rnd | 0) / rnd, c = (Math.sin(skew) * -t.scaleY * rnd | 0) / rnd, d = (Math.cos(skew) * t.scaleY * rnd | 0) / rnd, style = this.t.style, cs = this.t.currentStyle, filters, val;
            if (!cs) return;
            val = b;
            b = -c;
            c = -val;
            filters = cs.filter;
            style.filter = "";
            var w = this.t.offsetWidth, h = this.t.offsetHeight, clip = "absolute" !== cs.position, m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d, ox = t.x + w * t.xPercent / 100, oy = t.y + h * t.yPercent / 100, dx, dy;
            if (null != t.ox) {
              dx = (t.oxp ? w * t.ox * .01 : t.ox) - w / 2;
              dy = (t.oyp ? h * t.oy * .01 : t.oy) - h / 2;
              ox += dx - (dx * a + dy * b);
              oy += dy - (dx * c + dy * d);
            }
            if (clip) {
              dx = w / 2;
              dy = h / 2;
              m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
            } else m += ", sizingMethod='auto expand')";
            -1 !== filters.indexOf("DXImageTransform.Microsoft.Matrix(") ? style.filter = filters.replace(_ieSetMatrixExp, m) : style.filter = m + " " + filters;
            0 !== v && 1 !== v || 1 === a && 0 === b && 0 === c && 1 === d && (clip && -1 === m.indexOf("Dx=0, Dy=0") || _opacityExp.test(filters) && 100 !== parseFloat(RegExp.$1) || -1 === filters.indexOf(("gradient(", 
            filters.indexOf("Alpha"))) && style.removeAttribute("filter"));
            if (!clip) {
              var mult = _ieVers < 8 ? 1 : -1, marg, prop, dif;
              dx = t.ieOffsetX || 0;
              dy = t.ieOffsetY || 0;
              t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
              t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
              for (i = 0; i < 4; i++) {
                prop = _margins[i];
                marg = cs[prop];
                val = -1 !== marg.indexOf("px") ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                dif = val !== t[prop] ? i < 2 ? -t.ieOffsetX : -t.ieOffsetY : i < 2 ? dx - t.ieOffsetX : dy - t.ieOffsetY;
                style[prop] = (t[prop] = Math.round(val - dif * (0 === i || 2 === i ? 1 : mult))) + "px";
              }
            }
          }, _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
            var t = this.data, style = this.t.style, angle = t.rotation, rotationX = t.rotationX, rotationY = t.rotationY, sx = t.scaleX, sy = t.scaleY, sz = t.scaleZ, x = t.x, y = t.y, z = t.z, isSVG = t.svg, perspective = t.perspective, force3D = t.force3D, skewY = t.skewY, skewX = t.skewX, t1, a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43, zOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;
            if (skewY) {
              skewX += skewY;
              angle += skewY;
            }
            if (((1 === v || 0 === v) && "auto" === force3D && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !force3D) && !z && !perspective && !rotationY && !rotationX && 1 === sz || _useSVGTransformAttr && isSVG || !_supports3D) {
              if (angle || skewX || isSVG) {
                angle *= _DEG2RAD;
                skew = skewX * _DEG2RAD;
                rnd = 1e5;
                a11 = Math.cos(angle) * sx;
                a21 = Math.sin(angle) * sx;
                a12 = Math.sin(angle - skew) * -sy;
                a22 = Math.cos(angle - skew) * sy;
                if (skew && "simple" === t.skewType) {
                  t1 = Math.tan(skew - skewY * _DEG2RAD);
                  t1 = Math.sqrt(1 + t1 * t1);
                  a12 *= t1;
                  a22 *= t1;
                  if (skewY) {
                    t1 = Math.tan(skewY * _DEG2RAD);
                    t1 = Math.sqrt(1 + t1 * t1);
                    a11 *= t1;
                    a21 *= t1;
                  }
                }
                if (isSVG) {
                  x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                  y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                  if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) {
                    min = this.t.getBBox();
                    x += .01 * t.xPercent * min.width;
                    y += .01 * t.yPercent * min.height;
                  }
                  min = 1e-6;
                  x < min && x > -min && (x = 0);
                  y < min && y > -min && (y = 0);
                }
                transform = (a11 * rnd | 0) / rnd + "," + (a21 * rnd | 0) / rnd + "," + (a12 * rnd | 0) / rnd + "," + (a22 * rnd | 0) / rnd + "," + x + "," + y + ")";
                isSVG && _useSVGTransformAttr ? this.t.setAttribute("transform", "matrix(" + transform) : style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
              } else style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
              return;
            }
            if (_isFirefox) {
              min = 1e-4;
              sx < min && sx > -min && (sx = sz = 2e-5);
              sy < min && sy > -min && (sy = sz = 2e-5);
              !perspective || t.z || t.rotationX || t.rotationY || (perspective = 0);
            }
            if (angle || skewX) {
              angle *= _DEG2RAD;
              cos = a11 = Math.cos(angle);
              sin = a21 = Math.sin(angle);
              if (skewX) {
                angle -= skewX * _DEG2RAD;
                cos = Math.cos(angle);
                sin = Math.sin(angle);
                if ("simple" === t.skewType) {
                  t1 = Math.tan((skewX - skewY) * _DEG2RAD);
                  t1 = Math.sqrt(1 + t1 * t1);
                  cos *= t1;
                  sin *= t1;
                  if (t.skewY) {
                    t1 = Math.tan(skewY * _DEG2RAD);
                    t1 = Math.sqrt(1 + t1 * t1);
                    a11 *= t1;
                    a21 *= t1;
                  }
                }
              }
              a12 = -sin;
              a22 = cos;
            } else {
              if (!(rotationY || rotationX || 1 !== sz || perspective || isSVG)) {
                style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z + "px)" + (1 !== sx || 1 !== sy ? " scale(" + sx + "," + sy + ")" : "");
                return;
              }
              a11 = a22 = 1;
              a12 = a21 = 0;
            }
            a33 = 1;
            a13 = a23 = a31 = a32 = a41 = a42 = 0;
            a43 = perspective ? -1 / perspective : 0;
            zOrigin = t.zOrigin;
            min = 1e-6;
            comma = ",";
            zero = "0";
            angle = rotationY * _DEG2RAD;
            if (angle) {
              cos = Math.cos(angle);
              sin = Math.sin(angle);
              a31 = -sin;
              a41 = a43 * -sin;
              a13 = a11 * sin;
              a23 = a21 * sin;
              a33 = cos;
              a43 *= cos;
              a11 *= cos;
              a21 *= cos;
            }
            angle = rotationX * _DEG2RAD;
            if (angle) {
              cos = Math.cos(angle);
              sin = Math.sin(angle);
              t1 = a12 * cos + a13 * sin;
              t2 = a22 * cos + a23 * sin;
              a32 = a33 * sin;
              a42 = a43 * sin;
              a13 = a12 * -sin + a13 * cos;
              a23 = a22 * -sin + a23 * cos;
              a33 *= cos;
              a43 *= cos;
              a12 = t1;
              a22 = t2;
            }
            if (1 !== sz) {
              a13 *= sz;
              a23 *= sz;
              a33 *= sz;
              a43 *= sz;
            }
            if (1 !== sy) {
              a12 *= sy;
              a22 *= sy;
              a32 *= sy;
              a42 *= sy;
            }
            if (1 !== sx) {
              a11 *= sx;
              a21 *= sx;
              a31 *= sx;
              a41 *= sx;
            }
            if (zOrigin || isSVG) {
              if (zOrigin) {
                x += a13 * -zOrigin;
                y += a23 * -zOrigin;
                z += a33 * -zOrigin + zOrigin;
              }
              if (isSVG) {
                x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
              }
              x < min && x > -min && (x = zero);
              y < min && y > -min && (y = zero);
              z < min && z > -min && (z = 0);
            }
            transform = t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(";
            transform += (a11 < min && a11 > -min ? zero : a11) + comma + (a21 < min && a21 > -min ? zero : a21) + comma + (a31 < min && a31 > -min ? zero : a31);
            transform += comma + (a41 < min && a41 > -min ? zero : a41) + comma + (a12 < min && a12 > -min ? zero : a12) + comma + (a22 < min && a22 > -min ? zero : a22);
            if (rotationX || rotationY || 1 !== sz) {
              transform += comma + (a32 < min && a32 > -min ? zero : a32) + comma + (a42 < min && a42 > -min ? zero : a42) + comma + (a13 < min && a13 > -min ? zero : a13);
              transform += comma + (a23 < min && a23 > -min ? zero : a23) + comma + (a33 < min && a33 > -min ? zero : a33) + comma + (a43 < min && a43 > -min ? zero : a43) + comma;
            } else transform += ",0,0,0,0,1,0,";
            transform += x + comma + y + comma + z + comma + (perspective ? 1 + -z / perspective : 1) + ")";
            style[_transformProp] = transform;
          };
          p = Transform.prototype;
          p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
          p.scaleX = p.scaleY = p.scaleZ = 1;
          _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
            parser: function(t, e, parsingProp, cssp, pt, plugin, vars) {
              if (cssp._lastParsedTransform === vars) return pt;
              cssp._lastParsedTransform = vars;
              var scaleFunc = vars.scale && "function" === typeof vars.scale ? vars.scale : 0, swapFunc;
              if ("function" === typeof vars[parsingProp]) {
                swapFunc = vars[parsingProp];
                vars[parsingProp] = e;
              }
              scaleFunc && (vars.scale = scaleFunc(_index, t));
              var originalGSTransform = t._gsTransform, style = t.style, min = 1e-6, i = _transformProps.length, v = vars, endRotations = {}, transformOriginString = "transformOrigin", m1 = _getTransform(t, _cs, true, v.parseTransform), orig = v.transform && ("function" === typeof v.transform ? v.transform(_index, _target) : v.transform), m2, copy, has3D, hasChange, dr, x, y, matrix, p;
              m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
              cssp._transform = m1;
              "rotationZ" in v && (v.rotation = v.rotationZ);
              if (orig && "string" === typeof orig && _transformProp) {
                copy = _tempDiv.style;
                copy[_transformProp] = orig;
                copy.display = "block";
                copy.position = "absolute";
                if (-1 !== orig.indexOf("%")) {
                  copy.width = _getStyle(t, "width");
                  copy.height = _getStyle(t, "height");
                }
                _doc.body.appendChild(_tempDiv);
                m2 = _getTransform(_tempDiv, null, false);
                "simple" === m1.skewType && (m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD));
                if (m1.svg) {
                  x = m1.xOrigin;
                  y = m1.yOrigin;
                  m2.x -= m1.xOffset;
                  m2.y -= m1.yOffset;
                  if (v.transformOrigin || v.svgOrigin) {
                    orig = {};
                    _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
                    x = orig.xOrigin;
                    y = orig.yOrigin;
                    m2.x -= orig.xOffset - m1.xOffset;
                    m2.y -= orig.yOffset - m1.yOffset;
                  }
                  if (x || y) {
                    matrix = _getMatrix(_tempDiv, true);
                    m2.x -= x - (x * matrix[0] + y * matrix[2]);
                    m2.y -= y - (x * matrix[1] + y * matrix[3]);
                  }
                }
                _doc.body.removeChild(_tempDiv);
                m2.perspective || (m2.perspective = m1.perspective);
                null != v.xPercent && (m2.xPercent = _parseVal(v.xPercent, m1.xPercent));
                null != v.yPercent && (m2.yPercent = _parseVal(v.yPercent, m1.yPercent));
              } else if ("object" === typeof v) {
                m2 = {
                  scaleX: _parseVal(null != v.scaleX ? v.scaleX : v.scale, m1.scaleX),
                  scaleY: _parseVal(null != v.scaleY ? v.scaleY : v.scale, m1.scaleY),
                  scaleZ: _parseVal(v.scaleZ, m1.scaleZ),
                  x: _parseVal(v.x, m1.x),
                  y: _parseVal(v.y, m1.y),
                  z: _parseVal(v.z, m1.z),
                  xPercent: _parseVal(v.xPercent, m1.xPercent),
                  yPercent: _parseVal(v.yPercent, m1.yPercent),
                  perspective: _parseVal(v.transformPerspective, m1.perspective)
                };
                dr = v.directionalRotation;
                if (null != dr) if ("object" === typeof dr) for (copy in dr) v[copy] = dr[copy]; else v.rotation = dr;
                if ("string" === typeof v.x && -1 !== v.x.indexOf("%")) {
                  m2.x = 0;
                  m2.xPercent = _parseVal(v.x, m1.xPercent);
                }
                if ("string" === typeof v.y && -1 !== v.y.indexOf("%")) {
                  m2.y = 0;
                  m2.yPercent = _parseVal(v.y, m1.yPercent);
                }
                m2.rotation = _parseAngle("rotation" in v ? v.rotation : "shortRotation" in v ? v.shortRotation + "_short" : m1.rotation, m1.rotation, "rotation", endRotations);
                if (_supports3D) {
                  m2.rotationX = _parseAngle("rotationX" in v ? v.rotationX : "shortRotationX" in v ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
                  m2.rotationY = _parseAngle("rotationY" in v ? v.rotationY : "shortRotationY" in v ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
                }
                m2.skewX = _parseAngle(v.skewX, m1.skewX);
                m2.skewY = _parseAngle(v.skewY, m1.skewY);
              }
              if (_supports3D && null != v.force3D) {
                m1.force3D = v.force3D;
                hasChange = true;
              }
              has3D = m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;
              has3D || null == v.scale || (m2.scaleZ = 1);
              while (--i > -1) {
                p = _transformProps[i];
                orig = m2[p] - m1[p];
                if (orig > min || orig < -min || null != v[p] || null != _forcePT[p]) {
                  hasChange = true;
                  pt = new CSSPropTween(m1, p, m1[p], orig, pt);
                  p in endRotations && (pt.e = endRotations[p]);
                  pt.xs0 = 0;
                  pt.plugin = plugin;
                  cssp._overwriteProps.push(pt.n);
                }
              }
              orig = v.transformOrigin;
              if (m1.svg && (orig || v.svgOrigin)) {
                x = m1.xOffset;
                y = m1.yOffset;
                _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
                pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString);
                pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
                if (x !== m1.xOffset || y !== m1.yOffset) {
                  pt = _addNonTweeningNumericPT(m1, "xOffset", originalGSTransform ? x : m1.xOffset, m1.xOffset, pt, transformOriginString);
                  pt = _addNonTweeningNumericPT(m1, "yOffset", originalGSTransform ? y : m1.yOffset, m1.yOffset, pt, transformOriginString);
                }
                orig = "0px 0px";
              }
              if (orig || _supports3D && has3D && m1.zOrigin) if (_transformProp) {
                hasChange = true;
                p = _transformOriginProp;
                orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + "";
                pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
                pt.b = style[p];
                pt.plugin = plugin;
                if (_supports3D) {
                  copy = m1.zOrigin;
                  orig = orig.split(" ");
                  m1.zOrigin = (orig.length > 2 && !(0 !== copy && "0px" === orig[2]) ? parseFloat(orig[2]) : copy) || 0;
                  pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px";
                  pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n);
                  pt.b = copy;
                  pt.xs0 = pt.e = m1.zOrigin;
                } else pt.xs0 = pt.e = orig;
              } else _parsePosition(orig + "", m1);
              hasChange && (cssp._transformType = m1.svg && _useSVGTransformAttr || !has3D && 3 !== this._transformType ? 2 : 3);
              swapFunc && (vars[parsingProp] = swapFunc);
              scaleFunc && (vars.scale = scaleFunc);
              return pt;
            },
            prefix: true
          });
          _registerComplexSpecialProp("boxShadow", {
            defaultValue: "0px 0px 0px 0px #999",
            prefix: true,
            color: true,
            multi: true,
            keyword: "inset"
          });
          _registerComplexSpecialProp("borderRadius", {
            defaultValue: "0px",
            parser: function(t, e, p, cssp, pt, plugin) {
              e = this.format(e);
              var props = [ "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius" ], style = t.style, ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
              w = parseFloat(t.offsetWidth);
              h = parseFloat(t.offsetHeight);
              ea1 = e.split(" ");
              for (i = 0; i < props.length; i++) {
                this.p.indexOf("border") && (props[i] = _checkPropPrefix(props[i]));
                bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                if (-1 !== bs.indexOf(" ")) {
                  bs2 = bs.split(" ");
                  bs = bs2[0];
                  bs2 = bs2[1];
                }
                es = es2 = ea1[i];
                bn = parseFloat(bs);
                bsfx = bs.substr((bn + "").length);
                rel = "=" === es.charAt(1);
                if (rel) {
                  en = parseInt(es.charAt(0) + "1", 10);
                  es = es.substr(2);
                  en *= parseFloat(es);
                  esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
                } else {
                  en = parseFloat(es);
                  esfx = es.substr((en + "").length);
                }
                "" === esfx && (esfx = _suffixMap[p] || bsfx);
                if (esfx !== bsfx) {
                  hn = _convertToPixels(t, "borderLeft", bn, bsfx);
                  vn = _convertToPixels(t, "borderTop", bn, bsfx);
                  if ("%" === esfx) {
                    bs = hn / w * 100 + "%";
                    bs2 = vn / h * 100 + "%";
                  } else if ("em" === esfx) {
                    em = _convertToPixels(t, "borderLeft", 1, "em");
                    bs = hn / em + "em";
                    bs2 = vn / em + "em";
                  } else {
                    bs = hn + "px";
                    bs2 = vn + "px";
                  }
                  if (rel) {
                    es = parseFloat(bs) + en + esfx;
                    es2 = parseFloat(bs2) + en + esfx;
                  }
                }
                pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
              }
              return pt;
            },
            prefix: true,
            formatter: _getFormatter("0px 0px 0px 0px", false, true)
          });
          _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
            defaultValue: "0px",
            parser: function(t, e, p, cssp, pt, plugin) {
              return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
            },
            prefix: true,
            formatter: _getFormatter("0px 0px", false, true)
          });
          _registerComplexSpecialProp("backgroundPosition", {
            defaultValue: "0 0",
            parser: function(t, e, p, cssp, pt, plugin) {
              var bp = "background-position", cs = _cs || _getComputedStyle(t, null), bs = this.format((cs ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), es = this.format(e), ba, ea, i, pct, overlap, src;
              if (-1 !== bs.indexOf("%") !== (-1 !== es.indexOf("%")) && es.split(",").length < 2) {
                src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
                if (src && "none" !== src) {
                  ba = bs.split(" ");
                  ea = es.split(" ");
                  _tempImg.setAttribute("src", src);
                  i = 2;
                  while (--i > -1) {
                    bs = ba[i];
                    pct = -1 !== bs.indexOf("%");
                    if (pct !== (-1 !== ea[i].indexOf("%"))) {
                      overlap = 0 === i ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
                      ba[i] = pct ? parseFloat(bs) / 100 * overlap + "px" : parseFloat(bs) / overlap * 100 + "%";
                    }
                  }
                  bs = ba.join(" ");
                }
              }
              return this.parseComplex(t.style, bs, es, pt, plugin);
            },
            formatter: _parsePosition
          });
          _registerComplexSpecialProp("backgroundSize", {
            defaultValue: "0 0",
            formatter: function(v) {
              v += "";
              return "co" === v.substr(0, 2) ? v : _parsePosition(-1 === v.indexOf(" ") ? v + " " + v : v);
            }
          });
          _registerComplexSpecialProp("perspective", {
            defaultValue: "0px",
            prefix: true
          });
          _registerComplexSpecialProp("perspectiveOrigin", {
            defaultValue: "50% 50%",
            prefix: true
          });
          _registerComplexSpecialProp("transformStyle", {
            prefix: true
          });
          _registerComplexSpecialProp("backfaceVisibility", {
            prefix: true
          });
          _registerComplexSpecialProp("userSelect", {
            prefix: true
          });
          _registerComplexSpecialProp("margin", {
            parser: _getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")
          });
          _registerComplexSpecialProp("padding", {
            parser: _getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")
          });
          _registerComplexSpecialProp("clip", {
            defaultValue: "rect(0px,0px,0px,0px)",
            parser: function(t, e, p, cssp, pt, plugin) {
              var b, cs, delim;
              if (_ieVers < 9) {
                cs = t.currentStyle;
                delim = _ieVers < 8 ? " " : ",";
                b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
                e = this.format(e).split(",").join(delim);
              } else {
                b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
                e = this.format(e);
              }
              return this.parseComplex(t.style, b, e, pt, plugin);
            }
          });
          _registerComplexSpecialProp("textShadow", {
            defaultValue: "0px 0px 0px #999",
            color: true,
            multi: true
          });
          _registerComplexSpecialProp("autoRound,strictUnits", {
            parser: function(t, e, p, cssp, pt) {
              return pt;
            }
          });
          _registerComplexSpecialProp("border", {
            defaultValue: "0px solid #000",
            parser: function(t, e, p, cssp, pt, plugin) {
              var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"), end = this.format(e).split(" "), esfx = end[0].replace(_suffixExp, "");
              "px" !== esfx && (bw = parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx) + esfx);
              return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
            },
            color: true,
            formatter: function(v) {
              var a = v.split(" ");
              return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || [ "#000" ])[0];
            }
          });
          _registerComplexSpecialProp("borderWidth", {
            parser: _getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")
          });
          _registerComplexSpecialProp("float,cssFloat,styleFloat", {
            parser: function(t, e, p, cssp, pt, plugin) {
              var s = t.style, prop = "cssFloat" in s ? "cssFloat" : "styleFloat";
              return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
            }
          });
          var _setIEOpacityRatio = function(v) {
            var t = this.t, filters = t.filter || _getStyle(this.data, "filter") || "", val = this.s + this.c * v | 0, skip;
            if (100 === val) if (-1 === filters.indexOf("atrix(") && -1 === filters.indexOf("radient(") && -1 === filters.indexOf("oader(")) {
              t.removeAttribute("filter");
              skip = !_getStyle(this.data, "filter");
            } else {
              t.filter = filters.replace(_alphaFilterExp, "");
              skip = true;
            }
            if (!skip) {
              this.xn1 && (t.filter = filters = filters || "alpha(opacity=" + val + ")");
              -1 === filters.indexOf("pacity") ? 0 === val && this.xn1 || (t.filter = filters + " alpha(opacity=" + val + ")") : t.filter = filters.replace(_opacityExp, "opacity=" + val);
            }
          };
          _registerComplexSpecialProp("opacity,alpha,autoAlpha", {
            defaultValue: "1",
            parser: function(t, e, p, cssp, pt, plugin) {
              var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")), style = t.style, isAutoAlpha = "autoAlpha" === p;
              "string" === typeof e && "=" === e.charAt(1) && (e = ("-" === e.charAt(0) ? -1 : 1) * parseFloat(e.substr(2)) + b);
              isAutoAlpha && 1 === b && "hidden" === _getStyle(t, "visibility", _cs) && 0 !== e && (b = 0);
              if (_supportsOpacity) pt = new CSSPropTween(style, "opacity", b, e - b, pt); else {
                pt = new CSSPropTween(style, "opacity", 100 * b, 100 * (e - b), pt);
                pt.xn1 = isAutoAlpha ? 1 : 0;
                style.zoom = 1;
                pt.type = 2;
                pt.b = "alpha(opacity=" + pt.s + ")";
                pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
                pt.data = t;
                pt.plugin = plugin;
                pt.setRatio = _setIEOpacityRatio;
              }
              if (isAutoAlpha) {
                pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, 0 !== b ? "inherit" : "hidden", 0 === e ? "hidden" : "inherit");
                pt.xs0 = "inherit";
                cssp._overwriteProps.push(pt.n);
                cssp._overwriteProps.push(p);
              }
              return pt;
            }
          });
          var _removeProp = function(s, p) {
            if (p) if (s.removeProperty) {
              "ms" !== p.substr(0, 2) && "webkit" !== p.substr(0, 6) || (p = "-" + p);
              s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
            } else s.removeAttribute(p);
          }, _setClassNameRatio = function(v) {
            this.t._gsClassPT = this;
            if (1 === v || 0 === v) {
              this.t.setAttribute("class", 0 === v ? this.b : this.e);
              var mpt = this.data, s = this.t.style;
              while (mpt) {
                mpt.v ? s[mpt.p] = mpt.v : _removeProp(s, mpt.p);
                mpt = mpt._next;
              }
              1 === v && this.t._gsClassPT === this && (this.t._gsClassPT = null);
            } else this.t.getAttribute("class") !== this.e && this.t.setAttribute("class", this.e);
          };
          _registerComplexSpecialProp("className", {
            parser: function(t, e, p, cssp, pt, plugin, vars) {
              var b = t.getAttribute("class") || "", cssText = t.style.cssText, difData, bs, cnpt, cnptLookup, mpt;
              pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
              pt.setRatio = _setClassNameRatio;
              pt.pr = -11;
              _hasPriority = true;
              pt.b = b;
              bs = _getAllStyles(t, _cs);
              cnpt = t._gsClassPT;
              if (cnpt) {
                cnptLookup = {};
                mpt = cnpt.data;
                while (mpt) {
                  cnptLookup[mpt.p] = 1;
                  mpt = mpt._next;
                }
                cnpt.setRatio(1);
              }
              t._gsClassPT = pt;
              pt.e = "=" !== e.charAt(1) ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ("+" === e.charAt(0) ? " " + e.substr(2) : "");
              t.setAttribute("class", pt.e);
              difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
              t.setAttribute("class", b);
              pt.data = difData.firstMPT;
              t.style.cssText = cssText;
              pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin);
              return pt;
            }
          });
          var _setClearPropsRatio = function(v) {
            if ((1 === v || 0 === v) && this.data._totalTime === this.data._totalDuration && "isFromStart" !== this.data.data) {
              var s = this.t.style, transformParse = _specialProps.transform.parse, a, p, i, clearTransform, transform;
              if ("all" === this.e) {
                s.cssText = "";
                clearTransform = true;
              } else {
                a = this.e.split(" ").join("").split(",");
                i = a.length;
                while (--i > -1) {
                  p = a[i];
                  _specialProps[p] && (_specialProps[p].parse === transformParse ? clearTransform = true : p = "transformOrigin" === p ? _transformOriginProp : _specialProps[p].p);
                  _removeProp(s, p);
                }
              }
              if (clearTransform) {
                _removeProp(s, _transformProp);
                transform = this.t._gsTransform;
                if (transform) {
                  if (transform.svg) {
                    this.t.removeAttribute("data-svg-origin");
                    this.t.removeAttribute("transform");
                  }
                  delete this.t._gsTransform;
                }
              }
            }
          };
          _registerComplexSpecialProp("clearProps", {
            parser: function(t, e, p, cssp, pt) {
              pt = new CSSPropTween(t, p, 0, 0, pt, 2);
              pt.setRatio = _setClearPropsRatio;
              pt.e = e;
              pt.pr = -10;
              pt.data = cssp._tween;
              _hasPriority = true;
              return pt;
            }
          });
          p = "bezier,throwProps,physicsProps,physics2D".split(",");
          i = p.length;
          while (i--) _registerPluginProp(p[i]);
          p = CSSPlugin.prototype;
          p._firstPT = p._lastParsedTransform = p._transform = null;
          p._onInitTween = function(target, vars, tween, index) {
            if (!target.nodeType) return false;
            this._target = _target = target;
            this._tween = tween;
            this._vars = vars;
            _index = index;
            _autoRound = vars.autoRound;
            _hasPriority = false;
            _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
            _cs = _getComputedStyle(target, "");
            _overwriteProps = this._overwriteProps;
            var style = target.style, v, pt, pt2, first, last, next, zIndex, tpt, threeD;
            if (_reqSafariFix && "" === style.zIndex) {
              v = _getStyle(target, "zIndex", _cs);
              "auto" !== v && "" !== v || this._addLazySet(style, "zIndex", 0);
            }
            if ("string" === typeof vars) {
              first = style.cssText;
              v = _getAllStyles(target, _cs);
              style.cssText = first + ";" + vars;
              v = _cssDif(target, v, _getAllStyles(target)).difs;
              !_supportsOpacity && _opacityValExp.test(vars) && (v.opacity = parseFloat(RegExp.$1));
              vars = v;
              style.cssText = first;
            }
            vars.className ? this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars) : this._firstPT = pt = this.parse(target, vars, null);
            if (this._transformType) {
              threeD = 3 === this._transformType;
              if (_transformProp) {
                if (_isSafari) {
                  _reqSafariFix = true;
                  if ("" === style.zIndex) {
                    zIndex = _getStyle(target, "zIndex", _cs);
                    "auto" !== zIndex && "" !== zIndex || this._addLazySet(style, "zIndex", 0);
                  }
                  _isSafariLT6 && this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
                }
              } else style.zoom = 1;
              pt2 = pt;
              while (pt2 && pt2._next) pt2 = pt2._next;
              tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
              this._linkCSSP(tpt, null, pt2);
              tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
              tpt.data = this._transform || _getTransform(target, _cs, true);
              tpt.tween = tween;
              tpt.pr = -1;
              _overwriteProps.pop();
            }
            if (_hasPriority) {
              while (pt) {
                next = pt._next;
                pt2 = first;
                while (pt2 && pt2.pr > pt.pr) pt2 = pt2._next;
                (pt._prev = pt2 ? pt2._prev : last) ? pt._prev._next = pt : first = pt;
                (pt._next = pt2) ? pt2._prev = pt : last = pt;
                pt = next;
              }
              this._firstPT = first;
            }
            return true;
          };
          p.parse = function(target, vars, pt, plugin) {
            var style = target.style, p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
            for (p in vars) {
              es = vars[p];
              "function" === typeof es && (es = es(_index, _target));
              sp = _specialProps[p];
              if (sp) pt = sp.parse(target, es, p, this, pt, plugin, vars); else {
                if ("--" === p.substr(0, 2)) {
                  this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", es + "", p, false, p);
                  continue;
                }
                bs = _getStyle(target, p, _cs) + "";
                isStr = "string" === typeof es;
                if ("color" === p || "fill" === p || "stroke" === p || -1 !== p.indexOf("Color") || isStr && _rgbhslExp.test(es)) {
                  if (!isStr) {
                    es = _parseColor(es);
                    es = (es.length > 3 ? "rgba(" : "rgb(") + es.join(",") + ")";
                  }
                  pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);
                } else if (isStr && _complexExp.test(es)) pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin); else {
                  bn = parseFloat(bs);
                  bsfx = bn || 0 === bn ? bs.substr((bn + "").length) : "";
                  if ("" === bs || "auto" === bs) if ("width" === p || "height" === p) {
                    bn = _getDimension(target, p, _cs);
                    bsfx = "px";
                  } else if ("left" === p || "top" === p) {
                    bn = _calculateOffset(target, p, _cs);
                    bsfx = "px";
                  } else {
                    bn = "opacity" !== p ? 0 : 1;
                    bsfx = "";
                  }
                  rel = isStr && "=" === es.charAt(1);
                  if (rel) {
                    en = parseInt(es.charAt(0) + "1", 10);
                    es = es.substr(2);
                    en *= parseFloat(es);
                    esfx = es.replace(_suffixExp, "");
                  } else {
                    en = parseFloat(es);
                    esfx = isStr ? es.replace(_suffixExp, "") : "";
                  }
                  "" === esfx && (esfx = p in _suffixMap ? _suffixMap[p] : bsfx);
                  es = en || 0 === en ? (rel ? en + bn : en) + esfx : vars[p];
                  if (bsfx !== esfx && ("" !== esfx || "lineHeight" === p) && (en || 0 === en) && bn) {
                    bn = _convertToPixels(target, p, bn, bsfx);
                    if ("%" === esfx) {
                      bn /= _convertToPixels(target, p, 100, "%") / 100;
                      true !== vars.strictUnits && (bs = bn + "%");
                    } else if ("em" === esfx || "rem" === esfx || "vw" === esfx || "vh" === esfx) bn /= _convertToPixels(target, p, 1, esfx); else if ("px" !== esfx) {
                      en = _convertToPixels(target, p, en, esfx);
                      esfx = "px";
                    }
                    rel && (en || 0 === en) && (es = en + bn + esfx);
                  }
                  rel && (en += bn);
                  if (!bn && 0 !== bn || !en && 0 !== en) if (void 0 !== style[p] && (es || es + "" !== "NaN" && null != es)) {
                    pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
                    pt.xs0 = "none" !== es || "display" !== p && -1 === p.indexOf("Style") ? es : bs;
                  } else _log("invalid " + p + " tween value: " + vars[p]); else {
                    pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, false !== _autoRound && ("px" === esfx || "zIndex" === p), 0, bs, es);
                    pt.xs0 = esfx;
                  }
                }
              }
              plugin && pt && !pt.plugin && (pt.plugin = plugin);
            }
            return pt;
          };
          p.setRatio = function(v) {
            var pt = this._firstPT, min = 1e-6, val, str, i;
            if (1 !== v || this._tween._time !== this._tween._duration && 0 !== this._tween._time) if (v || !(this._tween._time === this._tween._duration || 0 === this._tween._time) || -1e-6 === this._tween._rawPrevTime) while (pt) {
              val = pt.c * v + pt.s;
              pt.r ? val = pt.r(val) : val < min && val > -min && (val = 0);
              if (pt.type) if (1 === pt.type) {
                i = pt.l;
                if (2 === i) pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2; else if (3 === i) pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3; else if (4 === i) pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4; else if (5 === i) pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5; else {
                  str = pt.xs0 + val + pt.xs1;
                  for (i = 1; i < pt.l; i++) str += pt["xn" + i] + pt["xs" + (i + 1)];
                  pt.t[pt.p] = str;
                }
              } else -1 === pt.type ? pt.t[pt.p] = pt.xs0 : pt.setRatio && pt.setRatio(v); else pt.t[pt.p] = val + pt.xs0;
              pt = pt._next;
            } else while (pt) {
              2 !== pt.type ? pt.t[pt.p] = pt.b : pt.setRatio(v);
              pt = pt._next;
            } else while (pt) {
              if (2 !== pt.type) if (pt.r && -1 !== pt.type) {
                val = pt.r(pt.s + pt.c);
                if (pt.type) {
                  if (1 === pt.type) {
                    i = pt.l;
                    str = pt.xs0 + val + pt.xs1;
                    for (i = 1; i < pt.l; i++) str += pt["xn" + i] + pt["xs" + (i + 1)];
                    pt.t[pt.p] = str;
                  }
                } else pt.t[pt.p] = val + pt.xs0;
              } else pt.t[pt.p] = pt.e; else pt.setRatio(v);
              pt = pt._next;
            }
          };
          p._enableTransforms = function(threeD) {
            this._transform = this._transform || _getTransform(this._target, _cs, true);
            this._transformType = this._transform.svg && _useSVGTransformAttr || !threeD && 3 !== this._transformType ? 2 : 3;
          };
          var lazySet = function(v) {
            this.t[this.p] = this.e;
            this.data._linkCSSP(this, this._next, null, true);
          };
          p._addLazySet = function(t, p, v) {
            var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
            pt.e = v;
            pt.setRatio = lazySet;
            pt.data = this;
          };
          p._linkCSSP = function(pt, next, prev, remove) {
            if (pt) {
              next && (next._prev = pt);
              pt._next && (pt._next._prev = pt._prev);
              if (pt._prev) pt._prev._next = pt._next; else if (this._firstPT === pt) {
                this._firstPT = pt._next;
                remove = true;
              }
              prev ? prev._next = pt : remove || null !== this._firstPT || (this._firstPT = pt);
              pt._next = next;
              pt._prev = prev;
            }
            return pt;
          };
          p._mod = function(lookup) {
            var pt = this._firstPT;
            while (pt) {
              "function" === typeof lookup[pt.p] && (pt.r = lookup[pt.p]);
              pt = pt._next;
            }
          };
          p._kill = function(lookup) {
            var copy = lookup, pt, p, xfirst;
            if (lookup.autoAlpha || lookup.alpha) {
              copy = {};
              for (p in lookup) copy[p] = lookup[p];
              copy.opacity = 1;
              copy.autoAlpha && (copy.visibility = 1);
            }
            if (lookup.className && (pt = this._classNamePT)) {
              xfirst = pt.xfirst;
              xfirst && xfirst._prev ? this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev) : xfirst === this._firstPT && (this._firstPT = pt._next);
              pt._next && this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
              this._classNamePT = null;
            }
            pt = this._firstPT;
            while (pt) {
              if (pt.plugin && pt.plugin !== p && pt.plugin._kill) {
                pt.plugin._kill(lookup);
                p = pt.plugin;
              }
              pt = pt._next;
            }
            return TweenPlugin.prototype._kill.call(this, copy);
          };
          var _getChildStyles = function(e, props, targets) {
            var children, i, child, type;
            if (e.slice) {
              i = e.length;
              while (--i > -1) _getChildStyles(e[i], props, targets);
              return;
            }
            children = e.childNodes;
            i = children.length;
            while (--i > -1) {
              child = children[i];
              type = child.type;
              if (child.style) {
                props.push(_getAllStyles(child));
                targets && targets.push(child);
              }
              1 !== type && 9 !== type && 11 !== type || !child.childNodes.length || _getChildStyles(child, props, targets);
            }
          };
          CSSPlugin.cascadeTo = function(target, duration, vars) {
            var tween = TweenLite.to(target, duration, vars), results = [ tween ], b = [], e = [], targets = [], _reservedProps = TweenLite._internals.reservedProps, i, difs, p, from;
            target = tween._targets || tween.target;
            _getChildStyles(target, b, targets);
            tween.render(duration, true, true);
            _getChildStyles(target, e);
            tween.render(0, true, true);
            tween._enabled(true);
            i = targets.length;
            while (--i > -1) {
              difs = _cssDif(targets[i], b[i], e[i]);
              if (difs.firstMPT) {
                difs = difs.difs;
                for (p in vars) _reservedProps[p] && (difs[p] = vars[p]);
                from = {};
                for (p in difs) from[p] = b[i][p];
                results.push(TweenLite.fromTo(targets[i], duration, from, difs));
              }
            }
            return results;
          };
          TweenPlugin.activate([ CSSPlugin ]);
          return CSSPlugin;
        }, true);
        (function() {
          var RoundPropsPlugin = _gsScope._gsDefine.plugin({
            propName: "roundProps",
            version: "1.7.0",
            priority: -1,
            API: 2,
            init: function(target, value, tween) {
              this._tween = tween;
              return true;
            }
          }), _getRoundFunc = function(v) {
            var p = v < 1 ? Math.pow(10, (v + "").length - 2) : 1;
            return function(n) {
              return (Math.round(n / v) * v * p | 0) / p;
            };
          }, _roundLinkedList = function(node, mod) {
            while (node) {
              node.f || node.blob || (node.m = mod || Math.round);
              node = node._next;
            }
          }, p = RoundPropsPlugin.prototype;
          p._onInitAllProps = function() {
            var tween = this._tween, rp = tween.vars.roundProps, lookup = {}, rpt = tween._propLookup.roundProps, pt, next, i, p;
            if ("object" !== typeof rp || rp.push) {
              "string" === typeof rp && (rp = rp.split(","));
              i = rp.length;
              while (--i > -1) lookup[rp[i]] = Math.round;
            } else for (p in rp) lookup[p] = _getRoundFunc(rp[p]);
            for (p in lookup) {
              pt = tween._firstPT;
              while (pt) {
                next = pt._next;
                if (pt.pg) pt.t._mod(lookup); else if (pt.n === p) if (2 === pt.f && pt.t) _roundLinkedList(pt.t._firstPT, lookup[p]); else {
                  this._add(pt.t, p, pt.s, pt.c, lookup[p]);
                  next && (next._prev = pt._prev);
                  pt._prev ? pt._prev._next = next : tween._firstPT === pt && (tween._firstPT = next);
                  pt._next = pt._prev = null;
                  tween._propLookup[p] = rpt;
                }
                pt = next;
              }
            }
            return false;
          };
          p._add = function(target, p, s, c, mod) {
            this._addTween(target, p, s, s + c, p, mod || Math.round);
            this._overwriteProps.push(p);
          };
        })();
        (function() {
          _gsScope._gsDefine.plugin({
            propName: "attr",
            API: 2,
            version: "0.6.1",
            init: function(target, value, tween, index) {
              var p, end;
              if ("function" !== typeof target.setAttribute) return false;
              for (p in value) {
                end = value[p];
                "function" === typeof end && (end = end(index, target));
                this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
                this._overwriteProps.push(p);
              }
              return true;
            }
          });
        })();
        _gsScope._gsDefine.plugin({
          propName: "directionalRotation",
          version: "0.3.1",
          API: 2,
          init: function(target, value, tween, index) {
            "object" !== typeof value && (value = {
              rotation: value
            });
            this.finals = {};
            var cap = true === value.useRadians ? 2 * Math.PI : 360, min = 1e-6, p, v, start, end, dif, split;
            for (p in value) if ("useRadians" !== p) {
              end = value[p];
              "function" === typeof end && (end = end(index, target));
              split = (end + "").split("_");
              v = split[0];
              start = parseFloat("function" !== typeof target[p] ? target[p] : target[p.indexOf("set") || "function" !== typeof target["get" + p.substr(3)] ? p : "get" + p.substr(3)]());
              end = this.finals[p] = "string" === typeof v && "=" === v.charAt(1) ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
              dif = end - start;
              if (split.length) {
                v = split.join("_");
                if (-1 !== v.indexOf("short")) {
                  dif %= cap;
                  dif !== dif % (cap / 2) && (dif = dif < 0 ? dif + cap : dif - cap);
                }
                -1 !== v.indexOf("_cw") && dif < 0 ? dif = (dif + 9999999999 * cap) % cap - (dif / cap | 0) * cap : -1 !== v.indexOf("ccw") && dif > 0 && (dif = (dif - 9999999999 * cap) % cap - (dif / cap | 0) * cap);
              }
              if (dif > min || dif < -min) {
                this._addTween(target, p, start, start + dif, p);
                this._overwriteProps.push(p);
              }
            }
            return true;
          },
          set: function(ratio) {
            var pt;
            if (1 !== ratio) this._super.setRatio.call(this, ratio); else {
              pt = this._firstPT;
              while (pt) {
                pt.f ? pt.t[pt.p](this.finals[pt.p]) : pt.t[pt.p] = this.finals[pt.p];
                pt = pt._next;
              }
            }
          }
        })._autoCSS = true;
        _gsScope._gsDefine("easing.Back", [ "easing.Ease" ], function(Ease) {
          var w = _gsScope.GreenSockGlobals || _gsScope, gs = w.com.greensock, _2PI = 2 * Math.PI, _HALF_PI = Math.PI / 2, _class = gs._class, _create = function(n, f) {
            var C = _class("easing." + n, function() {}, true), p = C.prototype = new Ease();
            p.constructor = C;
            p.getRatio = f;
            return C;
          }, _easeReg = Ease.register || function() {}, _wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
            var C = _class("easing." + name, {
              easeOut: new EaseOut(),
              easeIn: new EaseIn(),
              easeInOut: new EaseInOut()
            }, true);
            _easeReg(C, name);
            return C;
          }, EasePoint = function(time, value, next) {
            this.t = time;
            this.v = value;
            if (next) {
              this.next = next;
              next.prev = this;
              this.c = next.v - value;
              this.gap = next.t - time;
            }
          }, _createBack = function(n, f) {
            var C = _class("easing." + n, function(overshoot) {
              this._p1 = overshoot || 0 === overshoot ? overshoot : 1.70158;
              this._p2 = 1.525 * this._p1;
            }, true), p = C.prototype = new Ease();
            p.constructor = C;
            p.getRatio = f;
            p.config = function(overshoot) {
              return new C(overshoot);
            };
            return C;
          }, Back = _wrap("Back", _createBack("BackOut", function(p) {
            return (p -= 1) * p * ((this._p1 + 1) * p + this._p1) + 1;
          }), _createBack("BackIn", function(p) {
            return p * p * ((this._p1 + 1) * p - this._p1);
          }), _createBack("BackInOut", function(p) {
            return (p *= 2) < 1 ? .5 * p * p * ((this._p2 + 1) * p - this._p2) : .5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
          })), SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
            power = power || 0 === power ? power : .7;
            null == linearRatio ? linearRatio = .7 : linearRatio > 1 && (linearRatio = 1);
            this._p = 1 !== linearRatio ? power : 0;
            this._p1 = (1 - linearRatio) / 2;
            this._p2 = linearRatio;
            this._p3 = this._p1 + this._p2;
            this._calcEnd = true === yoyoMode;
          }, true), p = SlowMo.prototype = new Ease(), SteppedEase, ExpoScaleEase, RoughEase, _createElastic;
          p.constructor = SlowMo;
          p.getRatio = function(p) {
            var r = p + (.5 - p) * this._p;
            if (p < this._p1) return this._calcEnd ? 1 - (p = 1 - p / this._p1) * p : r - (p = 1 - p / this._p1) * p * p * p * r;
            if (p > this._p3) return this._calcEnd ? 1 === p ? 0 : 1 - (p = (p - this._p3) / this._p1) * p : r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p;
            return this._calcEnd ? 1 : r;
          };
          SlowMo.ease = new SlowMo(.7, .7);
          p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
            return new SlowMo(linearRatio, power, yoyoMode);
          };
          SteppedEase = _class("easing.SteppedEase", function(steps, immediateStart) {
            steps = steps || 1;
            this._p1 = 1 / steps;
            this._p2 = steps + (immediateStart ? 0 : 1);
            this._p3 = immediateStart ? 1 : 0;
          }, true);
          p = SteppedEase.prototype = new Ease();
          p.constructor = SteppedEase;
          p.getRatio = function(p) {
            p < 0 ? p = 0 : p >= 1 && (p = .999999999);
            return ((this._p2 * p | 0) + this._p3) * this._p1;
          };
          p.config = SteppedEase.config = function(steps, immediateStart) {
            return new SteppedEase(steps, immediateStart);
          };
          ExpoScaleEase = _class("easing.ExpoScaleEase", function(start, end, ease) {
            this._p1 = Math.log(end / start);
            this._p2 = end - start;
            this._p3 = start;
            this._ease = ease;
          }, true);
          p = ExpoScaleEase.prototype = new Ease();
          p.constructor = ExpoScaleEase;
          p.getRatio = function(p) {
            this._ease && (p = this._ease.getRatio(p));
            return (this._p3 * Math.exp(this._p1 * p) - this._p3) / this._p2;
          };
          p.config = ExpoScaleEase.config = function(start, end, ease) {
            return new ExpoScaleEase(start, end, ease);
          };
          RoughEase = _class("easing.RoughEase", function(vars) {
            vars = vars || {};
            var taper = vars.taper || "none", a = [], cnt = 0, points = 0 | (vars.points || 20), i = points, randomize = false !== vars.randomize, clamp = true === vars.clamp, template = vars.template instanceof Ease ? vars.template : null, strength = "number" === typeof vars.strength ? .4 * vars.strength : .4, x, y, bump, invX, obj, pnt;
            while (--i > -1) {
              x = randomize ? Math.random() : 1 / points * i;
              y = template ? template.getRatio(x) : x;
              if ("none" === taper) bump = strength; else if ("out" === taper) {
                invX = 1 - x;
                bump = invX * invX * strength;
              } else if ("in" === taper) bump = x * x * strength; else if (x < .5) {
                invX = 2 * x;
                bump = invX * invX * .5 * strength;
              } else {
                invX = 2 * (1 - x);
                bump = invX * invX * .5 * strength;
              }
              randomize ? y += Math.random() * bump - .5 * bump : i % 2 ? y += .5 * bump : y -= .5 * bump;
              clamp && (y > 1 ? y = 1 : y < 0 && (y = 0));
              a[cnt++] = {
                x: x,
                y: y
              };
            }
            a.sort(function(a, b) {
              return a.x - b.x;
            });
            pnt = new EasePoint(1, 1, null);
            i = points;
            while (--i > -1) {
              obj = a[i];
              pnt = new EasePoint(obj.x, obj.y, pnt);
            }
            this._prev = new EasePoint(0, 0, 0 !== pnt.t ? pnt : pnt.next);
          }, true);
          p = RoughEase.prototype = new Ease();
          p.constructor = RoughEase;
          p.getRatio = function(p) {
            var pnt = this._prev;
            if (p > pnt.t) {
              while (pnt.next && p >= pnt.t) pnt = pnt.next;
              pnt = pnt.prev;
            } else while (pnt.prev && p <= pnt.t) pnt = pnt.prev;
            this._prev = pnt;
            return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;
          };
          p.config = function(vars) {
            return new RoughEase(vars);
          };
          RoughEase.ease = new RoughEase();
          _wrap("Bounce", _create("BounceOut", function(p) {
            if (p < 1 / 2.75) return 7.5625 * p * p;
            if (p < 2 / 2.75) return 7.5625 * (p -= 1.5 / 2.75) * p + .75;
            if (p < 2.5 / 2.75) return 7.5625 * (p -= 2.25 / 2.75) * p + .9375;
            return 7.5625 * (p -= 2.625 / 2.75) * p + .984375;
          }), _create("BounceIn", function(p) {
            if ((p = 1 - p) < 1 / 2.75) return 1 - 7.5625 * p * p;
            if (p < 2 / 2.75) return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + .75);
            if (p < 2.5 / 2.75) return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + .9375);
            return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + .984375);
          }), _create("BounceInOut", function(p) {
            var invert = p < .5;
            p = invert ? 1 - 2 * p : 2 * p - 1;
            p < 1 / 2.75 ? p *= 7.5625 * p : p = p < 2 / 2.75 ? 7.5625 * (p -= 1.5 / 2.75) * p + .75 : p < 2.5 / 2.75 ? 7.5625 * (p -= 2.25 / 2.75) * p + .9375 : 7.5625 * (p -= 2.625 / 2.75) * p + .984375;
            return invert ? .5 * (1 - p) : .5 * p + .5;
          }));
          _wrap("Circ", _create("CircOut", function(p) {
            return Math.sqrt(1 - (p -= 1) * p);
          }), _create("CircIn", function(p) {
            return -(Math.sqrt(1 - p * p) - 1);
          }), _create("CircInOut", function(p) {
            return (p *= 2) < 1 ? -.5 * (Math.sqrt(1 - p * p) - 1) : .5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
          }));
          _createElastic = function(n, f, def) {
            var C = _class("easing." + n, function(amplitude, period) {
              this._p1 = amplitude >= 1 ? amplitude : 1;
              this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
              this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
              this._p2 = _2PI / this._p2;
            }, true), p = C.prototype = new Ease();
            p.constructor = C;
            p.getRatio = f;
            p.config = function(amplitude, period) {
              return new C(amplitude, period);
            };
            return C;
          };
          _wrap("Elastic", _createElastic("ElasticOut", function(p) {
            return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;
          }, .3), _createElastic("ElasticIn", function(p) {
            return -this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2);
          }, .3), _createElastic("ElasticInOut", function(p) {
            return (p *= 2) < 1 ? this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * -.5 : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * .5 + 1;
          }, .45));
          _wrap("Expo", _create("ExpoOut", function(p) {
            return 1 - Math.pow(2, -10 * p);
          }), _create("ExpoIn", function(p) {
            return Math.pow(2, 10 * (p - 1)) - .001;
          }), _create("ExpoInOut", function(p) {
            return (p *= 2) < 1 ? .5 * Math.pow(2, 10 * (p - 1)) : .5 * (2 - Math.pow(2, -10 * (p - 1)));
          }));
          _wrap("Sine", _create("SineOut", function(p) {
            return Math.sin(p * _HALF_PI);
          }), _create("SineIn", function(p) {
            return 1 - Math.cos(p * _HALF_PI);
          }), _create("SineInOut", function(p) {
            return -.5 * (Math.cos(Math.PI * p) - 1);
          }));
          _class("easing.EaseLookup", {
            find: function(s) {
              return Ease.map[s];
            }
          }, true);
          _easeReg(w.SlowMo, "SlowMo", "ease,");
          _easeReg(RoughEase, "RoughEase", "ease,");
          _easeReg(SteppedEase, "SteppedEase", "ease,");
          return Back;
        }, true);
      });
      _gsScope._gsDefine && _gsScope._gsQueue.pop()();
      (function(window, moduleName) {
        "use strict";
        var _exports = {}, _doc = window.document, _globals = window.GreenSockGlobals = window.GreenSockGlobals || window, existingModule = _globals[moduleName];
        if (existingModule) {
          "undefined" !== typeof module && module.exports && (module.exports = existingModule);
          return existingModule;
        }
        var _namespace = function(ns) {
          var a = ns.split("."), p = _globals, i;
          for (i = 0; i < a.length; i++) p[a[i]] = p = p[a[i]] || {};
          return p;
        }, gs = _namespace("com.greensock"), _tinyNum = 1e-10, _slice = function(a) {
          var b = [], l = a.length, i;
          for (i = 0; i !== l; b.push(a[i++])) ;
          return b;
        }, _emptyFunc = function() {}, _isArray = function() {
          var toString = Object.prototype.toString, array = toString.call([]);
          return function(obj) {
            return null != obj && (obj instanceof Array || "object" === typeof obj && !!obj.push && toString.call(obj) === array);
          };
        }(), a, i, p, _ticker, _tickerActive, _defLookup = {}, Definition = function(ns, dependencies, func, global) {
          this.sc = _defLookup[ns] ? _defLookup[ns].sc : [];
          _defLookup[ns] = this;
          this.gsClass = null;
          this.func = func;
          var _classes = [];
          this.check = function(init) {
            var i = dependencies.length, missing = i, cur, a, n, cl;
            while (--i > -1) if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
              _classes[i] = cur.gsClass;
              missing--;
            } else init && cur.sc.push(this);
            if (0 === missing && func) {
              a = ("com.greensock." + ns).split(".");
              n = a.pop();
              cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);
              if (global) {
                _globals[n] = _exports[n] = cl;
                if ("undefined" !== typeof module && module.exports) if (ns === moduleName) {
                  module.exports = _exports[moduleName] = cl;
                  for (i in _exports) cl[i] = _exports[i];
                } else _exports[moduleName] && (_exports[moduleName][n] = cl); else "function" === typeof define && define.amd && define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() {
                  return cl;
                });
              }
              for (i = 0; i < this.sc.length; i++) this.sc[i].check();
            }
          };
          this.check(true);
        }, _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
          return new Definition(ns, dependencies, func, global);
        }, _class = gs._class = function(ns, func, global) {
          func = func || function() {};
          _gsDefine(ns, [], function() {
            return func;
          }, global);
          return func;
        };
        _gsDefine.globals = _globals;
        var _baseParams = [ 0, 0, 1, 1 ], Ease = _class("easing.Ease", function(func, extraParams, type, power) {
          this._func = func;
          this._type = type || 0;
          this._power = power || 0;
          this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
        }, true), _easeMap = Ease.map = {}, _easeReg = Ease.register = function(ease, names, types, create) {
          var na = names.split(","), i = na.length, ta = (types || "easeIn,easeOut,easeInOut").split(","), e, name, j, type;
          while (--i > -1) {
            name = na[i];
            e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
            j = ta.length;
            while (--j > -1) {
              type = ta[j];
              _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
            }
          }
        };
        p = Ease.prototype;
        p._calcEnd = false;
        p.getRatio = function(p) {
          if (this._func) {
            this._params[0] = p;
            return this._func.apply(null, this._params);
          }
          var t = this._type, pw = this._power, r = 1 === t ? 1 - p : 2 === t ? p : p < .5 ? 2 * p : 2 * (1 - p);
          1 === pw ? r *= r : 2 === pw ? r *= r * r : 3 === pw ? r *= r * r * r : 4 === pw && (r *= r * r * r * r);
          return 1 === t ? 1 - r : 2 === t ? r : p < .5 ? r / 2 : 1 - r / 2;
        };
        a = [ "Linear", "Quad", "Cubic", "Quart", "Quint,Strong" ];
        i = a.length;
        while (--i > -1) {
          p = a[i] + ",Power" + i;
          _easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
          _easeReg(new Ease(null, null, 2, i), p, "easeIn" + (0 === i ? ",easeNone" : ""));
          _easeReg(new Ease(null, null, 3, i), p, "easeInOut");
        }
        _easeMap.linear = gs.easing.Linear.easeIn;
        _easeMap.swing = gs.easing.Quad.easeInOut;
        var EventDispatcher = _class("events.EventDispatcher", function(target) {
          this._listeners = {};
          this._eventTarget = target || this;
        });
        p = EventDispatcher.prototype;
        p.addEventListener = function(type, callback, scope, useParam, priority) {
          priority = priority || 0;
          var list = this._listeners[type], index = 0, listener, i;
          this !== _ticker || _tickerActive || _ticker.wake();
          null == list && (this._listeners[type] = list = []);
          i = list.length;
          while (--i > -1) {
            listener = list[i];
            listener.c === callback && listener.s === scope ? list.splice(i, 1) : 0 === index && listener.pr < priority && (index = i + 1);
          }
          list.splice(index, 0, {
            c: callback,
            s: scope,
            up: useParam,
            pr: priority
          });
        };
        p.removeEventListener = function(type, callback) {
          var list = this._listeners[type], i;
          if (list) {
            i = list.length;
            while (--i > -1) if (list[i].c === callback) {
              list.splice(i, 1);
              return;
            }
          }
        };
        p.dispatchEvent = function(type) {
          var list = this._listeners[type], i, t, listener;
          if (list) {
            i = list.length;
            i > 1 && (list = list.slice(0));
            t = this._eventTarget;
            while (--i > -1) {
              listener = list[i];
              listener && (listener.up ? listener.c.call(listener.s || t, {
                type: type,
                target: t
              }) : listener.c.call(listener.s || t));
            }
          }
        };
        var _reqAnimFrame = window.requestAnimationFrame, _cancelAnimFrame = window.cancelAnimationFrame, _getTime = Date.now || function() {
          return new Date().getTime();
        }, _lastUpdate = _getTime();
        a = [ "ms", "moz", "webkit", "o" ];
        i = a.length;
        while (--i > -1 && !_reqAnimFrame) {
          _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
          _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
        }
        _class("Ticker", function(fps, useRAF) {
          var _self = this, _startTime = _getTime(), _useRAF = !(false === useRAF || !_reqAnimFrame) && "auto", _lagThreshold = 500, _adjustedLag = 33, _tickWord = "tick", _fps, _req, _id, _gap, _nextTime, _tick = function(manual) {
            var elapsed = _getTime() - _lastUpdate, overlap, dispatch;
            elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
            _lastUpdate += elapsed;
            _self.time = (_lastUpdate - _startTime) / 1e3;
            overlap = _self.time - _nextTime;
            if (!_fps || overlap > 0 || true === manual) {
              _self.frame++;
              _nextTime += overlap + (overlap >= _gap ? .004 : _gap - overlap);
              dispatch = true;
            }
            true !== manual && (_id = _req(_tick));
            dispatch && _self.dispatchEvent(_tickWord);
          };
          EventDispatcher.call(_self);
          _self.time = _self.frame = 0;
          _self.tick = function() {
            _tick(true);
          };
          _self.lagSmoothing = function(threshold, adjustedLag) {
            if (!arguments.length) return _lagThreshold < 1 / _tinyNum;
            _lagThreshold = threshold || 1 / _tinyNum;
            _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
          };
          _self.sleep = function() {
            if (null == _id) return;
            _useRAF && _cancelAnimFrame ? _cancelAnimFrame(_id) : clearTimeout(_id);
            _req = _emptyFunc;
            _id = null;
            _self === _ticker && (_tickerActive = false);
          };
          _self.wake = function(seamless) {
            null !== _id ? _self.sleep() : seamless ? _startTime += -_lastUpdate + (_lastUpdate = _getTime()) : _self.frame > 10 && (_lastUpdate = _getTime() - _lagThreshold + 5);
            _req = 0 === _fps ? _emptyFunc : _useRAF && _reqAnimFrame ? _reqAnimFrame : function(f) {
              return setTimeout(f, 1e3 * (_nextTime - _self.time) + 1 | 0);
            };
            _self === _ticker && (_tickerActive = true);
            _tick(2);
          };
          _self.fps = function(value) {
            if (!arguments.length) return _fps;
            _fps = value;
            _gap = 1 / (_fps || 60);
            _nextTime = this.time + _gap;
            _self.wake();
          };
          _self.useRAF = function(value) {
            if (!arguments.length) return _useRAF;
            _self.sleep();
            _useRAF = value;
            _self.fps(_fps);
          };
          _self.fps(fps);
          setTimeout(function() {
            "auto" === _useRAF && _self.frame < 5 && "hidden" !== (_doc || {}).visibilityState && _self.useRAF(false);
          }, 1500);
        });
        p = gs.Ticker.prototype = new gs.events.EventDispatcher();
        p.constructor = gs.Ticker;
        var Animation = _class("core.Animation", function(duration, vars) {
          this.vars = vars = vars || {};
          this._duration = this._totalDuration = duration || 0;
          this._delay = Number(vars.delay) || 0;
          this._timeScale = 1;
          this._active = true === vars.immediateRender;
          this.data = vars.data;
          this._reversed = true === vars.reversed;
          if (!_rootTimeline) return;
          _tickerActive || _ticker.wake();
          var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
          tl.add(this, tl._time);
          this.vars.paused && this.paused(true);
        });
        _ticker = Animation.ticker = new gs.Ticker();
        p = Animation.prototype;
        p._dirty = p._gc = p._initted = p._paused = false;
        p._totalTime = p._time = 0;
        p._rawPrevTime = -1;
        p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
        p._paused = false;
        var _checkTimeout = function() {
          _tickerActive && _getTime() - _lastUpdate > 2e3 && ("hidden" !== (_doc || {}).visibilityState || !_ticker.lagSmoothing()) && _ticker.wake();
          var t = setTimeout(_checkTimeout, 2e3);
          t.unref && t.unref();
        };
        _checkTimeout();
        p.play = function(from, suppressEvents) {
          null != from && this.seek(from, suppressEvents);
          return this.reversed(false).paused(false);
        };
        p.pause = function(atTime, suppressEvents) {
          null != atTime && this.seek(atTime, suppressEvents);
          return this.paused(true);
        };
        p.resume = function(from, suppressEvents) {
          null != from && this.seek(from, suppressEvents);
          return this.paused(false);
        };
        p.seek = function(time, suppressEvents) {
          return this.totalTime(Number(time), false !== suppressEvents);
        };
        p.restart = function(includeDelay, suppressEvents) {
          return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, false !== suppressEvents, true);
        };
        p.reverse = function(from, suppressEvents) {
          null != from && this.seek(from || this.totalDuration(), suppressEvents);
          return this.reversed(true).paused(false);
        };
        p.render = function(time, suppressEvents, force) {};
        p.invalidate = function() {
          this._time = this._totalTime = 0;
          this._initted = this._gc = false;
          this._rawPrevTime = -1;
          !this._gc && this.timeline || this._enabled(true);
          return this;
        };
        p.isActive = function() {
          var tl = this._timeline, startTime = this._startTime, rawTime;
          return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 1e-7;
        };
        p._enabled = function(enabled, ignoreTimeline) {
          _tickerActive || _ticker.wake();
          this._gc = !enabled;
          this._active = this.isActive();
          true !== ignoreTimeline && (enabled && !this.timeline ? this._timeline.add(this, this._startTime - this._delay) : !enabled && this.timeline && this._timeline._remove(this, true));
          return false;
        };
        p._kill = function(vars, target) {
          return this._enabled(false, false);
        };
        p.kill = function(vars, target) {
          this._kill(vars, target);
          return this;
        };
        p._uncache = function(includeSelf) {
          var tween = includeSelf ? this : this.timeline;
          while (tween) {
            tween._dirty = true;
            tween = tween.timeline;
          }
          return this;
        };
        p._swapSelfInParams = function(params) {
          var i = params.length, copy = params.concat();
          while (--i > -1) "{self}" === params[i] && (copy[i] = this);
          return copy;
        };
        p._callback = function(type) {
          var v = this.vars, callback = v[type], params = v[type + "Params"], scope = v[type + "Scope"] || v.callbackScope || this, l = params ? params.length : 0;
          switch (l) {
           case 0:
            callback.call(scope);
            break;

           case 1:
            callback.call(scope, params[0]);
            break;

           case 2:
            callback.call(scope, params[0], params[1]);
            break;

           default:
            callback.apply(scope, params);
          }
        };
        p.eventCallback = function(type, callback, params, scope) {
          if ("on" === (type || "").substr(0, 2)) {
            var v = this.vars;
            if (1 === arguments.length) return v[type];
            if (null == callback) delete v[type]; else {
              v[type] = callback;
              v[type + "Params"] = _isArray(params) && -1 !== params.join("").indexOf("{self}") ? this._swapSelfInParams(params) : params;
              v[type + "Scope"] = scope;
            }
            "onUpdate" === type && (this._onUpdate = callback);
          }
          return this;
        };
        p.delay = function(value) {
          if (!arguments.length) return this._delay;
          this._timeline.smoothChildTiming && this.startTime(this._startTime + value - this._delay);
          this._delay = value;
          return this;
        };
        p.duration = function(value) {
          if (!arguments.length) {
            this._dirty = false;
            return this._duration;
          }
          this._duration = this._totalDuration = value;
          this._uncache(true);
          this._timeline.smoothChildTiming && this._time > 0 && this._time < this._duration && 0 !== value && this.totalTime(this._totalTime * (value / this._duration), true);
          return this;
        };
        p.totalDuration = function(value) {
          this._dirty = false;
          return arguments.length ? this.duration(value) : this._totalDuration;
        };
        p.time = function(value, suppressEvents) {
          if (!arguments.length) return this._time;
          this._dirty && this.totalDuration();
          return this.totalTime(value > this._duration ? this._duration : value, suppressEvents);
        };
        p.totalTime = function(time, suppressEvents, uncapped) {
          _tickerActive || _ticker.wake();
          if (!arguments.length) return this._totalTime;
          if (this._timeline) {
            time < 0 && !uncapped && (time += this.totalDuration());
            if (this._timeline.smoothChildTiming) {
              this._dirty && this.totalDuration();
              var totalDuration = this._totalDuration, tl = this._timeline;
              time > totalDuration && !uncapped && (time = totalDuration);
              this._startTime = (this._paused ? this._pauseTime : tl._time) - (this._reversed ? totalDuration - time : time) / this._timeScale;
              tl._dirty || this._uncache(false);
              if (tl._timeline) while (tl._timeline) {
                tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale && tl.totalTime(tl._totalTime, true);
                tl = tl._timeline;
              }
            }
            this._gc && this._enabled(true, false);
            if (this._totalTime !== time || 0 === this._duration) {
              _lazyTweens.length && _lazyRender();
              this.render(time, suppressEvents, false);
              _lazyTweens.length && _lazyRender();
            }
          }
          return this;
        };
        p.progress = p.totalProgress = function(value, suppressEvents) {
          var duration = this.duration();
          return arguments.length ? this.totalTime(duration * value, suppressEvents) : duration ? this._time / duration : this.ratio;
        };
        p.startTime = function(value) {
          if (!arguments.length) return this._startTime;
          if (value !== this._startTime) {
            this._startTime = value;
            this.timeline && this.timeline._sortChildren && this.timeline.add(this, value - this._delay);
          }
          return this;
        };
        p.endTime = function(includeRepeats) {
          return this._startTime + (false != includeRepeats ? this.totalDuration() : this.duration()) / this._timeScale;
        };
        p.timeScale = function(value) {
          if (!arguments.length) return this._timeScale;
          var pauseTime, t;
          value = value || _tinyNum;
          if (this._timeline && this._timeline.smoothChildTiming) {
            pauseTime = this._pauseTime;
            t = pauseTime || 0 === pauseTime ? pauseTime : this._timeline.totalTime();
            this._startTime = t - (t - this._startTime) * this._timeScale / value;
          }
          this._timeScale = value;
          t = this.timeline;
          while (t && t.timeline) {
            t._dirty = true;
            t.totalDuration();
            t = t.timeline;
          }
          return this;
        };
        p.reversed = function(value) {
          if (!arguments.length) return this._reversed;
          if (value != this._reversed) {
            this._reversed = value;
            this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true);
          }
          return this;
        };
        p.paused = function(value) {
          if (!arguments.length) return this._paused;
          var tl = this._timeline, raw, elapsed;
          if (value != this._paused && tl) {
            _tickerActive || value || _ticker.wake();
            raw = tl.rawTime();
            elapsed = raw - this._pauseTime;
            if (!value && tl.smoothChildTiming) {
              this._startTime += elapsed;
              this._uncache(false);
            }
            this._pauseTime = value ? raw : null;
            this._paused = value;
            this._active = this.isActive();
            if (!value && 0 !== elapsed && this._initted && this.duration()) {
              raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
              this.render(raw, raw === this._totalTime, true);
            }
          }
          this._gc && !value && this._enabled(true, false);
          return this;
        };
        var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
          Animation.call(this, 0, vars);
          this.autoRemoveChildren = this.smoothChildTiming = true;
        });
        p = SimpleTimeline.prototype = new Animation();
        p.constructor = SimpleTimeline;
        p.kill()._gc = false;
        p._first = p._last = p._recent = null;
        p._sortChildren = false;
        p.add = p.insert = function(child, position, align, stagger) {
          var prevTween, st;
          child._startTime = Number(position || 0) + child._delay;
          child._paused && this !== child._timeline && (child._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime));
          child.timeline && child.timeline._remove(child, true);
          child.timeline = child._timeline = this;
          child._gc && child._enabled(true, true);
          prevTween = this._last;
          if (this._sortChildren) {
            st = child._startTime;
            while (prevTween && prevTween._startTime > st) prevTween = prevTween._prev;
          }
          if (prevTween) {
            child._next = prevTween._next;
            prevTween._next = child;
          } else {
            child._next = this._first;
            this._first = child;
          }
          child._next ? child._next._prev = child : this._last = child;
          child._prev = prevTween;
          this._recent = child;
          this._timeline && this._uncache(true);
          return this;
        };
        p._remove = function(tween, skipDisable) {
          if (tween.timeline === this) {
            skipDisable || tween._enabled(false, true);
            tween._prev ? tween._prev._next = tween._next : this._first === tween && (this._first = tween._next);
            tween._next ? tween._next._prev = tween._prev : this._last === tween && (this._last = tween._prev);
            tween._next = tween._prev = tween.timeline = null;
            tween === this._recent && (this._recent = this._last);
            this._timeline && this._uncache(true);
          }
          return this;
        };
        p.render = function(time, suppressEvents, force) {
          var tween = this._first, next;
          this._totalTime = this._time = this._rawPrevTime = time;
          while (tween) {
            next = tween._next;
            (tween._active || time >= tween._startTime && !tween._paused && !tween._gc) && (tween._reversed ? tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force) : tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force));
            tween = next;
          }
        };
        p.rawTime = function() {
          _tickerActive || _ticker.wake();
          return this._totalTime;
        };
        var TweenLite = _class("TweenLite", function(target, duration, vars) {
          Animation.call(this, duration, vars);
          this.render = TweenLite.prototype.render;
          if (null == target) throw "Cannot tween a null target.";
          this.target = target = "string" !== typeof target ? target : TweenLite.selector(target) || target;
          var isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType), overwrite = this.vars.overwrite, i, targ, targets;
          this._overwrite = overwrite = null == overwrite ? _overwriteLookup[TweenLite.defaultOverwrite] : "number" === typeof overwrite ? overwrite >> 0 : _overwriteLookup[overwrite];
          if ((isSelector || target instanceof Array || target.push && _isArray(target)) && "number" !== typeof target[0]) {
            this._targets = targets = _slice(target);
            this._propLookup = [];
            this._siblings = [];
            for (i = 0; i < targets.length; i++) {
              targ = targets[i];
              if (!targ) {
                targets.splice(i--, 1);
                continue;
              }
              if ("string" === typeof targ) {
                targ = targets[i--] = TweenLite.selector(targ);
                "string" === typeof targ && targets.splice(i + 1, 1);
                continue;
              }
              if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {
                targets.splice(i--, 1);
                this._targets = targets = targets.concat(_slice(targ));
                continue;
              }
              this._siblings[i] = _register(targ, this, false);
              1 === overwrite && this._siblings[i].length > 1 && _applyOverwrite(targ, this, null, 1, this._siblings[i]);
            }
          } else {
            this._propLookup = {};
            this._siblings = _register(target, this, false);
            1 === overwrite && this._siblings.length > 1 && _applyOverwrite(target, this, null, 1, this._siblings);
          }
          if (this.vars.immediateRender || 0 === duration && 0 === this._delay && false !== this.vars.immediateRender) {
            this._time = -_tinyNum;
            this.render(Math.min(0, -this._delay));
          }
        }, true), _isSelector = function(v) {
          return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType);
        }, _autoCSS = function(vars, target) {
          var css = {}, p;
          for (p in vars) if (!_reservedProps[p] && (!(p in target) || "transform" === p || "x" === p || "y" === p || "width" === p || "height" === p || "className" === p || "border" === p) && (!_plugins[p] || _plugins[p] && _plugins[p]._autoCSS)) {
            css[p] = vars[p];
            delete vars[p];
          }
          vars.css = css;
        };
        p = TweenLite.prototype = new Animation();
        p.constructor = TweenLite;
        p.kill()._gc = false;
        p.ratio = 0;
        p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
        p._notifyPluginsOfEnabled = p._lazy = false;
        TweenLite.version = "2.0.2";
        TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
        TweenLite.defaultOverwrite = "auto";
        TweenLite.ticker = _ticker;
        TweenLite.autoSleep = 120;
        TweenLite.lagSmoothing = function(threshold, adjustedLag) {
          _ticker.lagSmoothing(threshold, adjustedLag);
        };
        TweenLite.selector = window.$ || window.jQuery || function(e) {
          var selector = window.$ || window.jQuery;
          if (selector) {
            TweenLite.selector = selector;
            return selector(e);
          }
          _doc || (_doc = window.document);
          return _doc ? _doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById("#" === e.charAt(0) ? e.substr(1) : e) : e;
        };
        var _lazyTweens = [], _lazyLookup = {}, _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi, _relExp = /[\+-]=-?[\.\d]/, _setRatio = function(v) {
          var pt = this._firstPT, min = 1e-6, val;
          while (pt) {
            val = pt.blob ? 1 === v && null != this.end ? this.end : v ? this.join("") : this.start : pt.c * v + pt.s;
            pt.m ? val = pt.m.call(this._tween, val, this._target || pt.t, this._tween) : val < min && val > -min && !pt.blob && (val = 0);
            pt.f ? pt.fp ? pt.t[pt.p](pt.fp, val) : pt.t[pt.p](val) : pt.t[pt.p] = val;
            pt = pt._next;
          }
        }, _blobDif = function(start, end, filter, pt) {
          var a = [], charIndex = 0, s = "", color = 0, startNums, endNums, num, i, l, nonNumbers, currentNum;
          a.start = start;
          a.end = end;
          start = a[0] = start + "";
          end = a[1] = end + "";
          if (filter) {
            filter(a);
            start = a[0];
            end = a[1];
          }
          a.length = 0;
          startNums = start.match(_numbersExp) || [];
          endNums = end.match(_numbersExp) || [];
          if (pt) {
            pt._next = null;
            pt.blob = 1;
            a._firstPT = a._applyPT = pt;
          }
          l = endNums.length;
          for (i = 0; i < l; i++) {
            currentNum = endNums[i];
            nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);
            s += nonNumbers || !i ? nonNumbers : ",";
            charIndex += nonNumbers.length;
            color ? color = (color + 1) % 5 : "rgba(" === nonNumbers.substr(-5) && (color = 1);
            if (currentNum === startNums[i] || startNums.length <= i) s += currentNum; else {
              if (s) {
                a.push(s);
                s = "";
              }
              num = parseFloat(startNums[i]);
              a.push(num);
              a._firstPT = {
                _next: a._firstPT,
                t: a,
                p: a.length - 1,
                s: num,
                c: ("=" === currentNum.charAt(1) ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : parseFloat(currentNum) - num) || 0,
                f: 0,
                m: color && color < 4 ? Math.round : 0
              };
            }
            charIndex += currentNum.length;
          }
          s += end.substr(charIndex);
          s && a.push(s);
          a.setRatio = _setRatio;
          _relExp.test(end) && (a.end = null);
          return a;
        }, _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
          "function" === typeof end && (end = end(index || 0, target));
          var type = typeof target[prop], getterName = "function" !== type ? "" : prop.indexOf("set") || "function" !== typeof target["get" + prop.substr(3)] ? prop : "get" + prop.substr(3), s = "get" !== start ? start : getterName ? funcParam ? target[getterName](funcParam) : target[getterName]() : target[prop], isRelative = "string" === typeof end && "=" === end.charAt(1), pt = {
            t: target,
            p: prop,
            s: s,
            f: "function" === type,
            pg: 0,
            n: overwriteProp || prop,
            m: mod ? "function" === typeof mod ? mod : Math.round : 0,
            pr: 0,
            c: isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0
          }, blob;
          if ("number" !== typeof s || "number" !== typeof end && !isRelative) if (funcParam || isNaN(s) || !isRelative && isNaN(end) || "boolean" === typeof s || "boolean" === typeof end) {
            pt.fp = funcParam;
            blob = _blobDif(s, isRelative ? parseFloat(pt.s) + pt.c + (pt.s + "").replace(/[0-9\-\.]/g, "") : end, stringFilter || TweenLite.defaultStringFilter, pt);
            pt = {
              t: blob,
              p: "setRatio",
              s: 0,
              c: 1,
              f: 2,
              pg: 0,
              n: overwriteProp || prop,
              pr: 0,
              m: 0
            };
          } else {
            pt.s = parseFloat(s);
            isRelative || (pt.c = parseFloat(end) - pt.s || 0);
          }
          if (pt.c) {
            (pt._next = this._firstPT) && (pt._next._prev = pt);
            this._firstPT = pt;
            return pt;
          }
        }, _internals = TweenLite._internals = {
          isArray: _isArray,
          isSelector: _isSelector,
          lazyTweens: _lazyTweens,
          blobDif: _blobDif
        }, _plugins = TweenLite._plugins = {}, _tweenLookup = _internals.tweenLookup = {}, _tweenLookupNum = 0, _reservedProps = _internals.reservedProps = {
          ease: 1,
          delay: 1,
          overwrite: 1,
          onComplete: 1,
          onCompleteParams: 1,
          onCompleteScope: 1,
          useFrames: 1,
          runBackwards: 1,
          startAt: 1,
          onUpdate: 1,
          onUpdateParams: 1,
          onUpdateScope: 1,
          onStart: 1,
          onStartParams: 1,
          onStartScope: 1,
          onReverseComplete: 1,
          onReverseCompleteParams: 1,
          onReverseCompleteScope: 1,
          onRepeat: 1,
          onRepeatParams: 1,
          onRepeatScope: 1,
          easeParams: 1,
          yoyo: 1,
          immediateRender: 1,
          repeat: 1,
          repeatDelay: 1,
          data: 1,
          paused: 1,
          reversed: 1,
          autoCSS: 1,
          lazy: 1,
          onOverwrite: 1,
          callbackScope: 1,
          stringFilter: 1,
          id: 1,
          yoyoEase: 1
        }, _overwriteLookup = {
          none: 0,
          all: 1,
          auto: 2,
          concurrent: 3,
          allOnStart: 4,
          preexisting: 5,
          true: 1,
          false: 0
        }, _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(), _rootTimeline = Animation._rootTimeline = new SimpleTimeline(), _nextGCFrame = 30, _lazyRender = _internals.lazyRender = function() {
          var i = _lazyTweens.length, tween;
          _lazyLookup = {};
          while (--i > -1) {
            tween = _lazyTweens[i];
            if (tween && false !== tween._lazy) {
              tween.render(tween._lazy[0], tween._lazy[1], true);
              tween._lazy = false;
            }
          }
          _lazyTweens.length = 0;
        };
        _rootTimeline._startTime = _ticker.time;
        _rootFramesTimeline._startTime = _ticker.frame;
        _rootTimeline._active = _rootFramesTimeline._active = true;
        setTimeout(_lazyRender, 1);
        Animation._updateRoot = TweenLite.render = function() {
          var i, a, p;
          _lazyTweens.length && _lazyRender();
          _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
          _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
          _lazyTweens.length && _lazyRender();
          if (_ticker.frame >= _nextGCFrame) {
            _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
            for (p in _tweenLookup) {
              a = _tweenLookup[p].tweens;
              i = a.length;
              while (--i > -1) a[i]._gc && a.splice(i, 1);
              0 === a.length && delete _tweenLookup[p];
            }
            p = _rootTimeline._first;
            if ((!p || p._paused) && TweenLite.autoSleep && !_rootFramesTimeline._first && 1 === _ticker._listeners.tick.length) {
              while (p && p._paused) p = p._next;
              p || _ticker.sleep();
            }
          }
        };
        _ticker.addEventListener("tick", Animation._updateRoot);
        var _register = function(target, tween, scrub) {
          var id = target._gsTweenID, a, i;
          _tweenLookup[id || (target._gsTweenID = id = "t" + _tweenLookupNum++)] || (_tweenLookup[id] = {
            target: target,
            tweens: []
          });
          if (tween) {
            a = _tweenLookup[id].tweens;
            a[i = a.length] = tween;
            if (scrub) while (--i > -1) a[i] === tween && a.splice(i, 1);
          }
          return _tweenLookup[id].tweens;
        }, _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
          var func = overwrittenTween.vars.onOverwrite, r1, r2;
          func && (r1 = func(overwrittenTween, overwritingTween, target, killedProps));
          func = TweenLite.onOverwrite;
          func && (r2 = func(overwrittenTween, overwritingTween, target, killedProps));
          return false !== r1 && false !== r2;
        }, _applyOverwrite = function(target, tween, props, mode, siblings) {
          var i, changed, curTween, l;
          if (1 === mode || mode >= 4) {
            l = siblings.length;
            for (i = 0; i < l; i++) if ((curTween = siblings[i]) !== tween) curTween._gc || curTween._kill(null, target, tween) && (changed = true); else if (5 === mode) break;
            return changed;
          }
          var startTime = tween._startTime + _tinyNum, overlaps = [], oCount = 0, zeroDur = 0 === tween._duration, globalStart;
          i = siblings.length;
          while (--i > -1) if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) ; else if (curTween._timeline !== tween._timeline) {
            globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
            0 === _checkOverlap(curTween, globalStart, zeroDur) && (overlaps[oCount++] = curTween);
          } else curTween._startTime <= startTime && curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime && ((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 2e-10 || (overlaps[oCount++] = curTween));
          i = oCount;
          while (--i > -1) {
            curTween = overlaps[i];
            l = curTween._firstPT;
            2 === mode && curTween._kill(props, target, tween) && (changed = true);
            if (2 !== mode || !curTween._firstPT && curTween._initted && l) {
              if (2 !== mode && !_onOverwrite(curTween, tween)) continue;
              curTween._enabled(false, false) && (changed = true);
            }
          }
          return changed;
        }, _checkOverlap = function(tween, reference, zeroDur) {
          var tl = tween._timeline, ts = tl._timeScale, t = tween._startTime;
          while (tl._timeline) {
            t += tl._startTime;
            ts *= tl._timeScale;
            if (tl._paused) return -100;
            tl = tl._timeline;
          }
          t /= ts;
          return t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2 * _tinyNum ? _tinyNum : (t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum ? 0 : t - reference - _tinyNum;
        };
        p._init = function() {
          var v = this.vars, op = this._overwrittenProps, dur = this._duration, immediate = !!v.immediateRender, ease = v.ease, i, initPlugins, pt, p, startVars, l;
          if (v.startAt) {
            if (this._startAt) {
              this._startAt.render(-1, true);
              this._startAt.kill();
            }
            startVars = {};
            for (p in v.startAt) startVars[p] = v.startAt[p];
            startVars.data = "isStart";
            startVars.overwrite = false;
            startVars.immediateRender = true;
            startVars.lazy = immediate && false !== v.lazy;
            startVars.startAt = startVars.delay = null;
            startVars.onUpdate = v.onUpdate;
            startVars.onUpdateParams = v.onUpdateParams;
            startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
            this._startAt = TweenLite.to(this.target || {}, 0, startVars);
            if (immediate) if (this._time > 0) this._startAt = null; else if (0 !== dur) return;
          } else if (v.runBackwards && 0 !== dur) if (this._startAt) {
            this._startAt.render(-1, true);
            this._startAt.kill();
            this._startAt = null;
          } else {
            0 !== this._time && (immediate = false);
            pt = {};
            for (p in v) _reservedProps[p] && "autoCSS" !== p || (pt[p] = v[p]);
            pt.overwrite = 0;
            pt.data = "isFromStart";
            pt.lazy = immediate && false !== v.lazy;
            pt.immediateRender = immediate;
            this._startAt = TweenLite.to(this.target, 0, pt);
            if (immediate) {
              if (0 === this._time) return;
            } else {
              this._startAt._init();
              this._startAt._enabled(false);
              this.vars.immediateRender && (this._startAt = null);
            }
          }
          this._ease = ease = ease ? ease instanceof Ease ? ease : "function" === typeof ease ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase : TweenLite.defaultEase;
          v.easeParams instanceof Array && ease.config && (this._ease = ease.config.apply(ease, v.easeParams));
          this._easeType = this._ease._type;
          this._easePower = this._ease._power;
          this._firstPT = null;
          if (this._targets) {
            l = this._targets.length;
            for (i = 0; i < l; i++) this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null, i) && (initPlugins = true);
          } else initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
          initPlugins && TweenLite._onPluginEvent("_onInitAllProps", this);
          op && (this._firstPT || "function" !== typeof this.target && this._enabled(false, false));
          if (v.runBackwards) {
            pt = this._firstPT;
            while (pt) {
              pt.s += pt.c;
              pt.c = -pt.c;
              pt = pt._next;
            }
          }
          this._onUpdate = v.onUpdate;
          this._initted = true;
        };
        p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
          var p, i, initPlugins, plugin, pt, v;
          if (null == target) return false;
          _lazyLookup[target._gsTweenID] && _lazyRender();
          this.vars.css || target.style && target !== window && target.nodeType && _plugins.css && false !== this.vars.autoCSS && _autoCSS(this.vars, target);
          for (p in this.vars) {
            v = this.vars[p];
            if (_reservedProps[p]) v && (v instanceof Array || v.push && _isArray(v)) && -1 !== v.join("").indexOf("{self}") && (this.vars[p] = v = this._swapSelfInParams(v, this)); else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {
              this._firstPT = pt = {
                _next: this._firstPT,
                t: plugin,
                p: "setRatio",
                s: 0,
                c: 1,
                f: 1,
                n: p,
                pg: 1,
                pr: plugin._priority,
                m: 0
              };
              i = plugin._overwriteProps.length;
              while (--i > -1) propLookup[plugin._overwriteProps[i]] = this._firstPT;
              (plugin._priority || plugin._onInitAllProps) && (initPlugins = true);
              (plugin._onDisable || plugin._onEnable) && (this._notifyPluginsOfEnabled = true);
              pt._next && (pt._next._prev = pt);
            } else propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
          }
          if (overwrittenProps && this._kill(overwrittenProps, target)) return this._initProps(target, propLookup, siblings, overwrittenProps, index);
          if (this._overwrite > 1 && this._firstPT && siblings.length > 1 && _applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
            this._kill(propLookup, target);
            return this._initProps(target, propLookup, siblings, overwrittenProps, index);
          }
          this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration) && (_lazyLookup[target._gsTweenID] = true);
          return initPlugins;
        };
        p.render = function(time, suppressEvents, force) {
          var prevTime = this._time, duration = this._duration, prevRawPrevTime = this._rawPrevTime, isComplete, callback, pt, rawPrevTime;
          if (time >= duration - 1e-7 && time >= 0) {
            this._totalTime = this._time = duration;
            this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
            if (!this._reversed) {
              isComplete = true;
              callback = "onComplete";
              force = force || this._timeline.autoRemoveChildren;
            }
            if (0 === duration && (this._initted || !this.vars.lazy || force)) {
              this._startTime === this._timeline._duration && (time = 0);
              if ((prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || prevRawPrevTime === _tinyNum && "isPause" !== this.data) && prevRawPrevTime !== time) {
                force = true;
                prevRawPrevTime > _tinyNum && (callback = "onReverseComplete");
              }
              this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum;
            }
          } else if (time < 1e-7) {
            this._totalTime = this._time = 0;
            this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
            if (0 !== prevTime || 0 === duration && prevRawPrevTime > 0) {
              callback = "onReverseComplete";
              isComplete = this._reversed;
            }
            if (time < 0) {
              this._active = false;
              if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && "isPause" === this.data) && (force = true);
                this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum;
              }
            }
            (!this._initted || this._startAt && this._startAt.progress()) && (force = true);
          } else {
            this._totalTime = this._time = time;
            if (this._easeType) {
              var r = time / duration, type = this._easeType, pow = this._easePower;
              (1 === type || 3 === type && r >= .5) && (r = 1 - r);
              3 === type && (r *= 2);
              1 === pow ? r *= r : 2 === pow ? r *= r * r : 3 === pow ? r *= r * r * r : 4 === pow && (r *= r * r * r * r);
              this.ratio = 1 === type ? 1 - r : 2 === type ? r : time / duration < .5 ? r / 2 : 1 - r / 2;
            } else this.ratio = this._ease.getRatio(time / duration);
          }
          if (this._time === prevTime && !force) return;
          if (!this._initted) {
            this._init();
            if (!this._initted || this._gc) return;
            if (!force && this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration)) {
              this._time = this._totalTime = prevTime;
              this._rawPrevTime = prevRawPrevTime;
              _lazyTweens.push(this);
              this._lazy = [ time, suppressEvents ];
              return;
            }
            this._time && !isComplete ? this.ratio = this._ease.getRatio(this._time / duration) : isComplete && this._ease._calcEnd && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1));
          }
          false !== this._lazy && (this._lazy = false);
          this._active || !this._paused && this._time !== prevTime && time >= 0 && (this._active = true);
          if (0 === prevTime) {
            this._startAt && (time >= 0 ? this._startAt.render(time, true, force) : callback || (callback = "_dummyGS"));
            this.vars.onStart && (0 === this._time && 0 !== duration || suppressEvents || this._callback("onStart"));
          }
          pt = this._firstPT;
          while (pt) {
            pt.f ? pt.t[pt.p](pt.c * this.ratio + pt.s) : pt.t[pt.p] = pt.c * this.ratio + pt.s;
            pt = pt._next;
          }
          if (this._onUpdate) {
            time < 0 && this._startAt && -1e-4 !== time && this._startAt.render(time, true, force);
            suppressEvents || (this._time !== prevTime || isComplete || force) && this._callback("onUpdate");
          }
          if (callback && (!this._gc || force)) {
            time < 0 && this._startAt && !this._onUpdate && -1e-4 !== time && this._startAt.render(time, true, force);
            if (isComplete) {
              this._timeline.autoRemoveChildren && this._enabled(false, false);
              this._active = false;
            }
            !suppressEvents && this.vars[callback] && this._callback(callback);
            0 === duration && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum && (this._rawPrevTime = 0);
          }
        };
        p._kill = function(vars, target, overwritingTween) {
          "all" === vars && (vars = null);
          if (null == vars && (null == target || target === this.target)) {
            this._lazy = false;
            return this._enabled(false, false);
          }
          target = "string" !== typeof target ? target || this._targets || this.target : TweenLite.selector(target) || target;
          var simultaneousOverwrite = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline, firstPT = this._firstPT, i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
          if ((_isArray(target) || _isSelector(target)) && "number" !== typeof target[0]) {
            i = target.length;
            while (--i > -1) this._kill(vars, target[i], overwritingTween) && (changed = true);
          } else {
            if (this._targets) {
              i = this._targets.length;
              while (--i > -1) if (target === this._targets[i]) {
                propLookup = this._propLookup[i] || {};
                this._overwrittenProps = this._overwrittenProps || [];
                overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                break;
              }
            } else {
              if (target !== this.target) return false;
              propLookup = this._propLookup;
              overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
            }
            if (propLookup) {
              killProps = vars || propLookup;
              record = vars !== overwrittenProps && "all" !== overwrittenProps && vars !== propLookup && ("object" !== typeof vars || !vars._tempKill);
              if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                for (p in killProps) if (propLookup[p]) {
                  killed || (killed = []);
                  killed.push(p);
                }
                if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) return false;
              }
              for (p in killProps) {
                if (pt = propLookup[p]) {
                  if (simultaneousOverwrite) {
                    pt.f ? pt.t[pt.p](pt.s) : pt.t[pt.p] = pt.s;
                    changed = true;
                  }
                  pt.pg && pt.t._kill(killProps) && (changed = true);
                  if (!pt.pg || 0 === pt.t._overwriteProps.length) {
                    pt._prev ? pt._prev._next = pt._next : pt === this._firstPT && (this._firstPT = pt._next);
                    pt._next && (pt._next._prev = pt._prev);
                    pt._next = pt._prev = null;
                  }
                  delete propLookup[p];
                }
                record && (overwrittenProps[p] = 1);
              }
              !this._firstPT && this._initted && firstPT && this._enabled(false, false);
            }
          }
          return changed;
        };
        p.invalidate = function() {
          this._notifyPluginsOfEnabled && TweenLite._onPluginEvent("_onDisable", this);
          this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
          this._notifyPluginsOfEnabled = this._active = this._lazy = false;
          this._propLookup = this._targets ? {} : [];
          Animation.prototype.invalidate.call(this);
          if (this.vars.immediateRender) {
            this._time = -_tinyNum;
            this.render(Math.min(0, -this._delay));
          }
          return this;
        };
        p._enabled = function(enabled, ignoreTimeline) {
          _tickerActive || _ticker.wake();
          if (enabled && this._gc) {
            var targets = this._targets, i;
            if (targets) {
              i = targets.length;
              while (--i > -1) this._siblings[i] = _register(targets[i], this, true);
            } else this._siblings = _register(this.target, this, true);
          }
          Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
          if (this._notifyPluginsOfEnabled && this._firstPT) return TweenLite._onPluginEvent(enabled ? "_onEnable" : "_onDisable", this);
          return false;
        };
        TweenLite.to = function(target, duration, vars) {
          return new TweenLite(target, duration, vars);
        };
        TweenLite.from = function(target, duration, vars) {
          vars.runBackwards = true;
          vars.immediateRender = false != vars.immediateRender;
          return new TweenLite(target, duration, vars);
        };
        TweenLite.fromTo = function(target, duration, fromVars, toVars) {
          toVars.startAt = fromVars;
          toVars.immediateRender = false != toVars.immediateRender && false != fromVars.immediateRender;
          return new TweenLite(target, duration, toVars);
        };
        TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
          return new TweenLite(callback, 0, {
            delay: delay,
            onComplete: callback,
            onCompleteParams: params,
            callbackScope: scope,
            onReverseComplete: callback,
            onReverseCompleteParams: params,
            immediateRender: false,
            lazy: false,
            useFrames: useFrames,
            overwrite: 0
          });
        };
        TweenLite.set = function(target, vars) {
          return new TweenLite(target, 0, vars);
        };
        TweenLite.getTweensOf = function(target, onlyActive) {
          if (null == target) return [];
          target = "string" !== typeof target ? target : TweenLite.selector(target) || target;
          var i, a, j, t;
          if ((_isArray(target) || _isSelector(target)) && "number" !== typeof target[0]) {
            i = target.length;
            a = [];
            while (--i > -1) a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
            i = a.length;
            while (--i > -1) {
              t = a[i];
              j = i;
              while (--j > -1) t === a[j] && a.splice(i, 1);
            }
          } else if (target._gsTweenID) {
            a = _register(target).concat();
            i = a.length;
            while (--i > -1) (a[i]._gc || onlyActive && !a[i].isActive()) && a.splice(i, 1);
          }
          return a || [];
        };
        TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
          if ("object" === typeof onlyActive) {
            vars = onlyActive;
            onlyActive = false;
          }
          var a = TweenLite.getTweensOf(target, onlyActive), i = a.length;
          while (--i > -1) a[i]._kill(vars, target);
        };
        var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
          this._overwriteProps = (props || "").split(",");
          this._propName = this._overwriteProps[0];
          this._priority = priority || 0;
          this._super = TweenPlugin.prototype;
        }, true);
        p = TweenPlugin.prototype;
        TweenPlugin.version = "1.19.0";
        TweenPlugin.API = 2;
        p._firstPT = null;
        p._addTween = _addPropTween;
        p.setRatio = _setRatio;
        p._kill = function(lookup) {
          var a = this._overwriteProps, pt = this._firstPT, i;
          if (null != lookup[this._propName]) this._overwriteProps = []; else {
            i = a.length;
            while (--i > -1) null != lookup[a[i]] && a.splice(i, 1);
          }
          while (pt) {
            if (null != lookup[pt.n]) {
              pt._next && (pt._next._prev = pt._prev);
              if (pt._prev) {
                pt._prev._next = pt._next;
                pt._prev = null;
              } else this._firstPT === pt && (this._firstPT = pt._next);
            }
            pt = pt._next;
          }
          return false;
        };
        p._mod = p._roundProps = function(lookup) {
          var pt = this._firstPT, val;
          while (pt) {
            val = lookup[this._propName] || null != pt.n && lookup[pt.n.split(this._propName + "_").join("")];
            val && "function" === typeof val && (2 === pt.f ? pt.t._applyPT.m = val : pt.m = val);
            pt = pt._next;
          }
        };
        TweenLite._onPluginEvent = function(type, tween) {
          var pt = tween._firstPT, changed, pt2, first, last, next;
          if ("_onInitAllProps" === type) {
            while (pt) {
              next = pt._next;
              pt2 = first;
              while (pt2 && pt2.pr > pt.pr) pt2 = pt2._next;
              (pt._prev = pt2 ? pt2._prev : last) ? pt._prev._next = pt : first = pt;
              (pt._next = pt2) ? pt2._prev = pt : last = pt;
              pt = next;
            }
            pt = tween._firstPT = first;
          }
          while (pt) {
            pt.pg && "function" === typeof pt.t[type] && pt.t[type]() && (changed = true);
            pt = pt._next;
          }
          return changed;
        };
        TweenPlugin.activate = function(plugins) {
          var i = plugins.length;
          while (--i > -1) plugins[i].API === TweenPlugin.API && (_plugins[new plugins[i]()._propName] = plugins[i]);
          return true;
        };
        _gsDefine.plugin = function(config) {
          if (!config || !config.propName || !config.init || !config.API) throw "illegal plugin definition.";
          var propName = config.propName, priority = config.priority || 0, overwriteProps = config.overwriteProps, map = {
            init: "_onInitTween",
            set: "setRatio",
            kill: "_kill",
            round: "_mod",
            mod: "_mod",
            initAll: "_onInitAllProps"
          }, Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin", function() {
            TweenPlugin.call(this, propName, priority);
            this._overwriteProps = overwriteProps || [];
          }, true === config.global), p = Plugin.prototype = new TweenPlugin(propName), prop;
          p.constructor = Plugin;
          Plugin.API = config.API;
          for (prop in map) "function" === typeof config[prop] && (p[map[prop]] = config[prop]);
          Plugin.version = config.version;
          TweenPlugin.activate([ Plugin ]);
          return Plugin;
        };
        a = window._gsQueue;
        if (a) {
          for (i = 0; i < a.length; i++) a[i]();
          for (p in _defLookup) _defLookup[p].func || window.console.log("GSAP encountered missing dependency: " + p);
        }
        _tickerActive = false;
      })("undefined" !== typeof module && module.exports && "undefined" !== typeof global ? global : this || window, "TweenMax");
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {} ],
  118: [ function(require, module, exports) {
    exports = module.exports = stringify;
    exports.getSerialize = serializer;
    function stringify(obj, replacer, spaces, cycleReplacer) {
      return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
    }
    function serializer(replacer, cycleReplacer) {
      var stack = [], keys = [];
      null == cycleReplacer && (cycleReplacer = function(key, value) {
        if (stack[0] === value) return "[Circular ~]";
        return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
      });
      return function(key, value) {
        if (stack.length > 0) {
          var thisPos = stack.indexOf(this);
          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
          ~stack.indexOf(value) && (value = cycleReplacer.call(this, key, value));
        } else stack.push(value);
        return null == replacer ? value : replacer.call(this, key, value);
      };
    }
  }, {} ],
  119: [ function(require, module, exports) {
    var LZString = function() {
      var f = String.fromCharCode;
      var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
      var baseReverseDic = {};
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {};
          for (var i = 0; i < alphabet.length; i++) baseReverseDic[alphabet][alphabet.charAt(i)] = i;
        }
        return baseReverseDic[alphabet][character];
      }
      var LZString = {
        compressToBase64: function(input) {
          if (null == input) return "";
          var res = LZString._compress(input, 6, function(a) {
            return keyStrBase64.charAt(a);
          });
          switch (res.length % 4) {
           default:
           case 0:
            return res;

           case 1:
            return res + "===";

           case 2:
            return res + "==";

           case 3:
            return res + "=";
          }
        },
        decompressFromBase64: function(input) {
          if (null == input) return "";
          if ("" == input) return null;
          return LZString._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrBase64, input.charAt(index));
          });
        },
        compressToUTF16: function(input) {
          if (null == input) return "";
          return LZString._compress(input, 15, function(a) {
            return f(a + 32);
          }) + " ";
        },
        decompressFromUTF16: function(compressed) {
          if (null == compressed) return "";
          if ("" == compressed) return null;
          return LZString._decompress(compressed.length, 16384, function(index) {
            return compressed.charCodeAt(index) - 32;
          });
        },
        compressToUint8Array: function(uncompressed) {
          var compressed = LZString.compress(uncompressed);
          var buf = new Uint8Array(2 * compressed.length);
          for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
            var current_value = compressed.charCodeAt(i);
            buf[2 * i] = current_value >>> 8;
            buf[2 * i + 1] = current_value % 256;
          }
          return buf;
        },
        decompressFromUint8Array: function(compressed) {
          if (null === compressed || void 0 === compressed) return LZString.decompress(compressed);
          var buf = new Array(compressed.length / 2);
          for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) buf[i] = 256 * compressed[2 * i] + compressed[2 * i + 1];
          var result = [];
          buf.forEach(function(c) {
            result.push(f(c));
          });
          return LZString.decompress(result.join(""));
        },
        compressToEncodedURIComponent: function(input) {
          if (null == input) return "";
          return LZString._compress(input, 6, function(a) {
            return keyStrUriSafe.charAt(a);
          });
        },
        decompressFromEncodedURIComponent: function(input) {
          if (null == input) return "";
          if ("" == input) return null;
          input = input.replace(/ /g, "+");
          return LZString._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrUriSafe, input.charAt(index));
          });
        },
        compress: function(uncompressed) {
          return LZString._compress(uncompressed, 16, function(a) {
            return f(a);
          });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (null == uncompressed) return "";
          var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii);
            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
              context_dictionary[context_c] = context_dictSize++;
              context_dictionaryToCreate[context_c] = true;
            }
            context_wc = context_w + context_c;
            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) context_w = context_wc; else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val <<= 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else context_data_position++;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 8; i++) {
                    context_data_val = context_data_val << 1 | 1 & value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else context_data_position++;
                    value >>= 1;
                  }
                } else {
                  value = 1;
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else context_data_position++;
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 16; i++) {
                    context_data_val = context_data_val << 1 | 1 & value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else context_data_position++;
                    value >>= 1;
                  }
                }
                context_enlargeIn--;
                if (0 == context_enlargeIn) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | 1 & value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else context_data_position++;
                  value >>= 1;
                }
              }
              context_enlargeIn--;
              if (0 == context_enlargeIn) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              context_dictionary[context_wc] = context_dictSize++;
              context_w = String(context_c);
            }
          }
          if ("" !== context_w) {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i = 0; i < context_numBits; i++) {
                  context_data_val <<= 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else context_data_position++;
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 8; i++) {
                  context_data_val = context_data_val << 1 | 1 & value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else context_data_position++;
                  value >>= 1;
                }
              } else {
                value = 1;
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else context_data_position++;
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 16; i++) {
                  context_data_val = context_data_val << 1 | 1 & value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else context_data_position++;
                  value >>= 1;
                }
              }
              context_enlargeIn--;
              if (0 == context_enlargeIn) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i = 0; i < context_numBits; i++) {
                context_data_val = context_data_val << 1 | 1 & value;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else context_data_position++;
                value >>= 1;
              }
            }
            context_enlargeIn--;
            if (0 == context_enlargeIn) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
          }
          value = 2;
          for (i = 0; i < context_numBits; i++) {
            context_data_val = context_data_val << 1 | 1 & value;
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else context_data_position++;
            value >>= 1;
          }
          while (true) {
            context_data_val <<= 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            }
            context_data_position++;
          }
          return context_data.join("");
        },
        decompress: function(compressed) {
          if (null == compressed) return "";
          if ("" == compressed) return null;
          return LZString._decompress(compressed.length, 32768, function(index) {
            return compressed.charCodeAt(index);
          });
        },
        _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i, w, bits, resb, maxpower, power, c, data = {
            val: getNextValue(0),
            position: resetValue,
            index: 1
          };
          for (i = 0; i < 3; i += 1) dictionary[i] = i;
          bits = 0;
          maxpower = Math.pow(2, 2);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (0 == data.position) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (next = bits) {
           case 0:
            bits = 0;
            maxpower = Math.pow(2, 8);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (0 == data.position) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            c = f(bits);
            break;

           case 1:
            bits = 0;
            maxpower = Math.pow(2, 16);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (0 == data.position) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            c = f(bits);
            break;

           case 2:
            return "";
          }
          dictionary[3] = c;
          w = c;
          result.push(c);
          while (true) {
            if (data.index > length) return "";
            bits = 0;
            maxpower = Math.pow(2, numBits);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (0 == data.position) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (c = bits) {
             case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (0 == data.position) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              dictionary[dictSize++] = f(bits);
              c = dictSize - 1;
              enlargeIn--;
              break;

             case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (0 == data.position) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              dictionary[dictSize++] = f(bits);
              c = dictSize - 1;
              enlargeIn--;
              break;

             case 2:
              return result.join("");
            }
            if (0 == enlargeIn) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
            if (dictionary[c]) entry = dictionary[c]; else {
              if (c !== dictSize) return null;
              entry = w + w.charAt(0);
            }
            result.push(entry);
            dictionary[dictSize++] = w + entry.charAt(0);
            enlargeIn--;
            w = entry;
            if (0 == enlargeIn) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
          }
        }
      };
      return LZString;
    }();
    "function" === typeof define && define.amd ? define(function() {
      return LZString;
    }) : "undefined" !== typeof module && null != module && (module.exports = LZString);
  }, {} ],
  120: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTransformCompress;
      var _reduxPersist = require("redux-persist");
      var _lzString = require("lz-string");
      var _lzString2 = _interopRequireDefault(_lzString);
      var _jsonStringifySafe = require("json-stringify-safe");
      var _jsonStringifySafe2 = _interopRequireDefault(_jsonStringifySafe);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var NODE_ENV = "undefined" !== typeof process ? process.env.NODE_ENV : "production";
      function createTransformCompress(config) {
        return (0, _reduxPersist.createTransform)(function(state) {
          return _lzString2.default.compressToUTF16((0, _jsonStringifySafe2.default)(state));
        }, function(state) {
          if ("string" !== typeof state) {
            "production" !== NODE_ENV && console.error("redux-persist-transform-compress: expected outbound state to be a string");
            return state;
          }
          try {
            return JSON.parse(_lzString2.default.decompressFromUTF16(state));
          } catch (err) {
            "production" !== NODE_ENV && console.error("redux-persist-transform-compress: error while decompressing state", err);
            return null;
          }
        }, config);
      }
    }).call(this, require("_process"));
  }, {
    _process: 1,
    "json-stringify-safe": 118,
    "lz-string": 119,
    "redux-persist": 126
  } ],
  121: [ function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    var KEY_PREFIX = exports.KEY_PREFIX = "persist:";
    var FLUSH = exports.FLUSH = "persist/FLUSH";
    var REHYDRATE = exports.REHYDRATE = "persist/REHYDRATE";
    var PAUSE = exports.PAUSE = "persist/PAUSE";
    var PERSIST = exports.PERSIST = "persist/PERSIST";
    var PURGE = exports.PURGE = "persist/PURGE";
    var REGISTER = exports.REGISTER = "persist/REGISTER";
    var DEFAULT_VERSION = exports.DEFAULT_VERSION = -1;
  }, {} ],
  122: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      exports.default = createMigrate;
      var _constants = require("./constants");
      function createMigrate(migrations, config) {
        var _ref = config || {}, debug = _ref.debug;
        return function(state, currentVersion) {
          if (!state) {
            "production" !== process.env.NODE_ENV && debug && console.log("redux-persist: no inbound state, skipping migration");
            return Promise.resolve(void 0);
          }
          var inboundVersion = state._persist && void 0 !== state._persist.version ? state._persist.version : _constants.DEFAULT_VERSION;
          if (inboundVersion === currentVersion) {
            "production" !== process.env.NODE_ENV && debug && console.log("redux-persist: versions match, noop migration");
            return Promise.resolve(state);
          }
          if (inboundVersion > currentVersion) {
            "production" !== process.env.NODE_ENV && console.error("redux-persist: downgrading version is not supported");
            return Promise.resolve(state);
          }
          var migrationKeys = Object.keys(migrations).map(function(ver) {
            return parseInt(ver);
          }).filter(function(key) {
            return currentVersion >= key && key > inboundVersion;
          }).sort(function(a, b) {
            return a - b;
          });
          "production" !== process.env.NODE_ENV && debug && console.log("redux-persist: migrationKeys", migrationKeys);
          try {
            var migratedState = migrationKeys.reduce(function(state, versionKey) {
              "production" !== process.env.NODE_ENV && debug && console.log("redux-persist: running migration for versionKey", versionKey);
              return migrations[versionKey](state);
            }, state);
            return Promise.resolve(migratedState);
          } catch (err) {
            return Promise.reject(err);
          }
        };
      }
    }).call(this, require("_process"));
  }, {
    "./constants": 121,
    _process: 1
  } ],
  123: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      exports.default = createPersistoid;
      var _constants = require("./constants");
      function createPersistoid(config) {
        var blacklist = config.blacklist || null;
        var whitelist = config.whitelist || null;
        var transforms = config.transforms || [];
        var throttle = config.throttle || 0;
        var storageKey = "" + (void 0 !== config.keyPrefix ? config.keyPrefix : _constants.KEY_PREFIX) + config.key;
        var storage = config.storage;
        var serialize = false === config.serialize ? function(x) {
          return x;
        } : defaultSerialize;
        var lastState = {};
        var stagedState = {};
        var keysToProcess = [];
        var timeIterator = null;
        var writePromise = null;
        var update = function update(state) {
          Object.keys(state).forEach(function(key) {
            if (!passWhitelistBlacklist(key)) return;
            if (lastState[key] === state[key]) return;
            if (-1 !== keysToProcess.indexOf(key)) return;
            keysToProcess.push(key);
          });
          Object.keys(lastState).forEach(function(key) {
            void 0 === state[key] && keysToProcess.push(key);
          });
          null === timeIterator && (timeIterator = setInterval(processNextKey, throttle));
          lastState = state;
        };
        function processNextKey() {
          if (0 === keysToProcess.length) {
            timeIterator && clearInterval(timeIterator);
            timeIterator = null;
            return;
          }
          var key = keysToProcess.shift();
          var endState = transforms.reduce(function(subState, transformer) {
            return transformer.in(subState, key, lastState);
          }, lastState[key]);
          if (void 0 !== endState) try {
            stagedState[key] = serialize(endState);
          } catch (err) {
            console.error("redux-persist/createPersistoid: error serializing state", err);
          } else delete stagedState[key];
          0 === keysToProcess.length && writeStagedState();
        }
        function writeStagedState() {
          Object.keys(stagedState).forEach(function(key) {
            void 0 === lastState[key] && delete stagedState[key];
          });
          writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
        }
        function passWhitelistBlacklist(key) {
          if (whitelist && -1 === whitelist.indexOf(key) && "_persist" !== key) return false;
          if (blacklist && -1 !== blacklist.indexOf(key)) return false;
          return true;
        }
        function onWriteFail(err) {
          err && "production" !== process.env.NODE_ENV && console.error("Error storing data", err);
        }
        var flush = function flush() {
          while (0 !== keysToProcess.length) processNextKey();
          return writePromise || Promise.resolve();
        };
        return {
          update: update,
          flush: flush
        };
      }
      function defaultSerialize(data) {
        return JSON.stringify(data);
      }
    }).call(this, require("_process"));
  }, {
    "./constants": 121,
    _process: 1
  } ],
  124: [ function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = createTransform;
    function createTransform(inbound, outbound) {
      var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      var whitelist = config.whitelist || null;
      var blacklist = config.blacklist || null;
      function whitelistBlacklistCheck(key) {
        if (whitelist && -1 === whitelist.indexOf(key)) return true;
        if (blacklist && -1 !== blacklist.indexOf(key)) return true;
        return false;
      }
      return {
        in: function _in(state, key, fullState) {
          return !whitelistBlacklistCheck(key) && inbound ? inbound(state, key, fullState) : state;
        },
        out: function out(state, key, fullState) {
          return !whitelistBlacklistCheck(key) && outbound ? outbound(state, key, fullState) : state;
        }
      };
    }
  }, {} ],
  125: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      exports.default = getStoredState;
      var _constants = require("./constants");
      function getStoredState(config) {
        var transforms = config.transforms || [];
        var storageKey = "" + (void 0 !== config.keyPrefix ? config.keyPrefix : _constants.KEY_PREFIX) + config.key;
        var storage = config.storage;
        var debug = config.debug;
        var deserialize = false === config.serialize ? function(x) {
          return x;
        } : defaultDeserialize;
        return storage.getItem(storageKey).then(function(serialized) {
          if (!serialized) return;
          try {
            var state = {};
            var rawState = deserialize(serialized);
            Object.keys(rawState).forEach(function(key) {
              state[key] = transforms.reduceRight(function(subState, transformer) {
                return transformer.out(subState, key, rawState);
              }, deserialize(rawState[key]));
            });
            return state;
          } catch (err) {
            "production" !== process.env.NODE_ENV && debug && console.log("redux-persist/getStoredState: Error restoring data " + serialized, err);
            throw err;
          }
        });
      }
      function defaultDeserialize(serial) {
        return JSON.parse(serial);
      }
    }).call(this, require("_process"));
  }, {
    "./constants": 121,
    _process: 1
  } ],
  126: [ function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    var _persistReducer = require("./persistReducer");
    Object.defineProperty(exports, "persistReducer", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_persistReducer).default;
      }
    });
    var _persistCombineReducers = require("./persistCombineReducers");
    Object.defineProperty(exports, "persistCombineReducers", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_persistCombineReducers).default;
      }
    });
    var _persistStore = require("./persistStore");
    Object.defineProperty(exports, "persistStore", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_persistStore).default;
      }
    });
    var _createMigrate = require("./createMigrate");
    Object.defineProperty(exports, "createMigrate", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_createMigrate).default;
      }
    });
    var _createTransform = require("./createTransform");
    Object.defineProperty(exports, "createTransform", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_createTransform).default;
      }
    });
    var _getStoredState = require("./getStoredState");
    Object.defineProperty(exports, "getStoredState", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_getStoredState).default;
      }
    });
    var _createPersistoid = require("./createPersistoid");
    Object.defineProperty(exports, "createPersistoid", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_createPersistoid).default;
      }
    });
    var _purgeStoredState = require("./purgeStoredState");
    Object.defineProperty(exports, "purgeStoredState", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_purgeStoredState).default;
      }
    });
    var _constants = require("./constants");
    Object.keys(_constants).forEach(function(key) {
      if ("default" === key || "__esModule" === key) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _constants[key];
        }
      });
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }, {
    "./constants": 121,
    "./createMigrate": 122,
    "./createPersistoid": 123,
    "./createTransform": 124,
    "./getStoredState": 125,
    "./persistCombineReducers": 127,
    "./persistReducer": 128,
    "./persistStore": 129,
    "./purgeStoredState": 130
  } ],
  127: [ function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = persistCombineReducers;
    var _redux = require("redux");
    var _persistReducer = require("./persistReducer");
    var _persistReducer2 = _interopRequireDefault(_persistReducer);
    var _autoMergeLevel = require("./stateReconciler/autoMergeLevel2");
    var _autoMergeLevel2 = _interopRequireDefault(_autoMergeLevel);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function persistCombineReducers(config, reducers) {
      config.stateReconciler = void 0 === config.stateReconciler ? _autoMergeLevel2.default : config.stateReconciler;
      return (0, _persistReducer2.default)(config, (0, _redux.combineReducers)(reducers));
    }
  }, {
    "./persistReducer": 128,
    "./stateReconciler/autoMergeLevel2": 132,
    redux: 133
  } ],
  128: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      exports.default = persistReducer;
      var _constants = require("./constants");
      var _autoMergeLevel = require("./stateReconciler/autoMergeLevel1");
      var _autoMergeLevel2 = _interopRequireDefault(_autoMergeLevel);
      var _createPersistoid = require("./createPersistoid");
      var _createPersistoid2 = _interopRequireDefault(_createPersistoid);
      var _getStoredState = require("./getStoredState");
      var _getStoredState2 = _interopRequireDefault(_getStoredState);
      var _purgeStoredState = require("./purgeStoredState");
      var _purgeStoredState2 = _interopRequireDefault(_purgeStoredState);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
          target[i] = obj[i];
        }
        return target;
      }
      var DEFAULT_TIMEOUT = 5e3;
      function persistReducer(config, baseReducer) {
        if ("production" !== process.env.NODE_ENV) {
          if (!config) throw new Error("config is required for persistReducer");
          if (!config.key) throw new Error("key is required in persistor config");
          if (!config.storage) throw new Error("redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`");
        }
        var version = void 0 !== config.version ? config.version : _constants.DEFAULT_VERSION;
        var debug = config.debug || false;
        var stateReconciler = void 0 === config.stateReconciler ? _autoMergeLevel2.default : config.stateReconciler;
        var getStoredState = config.getStoredState || _getStoredState2.default;
        var timeout = void 0 !== config.timeout ? config.timeout : DEFAULT_TIMEOUT;
        var _persistoid = null;
        var _purge = false;
        var _paused = true;
        var conditionalUpdate = function conditionalUpdate(state) {
          state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);
          return state;
        };
        return function(state, action) {
          var _ref = state || {}, _persist = _ref._persist, rest = _objectWithoutProperties(_ref, [ "_persist" ]);
          var restState = rest;
          if (action.type === _constants.PERSIST) {
            var _sealed = false;
            var _rehydrate = function _rehydrate(payload, err) {
              "production" !== process.env.NODE_ENV && _sealed && console.error('redux-persist: rehydrate for "' + config.key + '" called after timeout.', payload, err);
              if (!_sealed) {
                action.rehydrate(config.key, payload, err);
                _sealed = true;
              }
            };
            timeout && setTimeout(function() {
              !_sealed && _rehydrate(void 0, new Error('redux-persist: persist timed out for persist key "' + config.key + '"'));
            }, timeout);
            _paused = false;
            _persistoid || (_persistoid = (0, _createPersistoid2.default)(config));
            if (_persist) return state;
            if ("function" !== typeof action.rehydrate || "function" !== typeof action.register) throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");
            action.register(config.key);
            getStoredState(config).then(function(restoredState) {
              var migrate = config.migrate || function(s, v) {
                return Promise.resolve(s);
              };
              migrate(restoredState, version).then(function(migratedState) {
                _rehydrate(migratedState);
              }, function(migrateErr) {
                "production" !== process.env.NODE_ENV && migrateErr && console.error("redux-persist: migration error", migrateErr);
                _rehydrate(void 0, migrateErr);
              });
            }, function(err) {
              _rehydrate(void 0, err);
            });
            return _extends({}, baseReducer(restState, action), {
              _persist: {
                version: version,
                rehydrated: false
              }
            });
          }
          if (action.type === _constants.PURGE) {
            _purge = true;
            action.result((0, _purgeStoredState2.default)(config));
            return _extends({}, baseReducer(restState, action), {
              _persist: _persist
            });
          }
          if (action.type === _constants.FLUSH) {
            action.result(_persistoid && _persistoid.flush());
            return _extends({}, baseReducer(restState, action), {
              _persist: _persist
            });
          }
          if (action.type === _constants.PAUSE) _paused = true; else if (action.type === _constants.REHYDRATE) {
            if (_purge) return _extends({}, restState, {
              _persist: _extends({}, _persist, {
                rehydrated: true
              })
            });
            if (action.key === config.key) {
              var reducedState = baseReducer(restState, action);
              var inboundState = action.payload;
              var reconciledRest = false !== stateReconciler && void 0 !== inboundState ? stateReconciler(inboundState, state, reducedState, config) : reducedState;
              var _newState = _extends({}, reconciledRest, {
                _persist: _extends({}, _persist, {
                  rehydrated: true
                })
              });
              return conditionalUpdate(_newState);
            }
          }
          if (!_persist) return baseReducer(state, action);
          var newState = baseReducer(restState, action);
          if (newState === restState) return state;
          newState._persist = _persist;
          return conditionalUpdate(newState);
        };
      }
    }).call(this, require("_process"));
  }, {
    "./constants": 121,
    "./createPersistoid": 123,
    "./getStoredState": 125,
    "./purgeStoredState": 130,
    "./stateReconciler/autoMergeLevel1": 131,
    _process: 1
  } ],
  129: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      exports.default = persistStore;
      var _redux = require("redux");
      var _persistReducer = require("./persistReducer");
      var _persistReducer2 = _interopRequireDefault(_persistReducer);
      var _constants = require("./constants");
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
          return arr2;
        }
        return Array.from(arr);
      }
      var initialState = {
        registry: [],
        bootstrapped: false
      };
      var persistorReducer = function persistorReducer() {
        var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : initialState;
        var action = arguments[1];
        switch (action.type) {
         case _constants.REGISTER:
          return _extends({}, state, {
            registry: [].concat(_toConsumableArray(state.registry), [ action.key ])
          });

         case _constants.REHYDRATE:
          var firstIndex = state.registry.indexOf(action.key);
          var registry = [].concat(_toConsumableArray(state.registry));
          registry.splice(firstIndex, 1);
          return _extends({}, state, {
            registry: registry,
            bootstrapped: 0 === registry.length
          });

         default:
          return state;
        }
      };
      function persistStore(store, options, cb) {
        if ("production" !== process.env.NODE_ENV) {
          var optionsToTest = options || {};
          var bannedKeys = [ "blacklist", "whitelist", "transforms", "storage", "keyPrefix", "migrate" ];
          bannedKeys.forEach(function(k) {
            !optionsToTest[k] || console.error('redux-persist: invalid option passed to persistStore: "' + k + '". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer.');
          });
        }
        var boostrappedCb = cb || false;
        var _pStore = (0, _redux.createStore)(persistorReducer, initialState, options ? options.enhancer : void 0);
        var register = function register(key) {
          _pStore.dispatch({
            type: _constants.REGISTER,
            key: key
          });
        };
        var rehydrate = function rehydrate(key, payload, err) {
          var rehydrateAction = {
            type: _constants.REHYDRATE,
            payload: payload,
            err: err,
            key: key
          };
          store.dispatch(rehydrateAction);
          _pStore.dispatch(rehydrateAction);
          if (boostrappedCb && persistor.getState().bootstrapped) {
            boostrappedCb();
            boostrappedCb = false;
          }
        };
        var persistor = _extends({}, _pStore, {
          purge: function purge() {
            var results = [];
            store.dispatch({
              type: _constants.PURGE,
              result: function result(purgeResult) {
                results.push(purgeResult);
              }
            });
            return Promise.all(results);
          },
          flush: function flush() {
            var results = [];
            store.dispatch({
              type: _constants.FLUSH,
              result: function result(flushResult) {
                results.push(flushResult);
              }
            });
            return Promise.all(results);
          },
          pause: function pause() {
            store.dispatch({
              type: _constants.PAUSE
            });
          },
          persist: function persist() {
            store.dispatch({
              type: _constants.PERSIST,
              register: register,
              rehydrate: rehydrate
            });
          }
        });
        persistor.persist();
        return persistor;
      }
    }).call(this, require("_process"));
  }, {
    "./constants": 121,
    "./persistReducer": 128,
    _process: 1,
    redux: 133
  } ],
  130: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      exports.default = purgeStoredState;
      var _constants = require("./constants");
      function purgeStoredState(config) {
        var storage = config.storage;
        var storageKey = "" + (void 0 !== config.keyPrefix ? config.keyPrefix : _constants.KEY_PREFIX) + config.key;
        return storage.removeItem(storageKey, warnIfRemoveError);
      }
      function warnIfRemoveError(err) {
        err && "production" !== process.env.NODE_ENV && console.error("redux-persist/purgeStoredState: Error purging data stored state", err);
      }
    }).call(this, require("_process"));
  }, {
    "./constants": 121,
    _process: 1
  } ],
  131: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      exports.default = autoMergeLevel1;
      function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {
        var debug = _ref.debug;
        var newState = _extends({}, reducedState);
        inboundState && "object" === ("undefined" === typeof inboundState ? "undefined" : _typeof(inboundState)) && Object.keys(inboundState).forEach(function(key) {
          if ("_persist" === key) return;
          if (originalState[key] !== reducedState[key]) {
            "production" !== process.env.NODE_ENV && debug && console.log("redux-persist/stateReconciler: sub state for key `%s` modified, skipping.", key);
            return;
          }
          newState[key] = inboundState[key];
        });
        "production" !== process.env.NODE_ENV && debug && inboundState && "object" === ("undefined" === typeof inboundState ? "undefined" : _typeof(inboundState)) && console.log("redux-persist/stateReconciler: rehydrated keys '" + Object.keys(inboundState).join(", ") + "'");
        return newState;
      }
    }).call(this, require("_process"));
  }, {
    _process: 1
  } ],
  132: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      exports.__esModule = true;
      var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      exports.default = autoMergeLevel2;
      function autoMergeLevel2(inboundState, originalState, reducedState, _ref) {
        var debug = _ref.debug;
        var newState = _extends({}, reducedState);
        inboundState && "object" === ("undefined" === typeof inboundState ? "undefined" : _typeof(inboundState)) && Object.keys(inboundState).forEach(function(key) {
          if ("_persist" === key) return;
          if (originalState[key] !== reducedState[key]) {
            "production" !== process.env.NODE_ENV && debug && console.log("redux-persist/stateReconciler: sub state for key `%s` modified, skipping.", key);
            return;
          }
          if (isPlainEnoughObject(reducedState[key])) {
            newState[key] = _extends({}, newState[key], inboundState[key]);
            return;
          }
          newState[key] = inboundState[key];
        });
        "production" !== process.env.NODE_ENV && debug && inboundState && "object" === ("undefined" === typeof inboundState ? "undefined" : _typeof(inboundState)) && console.log("redux-persist/stateReconciler: rehydrated keys '" + Object.keys(inboundState).join(", ") + "'");
        return newState;
      }
      function isPlainEnoughObject(o) {
        return null !== o && !Array.isArray(o) && "object" === ("undefined" === typeof o ? "undefined" : _typeof(o));
      }
    }).call(this, require("_process"));
  }, {
    _process: 1
  } ],
  133: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopDefault(ex) {
        return ex && "object" === typeof ex && "default" in ex ? ex["default"] : ex;
      }
      var $$observable = _interopDefault(require("symbol-observable"));
      var ActionTypes = {
        INIT: "@@redux/INIT" + Math.random().toString(36).substring(7).split("").join("."),
        REPLACE: "@@redux/REPLACE" + Math.random().toString(36).substring(7).split("").join(".")
      };
      var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      function isPlainObject(obj) {
        if ("object" !== ("undefined" === typeof obj ? "undefined" : _typeof(obj)) || null === obj) return false;
        var proto = obj;
        while (null !== Object.getPrototypeOf(proto)) proto = Object.getPrototypeOf(proto);
        return Object.getPrototypeOf(obj) === proto;
      }
      function createStore(reducer, preloadedState, enhancer) {
        var _ref2;
        if ("function" === typeof preloadedState && "undefined" === typeof enhancer) {
          enhancer = preloadedState;
          preloadedState = void 0;
        }
        if ("undefined" !== typeof enhancer) {
          if ("function" !== typeof enhancer) throw new Error("Expected the enhancer to be a function.");
          return enhancer(createStore)(reducer, preloadedState);
        }
        if ("function" !== typeof reducer) throw new Error("Expected the reducer to be a function.");
        var currentReducer = reducer;
        var currentState = preloadedState;
        var currentListeners = [];
        var nextListeners = currentListeners;
        var isDispatching = false;
        function ensureCanMutateNextListeners() {
          nextListeners === currentListeners && (nextListeners = currentListeners.slice());
        }
        function getState() {
          if (isDispatching) throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
          return currentState;
        }
        function subscribe(listener) {
          if ("function" !== typeof listener) throw new Error("Expected the listener to be a function.");
          if (isDispatching) throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");
          var isSubscribed = true;
          ensureCanMutateNextListeners();
          nextListeners.push(listener);
          return function unsubscribe() {
            if (!isSubscribed) return;
            if (isDispatching) throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");
            isSubscribed = false;
            ensureCanMutateNextListeners();
            var index = nextListeners.indexOf(listener);
            nextListeners.splice(index, 1);
          };
        }
        function dispatch(action) {
          if (!isPlainObject(action)) throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
          if ("undefined" === typeof action.type) throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
          if (isDispatching) throw new Error("Reducers may not dispatch actions.");
          try {
            isDispatching = true;
            currentState = currentReducer(currentState, action);
          } finally {
            isDispatching = false;
          }
          var listeners = currentListeners = nextListeners;
          for (var i = 0; i < listeners.length; i++) {
            var listener = listeners[i];
            listener();
          }
          return action;
        }
        function replaceReducer(nextReducer) {
          if ("function" !== typeof nextReducer) throw new Error("Expected the nextReducer to be a function.");
          currentReducer = nextReducer;
          dispatch({
            type: ActionTypes.REPLACE
          });
        }
        function observable() {
          var _ref;
          var outerSubscribe = subscribe;
          return _ref = {
            subscribe: function subscribe(observer) {
              if ("object" !== ("undefined" === typeof observer ? "undefined" : _typeof(observer)) || null === observer) throw new TypeError("Expected the observer to be an object.");
              function observeState() {
                observer.next && observer.next(getState());
              }
              observeState();
              var unsubscribe = outerSubscribe(observeState);
              return {
                unsubscribe: unsubscribe
              };
            }
          }, _ref[$$observable] = function() {
            return this;
          }, _ref;
        }
        dispatch({
          type: ActionTypes.INIT
        });
        return _ref2 = {
          dispatch: dispatch,
          subscribe: subscribe,
          getState: getState,
          replaceReducer: replaceReducer
        }, _ref2[$$observable] = observable, _ref2;
      }
      function warning(message) {
        "undefined" !== typeof console && "function" === typeof console.error && console.error(message);
        try {
          throw new Error(message);
        } catch (e) {}
      }
      function getUndefinedStateErrorMessage(key, action) {
        var actionType = action && action.type;
        var actionDescription = actionType && 'action "' + String(actionType) + '"' || "an action";
        return "Given " + actionDescription + ', reducer "' + key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.';
      }
      function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
        var reducerKeys = Object.keys(reducers);
        var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
        if (0 === reducerKeys.length) return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
        if (!isPlainObject(inputState)) return "The " + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following keys: "' + reducerKeys.join('", "') + '"';
        var unexpectedKeys = Object.keys(inputState).filter(function(key) {
          return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
        });
        unexpectedKeys.forEach(function(key) {
          unexpectedKeyCache[key] = true;
        });
        if (action && action.type === ActionTypes.REPLACE) return;
        if (unexpectedKeys.length > 0) return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + ' "' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. Expected to find one of the known reducer keys instead: "' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.';
      }
      function assertReducerShape(reducers) {
        Object.keys(reducers).forEach(function(key) {
          var reducer = reducers[key];
          var initialState = reducer(void 0, {
            type: ActionTypes.INIT
          });
          if ("undefined" === typeof initialState) throw new Error('Reducer "' + key + "\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
          var type = "@@redux/PROBE_UNKNOWN_ACTION_" + Math.random().toString(36).substring(7).split("").join(".");
          if ("undefined" === typeof reducer(void 0, {
            type: type
          })) throw new Error('Reducer "' + key + "\" returned undefined when probed with a random type. Don't try to handle " + ActionTypes.INIT + ' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.');
        });
      }
      function combineReducers(reducers) {
        var reducerKeys = Object.keys(reducers);
        var finalReducers = {};
        for (var i = 0; i < reducerKeys.length; i++) {
          var key = reducerKeys[i];
          "production" !== process.env.NODE_ENV && "undefined" === typeof reducers[key] && warning('No reducer provided for key "' + key + '"');
          "function" === typeof reducers[key] && (finalReducers[key] = reducers[key]);
        }
        var finalReducerKeys = Object.keys(finalReducers);
        var unexpectedKeyCache = void 0;
        "production" !== process.env.NODE_ENV && (unexpectedKeyCache = {});
        var shapeAssertionError = void 0;
        try {
          assertReducerShape(finalReducers);
        } catch (e) {
          shapeAssertionError = e;
        }
        return function combination() {
          var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          var action = arguments[1];
          if (shapeAssertionError) throw shapeAssertionError;
          if ("production" !== process.env.NODE_ENV) {
            var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            warningMessage && warning(warningMessage);
          }
          var hasChanged = false;
          var nextState = {};
          for (var _i = 0; _i < finalReducerKeys.length; _i++) {
            var _key = finalReducerKeys[_i];
            var reducer = finalReducers[_key];
            var previousStateForKey = state[_key];
            var nextStateForKey = reducer(previousStateForKey, action);
            if ("undefined" === typeof nextStateForKey) {
              var errorMessage = getUndefinedStateErrorMessage(_key, action);
              throw new Error(errorMessage);
            }
            nextState[_key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
          }
          return hasChanged ? nextState : state;
        };
      }
      function bindActionCreator(actionCreator, dispatch) {
        return function() {
          return dispatch(actionCreator.apply(this, arguments));
        };
      }
      function bindActionCreators(actionCreators, dispatch) {
        if ("function" === typeof actionCreators) return bindActionCreator(actionCreators, dispatch);
        if ("object" !== ("undefined" === typeof actionCreators ? "undefined" : _typeof(actionCreators)) || null === actionCreators) throw new Error("bindActionCreators expected an object or a function, instead received " + (null === actionCreators ? "null" : "undefined" === typeof actionCreators ? "undefined" : _typeof(actionCreators)) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
        var keys = Object.keys(actionCreators);
        var boundActionCreators = {};
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var actionCreator = actionCreators[key];
          "function" === typeof actionCreator && (boundActionCreators[key] = bindActionCreator(actionCreator, dispatch));
        }
        return boundActionCreators;
      }
      function compose() {
        for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) funcs[_key] = arguments[_key];
        if (0 === funcs.length) return function(arg) {
          return arg;
        };
        if (1 === funcs.length) return funcs[0];
        return funcs.reduce(function(a, b) {
          return function() {
            return a(b.apply(void 0, arguments));
          };
        });
      }
      function applyMiddleware() {
        for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) middlewares[_key] = arguments[_key];
        return function(createStore) {
          return function() {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
            var store = createStore.apply(void 0, args);
            var _dispatch = function dispatch() {
              throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            var middlewareAPI = {
              getState: store.getState,
              dispatch: function dispatch() {
                return _dispatch.apply(void 0, arguments);
              }
            };
            var chain = middlewares.map(function(middleware) {
              return middleware(middlewareAPI);
            });
            _dispatch = compose.apply(void 0, chain)(store.dispatch);
            return _extends({}, store, {
              dispatch: _dispatch
            });
          };
        };
      }
      function isCrushed() {}
      "production" !== process.env.NODE_ENV && "string" === typeof isCrushed.name && "isCrushed" !== isCrushed.name && warning("You are currently using minified code outside of NODE_ENV === 'production'. This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) to ensure you have the correct code for your production build.");
      exports.createStore = createStore;
      exports.combineReducers = combineReducers;
      exports.bindActionCreators = bindActionCreators;
      exports.applyMiddleware = applyMiddleware;
      exports.compose = compose;
      exports.__DO_NOT_USE__ActionTypes = ActionTypes;
    }).call(this, require("_process"));
  }, {
    _process: 1,
    "symbol-observable": 134
  } ],
  134: [ function(require, module, exports) {
    (function(global) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _ponyfill = require("./ponyfill.js");
      var _ponyfill2 = _interopRequireDefault(_ponyfill);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var root;
      root = "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof module ? module : Function("return this")();
      var result = (0, _ponyfill2["default"])(root);
      exports["default"] = result;
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "./ponyfill.js": 135
  } ],
  135: [ function(require, module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = symbolObservablePonyfill;
    function symbolObservablePonyfill(root) {
      var result;
      var _Symbol = root.Symbol;
      if ("function" === typeof _Symbol) if (_Symbol.observable) result = _Symbol.observable; else {
        result = _Symbol("observable");
        _Symbol.observable = result;
      } else result = "@@observable";
      return result;
    }
  }, {} ],
  136: [ function(require, module, exports) {
    var v1 = require("./v1");
    var v4 = require("./v4");
    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    module.exports = uuid;
  }, {
    "./v1": 139,
    "./v4": 140
  } ],
  137: [ function(require, module, exports) {
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) byteToHex[i] = (i + 256).toString(16).substr(1);
    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      return [ bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]] ].join("");
    }
    module.exports = bytesToUuid;
  }, {} ],
  138: [ function(require, module, exports) {
    var getRandomValues = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      var rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      var rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          0 === (3 & i) && (r = 4294967296 * Math.random());
          rnds[i] = r >>> ((3 & i) << 3) & 255;
        }
        return rnds;
      };
    }
  }, {} ],
  139: [ function(require, module, exports) {
    var rng = require("./lib/rng");
    var bytesToUuid = require("./lib/bytesToUuid");
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = void 0 !== options.clockseq ? options.clockseq : _clockseq;
      if (null == node || null == clockseq) {
        var seedBytes = rng();
        null == node && (node = _nodeId = [ 1 | seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5] ]);
        null == clockseq && (clockseq = _clockseq = 16383 & (seedBytes[6] << 8 | seedBytes[7]));
      }
      var msecs = void 0 !== options.msecs ? options.msecs : new Date().getTime();
      var nsecs = void 0 !== options.nsecs ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      dt < 0 && void 0 === options.clockseq && (clockseq = clockseq + 1 & 16383);
      (dt < 0 || msecs > _lastMSecs) && void 0 === options.nsecs && (nsecs = 0);
      if (nsecs >= 1e4) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = (1e4 * (268435455 & msecs) + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = 255 & tl;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = 255 & tmh;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = 255 & clockseq;
      for (var n = 0; n < 6; ++n) b[i + n] = node[n];
      return buf || bytesToUuid(b);
    }
    module.exports = v1;
  }, {
    "./lib/bytesToUuid": 137,
    "./lib/rng": 138
  } ],
  140: [ function(require, module, exports) {
    var rng = require("./lib/rng");
    var bytesToUuid = require("./lib/bytesToUuid");
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if ("string" == typeof options) {
        buf = "binary" === options ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = 15 & rnds[6] | 64;
      rnds[8] = 63 & rnds[8] | 128;
      if (buf) for (var ii = 0; ii < 16; ++ii) buf[i + ii] = rnds[ii];
      return buf || bytesToUuid(rnds);
    }
    module.exports = v4;
  }, {
    "./lib/bytesToUuid": 137,
    "./lib/rng": 138
  } ],
  ApplicationScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66bf06bx1JLw6m5br91S4Jg", "ApplicationScene");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameViewComponent_1 = require("../component/GameViewComponent");
    var Logger_1 = require("../../../common/core/Logger");
    var commonTypes_1 = require("../../../common/commonTypes");
    var Rewards_1 = require("../../../common/core/Rewards");
    var Component_1 = require("../../../common/component/Component");
    var connect_1 = require("../../../common/core/redux-connect/connect/connect");
    var sceneActions_1 = require("../../../common/store/sceneActions");
    var LabelHelper = require("../../../common/helpers/LabelHelper");
    var WindowsManager_1 = require("../../../common/core/windows/WindowsManager");
    var WindowsTypes_1 = require("../../../common/core/windows/WindowsTypes");
    var DialogWindow = require("../../../common/core/windows/DialogWindow");
    var PrefabLoader_1 = require("../component/PrefabLoader");
    var BaseAvatarComponent_1 = require("../component/BaseAvatarComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var logger = Logger_1.default.getLogger("Application");
    var mapStateToProps = function(state) {
      return {
        name: "ApplicationScene",
        playerId: state.main.sessionState.serverConnected ? state.main.modelState.playerId : "",
        playerName: state.main.sessionState.serverConnected ? state.main.modelState.playerName : "",
        playerBalance: state.main.sessionState.serverConnected ? Rewards_1.default(state.main.modelState.playerStorage).get(commonTypes_1.Reward.COINS) : 0,
        games: state.main.sessionState.serverConnected && state.main.modelState.games || [],
        playerAvatar: state.main.sessionState.serverConnected ? state.main.modelState.playerAvatarId : "",
        serverConnected: state.main.sessionState.serverConnected
      };
    };
    var mapDispatchToProps = __assign({}, sceneActions_1.SceneActions);
    var ApplicationScene = function(_super) {
      __extends(ApplicationScene, _super);
      function ApplicationScene() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.gameViewPrefab = null;
        _this.gamesContainer = null;
        _this.downPanel = null;
        _this.playerCoins = null;
        _this.playerScore = null;
        _this.vipText = null;
        _this.avatar = null;
        _this._lastParentSize = null;
        _this.gamesOnField = [];
        _this._isFirstConnect = true;
        _this._windowParamsLoading = {
          title: "",
          text: "Loading ...",
          onRight: null,
          onLeft: null,
          closeBy: DialogWindow.LeftRightClose.RIGHT,
          rightTitle: null,
          leftTitle: null
        };
        _this._windowParamsDisconnect = {
          title: "Disconnect",
          text: "Wait for a train ...",
          onRight: null,
          onLeft: null,
          closeBy: DialogWindow.LeftRightClose.RIGHT,
          rightTitle: null,
          leftTitle: null
        };
        _this.updateResize = function() {
          if (null == _this.gamesOnField || null == _this.gamesContainer || null == _this.gamesContainer.parent) return;
          var gameCount = _this.gamesOnField.length;
          if (gameCount > 0) {
            var parent = _this.gamesContainer.parent;
            var gamesContainerWidget = _this.gamesContainer.getComponent(cc.Widget);
            if (parent && gamesContainerWidget) {
              var contentLayout = _this.gamesContainer.getComponent(cc.Layout);
              if (contentLayout) {
                parent.getComponent(cc.Widget).updateAlignment();
                if (null != _this._lastParentSize && _this._lastParentSize.width === parent.width && _this._lastParentSize.height === parent.height) {
                  logger.log("updateResize cached");
                  return;
                }
                logger.log("parent widget -> width: " + parent.width + " height: " + parent.height);
                null == _this._lastParentSize && (_this._lastParentSize = new cc.Size(0, 0));
                _this._lastParentSize.width = parent.width;
                _this._lastParentSize.height = parent.height;
                var width = parent.width;
                var cellWidth = contentLayout.cellSize.width;
                var contentWidth = 2 * cellWidth;
                var border = (width - contentWidth) / 2;
                logger.log("gameCount: " + gameCount + "\nwidth: " + width + " contentWidth: " + contentWidth + "\nborder: " + border);
                gamesContainerWidget.left = border;
                gamesContainerWidget.right = border;
                gamesContainerWidget.updateAlignment();
              }
            }
          }
        };
        _this.lock = false;
        return _this;
      }
      ApplicationScene_1 = ApplicationScene;
      ApplicationScene.prototype.onLoad = function() {
        logger.log("onLoad");
        logger.log("" + window);
        cc.view.setResizeCallback(this.updateResize);
      };
      ApplicationScene.prototype.onDestroy = function() {
        logger.log("onDestroy");
        cc.view.setResizeCallback(null);
        this._lastParentSize = null;
        this.gamesOnField.length = 0;
        this._isFirstConnect = true;
        this._windowsManager && this._windowsManager.dispose();
      };
      ApplicationScene.prototype.start = function() {
        logger.log("Start");
        cc.view.setOrientation(ApplicationScene_1.ORIENTATION);
        var currentSize = cc.view.getFrameSize();
        currentSize.height < currentSize.width && cc.view.setFrameSize(currentSize.height, currentSize.width);
        cc.view.setDesignResolutionSize(ApplicationScene_1.WIDTH, ApplicationScene_1.HEIGHT, cc.ResolutionPolicy.FIXED_HEIGHT);
        var buttons = this.downPanel.getComponentsInChildren(cc.Button);
        buttons.forEach(function(button) {
          button.node.hitRect = new cc.Rect(-90, -25, 185, 60);
        });
        this._windowsManager = new WindowsManager_1.default();
        this._windowsManager.init({
          parent: this.node,
          path_prefix: "main/Prefab/"
        }).initAppearanceConfig(__assign({}, this._windowsManager.fillWindowParams("").appearanceConfig, {
          fade: false,
          directionShow: WindowsTypes_1.WindowShowDirection.NONE,
          directionHide: WindowsTypes_1.WindowShowDirection.NONE,
          scale: false
        }));
        this.updateServerConnectedInfo();
        this.updateResize();
      };
      ApplicationScene.prototype.onGamePlayPressed = function(config) {
        logger.log("onGamePlayPressed");
        var sceneForLoad = config.selectTableScene ? config.selectTableScene : config.scene;
        this.props.scenePush(sceneForLoad, {
          config: config
        });
      };
      ApplicationScene.prototype.componentReceivedProps = function(oldProps) {
        logger.log("componentReceivedProps");
        this.updateServerConnectedInfo();
        this.updatePlayerInfo();
        this.updateGamesPanel();
        this.updateResize();
      };
      ApplicationScene.prototype.updateServerConnectedInfo = function() {
        logger.log("updateServerConnectedInfo serverConnected: " + this.props.serverConnected);
        if (this._windowsManager) if (this.props.serverConnected) this._windowsManager.closeAll(); else if (!this._windowsManager.hasActiveWindow) if (this._isFirstConnect) {
          this._isFirstConnect = false;
          var params = {
            widgetTarget: this.node,
            progerssFunc: this.loadingProgress.bind(this)
          };
          this._windowsManager.show("LoadingWindowPrefab", params);
        } else this._windowsManager.show("DialogWindowPrefab", this._windowParamsDisconnect);
      };
      ApplicationScene.prototype.loadingProgress = function() {
        if (this.props) {
          if (this.props.serverConnected) return 1;
          return .5;
        }
        return .2;
      };
      ApplicationScene.prototype.updatePlayerInfo = function() {
        this.fillPlayer(this.props.playerName);
        this.avatar.getContent(BaseAvatarComponent_1.default).setup({
          size: 100,
          useRect: false,
          avatarId: this.props.playerAvatar,
          useClickOnAvatar: false,
          useRoundCorner: true
        });
        this.playerCoins.string = this.props.playerBalance.toString();
        this.vipText.string = "1";
      };
      ApplicationScene.prototype.fillPlayer = function(text) {
        var width = LabelHelper.fitFontSize(this.playerScore, text, 270);
      };
      ApplicationScene.prototype.updateGamesPanel = function() {
        var _this = this;
        this.props.games.forEach(function(gameState) {
          if (_this.gamesOnField.indexOf(gameState.config.code) < 0) {
            var gameViewNode = cc.instantiate(_this.gameViewPrefab);
            var gameView = gameViewNode.getComponent(GameViewComponent_1.default);
            gameView.setup(gameState.config, _this.onGamePlayPressed.bind(_this));
            gameViewNode.parent = _this.gamesContainer;
            _this.gamesOnField.push(gameState.config.code);
          }
        });
      };
      var ApplicationScene_1;
      ApplicationScene.WIDTH = 720;
      ApplicationScene.HEIGHT = 1280;
      ApplicationScene.ORIENTATION = cc.macro.ORIENTATION_PORTRAIT;
      __decorate([ property(cc.Prefab) ], ApplicationScene.prototype, "gameViewPrefab", void 0);
      __decorate([ property(cc.Node) ], ApplicationScene.prototype, "gamesContainer", void 0);
      __decorate([ property(cc.Node) ], ApplicationScene.prototype, "downPanel", void 0);
      __decorate([ property(cc.Label) ], ApplicationScene.prototype, "playerCoins", void 0);
      __decorate([ property(cc.Label) ], ApplicationScene.prototype, "playerScore", void 0);
      __decorate([ property(cc.Label) ], ApplicationScene.prototype, "vipText", void 0);
      __decorate([ property(PrefabLoader_1.default) ], ApplicationScene.prototype, "avatar", void 0);
      ApplicationScene = ApplicationScene_1 = __decorate([ ccclass, connect_1.connect(mapStateToProps, mapDispatchToProps) ], ApplicationScene);
      return ApplicationScene;
    }(Component_1.default);
    exports.default = ApplicationScene;
    cc._RF.pop();
  }, {
    "../../../common/commonTypes": "commonTypes",
    "../../../common/component/Component": "Component",
    "../../../common/core/Logger": "Logger",
    "../../../common/core/Rewards": "Rewards",
    "../../../common/core/redux-connect/connect/connect": "connect",
    "../../../common/core/windows/DialogWindow": "DialogWindow",
    "../../../common/core/windows/WindowsManager": "WindowsManager",
    "../../../common/core/windows/WindowsTypes": "WindowsTypes",
    "../../../common/helpers/LabelHelper": "LabelHelper",
    "../../../common/store/sceneActions": "sceneActions",
    "../component/BaseAvatarComponent": "BaseAvatarComponent",
    "../component/GameViewComponent": "GameViewComponent",
    "../component/PrefabLoader": "PrefabLoader"
  } ],
  AssetsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34494PaqR5L/J5BuMnUfzdB", "AssetsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var connect_1 = require("./redux-connect/connect/connect");
    var assetsActions_1 = require("../store/assetsActions");
    var ReduxPureTarget_1 = require("./redux-connect/components/ReduxPureTarget");
    var assets_1 = require("../store/reducers/assets");
    var Logger_1 = require("./Logger");
    var mapStateToProps = function(state) {
      return {
        name: "AssetsController",
        assets: state.assets
      };
    };
    var mapDispatchToProps = __assign({}, assetsActions_1.AssetsActions);
    var logger = Logger_1.default.getLogger("AssetsController");
    var AssetsController = function(_super) {
      __extends(AssetsController, _super);
      function AssetsController() {
        var _this = _super.call(this) || this;
        _this.state = {
          assets: {}
        };
        return _this;
      }
      AssetsController.prototype.componentReceivedProps = function(oldProps) {
        this.checkAssets();
      };
      AssetsController.prototype.checkAssets = function() {
        var _this = this;
        Object.values(this.props.assets).forEach(function(asset) {
          !asset.loading || asset.key in _this.state.assets !== false && false !== _this.state.assets[asset.key].loading || _this.startLoadAsset(asset);
        });
      };
      AssetsController.prototype.startLoadAsset = function(_a) {
        var _this = this;
        var key = _a.key, name = _a.name, type = _a.type;
        var _b;
        if (type === assets_1.AssetType.SCENE) {
          this.state.assets = __assign({}, this.state.assets, (_b = {}, _b[key] = {
            loading: true
          }, _b));
          cc.director.preloadScene(name, function(completedCount, totalCount) {
            totalCount > 0 && _this.props.assetLoadingProgress(name, type, completedCount / totalCount);
          }, function(error) {
            var _a;
            _this.state.assets = __assign({}, _this.state.assets, (_a = {}, _a[key] = {
              loading: true
            }, _a));
            if (null != error) {
              console.log(error);
              _this.props.assetLoadingError(name, type);
            } else _this.props.assetLoaded(name, type);
          });
        }
      };
      AssetsController = __decorate([ connect_1.connectToTarget(mapStateToProps, mapDispatchToProps) ], AssetsController);
      return AssetsController;
    }(ReduxPureTarget_1.default);
    exports.default = AssetsController;
    cc._RF.pop();
  }, {
    "../store/assetsActions": "assetsActions",
    "../store/reducers/assets": "assets",
    "./Logger": "Logger",
    "./redux-connect/components/ReduxPureTarget": "ReduxPureTarget",
    "./redux-connect/connect/connect": "connect"
  } ],
  AutofontComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9540/VbA1Acp4BQZ1yFS/O", "AutofontComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AutofontComponent = function(_super) {
      __extends(AutofontComponent, _super);
      function AutofontComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.fontStyle = null;
        return _this;
      }
      AutofontComponent.prototype.onLoad = function() {
        this._searchForLabels(this.node);
      };
      AutofontComponent.prototype.start = function() {};
      AutofontComponent.prototype._searchForLabels = function(node) {
        node.getComponent("cc.Label") && (node.getComponent("cc.Label").fontFamily = this.fontStyle.name);
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].getComponent("cc.Label") && (node.children[i].getComponent("cc.Label").font = this.fontStyle);
          node.children[i].children.length > 0 && this._searchForLabels(node.children[i]);
        }
      };
      __decorate([ property(cc.Font) ], AutofontComponent.prototype, "fontStyle", void 0);
      AutofontComponent = __decorate([ ccclass ], AutofontComponent);
      return AutofontComponent;
    }(cc.Component);
    exports.AutofontComponent = AutofontComponent;
    cc._RF.pop();
  }, {} ],
  AvatarIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbc53cjsD9MmYXDEOqYKzJ8", "AvatarIcon");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var connect_1 = require("../../common/core/redux-connect/connect/connect");
    var Component_1 = require("../../common/component/Component");
    var Logger_1 = require("../../common/core/Logger");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var logger = Logger_1.default.getLogger("AvatarIcon");
    var mapStateToProps = function(state) {
      return {
        playerAvatar: state.main.sessionState.serverConnected ? state.main.modelState.playerAvatarId : ""
      };
    };
    var mapDispatchToProps = {};
    var AvatarIcon = function(_super) {
      __extends(AvatarIcon, _super);
      function AvatarIcon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.width = 100;
        _this._parent = null;
        _this._lastLoaded = null;
        return _this;
      }
      AvatarIcon_1 = AvatarIcon;
      AvatarIcon.randomAvatar = function() {
        var index = Math.floor(1e4 * Math.random()) % AvatarIcon_1.COUNT;
        return index.toString();
      };
      AvatarIcon.prototype.onLoad = function() {
        logger.log("onLoad");
        this._parent = this.node.getComponent(cc.Sprite);
        this.load();
      };
      AvatarIcon.prototype.componentReceivedProps = function(oldProps) {
        logger.log("componentReceivedProps");
        this.load();
      };
      AvatarIcon.prototype.load = function() {
        this._parent && this.props && this._lastLoaded !== this.props.playerAvatar && this.props.playerAvatar.length > 0 && (-1 !== this.props.playerAvatar.search(/^http/) ? this.loadWithUrl() : this.loadFromResource());
      };
      AvatarIcon.prototype.loadFromResource = function() {
        var _this = this;
        logger.log("loadFromResource: " + this.props.playerAvatar.length);
        cc.loader.loadRes(AvatarIcon_1.ATLAS_NAME, cc.SpriteAtlas, function(err, atlas) {
          if (void 0 !== atlas && null != atlas) {
            _this._lastLoaded = _this.props.playerAvatar;
            logger.log("onLoaded");
            _this.props.playerAvatar.length > 0 && atlas.getSpriteFrame(_this.props.playerAvatar) ? _this._parent.spriteFrame = atlas.getSpriteFrame(_this.props.playerAvatar) : _this._parent.spriteFrame = atlas.getSpriteFrame(AvatarIcon_1.DEFAULT);
            _this._parent.node.height = _this.width;
            _this._parent.node.width = _this.width;
          }
        });
      };
      AvatarIcon.prototype.loadWithUrl = function() {
        var _this = this;
        logger.log("loadWithUrl: " + this.props.playerAvatar.length);
        cc.loader.load(this.props.playerAvatar, function(err, texture) {
          _this._lastLoaded = _this.props.playerAvatar;
          logger.log("onLoaded");
          var spriteFrame = new cc.SpriteFrame(texture);
          _this._parent.spriteFrame = spriteFrame;
          _this._parent.node.height = _this.width;
          _this._parent.node.width = _this.width;
        });
      };
      var AvatarIcon_1;
      AvatarIcon.ATLAS_NAME = "main/Atlas/avatar_v1";
      AvatarIcon.DEFAULT = "0";
      AvatarIcon.COUNT = 12;
      __decorate([ property ], AvatarIcon.prototype, "width", void 0);
      AvatarIcon = AvatarIcon_1 = __decorate([ ccclass, connect_1.connect(mapStateToProps, mapDispatchToProps) ], AvatarIcon);
      return AvatarIcon;
    }(Component_1.default);
    exports.default = AvatarIcon;
    cc._RF.pop();
  }, {
    "../../common/component/Component": "Component",
    "../../common/core/Logger": "Logger",
    "../../common/core/redux-connect/connect/connect": "connect"
  } ],
  BGActionTexts: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "666db2NnapNyr0RZauHFQPn", "BGActionTexts");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGActionText = function() {
      function BGActionText() {}
      BGActionText.PLAYER_FOLD = "Fold";
      BGActionText.PLAYER_BET = "Bet";
      BGActionText.PLAYER_BLIND = "Blind";
      BGActionText.PLAYER_SEE = "See";
      BGActionText.PLAYER_OPEN_CARDS = "Open cards";
      BGActionText.PLAYER_MATCH = "Match with";
      BGActionText.PLAYER_MATCH_WIN = "Match win";
      BGActionText.PLAYER_MATCH_LOOSE = "Match loose";
      BGActionText.MIN = "MIN";
      BGActionText.MAX = "MAX";
      BGActionText.wip2CombinationsHeaders = [ "\u8c79\u5b50", "\u540c\u82b1", "\u5bf9\u5b50", "\u540c\u82b1\u987a", "\u987a\u5b50", "\u6563\u724c" ];
      BGActionText.wip2CombinationsTexts = [ "\u4e09\u5f20\u70b9\u6570\u76f8\u540c\u7684\u724c", "\u4e09\u5f20\u82b1\u8272\u76f8\u540c\u7684\u724c", "\u4e24\u5f20\u70b9\u6570\u76f8\u540c\u7684\u724c", "\u4e09\u5f20\u82b1\u8272\u76f8\u540c\u7684\u987a\u5b50", "\u4e09\u5f20\u4e0d\u540c\u82b1\u8272\u7684\u8fde\u724c", "\u4e09\u5f20\u4e0d\u540c\u7684\u724c" ];
      BGActionText.wip2Suits = [ "\u9ed1\u6843", "\u7ea2\u6843", "\u6885\u82b1", "\u65b9\u5757" ];
      BGActionText.wip2SSuitsHeader = "\u82b1\u8272\u5927\u5c0f";
      BGActionText.wip2Tabs = [ "\u6e38\u620f\u7b80\u4ecb", "\u724c\u578b\u8bf4\u660e" ];
      BGActionText.wip2Headers = [ "\u724c\u578b\u5927\u5c0f\uff1a", "\u70b9\u6570\u5927\u5c0f\uff1a" ];
      BGActionText.wip2texts = [ "\u8c79\u5b50>\u540c\u82b1\u987a>\u540c\u82b1>\u987a\u5b50>\u5bf9\u5b50>\u6563\u724c", "A>K>Q>J>10>9>8>7>6" ];
      BGActionText.wip2BlockHeader = "\u6e38\u620f\u7b80\u4ecb";
      BGActionText.wip1Description = "\u201c\u4e09\u5f20\u724c\u201d\u662f\u4e00\u79cd\u523a\u6fc0\u6027\u7ea7\u5f3a\u7684\u5fc3\u7406\u68cb\u724c\u6e38\u620f\u3002\u6e38\u620f\u53ea\u91c7\u7528\u4e00\u526f\u6807\u51c6\u7684\u6251\u514b\u724c\u4e2d6~A\uff0c\u5171\u8ba136\u5f20\u6251\u514b\u724c\uff0c\u6e38\u620f\u53ef\u4ee5\u75312~5\u4eba\u540c\u65f6\u8fdb\u884c\uff0c\u6e38\u620f\u5f00\u59cb\u540e\uff0c\u4e2a\u73a9\u5bb6\u4ee5\u6b21\u8fdb\u884c\u64cd\u4f5c\uff0c\u575a\u6301\u5230\u6700\u540e\u7684\u73a9\u5bb6\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u6536\u76ca\u3002\u5bf9\u6218\u65f6\uff0c\u4ece\u7b2c\u4e00\u5bb6\u73a9\u5bb6\u5f00\u59cb\u81f3\u6700\u540e\u4e00\u5bb6\u64cd\u4f5c\u5b8c\u6bd5\u4e3a\u4e00\u8f6e\uff0c\u4e00\u5c40\u6e38\u620f\u6700\u5927\u5927\u8f6e\u6570\u4e3a20.";
      BGActionText.wip1BlockHeaders = [ "\u6e38\u620f\u7b80\u4ecb", "\u724c\u5c40\u8bf4\u660e" ];
      BGActionText.wip1Headers = [ "\u8ddf\u6ce8", "\u8ddf\u5230\u5e95\uff1a", "\u52a0\u6ce8\uff1a", "\u770b\u724c\uff1a", "\u5f03\u724c\uff1a", "\u5168\u4e0b\uff1a", "\u6bd4\u724c\uff1a", "\u4eae\u724c\uff1a" ];
      BGActionText.wip1Texts = [ "\u4fdd\u6301\u5f53\u524d\u5f53\u6b21\u62bc\u6ce8\u989d\u5ea6\uff0c\u7ee7\u7eed\u6e38\u620f", "\u81ea\u52a8\u4fdd\u6301\u5f53\u524d\u5f53\u5355\u6b21\u62bc\u6ce8\u989d\u5ea6\uff0c\u9700\u8981\u624b\u52a8\u70b9\u51fb,\u70b9\u51fb\u540e\u5904\u4e8e\u957f\u4eae\u72b6\u6001\u3002", "\u63d0\u9ad8\u5355\u6b21\u62bc\u6ce8\u7684\u7b79\u7801\u989d\u5ea6\uff0c\u4e0d\u53ef\u9ad8\u4e8e\u573a\u6b21\u968f\u5b9a\u7684\u6700\u9ad8\u989d\u5ea6", "\u7ffb\u770b\u81ea\u5df1\u7684\u724c\u578b\uff0c\u770b\u724c\u540e\u8ddf\u6ce8\u4f1a\u53d8\u4e3a\u6697\u724c\u76842\u500d", "\u653e\u5f03\u5f53\u524d\u724c\u578b\uff0c\u7b49\u5f85\u4e0b\u4e00\u5c40", "\u5269\u4f59\u4e24\u4eba\u65f6\uff0c\u6295\u5165\u6d88\u8017\u81ea\u8eab\u6240\u6709\u7b79\u7801\u8fdb\u884c\u6bd4\u724c\uff0c\u4e0d\u53ef\u8d85\u8fc7\u4e24\u540d\u73a9\u5bb6\u4e2d\u4efb\u4e00\u73a9\u5bb6\u81ea\u8eab\u643a\u5e26\u7b79\u7801\uff08\u660e\u724c\u5168\u4e0b\u4e3a\u6697\u724c\u76842\u500d\uff09", "\u7b2c\u4e8c\u8f6e\u5373\u53ef\u9009\u62e9\u4e0e\u4efb\u4e00\u73a9\u5bb6\u8fdb\u884c\u724c\u578b\u5927\u5c0f\u6bd4\u8f83", "\u5728\u6e38\u620f\u7ed3\u7b97\u5c55\u793a\u9636\u6bb5\u5c55\u793a\u81ea\u5df1\u7684\u724c\u578b\uff0c\u5176\u4f59\u6240\u6709\u73a9\u5bb6\u53ef\u89c1\u3002" ];
      return BGActionText;
    }();
    exports.BGActionText = BGActionText;
    cc._RF.pop();
  }, {} ],
  BGAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d42128TutdNhK0BGBvUMh9m", "BGAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGActionType;
    (function(BGActionType) {
      BGActionType[BGActionType["PREPARE_FOR_ROUND"] = 0] = "PREPARE_FOR_ROUND";
      BGActionType[BGActionType["REGISTER_PLACE"] = 1] = "REGISTER_PLACE";
      BGActionType[BGActionType["WAITING_BET"] = 2] = "WAITING_BET";
      BGActionType[BGActionType["MAKE_BET"] = 3] = "MAKE_BET";
      BGActionType[BGActionType["FOLD"] = 4] = "FOLD";
      BGActionType[BGActionType["BLIND"] = 5] = "BLIND";
      BGActionType[BGActionType["SEE"] = 6] = "SEE";
      BGActionType[BGActionType["COLLECT_BETS"] = 7] = "COLLECT_BETS";
      BGActionType[BGActionType["REWARD_WINNER"] = 8] = "REWARD_WINNER";
      BGActionType[BGActionType["DEAL_CARDS"] = 9] = "DEAL_CARDS";
      BGActionType[BGActionType["DROP_PLAYER"] = 10] = "DROP_PLAYER";
      BGActionType[BGActionType["UPDATE_PLAYER_DATA"] = 11] = "UPDATE_PLAYER_DATA";
      BGActionType[BGActionType["OPEN_CARDS"] = 12] = "OPEN_CARDS";
      BGActionType[BGActionType["UPDATE_TABLE_DATA"] = 13] = "UPDATE_TABLE_DATA";
      BGActionType[BGActionType["SHOW_CARDS"] = 14] = "SHOW_CARDS";
      BGActionType[BGActionType["TABLE_CONFIG_UPDATE"] = 15] = "TABLE_CONFIG_UPDATE";
      BGActionType[BGActionType["GAME_OVER"] = 16] = "GAME_OVER";
      BGActionType[BGActionType["MATCH"] = 17] = "MATCH";
    })(BGActionType = exports.BGActionType || (exports.BGActionType = {}));
    cc._RF.pop();
  }, {} ],
  BGBankView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "161b12oHfFFLbt5LuDRRutC", "BGBankView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TableGameChipHolder_1 = require("../../../../main/Script/component/TableGameChipHolder");
    var BGConfig_1 = require("../BGConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGBankView = function(_super) {
      __extends(BGBankView, _super);
      function BGBankView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.OFFSET = 10;
        _this.labelBank = [];
        _this.lineBank = [];
        _this.iconBank = [];
        _this.backBank = null;
        _this.bankChipsView = null;
        _this.chipPrefab = null;
        return _this;
      }
      BGBankView.prototype.setupBankView = function() {
        this.bankChipsView.init({
          prefab: this.chipPrefab,
          maxChipsCount: 40,
          chipValues: BGConfig_1.BGConfig.tableConfig.bets,
          sizeValue: 35,
          viewType: TableGameChipHolder_1.ChipHolderViewType.RANDOM
        });
      };
      BGBankView.prototype.setBankValue = function(value) {
        var total = 0;
        var bankLastIndex = -1;
        for (var i = 0; i < value.length; i++) if (value[i] > 0) {
          this.backBank.node.active = true;
          this.labelBank[i].node.active = true;
          this.labelBank[i].string = value[i].toString();
          this.lineBank[i].node.active = true;
          this.iconBank[i].node.active = true;
          total += value[i];
          bankLastIndex = i;
        }
        total > 0 && this.bankChipsView.check(total);
        if (bankLastIndex > -1) {
          this.backBank.node.active = true;
          var highPoint = this.iconBank[bankLastIndex].node.y + .5 * this.iconBank[bankLastIndex].node.height;
          this.backBank.node.height = highPoint - this.lineBank[bankLastIndex].node.y + this.OFFSET;
          this.backBank.node.y = highPoint - .5 * this.backBank.node.height;
        } else this.hideBank();
      };
      BGBankView.prototype.hideBank = function() {
        this.backBank.node.active = false;
        for (var i = 0; i < this.labelBank.length; i++) {
          this.labelBank[i].node.active = false;
          this.lineBank[i].node.active = false;
          this.iconBank[i].node.active = false;
        }
        this.bankChipsView.reset();
      };
      BGBankView.prototype.reward = function(place, value) {
        this.bankChipsView.moveToPoint(value, place.node.parent.convertToWorldSpace(place.node.position), TableGameChipHolder_1.ChipFadeType.OUT);
      };
      __decorate([ property([ cc.Label ]) ], BGBankView.prototype, "labelBank", void 0);
      __decorate([ property([ cc.Sprite ]) ], BGBankView.prototype, "lineBank", void 0);
      __decorate([ property([ cc.Sprite ]) ], BGBankView.prototype, "iconBank", void 0);
      __decorate([ property(cc.Sprite) ], BGBankView.prototype, "backBank", void 0);
      __decorate([ property(TableGameChipHolder_1.TableGameChipHolder) ], BGBankView.prototype, "bankChipsView", void 0);
      __decorate([ property(cc.Prefab) ], BGBankView.prototype, "chipPrefab", void 0);
      BGBankView = __decorate([ ccclass ], BGBankView);
      return BGBankView;
    }(cc.Component);
    exports.BGBankView = BGBankView;
    cc._RF.pop();
  }, {
    "../../../../main/Script/component/TableGameChipHolder": "TableGameChipHolder",
    "../BGConfig": "BGConfig"
  } ],
  BGBetItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20a55/5FgJLZaSC2VmCmCsp", "BGBetItem");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SelectTableSceneBase_1 = require("../../../../../main/Script/scene/base/SelectTableSceneBase");
    var LabelHelper_1 = require("../../../../../common/helpers/LabelHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGBetItem = function(_super) {
      __extends(BGBetItem, _super);
      function BGBetItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.textPrefab = null;
        _this.text = null;
        _this.button = null;
        _this.buttonFrame = [];
        _this.buttonPressFrame = [];
        return _this;
      }
      BGBetItem.prototype.setup = function(config) {
        _super.prototype.setup.call(this, config);
        this.setupText(config.ante + "/" + config.ballance.limits.minToJoin);
      };
      BGBetItem.prototype.setupIcon = function(index) {
        index = Math.max(index, 0);
        var select = index % this.buttonFrame.length;
        this.button.normalSprite = this.buttonFrame[select];
        this.button.hoverSprite = this.buttonFrame[select];
        select = index % this.buttonPressFrame.length;
        this.button.pressedSprite = this.buttonPressFrame[select];
        this.button.node.getComponent(cc.Sprite).spriteFrame = this.button.normalSprite;
      };
      BGBetItem.prototype.setupText = function(value) {
        this.text.string = "";
        LabelHelper_1.bendLabel(value, {
          parent: this.node.getChildByName("text"),
          label_prefab: this.textPrefab,
          radius: 300,
          offset_y: 10,
          offset_x: 5,
          not_native: {
            with_coefficient: 1.3,
            offset_y: 7,
            radius_with_height: true,
            offset_y_with_height: true
          }
        });
      };
      BGBetItem.prototype.updateItem = function() {
        this.node.getComponent(cc.Button).enabled = !this.selected;
      };
      BGBetItem.prototype.onButtonClick = function() {
        this._callBack && this._callBack.call(this._target, this.index);
      };
      BGBetItem.prototype.onSelected = function(value, target) {
        this._callBack = value;
        this._target = target;
      };
      __decorate([ property(cc.Prefab) ], BGBetItem.prototype, "textPrefab", void 0);
      __decorate([ property(cc.Label) ], BGBetItem.prototype, "text", void 0);
      __decorate([ property(cc.Button) ], BGBetItem.prototype, "button", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], BGBetItem.prototype, "buttonFrame", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], BGBetItem.prototype, "buttonPressFrame", void 0);
      BGBetItem = __decorate([ ccclass ], BGBetItem);
      return BGBetItem;
    }(SelectTableSceneBase_1.BetItem);
    exports.BGBetItem = BGBetItem;
    cc._RF.pop();
  }, {
    "../../../../../common/helpers/LabelHelper": "LabelHelper",
    "../../../../../main/Script/scene/base/SelectTableSceneBase": "SelectTableSceneBase"
  } ],
  BGCardView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b8fe4+X4hBBprrk2yDHlU7k", "BGCardView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGConfig_1 = require("../BGConfig");
    var Logger_1 = require("../../../../common/core/Logger");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGCardView = function(_super) {
      __extends(BGCardView, _super);
      function BGCardView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cardVisualSprite = null;
        _this._isFaseUp = false;
        _this._card = -1;
        return _this;
      }
      BGCardView.prototype.start = function() {};
      BGCardView.prototype.textureCallBack = function(loadedTexture) {
        this.drawCard();
      };
      Object.defineProperty(BGCardView.prototype, "cardIsOpen", {
        get: function() {
          return this._isFaseUp;
        },
        enumerable: true,
        configurable: true
      });
      BGCardView.prototype.deal = function(card) {
        this._card = card;
        this._isFaseUp = false;
        this.drawCard();
      };
      BGCardView.prototype.fastDraw = function(card) {
        this._isFaseUp = card > -1;
        this._card = card;
        this.drawCard();
      };
      BGCardView.prototype.updateCardIndex = function(cardIndex) {
        this._card = cardIndex;
      };
      BGCardView.prototype.drawCard = function() {
        this.cardVisualSprite.spriteFrame = BGConfig_1.BGConfig.spriteFactory.getCard(this._card);
      };
      BGCardView.prototype.flipCard = function(target, callBack) {
        if (this._isFaseUp) {
          callBack.call(target);
          return;
        }
        this.checkCurrentAnimation();
        this._isFaseUp = true;
        this._currentAnim = this.node.getComponent(cc.Animation);
        this._targetForCallBack = target;
        this._callBack = callBack;
        this._currentAnim ? this._currentAnimationState = this._currentAnim.play("cardFlipAnimation") : logger.info("there is no anim cardFlipAnimation");
      };
      BGCardView.prototype.flipCardsWithoutAnimaton = function() {
        this._isFaseUp = true;
        this.drawCard();
      };
      BGCardView.prototype.setHighLite = function(target, callBack) {
        this.checkCurrentAnimation();
        this._currentAnim = this.node.getComponent(cc.Animation);
        this._targetForCallBack = target;
        this._callBack = callBack;
        this._currentAnim && (this._currentAnimationState = this._currentAnim.play("cardHighlite"));
      };
      BGCardView.prototype.setDarkness = function() {
        this.checkCurrentAnimation();
        this._currentAnim = this.node.getComponent(cc.Animation);
        this._targetForCallBack = null;
        this._callBack = null;
        this._currentAnim && (this._currentAnimationState = this._currentAnim.play("cardShadow"));
      };
      BGCardView.prototype.onCardAnimationCompleted = function() {
        this._callBack && this._callBack.call(this._targetForCallBack);
      };
      BGCardView.prototype.deactive = function() {
        this.node.active = false;
        this._isFaseUp = false;
      };
      BGCardView.prototype.showCard = function() {
        this.drawCard();
      };
      BGCardView.prototype.stopAnimations = function() {
        if (this._currentAnim) {
          this._currentAnim.stop();
          this._currentAnim.setCurrentTime(0);
          this._currentAnim = null;
        }
      };
      BGCardView.prototype.finishAnimations = function() {
        this.stopAnimations();
        this.onCardAnimationCompleted();
      };
      BGCardView.prototype.checkCurrentAnimation = function() {
        if (this._currentAnim) {
          this._currentAnim.stop();
          this._currentAnim.setCurrentTime(this._currentAnimationState.duration);
        }
      };
      __decorate([ property(cc.Sprite) ], BGCardView.prototype, "cardVisualSprite", void 0);
      BGCardView = __decorate([ ccclass ], BGCardView);
      return BGCardView;
    }(cc.Component);
    exports.BGCardView = BGCardView;
    var logger = Logger_1.default.getLogger(BGCardView);
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "../BGConfig": "BGConfig"
  } ],
  BGCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1a0e41XFRF2KO3/KZdRbD3", "BGCard");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card = function() {
      function Card() {
        this._value = 0;
        this._suit = Suit.hearts;
        this._cardIndex = -1;
      }
      Object.defineProperty(Card.prototype, "value", {
        get: function() {
          return this._value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Card.prototype, "suit", {
        get: function() {
          return this._suit;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Card.prototype, "cardIndex", {
        get: function() {
          return this._cardIndex;
        },
        enumerable: true,
        configurable: true
      });
      Card.prototype.setupByIndex = function(index) {
        this._cardIndex = index;
        index < 14 ? this.setupByValueAndSuit(index, Suit.hearts) : index < 27 ? this.setupByValueAndSuit(index - 13, Suit.diamonds) : index < 40 ? this.setupByValueAndSuit(index - 26, Suit.clubs) : this.setupByValueAndSuit(index - 39, Suit.spades);
      };
      Card.prototype.setupByValueAndSuit = function(index, suit) {
        this._value = index == Card.ACE ? Card.KING + 1 : index;
        this._suit = suit;
      };
      Card.prototype.toString = function() {
        return this._value + "-" + this.suit;
      };
      Card.ACE = 1;
      Card.JACK = 11;
      Card.QUEEN = 12;
      Card.KING = 13;
      return Card;
    }();
    exports.Card = Card;
    var Suit;
    (function(Suit) {
      Suit[Suit["clubs"] = 0] = "clubs";
      Suit[Suit["hearts"] = 1] = "hearts";
      Suit[Suit["spades"] = 2] = "spades";
      Suit[Suit["diamonds"] = 3] = "diamonds";
    })(Suit = exports.Suit || (exports.Suit = {}));
    cc._RF.pop();
  }, {} ],
  BGChipDrawer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ebf3dzvVBOQZUQ+kCjptl6", "BGChipDrawer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGConfig_1 = require("../BGConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGChipDrawer = function(_super) {
      __extends(BGChipDrawer, _super);
      function BGChipDrawer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.apearAnimationName = "";
        _this.moveOutAnimations = [];
        _this._currentValue = 0;
        _this._target = null;
        _this._callBack = null;
        _this._valuesForDraw = [];
        return _this;
      }
      BGChipDrawer_1 = BGChipDrawer;
      BGChipDrawer.prototype.start = function() {};
      BGChipDrawer.prototype.drawValue = function(value, animate) {
        void 0 === animate && (animate = true);
        this._currentValue = value;
        if (0 === Number(this._currentValue)) {
          this.clearContainer();
          this._valuesForDraw = [];
          return;
        }
        if (animate) {
          this.checkCurrentAnimation();
          this._currentAnim = this.node.getComponent(cc.Animation);
          this._currentAnim && (this._currentAnimationState = this._currentAnim.play(this.apearAnimationName.toString()));
        } else this.draw();
      };
      BGChipDrawer.prototype.addDrawValue = function(value) {
        this._valuesForDraw.push(value);
      };
      BGChipDrawer.prototype.draw = function() {
        this.clearContainer();
        var items = [];
        if (0 === this._valuesForDraw.length) {
          var bets = BGConfig_1.BGConfig.tableConfig.bets;
          var maxCount = Math.floor(this._currentValue / bets[0]);
          var third = Math.floor(maxCount / 3);
          third > 0 && (items = items.concat(this.getItemsForDraw(third * bets[0])));
          maxCount -= third;
          items = items.concat(this.getItemsForDraw(maxCount * bets[0]));
        } else {
          var currentDrewValue = 0;
          var i = 0;
          while (i < this._valuesForDraw.length && currentDrewValue + this._valuesForDraw[i] <= this._currentValue) {
            currentDrewValue += this._valuesForDraw[i];
            items = items.concat(this.getItemsForDraw(this._valuesForDraw[i]));
            i++;
          }
        }
        if (items.length > 0) for (var i = 0; i < items.length; i++) {
          var x = 2 * Math.random() * BGChipDrawer_1.CHIP_DISTANCE - BGChipDrawer_1.CHIP_DISTANCE;
          var y = 2 * Math.random() * BGChipDrawer_1.CHIP_DISTANCE - BGChipDrawer_1.CHIP_DISTANCE;
          items[i].setPosition(x, y);
          this.node.addChild(items[i]);
        }
      };
      BGChipDrawer.prototype.getItemsForDraw = function(value) {
        var currentValueForDraw = value;
        var items = [];
        var startIndex = 0;
        var endIndex = startIndex + BGConfig_1.BGConfig.spriteFactory.chipFrames.length - 1;
        var currentCount;
        var bets = BGConfig_1.BGConfig.tableConfig.bets;
        var factory = BGConfig_1.BGConfig.spriteFactory;
        for (var i = endIndex; i >= startIndex; i--) {
          currentCount = Math.floor(currentValueForDraw / bets[i]);
          currentValueForDraw -= currentCount * bets[i];
          for (var j = 0; j < currentCount; j++) {
            var node = factory.getChipByValue(bets[i]);
            node.isValid && items.push(node);
          }
        }
        return items;
      };
      BGChipDrawer.prototype.clearContainer = function() {
        this.node.removeAllChildren();
      };
      BGChipDrawer.prototype.moveTo = function(index, target, callBack) {
        void 0 === target && (target = null);
        void 0 === callBack && (callBack = null);
        if (index >= this.moveOutAnimations.length) {
          this._callBack.call(this._target);
          return;
        }
        this.checkCurrentAnimation();
        this._currentAnim = this.node.getComponent(cc.Animation);
        this._target = target;
        this._callBack = callBack;
        this._currentAnim && (this._currentAnimationState = this._currentAnim.play(this.moveOutAnimations[index].name));
      };
      BGChipDrawer.prototype.onAnimationEnd = function() {
        this._currentAnim.setCurrentTime(0);
        this.clearContainer();
        null != this._target && null != this._callBack && this._callBack.call(this._target);
      };
      BGChipDrawer.prototype.stopAnimations = function() {
        if (this._currentAnim) {
          this._currentAnim.stop();
          this._currentAnim.setCurrentTime(0);
          this._currentAnim = null;
        }
      };
      BGChipDrawer.prototype.checkCurrentAnimation = function() {
        if (this._currentAnim) {
          this._currentAnim.stop();
          this._currentAnim.setCurrentTime(this._currentAnimationState.duration);
        }
      };
      var BGChipDrawer_1;
      BGChipDrawer.CHIP_DISTANCE = 25;
      __decorate([ property(String) ], BGChipDrawer.prototype, "apearAnimationName", void 0);
      __decorate([ property([ cc.AnimationClip ]) ], BGChipDrawer.prototype, "moveOutAnimations", void 0);
      BGChipDrawer = BGChipDrawer_1 = __decorate([ ccclass ], BGChipDrawer);
      return BGChipDrawer;
    }(cc.Component);
    exports.BGChipDrawer = BGChipDrawer;
    cc._RF.pop();
  }, {
    "../BGConfig": "BGConfig"
  } ],
  BGConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c7c7MDH0xPzKbzGPr52eSv", "BGConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGGameCore_1 = require("./core/BGGameCore");
    var BGTableConfig_1 = require("./data/BGTableConfig");
    var BGServerLogicAdapter_1 = require("./core/BGServerLogicAdapter");
    var ServerController_1 = require("../../../common/server/ServerController");
    var BGConfig = function() {
      function BGConfig() {}
      BGConfig.initControllers = function(viewAdapter) {
        BGConfig.bgGameCore.init(BGConfig.gameAdapter, viewAdapter);
      };
      BGConfig.initRemoteGame = function(tableId) {
        BGConfig.gameAdapter = new BGServerLogicAdapter_1.BGServerLogicAdapter(ServerController_1.default.instance.connector, tableId);
      };
      BGConfig.tableConfig = new BGTableConfig_1.BGTableConfig();
      BGConfig.bgGameCore = new BGGameCore_1.BGCore();
      return BGConfig;
    }();
    exports.BGConfig = BGConfig;
    cc._RF.pop();
  }, {
    "../../../common/server/ServerController": "ServerController",
    "./core/BGGameCore": "BGGameCore",
    "./core/BGServerLogicAdapter": "BGServerLogicAdapter",
    "./data/BGTableConfig": "BGTableConfig"
  } ],
  BGGameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d89dvMINhK5YJlVrEqeot+", "BGGameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCore_1 = require("../../../../common/core/GameCore");
    var BGCore = function(_super) {
      __extends(BGCore, _super);
      function BGCore() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BGCore.prototype.init = function(logicAdapter, viewAdapter) {
        _super.prototype.init.call(this, logicAdapter, viewAdapter);
      };
      return BGCore;
    }(GameCore_1.GameCoreBase);
    exports.BGCore = BGCore;
    cc._RF.pop();
  }, {
    "../../../../common/core/GameCore": "GameCore"
  } ],
  BGGameMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00c32CAEBZLmZsMIBQJaHYq", "BGGameMenu");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGPlayerView_1 = require("../BGPlayerView");
    var BGActionTexts_1 = require("../../data/BGActionTexts");
    var BGBankView_1 = require("../BGBankView");
    var Logger_1 = require("../../../../../common/core/Logger");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGGameMenu = function(_super) {
      __extends(BGGameMenu, _super);
      function BGGameMenu() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerView = null;
        _this.btnFold = null;
        _this.btnBet = null;
        _this.btnSee = null;
        _this.btnMatch = null;
        _this.btnBlind = null;
        _this.btnOpen = null;
        _this.bankView = null;
        _this.betBack = null;
        _this.slider = null;
        _this.sizeBetLabeles = [];
        _this.betSides = [];
        _this.oddSizeBetLabeles = [];
        _this.evenSizeBetLabeles = [];
        _this._slideConfig = {
          minPercent: 0,
          maxPercent: 0,
          isEven: false,
          allSteps: [],
          stepOnCount: []
        };
        _this.SHOW_ANIMATION = "showBetMenu";
        _this.STEP_ON_ODD = .25;
        _this.STEP_ON_EVEN = .2;
        return _this;
      }
      BGGameMenu.prototype.start = function() {
        this.btnFold.node.getChildByName("Label").getComponent(cc.Label).string = BGActionTexts_1.BGActionText.PLAYER_FOLD;
        this.btnBet.node.getChildByName("Label").getComponent(cc.Label).string = BGActionTexts_1.BGActionText.PLAYER_BET;
        this.btnBlind.node.getChildByName("Label").getComponent(cc.Label).string = BGActionTexts_1.BGActionText.PLAYER_BLIND;
        this.btnSee.node.getChildByName("Label").getComponent(cc.Label).string = BGActionTexts_1.BGActionText.PLAYER_SEE;
        this.btnOpen.node.getChildByName("Label").getComponent(cc.Label).string = BGActionTexts_1.BGActionText.PLAYER_OPEN_CARDS;
        this.btnMatch.node.getChildByName("Label").getComponent(cc.Label).string = BGActionTexts_1.BGActionText.PLAYER_MATCH;
        this.bankView.setBankValue([ 0 ]);
      };
      BGGameMenu.prototype.betRound = function(betConfig, actionsConfig) {
        this._betConfig = betConfig;
        this._betConfig["min"] > this._betConfig["max"] && (this._betConfig["max"] = this._betConfig["min"]);
        this._actionsConfig = actionsConfig;
        this.showButtons();
        this._additionalBet = 0;
        var amnim = this.node.getComponent(cc.Animation);
        amnim && amnim.play(this.SHOW_ANIMATION);
        this.activeChips(true);
        this.updateBet();
      };
      BGGameMenu.prototype.selectStep = function(event, index) {
        this.slider.progress = Number(index) * (this._slideConfig.isEven ? this.STEP_ON_EVEN : this.STEP_ON_ODD);
        this.updateBet();
      };
      BGGameMenu.prototype.showButtons = function() {
        this.btnFold.node.active = this._actionsConfig["fold"];
        this.btnBet.node.active = this._actionsConfig["bet"];
        this.btnBlind.node.active = this._actionsConfig["blind"];
        this.btnSee.node.active = this._actionsConfig["see"];
        this.btnOpen.node.active = this._actionsConfig["show"];
        this.btnMatch.node.active = this._actionsConfig["match"];
      };
      BGGameMenu.prototype.activeChips = function(value) {
        this.betBack.node.active = value;
        this.slider.node.active = value;
        var amnim = this.node.getComponent(cc.Animation);
        amnim && amnim.setCurrentTime(0);
        if (value) {
          this.slider.progress = 0;
          this.betSides[0].active = false;
          this.betSides[1].active = true;
          this.setupSlider();
          this.updateBet();
        }
      };
      BGGameMenu.prototype.updateBet = function() {
        this.slider.progress < this._slideConfig.minPercent && (this.slider.progress = this._slideConfig.minPercent);
        this.slider.progress > this._slideConfig.maxPercent && (this.slider.progress = this._slideConfig.maxPercent);
        var i = 0;
        while (this._slideConfig.allSteps[i] <= this.slider.progress) i++;
        0 != i && this._slideConfig.allSteps[i] - this.slider.progress > this.slider.progress - this._slideConfig.allSteps[i - 1] && i--;
        i < 0 && (i = 0);
        i > this._slideConfig.allSteps.length - 1 && (i = this._slideConfig.allSteps.length - 1);
        this.slider.progress = this._slideConfig.allSteps[i];
        this.betSides[0].active = this.slider.progress < .85;
        this.betSides[1].active = this.slider.progress >= .85;
        this._additionalBet = i * this._betConfig["step"];
        i === this._slideConfig.allSteps.length - 1 && (this._additionalBet = this._betConfig["max"] - this._betConfig["min"]);
        this.sizeBetLabeles[0].string = this.sizeBetLabeles[1].string = this.currentBet.toString();
      };
      BGGameMenu.prototype.onBankUpdate = function(value) {
        this.bankView.setBankValue(value);
      };
      Object.defineProperty(BGGameMenu.prototype, "currentBet", {
        get: function() {
          return this._betConfig["min"] + this._additionalBet;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BGGameMenu.prototype, "placeToMatch", {
        get: function() {
          return this._placeToMatch;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BGGameMenu.prototype, "seeBet", {
        get: function() {
          return this._betConfig["see"];
        },
        enumerable: true,
        configurable: true
      });
      BGGameMenu.prototype.diactivateBtns = function() {
        this.btnFold.node.active = false;
        this.btnBet.node.active = false;
        this.btnBlind.node.active = false;
        this.btnSee.node.active = false;
        this.btnOpen.node.active = false;
        this.btnMatch.node.active = false;
        this.activeChips(false);
      };
      BGGameMenu.prototype.openCards = function() {
        this.btnOpen.node.active = false;
        this.btnBet.node.active = true;
        this.btnBlind.node.active = false;
      };
      BGGameMenu.prototype.setupSlider = function() {
        this.hideAllSlideLabels();
        var labels = [];
        this._slideConfig.stepOnCount = [];
        this._slideConfig.allSteps = [];
        var startLabel;
        var stepCount = Math.round((this._betConfig["max"] - this._betConfig["min"]) / this._betConfig["step"]) + 1;
        logger.info(this._betConfig["max"] + " " + this._betConfig["min"] + " " + stepCount);
        if (stepCount % 2 === 0) if (stepCount <= this.evenSizeBetLabeles.length) {
          startLabel = Math.round((this.evenSizeBetLabeles.length - stepCount) / 2);
          for (var i = startLabel; i < startLabel + stepCount; i++) {
            labels.push(this.evenSizeBetLabeles[i]);
            this._slideConfig.allSteps.push(i * this.STEP_ON_EVEN);
            this._slideConfig.stepOnCount.push(1);
          }
          this._slideConfig.stepOnCount[0] = 0;
          this._slideConfig.isEven = true;
          this._slideConfig.minPercent = this._slideConfig.allSteps[0];
          this._slideConfig.maxPercent = this._slideConfig.allSteps[this._slideConfig.allSteps.length - 1];
          this.setLinear(labels);
        } else this.setupExpo(stepCount); else if (stepCount <= this.oddSizeBetLabeles.length) {
          if (stepCount <= this.oddSizeBetLabeles.length) {
            startLabel = Math.round((this.oddSizeBetLabeles.length - stepCount) / 2);
            for (var i = startLabel; i < startLabel + stepCount; i++) {
              labels.push(this.oddSizeBetLabeles[i]);
              this._slideConfig.allSteps.push(i * this.STEP_ON_ODD);
              this._slideConfig.stepOnCount.push(1);
            }
            this._slideConfig.stepOnCount[0] = 0;
            this._slideConfig.isEven = false;
            this._slideConfig.minPercent = this._slideConfig.allSteps[0];
            this._slideConfig.maxPercent = this._slideConfig.allSteps[this._slideConfig.allSteps.length - 1];
            this.setLinear(labels);
          }
        } else this.setupExpo(stepCount);
      };
      BGGameMenu.prototype.setupExpo = function(stepCount) {
        this._slideConfig.minPercent = 0;
        this._slideConfig.maxPercent = 1;
        this._slideConfig.isEven = true;
        this._slideConfig.stepOnCount = this.getCountOnStep(stepCount);
        var currentPercent = 0;
        this._slideConfig.allSteps.push(0);
        for (var i = 0; i < this._slideConfig.stepOnCount.length; i++) {
          var stepForRangePercent = this.STEP_ON_EVEN / this._slideConfig.stepOnCount[i];
          for (var j = 0; j < this._slideConfig.stepOnCount[i]; j++) {
            currentPercent += stepForRangePercent;
            this._slideConfig.allSteps.push(currentPercent);
          }
        }
        this.setLinear(this.evenSizeBetLabeles);
      };
      BGGameMenu.prototype.getCountOnStep = function(stepCount) {
        var countOnStep = [ 0, 0, 0, 0, 0, 0 ];
        var maxStepValue = [ 0, 1, 2, 4, -1, -2 ];
        var currentMaxValuePosition = 1;
        var currentPutPosition = countOnStep.length - 1;
        var lastCounter = 2;
        for (var i = 0; i < stepCount; i++) if (maxStepValue[currentMaxValuePosition] > 0) if (maxStepValue[currentPutPosition] >= 0 && countOnStep[currentPutPosition] + 1 > maxStepValue[currentPutPosition]) {
          maxStepValue[currentMaxValuePosition] < countOnStep[currentMaxValuePosition] + 1 && currentMaxValuePosition++;
          currentPutPosition = countOnStep.length - 1;
          if (maxStepValue[currentMaxValuePosition] > 0) {
            countOnStep[currentPutPosition]++;
            currentPutPosition--;
          } else if (lastCounter > 0) {
            lastCounter--;
            countOnStep[countOnStep.length - 1]++;
          } else {
            lastCounter = 2;
            countOnStep[countOnStep.length - 2]++;
          }
        } else {
          countOnStep[currentPutPosition]++;
          currentPutPosition--;
        } else if (lastCounter > 0) {
          lastCounter--;
          countOnStep[countOnStep.length - 1]++;
        } else {
          lastCounter = 2;
          countOnStep[countOnStep.length - 2]++;
        }
        return countOnStep;
      };
      BGGameMenu.prototype.setLinear = function(labels) {
        var currentValue = this._betConfig["min"];
        for (var i = 0; i < labels.length; i++) {
          labels[i].node.active = true;
          currentValue += this._slideConfig.stepOnCount[i] * this._betConfig["step"];
          labels[i].string = currentValue.toString();
        }
        labels[labels.length - 1].string = this._betConfig["max"].toString();
      };
      BGGameMenu.prototype.hideAllSlideLabels = function() {
        var i;
        for (i = 0; i < this.oddSizeBetLabeles.length; i++) this.oddSizeBetLabeles[i].node.active = false;
        for (i = 0; i < this.evenSizeBetLabeles.length; i++) this.evenSizeBetLabeles[i].node.active = false;
      };
      __decorate([ property(BGPlayerView_1.BGPlayerView) ], BGGameMenu.prototype, "playerView", void 0);
      __decorate([ property(cc.Button) ], BGGameMenu.prototype, "btnFold", void 0);
      __decorate([ property(cc.Button) ], BGGameMenu.prototype, "btnBet", void 0);
      __decorate([ property(cc.Button) ], BGGameMenu.prototype, "btnSee", void 0);
      __decorate([ property(cc.Button) ], BGGameMenu.prototype, "btnMatch", void 0);
      __decorate([ property(cc.Button) ], BGGameMenu.prototype, "btnBlind", void 0);
      __decorate([ property(cc.Button) ], BGGameMenu.prototype, "btnOpen", void 0);
      __decorate([ property(BGBankView_1.BGBankView) ], BGGameMenu.prototype, "bankView", void 0);
      __decorate([ property(cc.Sprite) ], BGGameMenu.prototype, "betBack", void 0);
      __decorate([ property(cc.Slider) ], BGGameMenu.prototype, "slider", void 0);
      __decorate([ property([ cc.Label ]) ], BGGameMenu.prototype, "sizeBetLabeles", void 0);
      __decorate([ property([ cc.Node ]) ], BGGameMenu.prototype, "betSides", void 0);
      __decorate([ property([ cc.Label ]) ], BGGameMenu.prototype, "oddSizeBetLabeles", void 0);
      __decorate([ property([ cc.Label ]) ], BGGameMenu.prototype, "evenSizeBetLabeles", void 0);
      BGGameMenu = __decorate([ ccclass ], BGGameMenu);
      return BGGameMenu;
    }(cc.Component);
    exports.BGGameMenu = BGGameMenu;
    var logger = Logger_1.default.getLogger(BGGameMenu);
    cc._RF.pop();
  }, {
    "../../../../../common/core/Logger": "Logger",
    "../../data/BGActionTexts": "BGActionTexts",
    "../BGBankView": "BGBankView",
    "../BGPlayerView": "BGPlayerView"
  } ],
  BGGamePlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b065ZwAbVB16aosDz8QHaf", "BGGamePlayerData");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../../../../common/core/Logger");
    var BGGamePlayerData = function() {
      function BGGamePlayerData() {
        this.state = PlaceState.EMPTY;
        this.currentBet = 0;
        this.totalBet = 0;
        this.cards = [];
        this.isBlind = false;
        this.betHistory = [];
        this._logger = Logger_1.default.getLogger(this);
      }
      BGGamePlayerData.prototype.resetPlayer = function() {
        this.cards = [];
        this.playerInfo = null;
        this.currentBet = 0;
        this.totalBet = 0;
        this.betHistory = [];
        this.cards = [];
        this.state = PlaceState.EMPTY;
        this.isBlind = false;
      };
      BGGamePlayerData.prototype.clearForNewRound = function() {
        this.cards = [];
        this.currentBet = 0;
        this.totalBet = 0;
        this.betHistory = [];
        this.cards = [];
        this.state = PlaceState.WAITING;
        this.isBlind = false;
      };
      BGGamePlayerData.prototype.changeBalanceOn = function(value) {
        if (this.playerInfo) {
          this._logger.info("Change player place " + this.placeId + " balance from " + this.playerInfo.balance + " to " + (this.playerInfo.balance + value).toString());
          this.playerInfo.balance = this.playerInfo.balance + value;
        }
      };
      return BGGamePlayerData;
    }();
    exports.BGGamePlayerData = BGGamePlayerData;
    var PlaceState;
    (function(PlaceState) {
      PlaceState[PlaceState["EMPTY"] = 1] = "EMPTY";
      PlaceState[PlaceState["WAITING"] = 2] = "WAITING";
      PlaceState[PlaceState["COLLECTED_ATNE"] = 3] = "COLLECTED_ATNE";
      PlaceState[PlaceState["WAITING_BET"] = 4] = "WAITING_BET";
      PlaceState[PlaceState["PLAYING"] = 5] = "PLAYING";
      PlaceState[PlaceState["FOLD"] = 6] = "FOLD";
      PlaceState[PlaceState["WAITING_REWARD"] = 7] = "WAITING_REWARD";
    })(PlaceState = exports.PlaceState || (exports.PlaceState = {}));
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger"
  } ],
  BGGameStates: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb2e3OAueNJuJO68OzfzqR4", "BGGameStates");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGGameStates;
    (function(BGGameStates) {
      BGGameStates[BGGameStates["WAITING_PLAYERS"] = 0] = "WAITING_PLAYERS";
      BGGameStates[BGGameStates["GAME_STARTED"] = 1] = "GAME_STARTED";
      BGGameStates[BGGameStates["FIRST_BET"] = 2] = "FIRST_BET";
      BGGameStates[BGGameStates["DEALING_CARDS"] = 3] = "DEALING_CARDS";
      BGGameStates[BGGameStates["OPEN_CARDS_FOR_NOT_BLIND"] = 4] = "OPEN_CARDS_FOR_NOT_BLIND";
      BGGameStates[BGGameStates["FINAL_BET"] = 5] = "FINAL_BET";
      BGGameStates[BGGameStates["CARDS_OPEN"] = 6] = "CARDS_OPEN";
      BGGameStates[BGGameStates["SHOW_WINERS"] = 7] = "SHOW_WINERS";
      BGGameStates[BGGameStates["FORCE_FINISH"] = 8] = "FORCE_FINISH";
      BGGameStates[BGGameStates["REWARDING"] = 9] = "REWARDING";
      BGGameStates[BGGameStates["ENDING"] = 10] = "ENDING";
    })(BGGameStates = exports.BGGameStates || (exports.BGGameStates = {}));
    cc._RF.pop();
  }, {} ],
  BGGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "72189F4vqRECLT3OX9/oxMi", "BGGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGTopPlayerMenu_1 = require("./ui/menu/BGTopPlayerMenu");
    var BGGameMenu_1 = require("./ui/menu/BGGameMenu");
    var BGPlayerView_1 = require("./ui/BGPlayerView");
    var BGConfig_1 = require("./BGConfig");
    var BGSpriteFactory_1 = require("./brag/BGSpriteFactory");
    var BGViewAdapterBase_1 = require("./core/BGViewAdapterBase");
    var BGAction_1 = require("./core/BGAction");
    var BGGamePlayerData_1 = require("./data/BGGamePlayerData");
    var GameScene_1 = require("../../../main/Script/scene/GameScene");
    var BGCard_1 = require("./ui/BGCard");
    var Logger_1 = require("../../../common/core/Logger");
    var store_1 = require("../../../common/store");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RewardingState;
    (function(RewardingState) {
      RewardingState[RewardingState["NONE"] = 0] = "NONE";
      RewardingState[RewardingState["FLIPING_CARDS"] = 1] = "FLIPING_CARDS";
      RewardingState[RewardingState["REWARGING_BANKS"] = 2] = "REWARGING_BANKS";
      RewardingState[RewardingState["ENDING"] = 3] = "ENDING";
    })(RewardingState || (RewardingState = {}));
    var Game = function(_super) {
      __extends(Game, _super);
      function Game() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.topMenu = null;
        _this.playerMenu = null;
        _this.players = [];
        _this.chipFactory = null;
        _this.waitingScreen = null;
        _this._logger = Logger_1.default.getLogger(_this);
        _this._dealingCardsComplete = true;
        _this._playerByPlace = {};
        _this._playerViewByPlace = {};
        _this._currentDealer = 0;
        _this._banksToPlayerId = [];
        _this._banks = [];
        _this._isGameActive = true;
        _this._currentAnimateAction = null;
        _this._rewardingState = RewardingState.NONE;
        _this.onActivated = function() {
          cc.director.getScheduler().unscheduleAllForTarget(_this);
          cc.director.getScheduler().schedule(function() {
            if (false === _this._isGameActive) {
              _this._isGameActive = true;
              _this._logger.info("Game activate on action " + _this._currentAnimateAction);
              for (var i = 0; i < _this.maxPlayerOnTable; i++) _this._playerViewByPlace[i].redraw();
              if (_this._currentAnimateAction) {
                var playerView = void 0;
                switch (_this._currentAnimateAction.type) {
                 case BGAction_1.BGActionType.WAITING_BET:
                  playerView = _this._playerViewByPlace[_this._currentAnimateAction.data.placeId];
                  if (playerView) if (playerView.playerTimer.isReadyForRestart) {
                    playerView.playerTimer.restart();
                    _this._currentAnimateAction.data.placeId === _this._ownPlace && _this.playerMenu.betRound(_this._currentAnimateAction.data.betConfig, _this._currentAnimateAction.data.aviableActions);
                  } else _this.applyAction(_this._currentAnimateAction);
                }
              }
            }
          }, _this, 1, 0, 0, false);
        };
        _this.onDeactivated = function() {
          cc.director.getScheduler().unscheduleAllForTarget(_this);
          _this._isGameActive = false;
          _this._logger.info("Game deactivate on action " + _this._currentAnimateAction);
          if (_this._currentAnimateAction) {
            var playerView = void 0;
            switch (_this._currentAnimateAction.type) {
             case BGAction_1.BGActionType.WAITING_BET:
              playerView = _this._playerViewByPlace[_this._currentAnimateAction.data.placeId];
              playerView && playerView.playerTimer.stopTimer(true);
              _this.playerMenu.diactivateBtns();
              break;

             case BGAction_1.BGActionType.REWARD_WINNER:
              if (_this._rewardingState === RewardingState.FLIPING_CARDS) for (var i = 0; i < _this.players.length; i++) _this.players[i].finishFlipping();
              if (_this._rewardingState === RewardingState.REWARGING_BANKS) for (var i = 0; i < _this.maxPlayerOnTable; i++) _this._playerViewByPlace[i].finishCardAnimations();
            }
          }
        };
        return _this;
      }
      Game_1 = Game;
      Game.prototype.onLoad = function() {
        BGConfig_1.BGConfig.spriteFactory = this.chipFactory;
        BGConfig_1.BGConfig.initRemoteGame(store_1.default.getState().sceneState.current.params.tableId || 1);
        BGConfig_1.BGConfig.initControllers(this);
        this.initFreePlaces();
      };
      Game.prototype.start = function() {
        BGConfig_1.BGConfig.bgGameCore.start();
        var parent;
        parent = this.node.parent;
        var gameScene;
        while (parent) {
          gameScene = parent.getComponent(GameScene_1.default);
          if (gameScene) {
            this.topMenu.setupBackCallBack(gameScene.onBackButtonPress);
            break;
          }
          parent = parent.parent;
        }
        cc.game.on(cc.game.EVENT_SHOW, this.onActivated, this);
        cc.game.on(cc.game.EVENT_HIDE, this.onDeactivated, this);
      };
      Game.prototype.onShadowClick = function() {
        return true;
      };
      Game.prototype.update = function(dt) {};
      Game.prototype.onDestroy = function() {
        cc.game.off(cc.game.EVENT_SHOW, this.onActivated, this);
        cc.game.off(cc.game.EVENT_HIDE, this.onDeactivated, this);
        BGConfig_1.BGConfig.bgGameCore.destroy();
      };
      Game.prototype.prepare = function() {
        return __awaiter(this, void 0, void 0, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              this._logger.log("prepare start");
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerInputActionHandler(BGAction_1.BGActionType.GAME_OVER, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.topMenu.onBackClick();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.REGISTER_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerData;
                  return __generator(this, function(_a) {
                    playerData = {
                      id: action.data.playerInfo.id,
                      balance: action.data.playerInfo.balance,
                      isGoldMember: action.data.playerInfo.isGoldMember,
                      name: action.data.playerInfo.name,
                      avatarId: action.data.playerInfo.avatarId,
                      gender: action.data.playerInfo.gender
                    };
                    playerData.id === BGConfig_1.BGConfig.bgGameCore.getCurrentPlayerInfo().id && this.initViewStatredFromMain(action.data.placeId);
                    player = this._playerByPlace[action.data.placeId];
                    if (player) {
                      player.playerInfo = playerData;
                      player.state = BGGamePlayerData_1.PlaceState.WAITING;
                      this._playerViewByPlace[player.placeId].initPlayer(player);
                    }
                    this.checkPlayersCountAndActiveWaiting();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.PREPARE_FOR_ROUND, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView, i;
                  return __generator(this, function(_a) {
                    this._currentBankIndex = 0;
                    for (i = 0; i < action.data.placesId.length; i++) {
                      player = this._playerByPlace[action.data.placesId[i]];
                      if (player) {
                        player.state = BGGamePlayerData_1.PlaceState.PLAYING;
                        player.playerInfo.balance -= action.data.ante;
                        playerView = this._playerViewByPlace[action.data.placesId[i]];
                        playerView.updateBallance(player.playerInfo.balance);
                        playerView.reset();
                        playerView.playerActive(true);
                        this.playerMenu.bankView.bankChipsView.add(action.data.ante);
                      }
                    }
                    this._playerViewByPlace[this._currentDealer].dealer = false;
                    action.data.dealerPlaceId < this.maxPlayerOnTable && (this._currentDealer = action.data.dealerPlaceId);
                    this._playerViewByPlace[this._currentDealer].dealer = true;
                    this._banks[this._currentBankIndex] = action.data.placesId.length * action.data.ante;
                    this.playerMenu.onBankUpdate(this._banks);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.WAITING_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerView;
                  return __generator(this, function(_a) {
                    this._currentAnimateAction = action;
                    playerView = this._playerViewByPlace[action.data.placeId];
                    if (this._isGameActive) {
                      if (playerView) if (action.data.placeId !== this._ownPlace) playerView.playerTimer.startTimer(action.data.processEnd); else {
                        playerView.playerTimer.startTimer(action.data.processEnd, this, this.onMainPlaerTimer);
                        this.playerMenu.betRound(action.data.betConfig, action.data.aviableActions);
                      }
                    } else playerView && playerView.playerTimer.reserveStartTime();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.MAKE_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView;
                  return __generator(this, function(_a) {
                    player = this._playerByPlace[action.data.placeId];
                    if (player) {
                      player.state = BGGamePlayerData_1.PlaceState.PLAYING;
                      playerView = this._playerViewByPlace[action.data.placeId];
                      playerView.playerTimer.stopTimer();
                      this._currentAnimateAction = null;
                      playerView.showBet(action.data.bet);
                      player.currentBet += action.data.bet;
                      player.totalBet += action.data.bet;
                      player.playerInfo.balance = action.data.newPlayerBalance;
                      playerView.updateBallance(player.playerInfo.balance);
                      playerView.showPlayerAction(action.type);
                      player.playerInfo.balance <= 0 && (player.state = BGGamePlayerData_1.PlaceState.WAITING_REWARD);
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.BLIND, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView;
                  return __generator(this, function(_a) {
                    player = this._playerByPlace[action.data.placeId];
                    if (player) {
                      player.state = BGGamePlayerData_1.PlaceState.PLAYING;
                      playerView = this._playerViewByPlace[action.data.placeId];
                      playerView.playerTimer.stopTimer();
                      this._currentAnimateAction = null;
                      playerView.showBet(action.data.bet);
                      player.currentBet += action.data.bet;
                      player.totalBet += action.data.bet;
                      player.playerInfo.balance = action.data.newPlayerBalance;
                      playerView.updateBallance(player.playerInfo.balance);
                      playerView.showPlayerAction(action.type);
                      player.isBlind = true;
                      player.playerInfo.balance <= 0 && (player.state = BGGamePlayerData_1.PlaceState.WAITING_REWARD);
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.SEE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView;
                  return __generator(this, function(_a) {
                    player = this._playerByPlace[action.data.placeId];
                    if (player) {
                      player.state = BGGamePlayerData_1.PlaceState.PLAYING;
                      playerView = this._playerViewByPlace[action.data.placeId];
                      playerView.playerTimer.stopTimer();
                      this._currentAnimateAction = null;
                      player.currentBet += action.data.bet;
                      player.totalBet += action.data.bet;
                      player.playerInfo.balance = action.data.newPlayerBalance;
                      playerView.updateBallance(player.playerInfo.balance);
                      playerView.showBet(action.data.bet);
                      playerView.showPlayerAction(action.type);
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.FOLD, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView;
                  return __generator(this, function(_a) {
                    player = this._playerByPlace[action.data.placeId];
                    if (player) {
                      player.state = BGGamePlayerData_1.PlaceState.FOLD;
                      player.cards = [];
                      playerView = this._playerViewByPlace[action.data.placeId];
                      playerView.playerTimer.stopTimer();
                      this._currentAnimateAction && this._currentAnimateAction.type === BGAction_1.BGActionType.WAITING_BET && this._currentAnimateAction.data.placeId === action.data.placeId && (this._currentAnimateAction = null);
                      playerView.foldCards();
                      playerView.showPlayerAction(action.type);
                      playerView.playerActive(false);
                    }
                    this.checkPlayersCountAndActiveWaiting();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.COLLECT_BETS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView, i;
                  return __generator(this, function(_a) {
                    this._logger.log("collect bets");
                    for (i = 0; i < this.maxPlayerOnTable; i++) {
                      player = this._playerByPlace[i];
                      playerView = this._playerViewByPlace[i];
                      playerView.hideBet();
                      if (0 !== player.currentBet) {
                        playerView.collectBets();
                        player.currentBet = 0;
                      }
                      playerView.showPlayerAction();
                    }
                    this._banks = action.data.bankSize;
                    this.playerMenu.onBankUpdate(this._banks);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.REWARD_WINNER, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerView, i, j;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this._logger.log("reward winers");
                      this._dealingCardsComplete = true;
                      this._currentAnimateAction = action;
                      this._banksToPlayerId = [];
                      this._banks = action.data.bankSize;
                      this.playerMenu.onBankUpdate(this._banks);
                      this.playerMenu.diactivateBtns();
                      for (i = 0; i < action.data.playersCardsAndReward.length; i++) {
                        playerView = this._playerViewByPlace[action.data.playersCardsAndReward[i].placeId];
                        playerView.playerTimer.stopTimer();
                        action.data.playersCardsAndReward[i].cards.length && playerView.updatePlayerCards(action.data.playersCardsAndReward[i].cards);
                        for (j = 0; j < action.data.playersCardsAndReward[i].rewards.length; j++) this._banksToPlayerId[action.data.playersCardsAndReward[i].rewards[j]] = action.data.playersCardsAndReward[i].placeId;
                      }
                      return [ 4, this.flipCards() ];

                     case 1:
                      _a.sent();
                      this.checkPlayersCountAndActiveWaiting();
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.DROP_PLAYER, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    if (this._playerViewByPlace[action.data.placeId]) {
                      this._playerViewByPlace[action.data.placeId].disablePlayer();
                      this._playerByPlace[action.data.placeId].resetPlayer();
                      if (action.data.placeId === this._ownPlace) {
                        this._dealingCardsComplete = true;
                        this.topMenu.onBackClick();
                      }
                      this.calculatePlayingPlayers() <= 1 && (this._dealingCardsComplete = true);
                    }
                    this.checkPlayersCountAndActiveWaiting();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.DEAL_CARDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this._currentAnimateAction = action;
                      return [ 4, this.dealCards() ];

                     case 1:
                      _a.sent();
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.UPDATE_PLAYER_DATA, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView;
                  return __generator(this, function(_a) {
                    player = this._playerByPlace[action.data.placeId];
                    if (player) {
                      player.playerInfo = action.data.playerInfo;
                      playerView = this._playerViewByPlace[action.data.placeId];
                      playerView.updatePlayer(player);
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.SHOW_CARDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerView;
                  return __generator(this, function(_a) {
                    this._currentAnimateAction = action;
                    this.playerMenu.openCards();
                    playerView = this._playerViewByPlace[action.data.placeId];
                    playerView.updatePlayerCards(action.data.cards);
                    playerView.flipCards(null, null, this._isGameActive);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.UPDATE_TABLE_DATA, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player, playerView, i;
                  return __generator(this, function(_a) {
                    this._banks = action.data.bankSize;
                    this.playerMenu.onBankUpdate(this._banks);
                    this._playerViewByPlace[action.data.dealerPlaceId].dealer = true;
                    this._currentDealer = action.data.dealerPlaceId;
                    for (i = 0; i < action.data.placesState.length; i++) {
                      playerView = this._playerViewByPlace[action.data.placesState[i].placeId];
                      player = this._playerByPlace[action.data.placesState[i].placeId];
                      if (action.data.placesState[i].active) {
                        player.state = BGGamePlayerData_1.PlaceState.PLAYING;
                        playerView.playerActive(true);
                      } else player.state = BGGamePlayerData_1.PlaceState.WAITING;
                      if (action.data.placesState[i].currentBet > 0) {
                        playerView.showBet(action.data.placesState[i].currentBet);
                        player.currentBet = action.data.placesState[i].currentBet;
                      }
                      action.data.placesState[i].processEnd && playerView.playerTimer.startTimer(action.data.placesState[i].processEnd - BGConfig_1.BGConfig.bgGameCore.currentTime);
                      if (action.data.placesState[i].cardsIsDealed) {
                        player.cards = [ {
                          rate: -1,
                          suit: BGCard_1.Suit.clubs
                        }, {
                          rate: -1,
                          suit: BGCard_1.Suit.clubs
                        }, {
                          rate: -1,
                          suit: BGCard_1.Suit.clubs
                        } ];
                        playerView.dealWithOutAnimation(player.cards);
                      }
                    }
                    this.checkPlayersCountAndActiveWaiting();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.TABLE_CONFIG_UPDATE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    BGConfig_1.BGConfig.tableConfig.bets = action.data.bets;
                    this.playerMenu.bankView.setupBankView();
                    this.checkPlayersCountAndActiveWaiting();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BGAction_1.BGActionType.MATCH, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, this.match(action) ];

                     case 1:
                      _a.sent();
                      return [ 2 ];
                    }
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      Game.prototype.match = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            return [ 2, new Promise(function(resolve) {
              var player;
              var playerView;
              var loosePlayerId = action.data.placeId === action.data.winnerPlaceId ? action.data.placeIdToMatch : action.data.placeId;
              player = _this._playerByPlace[loosePlayerId];
              if (player) {
                player.state = BGGamePlayerData_1.PlaceState.FOLD;
                player.cards = [];
                playerView = _this._playerViewByPlace[loosePlayerId];
                playerView.playerTimer.stopTimer();
                _this._currentAnimateAction && _this._currentAnimateAction.type === BGAction_1.BGActionType.WAITING_BET && _this._currentAnimateAction.data.placeId === action.data.placeId && (_this._currentAnimateAction = null);
                playerView.foldCards();
                playerView.showPlayerAction(action.type, false);
                playerView.playerActive(false);
              }
              player = _this._playerByPlace[action.data.winnerPlaceId];
              if (player) {
                player.state = BGGamePlayerData_1.PlaceState.PLAYING;
                playerView = _this._playerViewByPlace[action.data.winnerPlaceId];
                playerView.showPlayerAction(action.type, true);
                playerView.playerTimer.stopTimer();
              }
              player = _this._playerByPlace[action.data.placeId];
              if (player) {
                playerView = _this._playerViewByPlace[action.data.placeId];
                _this._currentAnimateAction = null;
                playerView.showBet(action.data.bet);
                player.currentBet += action.data.bet;
                player.totalBet += action.data.bet;
                player.playerInfo.balance = action.data.newPlayerBalance;
                playerView.updateBallance(player.playerInfo.balance);
                player.playerInfo.balance <= 0 && (player.state = BGGamePlayerData_1.PlaceState.WAITING_REWARD);
              }
              resolve();
            }) ];
          });
        });
      };
      Game.prototype.checkPlayersCountAndActiveWaiting = function() {
        if (this.players) {
          var players = 0;
          for (var ind = 0; ind < this.maxPlayerOnTable; ind++) this._playerByPlace[ind].state !== BGGamePlayerData_1.PlaceState.EMPTY && players++;
          this.waitingScreen.active = players < 2;
        }
      };
      Game.prototype.flipCards = function() {
        var _this = this;
        return new Promise(function(resolve) {
          _this._rewardingState = RewardingState.FLIPING_CARDS;
          _this._rewardIterator = _this.players.length;
          if (_this._playerByPlace[_this._ownPlace].isBlind || !_this._playerByPlace[_this._ownPlace].cardsIsOpen) {
            _this._rewardIterator++;
            _this.playerMenu.playerView.flipCards(_this, function() {
              return _this.cardFlipped(resolve);
            }, _this._isGameActive);
          }
          for (var i = 0; i < _this.players.length; i++) _this.players[i].flipCards(_this, function() {
            return _this.cardFlipped(resolve);
          }, _this._isGameActive);
        });
      };
      Game.prototype.cardFlipped = function(completeCallback) {
        this._rewardIterator--;
        this._logger.log("wait for " + this._rewardIterator);
        if (this._rewardIterator <= 0) {
          this._rewardIterator = this._banks.length;
          this._rewardingState = RewardingState.REWARGING_BANKS;
          this.rewaerdNextBank(completeCallback);
        }
      };
      Game.prototype.rewaerdNextBank = function(completeCallback) {
        this._logger.info("Rewarding bank " + this._rewardIterator);
        var player;
        this._rewardIterator--;
        if (this._rewardIterator < 0) {
          this.endRound(completeCallback);
          return;
        }
        var placeId = this._banksToPlayerId[this._rewardIterator];
        if (void 0 === placeId) {
          this.endRound(completeCallback);
          this._logger.error("There is no players won bank index " + this._rewardIterator);
          return;
        }
        for (var i = 0; i < this.maxPlayerOnTable; i++) i !== placeId && this._playerByPlace[i].state !== BGGamePlayerData_1.PlaceState.EMPTY && this._playerByPlace[i].cards.length > 0 && this._playerViewByPlace[i].darkCards();
        if (0 === this._banks[this._rewardIterator]) {
          this._banks.pop();
          this.rewaerdNextBank(completeCallback);
          this._logger.error("View couldn't reward bank with value 0. Bank index: " + this._rewardIterator);
          return;
        }
        player = this._playerViewByPlace[placeId];
        this.playerMenu.bankView.reward(player.chipView, this._banks[this._rewardIterator]);
        this._playerByPlace[placeId].changeBalanceOn(this._banks[this._rewardIterator]);
        player.updateBallance(this._playerByPlace[placeId].playerInfo.balance);
        this._banks.pop();
        this.playerMenu.onBankUpdate(this._banks);
        this._isGameActive ? player.highLight(this, this.rewaerdNextBank, completeCallback) : this.rewaerdNextBank(completeCallback);
      };
      Game.prototype.endRound = function(completeCallback) {
        this._rewardingState = RewardingState.ENDING;
        for (var i = 0; i < this.maxPlayerOnTable; i++) if (this._playerByPlace[i].state !== BGGamePlayerData_1.PlaceState.EMPTY) {
          this._playerByPlace[i].clearForNewRound();
          this._playerViewByPlace[i].reset();
        }
        this.playerMenu.bankView.bankChipsView.reset();
        this._banks = [];
        this._rewardIterator = 0;
        this.playerMenu.onBankUpdate(this._banks);
        this._currentAnimateAction = null;
        completeCallback();
      };
      Game.prototype.initFreePlaces = function() {
        for (var i = 0; i < this.players.length + 1; i++) {
          var playerData = new BGGamePlayerData_1.BGGamePlayerData();
          playerData.placeId = i;
          this._playerByPlace[i] = playerData;
        }
      };
      Game.prototype.initViewStatredFromMain = function(placeId) {
        this._ownPlace = placeId;
        this._playerViewByPlace[placeId] = this.playerMenu.playerView;
        for (var i = 1; i < this.maxPlayerOnTable; i++) this._playerViewByPlace[(placeId + i) % this.maxPlayerOnTable] = this.players[i - 1];
      };
      Game.prototype.dealCards = function() {
        var _this = this;
        return new Promise(function(resolve) {
          _this._dealingCardsComplete = false;
          _this._currentPlayerPlaceTurn = (_this._currentDealer + 1) % _this.maxPlayerOnTable;
          _this.dealNext(resolve);
        });
      };
      Game.prototype.dealNext = function(completeCallback) {
        var _this = this;
        if (this._dealingCardsComplete) {
          this._currentAnimateAction = null;
          completeCallback();
          return;
        }
        var player = this._playerByPlace[this._currentPlayerPlaceTurn];
        if (player.state !== BGGamePlayerData_1.PlaceState.PLAYING && player.state !== BGGamePlayerData_1.PlaceState.WAITING_REWARD) {
          this._currentPlayerPlaceTurn = (this._currentPlayerPlaceTurn + 1) % this.maxPlayerOnTable;
          this.dealNext(completeCallback);
          return;
        }
        var cardVal;
        var playerView = this._playerViewByPlace[this._currentPlayerPlaceTurn];
        if (player.cards.length < Game_1.CARD_COUNT) {
          cardVal = {
            rate: -1,
            suit: BGCard_1.Suit.clubs
          };
          player.cards.push({
            rate: -1,
            suit: BGCard_1.Suit.clubs
          });
          if (this._isGameActive) {
            playerView.deal(cardVal, function() {
              return _this.dealNext(completeCallback);
            }, this);
            this._currentPlayerPlaceTurn = (this._currentPlayerPlaceTurn + 1) % this.maxPlayerOnTable;
          } else {
            playerView.dealWithOutAnimation([ cardVal ]);
            this._currentPlayerPlaceTurn = (this._currentPlayerPlaceTurn + 1) % this.maxPlayerOnTable;
            this.dealNext(completeCallback);
          }
        } else {
          this._dealingCardsComplete = true;
          this._currentAnimateAction = null;
          completeCallback();
        }
      };
      Game.prototype.onExitClick = function() {
        this.waitingScreen.active = false;
        this._dealingCardsComplete = true;
        var i;
        for (i = 0; i < this.maxPlayerOnTable; i++) {
          this._playerViewByPlace[i].reset();
          this._playerByPlace[i].resetPlayer();
        }
      };
      Game.prototype.onMainPlaerTimer = function() {
        this.playerMenu.diactivateBtns();
      };
      Game.prototype.onFoldClick = function() {
        this.playerMenu.diactivateBtns();
        this.dispatchAction({
          type: BGAction_1.BGActionType.FOLD,
          data: {
            placeId: this._ownPlace
          }
        });
      };
      Game.prototype.onSeeClick = function() {
        this.playerMenu.diactivateBtns();
        this.dispatchAction({
          type: BGAction_1.BGActionType.SEE,
          data: {
            placeId: this._ownPlace,
            bet: this.playerMenu.seeBet
          }
        });
      };
      Game.prototype.onBetClick = function() {
        this.playerMenu.diactivateBtns();
        this.dispatchAction({
          type: BGAction_1.BGActionType.MAKE_BET,
          data: {
            placeId: this._ownPlace,
            bet: this.playerMenu.currentBet
          }
        });
      };
      Game.prototype.onBlindClick = function() {
        this.playerMenu.diactivateBtns();
        this.dispatchAction({
          type: BGAction_1.BGActionType.BLIND,
          data: {
            placeId: this._ownPlace,
            bet: this.playerMenu.currentBet
          }
        });
      };
      Game.prototype.onBtnOpenClick = function() {
        this.dispatchAction({
          type: BGAction_1.BGActionType.OPEN_CARDS,
          data: {
            placeId: this._ownPlace
          }
        });
      };
      Game.prototype.onMatchClick = function() {
        this.playerMenu.diactivateBtns();
        var placeId;
        for (var i = 0; i < this.maxPlayerOnTable; i++) if (this._playerByPlace[i].state === BGGamePlayerData_1.PlaceState.PLAYING && i !== this._ownPlace) {
          placeId = i;
          break;
        }
        this._logger.log("send match from client");
        this.dispatchAction({
          type: BGAction_1.BGActionType.MATCH,
          data: {
            placeId: this._ownPlace,
            bet: this.playerMenu.currentBet,
            placeIdToMatch: placeId
          }
        });
      };
      Game.prototype.calculatePlayingPlayers = function() {
        var count = 0;
        for (var i = 0; i < this.maxPlayerOnTable; i++) this._playerByPlace[i].state === BGGamePlayerData_1.PlaceState.PLAYING && count++;
        return count;
      };
      Object.defineProperty(Game.prototype, "maxPlayerOnTable", {
        get: function() {
          return this.players.length + 1;
        },
        enumerable: true,
        configurable: true
      });
      var Game_1;
      Game.CARD_COUNT = 3;
      __decorate([ property(BGTopPlayerMenu_1.BGTopPlayerMenu) ], Game.prototype, "topMenu", void 0);
      __decorate([ property(BGGameMenu_1.BGGameMenu) ], Game.prototype, "playerMenu", void 0);
      __decorate([ property({
        type: [ BGPlayerView_1.BGPlayerView ]
      }) ], Game.prototype, "players", void 0);
      __decorate([ property(BGSpriteFactory_1.BGSpriteFactory) ], Game.prototype, "chipFactory", void 0);
      __decorate([ property(cc.Node) ], Game.prototype, "waitingScreen", void 0);
      Game = Game_1 = __decorate([ ccclass ], Game);
      return Game;
    }(BGViewAdapterBase_1.BGViewAdapterBase);
    exports.default = Game;
    cc._RF.pop();
  }, {
    "../../../common/core/Logger": "Logger",
    "../../../common/store": "index",
    "../../../main/Script/scene/GameScene": "GameScene",
    "./BGConfig": "BGConfig",
    "./brag/BGSpriteFactory": "BGSpriteFactory",
    "./core/BGAction": "BGAction",
    "./core/BGViewAdapterBase": "BGViewAdapterBase",
    "./data/BGGamePlayerData": "BGGamePlayerData",
    "./ui/BGCard": "BGCard",
    "./ui/BGPlayerView": "BGPlayerView",
    "./ui/menu/BGGameMenu": "BGGameMenu",
    "./ui/menu/BGTopPlayerMenu": "BGTopPlayerMenu"
  } ],
  BGInfoWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f5b7oWk5tBuaeuPaPSlcUk", "BGInfoWindow");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseWindow_1 = require("../../../../../common/core/windows/BaseWindow");
    var BGActionTexts_1 = require("../../data/BGActionTexts");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGInfoWindow = function(_super) {
      __extends(BGInfoWindow, _super);
      function BGInfoWindow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.pages = [];
        _this.blockHeaders = [];
        _this.descriptionLabel = null;
        _this.p1Headers = [];
        _this.p1Texts = [];
        _this.combinationHeaders = [];
        _this.combinationTexts = [];
        _this.suits = [];
        _this.suitHeader = null;
        _this.tabsCaptions = [];
        _this.tab2Headers = [];
        _this.tab2Texts = [];
        _this.tab2BlockHeader = null;
        return _this;
      }
      BGInfoWindow.prototype.start = function() {
        _super.prototype.start.call(this);
        this.pages[0].active = true;
        this.setupPage1();
        this.setupPage2();
      };
      BGInfoWindow.prototype.onTabChange = function(event, index) {
        for (var i = 0; i < this.pages.length; i++) this.pages[i].active = i === Number(index);
      };
      BGInfoWindow.prototype.setupPage1 = function() {
        var i;
        this.descriptionLabel.string = BGActionTexts_1.BGActionText.wip1Description;
        for (i = 0; i < this.blockHeaders.length; i++) this.blockHeaders[i].string = BGActionTexts_1.BGActionText.wip1BlockHeaders[i];
        for (i = 0; i < this.p1Headers.length; i++) {
          this.p1Headers[i].string = BGActionTexts_1.BGActionText.wip1Headers[i];
          this.p1Headers[i].horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
          this.p1Texts[i].string = BGActionTexts_1.BGActionText.wip1Texts[i];
          this.p1Texts[i].horizontalAlign = cc.Label.HorizontalAlign.LEFT;
          this.p1Texts[i].verticalAlign = cc.Label.VerticalAlign.TOP;
        }
      };
      BGInfoWindow.prototype.setupPage2 = function() {
        var i;
        for (i = 0; i < this.combinationHeaders.length; i++) {
          this.combinationHeaders[i].string = BGActionTexts_1.BGActionText.wip2CombinationsHeaders[i];
          this.combinationHeaders[i].horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
          this.combinationTexts[i].string = BGActionTexts_1.BGActionText.wip2CombinationsTexts[i];
          this.combinationTexts[i].horizontalAlign = cc.Label.HorizontalAlign.LEFT;
        }
        for (i = 0; i < this.suits.length; i++) this.suits[i].string = BGActionTexts_1.BGActionText.wip2Suits[i];
        this.suitHeader.string = BGActionTexts_1.BGActionText.wip2SSuitsHeader;
        for (i = 0; i < this.tabsCaptions.length; i++) this.tabsCaptions[i].string = BGActionTexts_1.BGActionText.wip2Tabs[i];
        for (i = 0; i < this.tab2Headers.length; i++) {
          this.tab2Headers[i].string = BGActionTexts_1.BGActionText.wip2Headers[i];
          this.tab2Headers[i].horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
          this.tab2Texts[i].string = BGActionTexts_1.BGActionText.wip2texts[i];
          this.tab2Texts[i].horizontalAlign = cc.Label.HorizontalAlign.LEFT;
        }
        this.tab2BlockHeader.string = BGActionTexts_1.BGActionText.wip2BlockHeader;
      };
      __decorate([ property([ cc.Node ]) ], BGInfoWindow.prototype, "pages", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "blockHeaders", void 0);
      __decorate([ property(cc.Label) ], BGInfoWindow.prototype, "descriptionLabel", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "p1Headers", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "p1Texts", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "combinationHeaders", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "combinationTexts", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "suits", void 0);
      __decorate([ property(cc.Label) ], BGInfoWindow.prototype, "suitHeader", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "tabsCaptions", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "tab2Headers", void 0);
      __decorate([ property([ cc.Label ]) ], BGInfoWindow.prototype, "tab2Texts", void 0);
      __decorate([ property(cc.Label) ], BGInfoWindow.prototype, "tab2BlockHeader", void 0);
      BGInfoWindow = __decorate([ ccclass ], BGInfoWindow);
      return BGInfoWindow;
    }(BaseWindow_1.default);
    exports.BGInfoWindow = BGInfoWindow;
    cc._RF.pop();
  }, {
    "../../../../../common/core/windows/BaseWindow": "BaseWindow",
    "../../data/BGActionTexts": "BGActionTexts"
  } ],
  BGMainPlayerCardView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3ebbL6uFxNSrsKG07uB+h7", "BGMainPlayerCardView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGCardView_1 = require("./BGCardView");
    var Logger_1 = require("../../../../common/core/Logger");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGMainPlayerCardView = function(_super) {
      __extends(BGMainPlayerCardView, _super);
      function BGMainPlayerCardView() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BGMainPlayerCardView.prototype.flipCard = function(target, callBack) {
        this._isFaseUp = true;
        var anim = this.node.getComponent(cc.Animation);
        this._targetForCallBack = target;
        this._callBack = callBack;
        anim ? anim.play("cardFlipAnimationForMain") : logger.info("there is no anim cardFlipAnimationForMain");
      };
      BGMainPlayerCardView = __decorate([ ccclass ], BGMainPlayerCardView);
      return BGMainPlayerCardView;
    }(BGCardView_1.BGCardView);
    exports.BGMainPlayerCardView = BGMainPlayerCardView;
    var logger = Logger_1.default.getLogger(BGMainPlayerCardView);
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "./BGCardView": "BGCardView"
  } ],
  BGPlayerActionConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06bf1EWSHBDZpjuHACva4Rp", "BGPlayerActionConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGPlayerActionConfig;
    (function(BGPlayerActionConfig) {
      BGPlayerActionConfig[BGPlayerActionConfig["PLAYER_STATE_PLAY"] = 0] = "PLAYER_STATE_PLAY";
      BGPlayerActionConfig[BGPlayerActionConfig["PLAYER_STATE_FOLD"] = 1] = "PLAYER_STATE_FOLD";
      BGPlayerActionConfig[BGPlayerActionConfig["PLAYER_STATE_BET"] = 2] = "PLAYER_STATE_BET";
      BGPlayerActionConfig[BGPlayerActionConfig["PLAYER_STATE_BLIND"] = 3] = "PLAYER_STATE_BLIND";
      BGPlayerActionConfig[BGPlayerActionConfig["PLAYER_STATE_SEE"] = 4] = "PLAYER_STATE_SEE";
    })(BGPlayerActionConfig = exports.BGPlayerActionConfig || (exports.BGPlayerActionConfig = {}));
    cc._RF.pop();
  }, {} ],
  BGPlayerTimerView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3ce9uBuTdBZIdacMbHrUii", "BGPlayerTimerView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGConfig_1 = require("../BGConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGPlayerTimerView = function(_super) {
      __extends(BGPlayerTimerView, _super);
      function BGPlayerTimerView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timerSprite = null;
        _this._currentTime = 100;
        _this._timerStarted = false;
        _this._timeEnd = 0;
        _this._isReadyForRestart = false;
        _this._reservedStartTime = -1;
        return _this;
      }
      BGPlayerTimerView.prototype.startTimer = function(time, target, callBack) {
        void 0 === target && (target = null);
        void 0 === callBack && (callBack = null);
        if (this._timeEnd === time) return;
        this._timeEnd = time;
        this._currentTime = 1e3 * (time - BGConfig_1.BGConfig.bgGameCore.currentTime);
        -1 === this._reservedStartTime ? this._time = 1e3 * (time - BGConfig_1.BGConfig.bgGameCore.currentTime) : this._time = 1e3 * (time - this._reservedStartTime);
        this._targetCallback = target;
        this._callBack = callBack;
        this.startAfterLoad();
      };
      BGPlayerTimerView.prototype.reserveStartTime = function() {
        this._reservedStartTime = BGConfig_1.BGConfig.bgGameCore.currentTime;
      };
      BGPlayerTimerView.prototype.restart = function() {
        this._currentTime = 1e3 * (this._timeEnd - BGConfig_1.BGConfig.bgGameCore.currentTime);
        this._currentTime > 0 && this.startAfterLoad();
      };
      Object.defineProperty(BGPlayerTimerView.prototype, "isReadyForRestart", {
        get: function() {
          return this._isReadyForRestart;
        },
        enumerable: true,
        configurable: true
      });
      BGPlayerTimerView.prototype.startAfterLoad = function() {
        this.node.active = true;
        this.drawTime();
        this._timerStarted = true;
      };
      BGPlayerTimerView.prototype.drawTime = function() {
        if (this._currentTime <= 0) {
          this.stopTimer();
          null != this._targetCallback && this._callBack.call(this._targetCallback);
          return;
        }
        var percent = this._currentTime / this._time;
        this.timerSprite.type = cc.Sprite.Type.FILLED;
        this.timerSprite.fillType = cc.Sprite.FillType.RADIAL;
        this.timerSprite.fillCenter = new cc.Vec2(.5, .5);
        this.timerSprite.fillStart = 0;
        this.timerSprite.fillRange = percent;
      };
      BGPlayerTimerView.prototype.stopTimer = function(couldBeRestarted) {
        void 0 === couldBeRestarted && (couldBeRestarted = false);
        this._reservedStartTime = -1;
        this._isReadyForRestart = couldBeRestarted;
        this._timerStarted = false;
        this.node.active = false;
      };
      BGPlayerTimerView.prototype.update = function(dt) {
        if (this._timerStarted) {
          this._currentTime -= 1e3 * dt;
          this.drawTime();
        }
      };
      __decorate([ property({
        type: cc.Sprite
      }) ], BGPlayerTimerView.prototype, "timerSprite", void 0);
      BGPlayerTimerView = __decorate([ ccclass ], BGPlayerTimerView);
      return BGPlayerTimerView;
    }(cc.Component);
    exports.BGPlayerTimerView = BGPlayerTimerView;
    cc._RF.pop();
  }, {
    "../BGConfig": "BGConfig"
  } ],
  BGPlayerView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0f130zL2e9OZoSuYMZNFLom", "BGPlayerView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGCardView_1 = require("./BGCardView");
    var BGPlayerTimerView_1 = require("./BGPlayerTimerView");
    var BGAction_1 = require("../core/BGAction");
    var BGActionTexts_1 = require("../data/BGActionTexts");
    var Logger_1 = require("../../../../common/core/Logger");
    var TableGameChipHolder_1 = require("../../../../main/Script/component/TableGameChipHolder");
    var BGConfig_1 = require("../BGConfig");
    var BaseAvatarComponent_1 = require("../../../../main/Script/component/BaseAvatarComponent");
    var PrefabLoader_1 = require("../../../../main/Script/component/PrefabLoader");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGPlayerView = function(_super) {
      __extends(BGPlayerView, _super);
      function BGPlayerView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerRegularSkin = null;
        _this.playerGoldSkin = null;
        _this.dealerSprite = null;
        _this.cardViews = [];
        _this.playerNameLabel = null;
        _this.playerBalanceLabel = null;
        _this.playerBetLabel = null;
        _this.playerBetBack = null;
        _this.playerTimer = null;
        _this.chipView = null;
        _this.bank = null;
        _this.playerBubbleLabel = null;
        _this.playerBubbleBack = null;
        _this.playerAvatar = null;
        _this.playerDarkness = null;
        _this._cards = [];
        _this._animatedCardCount = 0;
        _this._inited = false;
        _this._logger = Logger_1.default.getLogger(_this);
        return _this;
      }
      BGPlayerView.prototype.initPlayer = function(user) {
        this.chipView.init({
          prefab: BGConfig_1.BGConfig.spriteFactory.chipPrefab,
          maxChipsCount: 20,
          chipValues: BGConfig_1.BGConfig.tableConfig.bets,
          sizeValue: 25,
          viewType: TableGameChipHolder_1.ChipHolderViewType.RANDOM
        });
        this._inited = true;
        this.playerNameLabel.node.active = true;
        this.playerBalanceLabel.node.active = true;
        this.playerActive(false);
        this.updatePlayer(user);
      };
      BGPlayerView.prototype.updatePlayer = function(user) {
        this.playerRegularSkin.node.active = true;
        this.playerNameLabel.string = user.playerInfo.name;
        this.playerBalanceLabel.string = user.playerInfo.balance.toString();
        this.playerAvatar.getContent(BaseAvatarComponent_1.default).setup({
          size: 90,
          useRect: false,
          avatarId: user.playerInfo.avatarId,
          useClickOnAvatar: false,
          useRoundCorner: true
        });
        this.playerAvatar.node.active = true;
      };
      BGPlayerView.prototype.playerActive = function(value) {
        this.playerDarkness.active = !value;
      };
      BGPlayerView.prototype.updatePlayerCards = function(cards) {
        this._cards = cards;
        for (var i = 0; i < this.cardViews.length; i++) {
          this.cardViews[i].node.active = true;
          this.cardViews[i].updateCardIndex(this.getCardIndex(this._cards[i]));
          this.cardViews[i].drawCard();
        }
      };
      BGPlayerView.prototype.disablePlayer = function() {
        this._inited = false;
        this._currentBet = 0;
        this.reset();
        this.playerNameLabel.node.active = false;
        this.playerBalanceLabel.node.active = false;
        this.playerRegularSkin.node.active = false;
        this.playerGoldSkin.node.active = false;
        this.dealerSprite.node.active = false;
        this.playerAvatar.node.active = false;
        this.showPlayerAction();
        this.playerActive(true);
      };
      BGPlayerView.prototype.dealWithOutAnimation = function(cards) {
        for (var i = 0; i < cards.length; i++) {
          this.cardViews[this._cards.length].node.active = true;
          this.cardViews[this._cards.length].fastDraw(this.getCardIndex(cards[i]));
          this._cards.push(cards[i]);
        }
      };
      BGPlayerView.prototype.deal = function(cardValue, dealCallBack, target) {
        this.cardViews[this._cards.length].node.active = true;
        this.cardViews[this._cards.length].deal(this.getCardIndex(cardValue));
        this._cards.push(cardValue);
        var timeout = setTimeout(function() {
          clearTimeout(timeout);
          dealCallBack.call(target);
        }, 500);
      };
      Object.defineProperty(BGPlayerView.prototype, "cardsIsOpen", {
        get: function() {
          for (var i = 0; i < this.cardViews.length; i++) if (!this.cardViews[i].cardIsOpen) return false;
          return true;
        },
        enumerable: true,
        configurable: true
      });
      BGPlayerView.prototype.flipCards = function(target, callBack, active) {
        if (active) {
          this._animatedCardCount = 0;
          this._targetForCallBack = target;
          this._callBack = callBack;
          if (this._cards.length > 0) for (var i = 0; i < this._cards.length; i++) this.cardViews[i].flipCard(this, this.cardReturned); else this._callBack.call(this._targetForCallBack, this._resolveForPromice);
        } else if (this._cards.length > 0) {
          for (var i = 0; i < this._cards.length; i++) this.cardViews[i].flipCardsWithoutAnimaton();
          target && callBack.call(target);
        } else callBack.call(target);
      };
      BGPlayerView.prototype.finishFlipping = function() {
        for (var i = 0; i < this.cardViews.length; i++) {
          this.cardViews[i].finishAnimations();
          this.cardViews[i].flipCardsWithoutAnimaton();
        }
      };
      BGPlayerView.prototype.finishCardAnimations = function() {
        for (var i = 0; i < this.cardViews.length; i++) this.cardViews[i].finishAnimations();
      };
      BGPlayerView.prototype.foldCards = function() {
        this._cards = [];
        for (var i = 0; i < this.cardViews.length; i++) this.cardViews[i].deactive();
      };
      Object.defineProperty(BGPlayerView.prototype, "dealed", {
        get: function() {
          return this._cards.length;
        },
        enumerable: true,
        configurable: true
      });
      BGPlayerView.prototype.reset = function() {
        this.playerTimer.stopTimer();
        this.chipView.stopAnimations();
        this.showPlayerAction();
        for (var i = 0; i < this.cardViews.length; i++) {
          this.cardViews[i].stopAnimations();
          this.cardViews[i].deactive();
        }
        this._cards = [];
      };
      BGPlayerView.prototype.showBet = function(value) {
        this.playerBetBack.node.active = true;
        this.playerBetLabel.node.active = true;
        this.playerBetLabel.string = value.toString();
        this._currentBet = value;
      };
      BGPlayerView.prototype.hideBet = function() {
        this.playerBetBack.node.active = false;
        this.playerBetLabel.node.active = false;
      };
      BGPlayerView.prototype.updateBallance = function(current) {
        this.playerBalanceLabel.string = current.toString();
      };
      BGPlayerView.prototype.collectBets = function() {
        this.playerBetBack.node.active = false;
        this.playerBetLabel.node.active = false;
        this.playerBetLabel.string = "0";
        this.chipView.add(this._currentBet);
        this.chipView.moveToOther(this._currentBet, this.bank, TableGameChipHolder_1.ChipFadeType.IN);
        this._currentBet = 0;
      };
      BGPlayerView.prototype.highLight = function(target, callBack, resolve) {
        this._animatedCardCount = 0;
        this._targetForCallBack = target;
        this._callBack = callBack;
        this._resolveForPromice = resolve;
        this.playerRegularSkin.node.active = false;
        this.playerGoldSkin.node.active = true;
        for (var i = 0; i < this.cardViews.length; i++) this.cardViews[i].setHighLite(this, this.cardReturned);
      };
      BGPlayerView.prototype.darkCards = function() {
        for (var i = 0; i < this.cardViews.length; i++) this.cardViews[i].setDarkness();
      };
      BGPlayerView.prototype.cardReturned = function() {
        this._animatedCardCount++;
        if (this._animatedCardCount >= this._cards.length && this._targetForCallBack) {
          if (this._inited) {
            this.playerRegularSkin.node.active = true;
            this.playerGoldSkin.node.active = false;
          }
          this._callBack.call(this._targetForCallBack, this._resolveForPromice);
        }
      };
      BGPlayerView.prototype.redraw = function() {
        if (this._currentBet > 0) {
          this.playerBetBack.node.active = true;
          this.playerBetLabel.node.active = true;
          this.playerBetLabel.string = this._currentBet.toString();
        } else {
          this.playerBetBack.node.active = false;
          this.playerBetLabel.node.active = false;
        }
        for (var i = 0; i < this.cardViews.length; i++) this.cardViews[i].drawCard();
        this.chipView.reset();
      };
      BGPlayerView.prototype.getCardIndex = function(card) {
        if (-1 === card.rate) return -1;
        return 13 * card.suit + card.rate;
      };
      Object.defineProperty(BGPlayerView.prototype, "dealer", {
        set: function(value) {
          this.dealerSprite.node.active = value;
        },
        enumerable: true,
        configurable: true
      });
      BGPlayerView.prototype.showPlayerAction = function(type, result) {
        void 0 === type && (type = null);
        void 0 === result && (result = false);
        if (this.playerBubbleLabel) {
          if (null == type) {
            this.playerBubbleLabel.node.active = false;
            this.playerBubbleBack.node.active = false;
            return;
          }
          this.playerBubbleLabel.node.active = true;
          this.playerBubbleBack.node.active = true;
          switch (type) {
           case BGAction_1.BGActionType.MAKE_BET:
            this.playerBubbleLabel.string = BGActionTexts_1.BGActionText.PLAYER_BET;
            break;

           case BGAction_1.BGActionType.BLIND:
            this.playerBubbleLabel.string = BGActionTexts_1.BGActionText.PLAYER_BLIND;
            break;

           case BGAction_1.BGActionType.FOLD:
            this.playerBubbleLabel.string = BGActionTexts_1.BGActionText.PLAYER_FOLD;
            break;

           case BGAction_1.BGActionType.SEE:
            this.playerBubbleLabel.string = BGActionTexts_1.BGActionText.PLAYER_SEE;
            break;

           case BGAction_1.BGActionType.MATCH:
            this.playerBubbleLabel.string = result ? BGActionTexts_1.BGActionText.PLAYER_MATCH_WIN : BGActionTexts_1.BGActionText.PLAYER_MATCH_LOOSE;
          }
        }
      };
      __decorate([ property(cc.Sprite) ], BGPlayerView.prototype, "playerRegularSkin", void 0);
      __decorate([ property(cc.Sprite) ], BGPlayerView.prototype, "playerGoldSkin", void 0);
      __decorate([ property(cc.Sprite) ], BGPlayerView.prototype, "dealerSprite", void 0);
      __decorate([ property([ BGCardView_1.BGCardView ]) ], BGPlayerView.prototype, "cardViews", void 0);
      __decorate([ property(cc.Label) ], BGPlayerView.prototype, "playerNameLabel", void 0);
      __decorate([ property(cc.Label) ], BGPlayerView.prototype, "playerBalanceLabel", void 0);
      __decorate([ property(cc.Label) ], BGPlayerView.prototype, "playerBetLabel", void 0);
      __decorate([ property(cc.Sprite) ], BGPlayerView.prototype, "playerBetBack", void 0);
      __decorate([ property(BGPlayerTimerView_1.BGPlayerTimerView) ], BGPlayerView.prototype, "playerTimer", void 0);
      __decorate([ property(TableGameChipHolder_1.TableGameChipHolder) ], BGPlayerView.prototype, "chipView", void 0);
      __decorate([ property(TableGameChipHolder_1.TableGameChipHolder) ], BGPlayerView.prototype, "bank", void 0);
      __decorate([ property(cc.Label) ], BGPlayerView.prototype, "playerBubbleLabel", void 0);
      __decorate([ property(cc.Sprite) ], BGPlayerView.prototype, "playerBubbleBack", void 0);
      __decorate([ property(PrefabLoader_1.default) ], BGPlayerView.prototype, "playerAvatar", void 0);
      __decorate([ property(cc.Node) ], BGPlayerView.prototype, "playerDarkness", void 0);
      BGPlayerView = __decorate([ ccclass ], BGPlayerView);
      return BGPlayerView;
    }(cc.Component);
    exports.BGPlayerView = BGPlayerView;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "../../../../main/Script/component/BaseAvatarComponent": "BaseAvatarComponent",
    "../../../../main/Script/component/PrefabLoader": "PrefabLoader",
    "../../../../main/Script/component/TableGameChipHolder": "TableGameChipHolder",
    "../BGConfig": "BGConfig",
    "../core/BGAction": "BGAction",
    "../data/BGActionTexts": "BGActionTexts",
    "./BGCardView": "BGCardView",
    "./BGPlayerTimerView": "BGPlayerTimerView"
  } ],
  BGServerLogicAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8924flAXe9I3Y9Cn4HXWHFR", "BGServerLogicAdapter");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerCards = require("../../../../common/core/cards/Card");
    var Card_1 = require("../../../../common/core/cards/Card");
    var selector_1 = require("../../../../common/core/selector");
    var ServerLogicAdapterBase_1 = require("../../../../common/server/ServerLogicAdapterBase");
    var BGCard_1 = require("../ui/BGCard");
    var BGAction_1 = require("./BGAction");
    var Config_1 = require("../../../../common/config/Config");
    var BGServerLogicAdapter = function(_super) {
      __extends(BGServerLogicAdapter, _super);
      function BGServerLogicAdapter(serverConnector, tableId) {
        var _this = _super.call(this, serverConnector, Config_1.GameCode.BRAG, tableId) || this;
        _this._places = {};
        _this._currentPlayerPlace = void 0;
        _this._lastWaitingBetMessage = void 0;
        return _this;
      }
      BGServerLogicAdapter.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.start.call(this) ];

             case 1:
              _a.sent();
              return [ 4, this.dispatchAction({
                type: BGAction_1.BGActionType.TABLE_CONFIG_UPDATE,
                data: {
                  bets: this.tableConfig.bet.values
                }
              }) ];

             case 2:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      BGServerLogicAdapter.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerViewActionHandler(BGAction_1.BGActionType.MAKE_BET, function(action) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.MAKE_BET,
                  data: __assign({}, action.data, {
                    newPlayerBalance: _this._currentPlayerPlace.player.balance - action.data.bet
                  })
                });
                _this.sendMessage(OpCode.MAKE_BET, {
                  placeId: action.data.placeId,
                  bet: action.data.bet,
                  showCards: _this._currentPlayerPlace.cardsShowed
                });
              });
              this.registerViewActionHandler(BGAction_1.BGActionType.MATCH, function(action) {
                _this.logger.log("Send match to server");
                _this.sendMessage(OpCode.MATH, {
                  placeId: action.data.placeId,
                  bet: action.data.bet,
                  placeIdToMatch: action.data.placeIdToMatch,
                  playerBalance: action.data.newPlayerBalance
                });
              });
              this.registerViewActionHandler(BGAction_1.BGActionType.FOLD, function(action) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.FOLD,
                  data: action.data
                });
                _this.sendMessage(OpCode.FOLD, {
                  placeId: action.data.placeId
                });
              });
              this.registerViewActionHandler(BGAction_1.BGActionType.BLIND, function(action) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.BLIND,
                  data: __assign({}, action.data, {
                    newPlayerBalance: _this._currentPlayerPlace.player.balance - action.data.bet
                  })
                });
                _this.sendMessage(OpCode.BLIND, {
                  placeId: action.data.placeId,
                  bet: action.data.bet,
                  playerBalance: action.data.newPlayerBalance
                });
              });
              this.registerViewActionHandler(BGAction_1.BGActionType.SEE, function(action) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.SEE,
                  data: __assign({}, action.data, {
                    newPlayerBalance: _this._currentPlayerPlace.player.balance - action.data.bet
                  })
                });
                _this.sendMessage(OpCode.SEE, {
                  placeId: action.data.placeId,
                  bet: action.data.bet,
                  playerBalance: action.data.newPlayerBalance
                });
              });
              this.registerViewActionHandler(BGAction_1.BGActionType.OPEN_CARDS, function(action) {
                _this._currentPlayerPlace.cardsShowed = true;
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.SHOW_CARDS,
                  data: {
                    placeId: _this._currentPlayerPlace.placeId,
                    cards: _this._currentPlayerPlace.placeCards.map(function(value) {
                      var serverCard = new ServerCards.Card(value);
                      return {
                        suit: selector_1.default([ [ Card_1.CardSuit.CLUBS, function() {
                          return BGCard_1.Suit.clubs;
                        } ], [ Card_1.CardSuit.DIAMONDS, function() {
                          return BGCard_1.Suit.diamonds;
                        } ], [ Card_1.CardSuit.HEARTS, function() {
                          return BGCard_1.Suit.hearts;
                        } ], [ Card_1.CardSuit.SPADES, function() {
                          return BGCard_1.Suit.spades;
                        } ] ])(serverCard.suit),
                        rate: serverCard.level
                      };
                    })
                  }
                });
                _this._currentPlayerPlace.cardsShowed = true;
                if (null != _this._lastWaitingBetMessage) {
                  if (_this._lastWaitingBetMessage.betConfig.length > 1) {
                    _this._lastWaitingBetMessage.betConfig.splice(0, 1);
                    _this._lastWaitingBetMessage.canSee.splice(0, 1);
                  }
                  _this._lastWaitingBetMessage.waitShowCards = false;
                  _this._lastWaitingBetMessage.canBlind = false;
                  _this.logger.info("Try to fake resolve: " + _this._lastWaitingBetMessage);
                  _this.matchDataMessageHandler(OpCode.WAITING_BET, _this._lastWaitingBetMessage);
                  _this._lastWaitingBetMessage = void 0;
                }
              });
              this.registerServerMessageHandler(OpCode.UPDATE_PLACES, function(data) {
                var places = data.places;
                var currentPlayerId = _this.getCurrentPlayerInfo().id;
                places = places.sort(function(a, b) {
                  if (null != a.player && a.player.id === currentPlayerId) return -1;
                  if (null != b.player && b.player.id === currentPlayerId) return 1;
                  return a.placeId - b.placeId;
                });
                null != places[0].player && places[0].player.id === currentPlayerId && places.forEach(function(placeInfo) {
                  var currentPlaceInfo = placeInfo.placeId in _this._places ? _this._places[placeInfo.placeId] : {
                    placeId: placeInfo.placeId,
                    state: PlaceState.EMPTY,
                    active: false,
                    currentBet: 0,
                    cardsShowed: false,
                    placeCards: void 0
                  };
                  _this._places[currentPlaceInfo.placeId] = currentPlaceInfo;
                  if (currentPlaceInfo.state !== PlaceState.EMPTY && placeInfo.state === PlaceState.EMPTY) {
                    currentPlaceInfo.player = null;
                    currentPlaceInfo.state = PlaceState.EMPTY;
                    _this.dispatchAction({
                      type: BGAction_1.BGActionType.DROP_PLAYER,
                      data: {
                        placeId: currentPlaceInfo.placeId
                      }
                    });
                  } else if (currentPlaceInfo.state === PlaceState.EMPTY && placeInfo.state !== PlaceState.EMPTY) {
                    currentPlaceInfo.player = placeInfo.player;
                    currentPlaceInfo.state = placeInfo.state;
                    currentPlaceInfo.player.id === currentPlayerId && (_this._currentPlayerPlace = currentPlaceInfo);
                    _this.dispatchAction({
                      type: BGAction_1.BGActionType.REGISTER_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId,
                        playerInfo: currentPlaceInfo.player
                      }
                    });
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.PREPARE_FOR_ROUND, function(data) {
                data.places.forEach(function(value) {
                  _this._places[value.placeId].player.balance = value.player.balance;
                  _this._places[value.placeId].cardsShowed = false;
                  value.player.id === _this.getCurrentPlayerInfo().id && _this.changeCurrentPlayerBalance(value.player.balance);
                });
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.PREPARE_FOR_ROUND,
                  data: {
                    placesId: data.places.map(function(value) {
                      return value.placeId;
                    }),
                    ante: data.ante,
                    dealerPlaceId: data.dealerPlaceId
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.PREPARE_FOR_ROUND, function(data) {
                data.places.forEach(function(value) {
                  _this._places[value.placeId].player.balance = value.player.balance;
                  _this._places[value.placeId].cardsShowed = false;
                  value.player.id === _this.getCurrentPlayerInfo().id && _this.changeCurrentPlayerBalance(value.player.balance);
                });
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.PREPARE_FOR_ROUND,
                  data: {
                    placesId: data.places.map(function(value) {
                      return value.placeId;
                    }),
                    ante: data.ante,
                    dealerPlaceId: data.dealerPlaceId
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.WAITING_BET, function(data) {
                data.waitShowCards && _this._currentPlayerPlace.placeId === data.placeId && (_this._lastWaitingBetMessage = data);
                null == data.processEnd && (data.processEnd = _this.currentTime() + data.time);
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.WAITING_BET,
                  data: {
                    placeId: data.placeId,
                    betConfig: {
                      min: data.betConfig[0][0],
                      step: data.betConfig[0][1],
                      max: data.betConfig[0][2],
                      see: data.betConfig[0][3]
                    },
                    aviableActions: {
                      fold: true,
                      blind: data.canBlind,
                      bet: !(data.canBlind && data.waitShowCards),
                      show: data.waitShowCards,
                      see: data.canSee[0],
                      match: data.canMatch
                    },
                    processEnd: data.processEnd
                  }
                });
              });
              this.registerServerMessageHandler([ OpCode.MAKE_BET, OpCode.BLIND, OpCode.SEE ], function(opCode, data) {
                var placeInfo = _this._places[data.placeId];
                placeInfo.player.balance = data.playerBalance;
                placeInfo.player.id === _this.getCurrentPlayerInfo().id ? _this.changeCurrentPlayerBalance(data.playerBalance) : _this.dispatchAction({
                  type: selector_1.default([ [ OpCode.MAKE_BET, function() {
                    return BGAction_1.BGActionType.MAKE_BET;
                  } ], [ OpCode.BLIND, function() {
                    return BGAction_1.BGActionType.BLIND;
                  } ], [ OpCode.SEE, function() {
                    return BGAction_1.BGActionType.SEE;
                  } ] ])(opCode),
                  data: {
                    placeId: data.placeId,
                    newPlayerBalance: data.playerBalance,
                    bet: data.bet
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.FOLD, function(data) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.FOLD,
                  data: {
                    placeId: data.placeId
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.MATH, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  var placeInfo;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this.logger.info("Start match");
                      placeInfo = this._places[data.placeId];
                      placeInfo.player.balance = data.playerBalance;
                      placeInfo.player.id === this.getCurrentPlayerInfo().id && this.changeCurrentPlayerBalance(data.playerBalance);
                      return [ 4, this.dispatchAction({
                        type: BGAction_1.BGActionType.MATCH,
                        data: {
                          placeId: data.placeId,
                          bet: data.bet,
                          placeIdToMatch: data.placeIdToMatch,
                          newPlayerBalance: data.playerBalance,
                          winnerPlaceId: data.matchWinner
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      this.logger.info("Complete match");
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.COLLECT_BETS, function(data) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.COLLECT_BETS,
                  data: {
                    bankSize: data.bankSize
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.DEAL_CARDS, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this.logger.info("Start deal cards");
                      this._currentPlayerPlace.placeCards = data.cards;
                      return [ 4, this.dispatchAction({
                        type: BGAction_1.BGActionType.DEAL_CARDS,
                        data: {}
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      this.logger.info("Complete deal cards");
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.ROUND_COMPLETE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  var _this = this;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this.logger.info("Round complete");
                      data.playersCardsAndReward.forEach(function(resultValue) {
                        var totalReward = resultValue.rewards.reduce(function(result, item, index) {
                          return result + item * data.bankSize[index];
                        }, 0);
                        if (totalReward > 0) {
                          var placeInfo = _this._places[resultValue.placeId];
                          placeInfo.player.balance += totalReward;
                          placeInfo.player.id === _this.getCurrentPlayerInfo().id && _this.changeCurrentPlayerBalance(placeInfo.player.balance);
                        }
                      });
                      return [ 4, this.dispatchAction({
                        type: BGAction_1.BGActionType.REWARD_WINNER,
                        data: {
                          bankSize: data.bankSize,
                          playersCardsAndReward: data.playersCardsAndReward.map(function(value) {
                            return {
                              placeId: value.placeId,
                              cards: (value.cards || []).map(function(value) {
                                var serverCard = new ServerCards.Card(value);
                                return {
                                  suit: selector_1.default([ [ Card_1.CardSuit.CLUBS, function() {
                                    return BGCard_1.Suit.clubs;
                                  } ], [ Card_1.CardSuit.DIAMONDS, function() {
                                    return BGCard_1.Suit.diamonds;
                                  } ], [ Card_1.CardSuit.HEARTS, function() {
                                    return BGCard_1.Suit.hearts;
                                  } ], [ Card_1.CardSuit.SPADES, function() {
                                    return BGCard_1.Suit.spades;
                                  } ] ])(serverCard.suit),
                                  rate: serverCard.level
                                };
                              }),
                              rewards: value.rewards.reduce(function(result, rewardValue, index) {
                                if (rewardValue > 0) return result.concat([ index ]);
                                return result;
                              }, [])
                            };
                          })
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      this.logger.info("Complete rewards");
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_ROUND_STATE, function(data) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.UPDATE_TABLE_DATA,
                  data: {
                    bankSize: data.bankSize,
                    dealerPlaceId: data.dealerPlaceId,
                    placesState: data.placesState.map(function(value) {
                      return __assign({}, value, {
                        processEnd: null != value.processEnd ? _this.currentTime() + value.processEnd : null
                      });
                    })
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.GAME_OVER, function(data) {
                _this.dispatchAction({
                  type: BGAction_1.BGActionType.GAME_OVER,
                  data: {}
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      return BGServerLogicAdapter;
    }(ServerLogicAdapterBase_1.ServerLogicAdapterBase);
    exports.BGServerLogicAdapter = BGServerLogicAdapter;
    var OpCode;
    (function(OpCode) {
      OpCode[OpCode["UPDATE_PLACES"] = 1] = "UPDATE_PLACES";
      OpCode[OpCode["PREPARE_FOR_ROUND"] = 2] = "PREPARE_FOR_ROUND";
      OpCode[OpCode["ROUND_START"] = 3] = "ROUND_START";
      OpCode[OpCode["ROUND_COMPLETE"] = 4] = "ROUND_COMPLETE";
      OpCode[OpCode["UPDATE_ROUND_STATE"] = 5] = "UPDATE_ROUND_STATE";
      OpCode[OpCode["GAME_OVER"] = 6] = "GAME_OVER";
      OpCode[OpCode["READY_FOR_NEXT_ACTION"] = 7] = "READY_FOR_NEXT_ACTION";
      OpCode[OpCode["WAITING_BET"] = 11] = "WAITING_BET";
      OpCode[OpCode["MAKE_BET"] = 12] = "MAKE_BET";
      OpCode[OpCode["FOLD"] = 13] = "FOLD";
      OpCode[OpCode["BLIND"] = 14] = "BLIND";
      OpCode[OpCode["SEE"] = 15] = "SEE";
      OpCode[OpCode["COLLECT_BETS"] = 16] = "COLLECT_BETS";
      OpCode[OpCode["DEAL_CARDS"] = 17] = "DEAL_CARDS";
      OpCode[OpCode["MATH"] = 18] = "MATH";
    })(OpCode = exports.OpCode || (exports.OpCode = {}));
    var Step;
    (function(Step) {
      Step[Step["WAITING_PLAYERS"] = 1] = "WAITING_PLAYERS";
      Step[Step["GAME_STARTING"] = 2] = "GAME_STARTING";
      Step[Step["WAITING_BET"] = 3] = "WAITING_BET";
      Step[Step["CARDS"] = 4] = "CARDS";
      Step[Step["GAME_END"] = 5] = "GAME_END";
    })(Step || (Step = {}));
    var PlaceState;
    (function(PlaceState) {
      PlaceState[PlaceState["EMPTY"] = 1] = "EMPTY";
      PlaceState[PlaceState["WAITING"] = 2] = "WAITING";
      PlaceState[PlaceState["WAITING_BET"] = 3] = "WAITING_BET";
      PlaceState[PlaceState["BET"] = 4] = "BET";
      PlaceState[PlaceState["FOLD"] = 5] = "FOLD";
    })(PlaceState || (PlaceState = {}));
    var ServerPlaceState;
    (function(ServerPlaceState) {
      ServerPlaceState[ServerPlaceState["EMPTY"] = 1] = "EMPTY";
      ServerPlaceState[ServerPlaceState["WAITING"] = 2] = "WAITING";
      ServerPlaceState[ServerPlaceState["WAITING_BET"] = 3] = "WAITING_BET";
      ServerPlaceState[ServerPlaceState["BET"] = 4] = "BET";
      ServerPlaceState[ServerPlaceState["FOLD"] = 5] = "FOLD";
    })(ServerPlaceState || (ServerPlaceState = {}));
    cc._RF.pop();
  }, {
    "../../../../common/config/Config": "Config",
    "../../../../common/core/cards/Card": "Card",
    "../../../../common/core/selector": "selector",
    "../../../../common/server/ServerLogicAdapterBase": "ServerLogicAdapterBase",
    "../ui/BGCard": "BGCard",
    "./BGAction": "BGAction"
  } ],
  BGSpriteFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "410ebbw2u1OyZo2YeOPa9rG", "BGSpriteFactory");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGConfig_1 = require("../BGConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGSpriteFactory = function(_super) {
      __extends(BGSpriteFactory, _super);
      function BGSpriteFactory() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chipFrames = [];
        _this.cards = [];
        _this.chipPrefab = null;
        return _this;
      }
      BGSpriteFactory.prototype.start = function() {};
      BGSpriteFactory.prototype.getChipByValue = function(value) {
        var index = BGConfig_1.BGConfig.tableConfig.bets.indexOf(value) - BGConfig_1.BGConfig.tableConfig.bets.indexOf(BGConfig_1.BGConfig.tableConfig.minTableBet);
        if (index < 0) return null;
        var result = cc.instantiate(this.chipPrefab);
        var sprite = result.getComponent(cc.Sprite);
        sprite.spriteFrame = this.chipFrames[index];
        return result;
      };
      BGSpriteFactory.prototype.getCard = function(value) {
        if (value > 0) return this.cards[value];
        return this.cards[0];
      };
      __decorate([ property([ cc.SpriteFrame ]) ], BGSpriteFactory.prototype, "chipFrames", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], BGSpriteFactory.prototype, "cards", void 0);
      __decorate([ property(cc.Prefab) ], BGSpriteFactory.prototype, "chipPrefab", void 0);
      BGSpriteFactory = __decorate([ ccclass ], BGSpriteFactory);
      return BGSpriteFactory;
    }(cc.Component);
    exports.BGSpriteFactory = BGSpriteFactory;
    cc._RF.pop();
  }, {
    "../BGConfig": "BGConfig"
  } ],
  BGTableBetMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40136qaQV9BP6l4lU3V2OOj", "BGTableBetMenu");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SelectTableSceneBase_1 = require("../../../main/Script/scene/base/SelectTableSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGTableBetMenu = function(_super) {
      __extends(BGTableBetMenu, _super);
      function BGTableBetMenu() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemsPrefab = null;
        return _this;
      }
      BGTableBetMenu.prototype.drawItems = function(gameConfig) {
        var config = gameConfig.tables;
        var verticalNode = this.createLayotVertical();
        this.node.getChildByName("back").addChild(verticalNode);
        var maxLength = config.length;
        if (null != this.itemsPrefab) {
          for (var a = 0; a < maxLength; a += 2) {
            var node = this.createLayotHorizontal();
            verticalNode.addChild(node);
            var max = Math.min(a + 2, maxLength);
            for (var i = a; i < max; i++) {
              var betViewNode = cc.instantiate(this.itemsPrefab);
              node.addChild(betViewNode);
              node.height = betViewNode.height;
              var betView = betViewNode.getComponent(SelectTableSceneBase_1.BetItem);
              betView.setupIcon(i);
              betView.onSelected(this.onChooseItem, this);
              this.addItem(betView);
            }
          }
          this.updateButtons();
        }
      };
      BGTableBetMenu.prototype.componentReceivedProps = function(oldProps) {
        this.updateButtons();
      };
      BGTableBetMenu.prototype.updateButtons = function() {
        var _this = this;
        this._items.length > 0 && this._items.forEach(function(item) {
          var result = item.config.ballance.limits.minToJoin < _this.props.playerBalance;
          item.button.enabled = result;
          item.button.interactable = result;
          item.button.node.getComponent(cc.Sprite).spriteFrame = result ? item.button.normalSprite : item.button.disabledSprite;
        });
      };
      BGTableBetMenu.prototype.createLayotHorizontal = function() {
        var node = new cc.Node();
        node.addComponent(cc.Layout);
        var layout = node.getComponent(cc.Layout);
        layout.type = cc.Layout.Type.HORIZONTAL;
        layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
        layout.paddingLeft = -9;
        layout.paddingRight = 0;
        layout.spacingX = 15;
        layout.horizontalDirection = cc.Layout.HorizontalDirection.LEFT_TO_RIGHT;
        return node;
      };
      BGTableBetMenu.prototype.createLayotVertical = function() {
        var node = new cc.Node();
        node.addComponent(cc.Layout);
        var layout = node.getComponent(cc.Layout);
        layout.type = cc.Layout.Type.VERTICAL;
        layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
        layout.paddingTop = 0;
        layout.paddingBottom = 0;
        layout.spacingY = 0;
        layout.verticalDirection = cc.Layout.VerticalDirection.TOP_TO_BOTTOM;
        return node;
      };
      __decorate([ property(cc.Prefab) ], BGTableBetMenu.prototype, "itemsPrefab", void 0);
      BGTableBetMenu = __decorate([ ccclass ], BGTableBetMenu);
      return BGTableBetMenu;
    }(SelectTableSceneBase_1.default);
    exports.BGTableBetMenu = BGTableBetMenu;
    cc._RF.pop();
  }, {
    "../../../main/Script/scene/base/SelectTableSceneBase": "SelectTableSceneBase"
  } ],
  BGTableConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77f21f1V5tPrZ9s9tKWWeUG", "BGTableConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BGTableConfig = function(_super) {
      __extends(BGTableConfig, _super);
      function BGTableConfig() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bets = [ 1, 2, 5, 10, 25, 50, 100, 250, 500, 1e3, 2e3, 5e3, 1e4 ];
        _this.cardsPerPlayer = 3;
        return _this;
      }
      Object.defineProperty(BGTableConfig.prototype, "minTableBet", {
        get: function() {
          return this.bets[0];
        },
        enumerable: true,
        configurable: true
      });
      return BGTableConfig;
    }(cc.Component);
    exports.BGTableConfig = BGTableConfig;
    cc._RF.pop();
  }, {} ],
  BGTopPlayerMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "163ba7UC7JHFaAntiBNhwwn", "BGTopPlayerMenu");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WindowsManager_1 = require("../../../../../common/core/windows/WindowsManager");
    var WindowsTypes_1 = require("../../../../../common/core/windows/WindowsTypes");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BGTopPlayerMenu = function(_super) {
      __extends(BGTopPlayerMenu, _super);
      function BGTopPlayerMenu() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btnBack = null;
        _this.btnInfo = null;
        _this.btnSound = null;
        _this.windowHolder = null;
        _this.infoWindowPrefab = null;
        return _this;
      }
      BGTopPlayerMenu.prototype.start = function() {
        this._windowsManager = new WindowsManager_1.default();
        this._windowsManager.init({
          parent: this.windowHolder
        }).initAppearanceConfig(__assign({}, this._windowsManager.fillWindowParams("").appearanceConfig, {
          fade: true,
          directionShow: WindowsTypes_1.WindowShowDirection.DOWN,
          directionHide: WindowsTypes_1.WindowShowDirection.UP,
          scale: false
        }));
      };
      BGTopPlayerMenu.prototype.onBackClick = function() {
        this._backCallBack && this._backCallBack();
      };
      BGTopPlayerMenu.prototype.onInfoClick = function() {
        this._windowsManager.show(this.infoWindowPrefab, null);
      };
      BGTopPlayerMenu.prototype.onSoundClick = function() {};
      BGTopPlayerMenu.prototype.setupBackCallBack = function(value) {
        this._backCallBack = value;
      };
      __decorate([ property(cc.Button) ], BGTopPlayerMenu.prototype, "btnBack", void 0);
      __decorate([ property(cc.Button) ], BGTopPlayerMenu.prototype, "btnInfo", void 0);
      __decorate([ property(cc.Button) ], BGTopPlayerMenu.prototype, "btnSound", void 0);
      __decorate([ property(cc.Node) ], BGTopPlayerMenu.prototype, "windowHolder", void 0);
      __decorate([ property(cc.Prefab) ], BGTopPlayerMenu.prototype, "infoWindowPrefab", void 0);
      BGTopPlayerMenu = __decorate([ ccclass ], BGTopPlayerMenu);
      return BGTopPlayerMenu;
    }(cc.Component);
    exports.BGTopPlayerMenu = BGTopPlayerMenu;
    cc._RF.pop();
  }, {
    "../../../../../common/core/windows/WindowsManager": "WindowsManager",
    "../../../../../common/core/windows/WindowsTypes": "WindowsTypes"
  } ],
  BGViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6bda9veTtdO07b1u7kUg3W6", "BGViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ViewAdapterBase_1 = require("../../../../common/core/ViewAdapterBase");
    var BGViewAdapterBase = function(_super) {
      __extends(BGViewAdapterBase, _super);
      function BGViewAdapterBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return BGViewAdapterBase;
    }(ViewAdapterBase_1.ViewAdapterBase);
    exports.BGViewAdapterBase = BGViewAdapterBase;
    cc._RF.pop();
  }, {
    "../../../../common/core/ViewAdapterBase": "ViewAdapterBase"
  } ],
  BKAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "901dfgClSpNApBxjK9ubeaX", "BKAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BKActionType;
    (function(BKActionType) {
      BKActionType[BKActionType["PREPARE_FOR_ROUND"] = 0] = "PREPARE_FOR_ROUND";
      BKActionType[BKActionType["READY_FOR_NEXT_ACTION"] = 1] = "READY_FOR_NEXT_ACTION";
      BKActionType[BKActionType["ROUND_COMPLETE"] = 2] = "ROUND_COMPLETE";
      BKActionType[BKActionType["REGISTER_PLACE"] = 3] = "REGISTER_PLACE";
      BKActionType[BKActionType["DROP_PLACE"] = 4] = "DROP_PLACE";
      BKActionType[BKActionType["MAKE_BET"] = 5] = "MAKE_BET";
      BKActionType[BKActionType["GAME_OVER"] = 6] = "GAME_OVER";
      BKActionType[BKActionType["PLACES_UPDATED"] = 7] = "PLACES_UPDATED";
      BKActionType[BKActionType["BETS_MAKED"] = 8] = "BETS_MAKED";
      BKActionType[BKActionType["ROUND_STARTED"] = 9] = "ROUND_STARTED";
      BKActionType[BKActionType["ROUND_UPDATED"] = 10] = "ROUND_UPDATED";
      BKActionType[BKActionType["ROUND_SPIN"] = 11] = "ROUND_SPIN";
    })(BKActionType = exports.BKActionType || (exports.BKActionType = {}));
    cc._RF.pop();
  }, {} ],
  BKGameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "372deJIzxFFsI07bxhbop9A", "BKGameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCore_1 = require("../../../../common/core/GameCore");
    var BKCore = function(_super) {
      __extends(BKCore, _super);
      function BKCore() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BKCore.prototype.init = function(logicAdapter, viewAdapter) {
        _super.prototype.init.call(this, logicAdapter, viewAdapter);
      };
      return BKCore;
    }(GameCore_1.GameCoreBase);
    exports.BKCore = BKCore;
    cc._RF.pop();
  }, {
    "../../../../common/core/GameCore": "GameCore"
  } ],
  BKGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78206J4lBpDbppFkX7K0IUq", "BKGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var store_1 = require("../../../common/store");
    var WindowsManager_1 = require("../../../common/core/windows/WindowsManager");
    var WindowsTypes_1 = require("../../../common/core/windows/WindowsTypes");
    var BKViewAdapterBase_1 = require("./core/BKViewAdapterBase");
    var BKGameCore_1 = require("./core/BKGameCore");
    var BKServerLogicAdapter_1 = require("./core/BKServerLogicAdapter");
    var ServerController_1 = require("../../../common/server/ServerController");
    var BKAction_1 = require("./core/BKAction");
    var GameController_1 = require("./GameController");
    var SoundManager_1 = require("../../../common/managers/sound/SoundManager");
    var BKSounds_1 = require("./BKSounds");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BKGame = function(_super) {
      __extends(BKGame, _super);
      function BKGame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._gameController = null;
        _this.onActivated = function() {};
        _this.onDeactivated = function() {};
        return _this;
      }
      BKGame_1 = BKGame;
      BKGame.prototype.onLoad = function() {
        BKGame_1.gameCore.init(new BKServerLogicAdapter_1.BKServerLogicAdapter(ServerController_1.default.instance.connector, store_1.default.getState().sceneState.current.params.tableId || 1), this);
        SoundManager_1.SoundManager.instance.setup(BKSounds_1.Sounds.Config);
      };
      BKGame.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              BKGame_1.gameCore.init(new BKServerLogicAdapter_1.BKServerLogicAdapter(ServerController_1.default.instance.connector, store_1.default.getState().sceneState.current.params.tableId || 1), this);
              cc.game.on(cc.game.EVENT_SHOW, this.onActivated, this);
              cc.game.on(cc.game.EVENT_HIDE, this.onDeactivated, this);
              this._windowsManager = new WindowsManager_1.default();
              this._windowsManager.init({
                parent: this.node
              }).initAppearanceConfig(__assign({}, this._windowsManager.fillWindowParams("").appearanceConfig, {
                fade: true,
                directionShow: WindowsTypes_1.WindowShowDirection.DOWN,
                directionHide: WindowsTypes_1.WindowShowDirection.UP,
                scale: false
              }));
              this._gameController = this.node.getComponent(GameController_1.default);
              return [ 4, BKGame_1.gameCore.start() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      BKGame.prototype.update = function(dt) {};
      BKGame.prototype.onDestroy = function() {
        cc.game.off(cc.game.EVENT_SHOW, this.onActivated, this);
        cc.game.off(cc.game.EVENT_HIDE, this.onDeactivated, this);
        this._windowsManager && this._windowsManager.dispose();
        BKGame_1.gameCore.destroy();
      };
      BKGame.prototype.prepare = function() {
        return __awaiter(this, void 0, void 0, function() {
          var player, playerView;
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerInputActionHandler(BKAction_1.BKActionType.REGISTER_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerData;
                  return __generator(this, function(_a) {
                    playerData = {
                      id: action.data.playerInfo.id,
                      balance: action.data.playerInfo.balance,
                      isGoldMember: action.data.playerInfo.isGoldMember,
                      name: action.data.playerInfo.name,
                      avatarId: action.data.playerInfo.avatarId,
                      gender: action.data.playerInfo.gender
                    };
                    playerData.id === BKGame_1.gameCore.getCurrentPlayerInfo().id && (this._gameController.currentPlayerData = action.data);
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.PREPARE_FOR_ROUND, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.ROUND_COMPLETE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.ROUND_SPIN, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.GAME_OVER, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.backButtonHandler();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.DROP_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.ROUND_STARTED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    SoundManager_1.SoundManager.instance.interfaceSound(BKSounds_1.Sounds.COUNT_DOWN);
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.ROUND_UPDATED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.PLACES_UPDATED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(BKAction_1.BKActionType.BETS_MAKED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      BKGame.prototype.backButtonHandler = function() {
        cc.find("Canvas").getComponent("GameScene").onBackButtonPress();
      };
      BKGame.prototype.chipPlaced = function(data) {
        this.dispatchAction({
          type: BKAction_1.BKActionType.MAKE_BET,
          data: {
            fieldCellId: data.fieldCellId,
            value: data.value
          }
        });
      };
      var BKGame_1;
      BKGame.gameCore = new BKGameCore_1.BKCore();
      BKGame = BKGame_1 = __decorate([ ccclass ], BKGame);
      return BKGame;
    }(BKViewAdapterBase_1.BKViewAdapterBase);
    exports.default = BKGame;
    cc._RF.pop();
  }, {
    "../../../common/core/windows/WindowsManager": "WindowsManager",
    "../../../common/core/windows/WindowsTypes": "WindowsTypes",
    "../../../common/managers/sound/SoundManager": "SoundManager",
    "../../../common/server/ServerController": "ServerController",
    "../../../common/store": "index",
    "./BKSounds": "BKSounds",
    "./GameController": "GameController",
    "./core/BKAction": "BKAction",
    "./core/BKGameCore": "BKGameCore",
    "./core/BKServerLogicAdapter": "BKServerLogicAdapter",
    "./core/BKViewAdapterBase": "BKViewAdapterBase"
  } ],
  BKServerLogicAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b49dAbkfFN8Lx4lIqDuSKu", "BKServerLogicAdapter");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerLogicAdapterBase_1 = require("../../../../common/server/ServerLogicAdapterBase");
    var Config_1 = require("../../../../common/config/Config");
    var BKAction_1 = require("./BKAction");
    var BKServerLogicAdapter = function(_super) {
      __extends(BKServerLogicAdapter, _super);
      function BKServerLogicAdapter(serverConnector, tableId) {
        var _this = _super.call(this, serverConnector, Config_1.GameCode.LOTTERY, tableId) || this;
        _this._places = {};
        _this._currentPlayerPlace = void 0;
        return _this;
      }
      BKServerLogicAdapter.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.start.call(this) ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      BKServerLogicAdapter.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerViewActionHandler(BKAction_1.BKActionType.MAKE_BET, function(data) {
                _this.sendMessage(OpCode.MAKE_BET, {
                  placeId: _this._currentPlayerPlace.placeId,
                  fieldCellId: data.data.fieldCellId,
                  value: data.data.value
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_PLACES, function(data) {
                var places = data.places;
                var currentPlayerId = _this.getCurrentPlayerInfo().id;
                places = _this._fakeUser(data);
                places = places.sort(function(a, b) {
                  if (null != a.player && a.player.id === currentPlayerId) return -1;
                  if (null != b.player && b.player.id === currentPlayerId) return 1;
                  return a.placeId - b.placeId;
                });
                _this.dispatchAction({
                  type: BKAction_1.BKActionType.PLACES_UPDATED,
                  data: {
                    places: places
                  }
                });
                null != places[0].player && places[0].player.id === currentPlayerId && places.forEach(function(placeInfo) {
                  var currentPlaceInfo = placeInfo.placeId in _this._places ? _this._places[placeInfo.placeId] : {
                    placeId: placeInfo.placeId
                  };
                  _this._places[currentPlaceInfo.placeId] = currentPlaceInfo;
                  if (null != currentPlaceInfo.player && null == placeInfo.player) {
                    currentPlaceInfo.player = null;
                    _this.dispatchAction({
                      type: BKAction_1.BKActionType.DROP_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId
                      }
                    });
                  } else if (null == currentPlaceInfo.player && null != placeInfo.player) {
                    currentPlaceInfo.player = placeInfo.player;
                    currentPlaceInfo.player.id === currentPlayerId && (_this._currentPlayerPlace = currentPlaceInfo);
                    _this.dispatchAction({
                      type: BKAction_1.BKActionType.REGISTER_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId,
                        playerInfo: currentPlaceInfo.player
                      }
                    });
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.PREPARE_FOR_ROUND, function(data) {});
              this.registerServerMessageHandler(OpCode.ROUND_START, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: BKAction_1.BKActionType.ROUND_STARTED,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.BETS_MAKED, function(serverData) {
                var bets = serverData.bets.filter(function(betValue) {
                  return betValue.placeId != _this._currentPlayerPlace.placeId;
                });
                _this.dispatchAction({
                  type: BKAction_1.BKActionType.BETS_MAKED,
                  data: {
                    bets: bets
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.MAKE_BET_ERROR, function(data) {});
              this.registerServerMessageHandler(OpCode.SPIN, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: BKAction_1.BKActionType.ROUND_SPIN,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.ROUND_COMPLETE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: BKAction_1.BKActionType.ROUND_COMPLETE,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_ROUND_STATE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: BKAction_1.BKActionType.ROUND_UPDATED,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.GAME_OVER, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: BKAction_1.BKActionType.GAME_OVER,
                      data: {}
                    });
                    return [ 2 ];
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      BKServerLogicAdapter.prototype._fakeUser = function(data) {
        var names = [ "Alex", "Petr", "Olya", "Yuri", "Taras" ];
        var places = [];
        for (var i = 0; i < 15; i++) {
          var place = {
            placeId: 0,
            player: {
              avatarId: "10",
              balance: 8130 - Math.floor(1e3 * Math.random()),
              gender: 1,
              id: this._generateID(),
              isGoldMember: true,
              level: Math.floor(9 * Math.random()) + 1,
              name: names[Math.floor(Math.random() * names.length)],
              lastWinLable: Math.floor(20 * Math.random())
            }
          };
          place.player.lastTotalBetLable = Math.floor(3e3 * Math.random());
          places.push(place);
        }
        places[0] = data.places[0];
        places[0].player.lastWinLable = Math.floor(20 * Math.random());
        places[0].player.lastTotalBetLable = Math.floor(3e3 * Math.random());
        return places;
      };
      BKServerLogicAdapter.prototype._generateID = function() {
        function s4() {
          return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
        }
        return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
      };
      return BKServerLogicAdapter;
    }(ServerLogicAdapterBase_1.ServerLogicAdapterBase);
    exports.BKServerLogicAdapter = BKServerLogicAdapter;
    var OpCode;
    (function(OpCode) {
      OpCode[OpCode["UPDATE_PLACES"] = 1] = "UPDATE_PLACES";
      OpCode[OpCode["PREPARE_FOR_ROUND"] = 2] = "PREPARE_FOR_ROUND";
      OpCode[OpCode["ROUND_START"] = 3] = "ROUND_START";
      OpCode[OpCode["ROUND_COMPLETE"] = 4] = "ROUND_COMPLETE";
      OpCode[OpCode["UPDATE_ROUND_STATE"] = 5] = "UPDATE_ROUND_STATE";
      OpCode[OpCode["GAME_OVER"] = 6] = "GAME_OVER";
      OpCode[OpCode["READY_FOR_NEXT_ACTION"] = 7] = "READY_FOR_NEXT_ACTION";
      OpCode[OpCode["MAKE_BET"] = 11] = "MAKE_BET";
      OpCode[OpCode["MAKE_BET_ERROR"] = 12] = "MAKE_BET_ERROR";
      OpCode[OpCode["BETS_MAKED"] = 13] = "BETS_MAKED";
      OpCode[OpCode["SPIN"] = 14] = "SPIN";
    })(OpCode = exports.OpCode || (exports.OpCode = {}));
    var MakeBetErrorType;
    (function(MakeBetErrorType) {
      MakeBetErrorType[MakeBetErrorType["INVALID_FIELD_CELL_ID"] = 1] = "INVALID_FIELD_CELL_ID";
      MakeBetErrorType[MakeBetErrorType["NOT_ENOUGHT_COINS"] = 2] = "NOT_ENOUGHT_COINS";
    })(MakeBetErrorType = exports.MakeBetErrorType || (exports.MakeBetErrorType = {}));
    cc._RF.pop();
  }, {
    "../../../../common/config/Config": "Config",
    "../../../../common/server/ServerLogicAdapterBase": "ServerLogicAdapterBase",
    "./BKAction": "BKAction"
  } ],
  BKSounds: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "178e7M5Du5Pg5TOlKdXV2fK", "BKSounds");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Sounds;
    (function(Sounds) {
      var _a;
      Sounds.NUMBER_0 = "0";
      Sounds.NUMBER_1 = "1";
      Sounds.NUMBER_2 = "2";
      Sounds.NUMBER_3 = "3";
      Sounds.NUMBER_4 = "4";
      Sounds.NUMBER_5 = "5";
      Sounds.NUMBER_6 = "6";
      Sounds.NUMBER_7 = "7";
      Sounds.NUMBER_8 = "8";
      Sounds.NUMBER_9 = "9";
      Sounds.COUNT_DOWN = "count_down";
      Sounds.Config = (_a = {}, _a[Sounds.NUMBER_0] = [ {
        sourcePath: "resources/games/baccarat/Sounds/0.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_1] = [ {
        sourcePath: "resources/games/baccarat/Sounds/1.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_2] = [ {
        sourcePath: "resources/games/baccarat/Sounds/2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_3] = [ {
        sourcePath: "resources/games/baccarat/Sounds/3.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_4] = [ {
        sourcePath: "resources/games/baccarat/Sounds/4.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_5] = [ {
        sourcePath: "resources/games/baccarat/Sounds/5.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_6] = [ {
        sourcePath: "resources/games/baccarat/Sounds/6.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_7] = [ {
        sourcePath: "resources/games/baccarat/Sounds/7.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_8] = [ {
        sourcePath: "resources/games/baccarat/Sounds/8.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_9] = [ {
        sourcePath: "resources/games/baccarat/Sounds/9.mp3",
        sourceVolume: 1
      } ], _a[Sounds.COUNT_DOWN] = [ {
        sourcePath: "resources/games/baccarat/Sounds/\u5012\u8ba1\u65f6.mp3",
        sourceVolume: 1
      } ], _a);
    })(Sounds = exports.Sounds || (exports.Sounds = {}));
    cc._RF.pop();
  }, {} ],
  BKViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3b9c48WWBPVbop0p3dV42n", "BKViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ViewAdapterBase_1 = require("../../../../common/core/ViewAdapterBase");
    var BKViewAdapterBase = function(_super) {
      __extends(BKViewAdapterBase, _super);
      function BKViewAdapterBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return BKViewAdapterBase;
    }(ViewAdapterBase_1.ViewAdapterBase);
    exports.BKViewAdapterBase = BKViewAdapterBase;
    cc._RF.pop();
  }, {
    "../../../../common/core/ViewAdapterBase": "ViewAdapterBase"
  } ],
  BaseAvatarComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0cd32MuUv5DjZVXPsJu0xO+", "BaseAvatarComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseAvatarComponent = function(_super) {
      __extends(BaseAvatarComponent, _super);
      function BaseAvatarComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerAvatar = null;
        _this.avatarRect = null;
        _this.avatarAtlas = null;
        _this.mask = null;
        _this.maskframe = null;
        return _this;
      }
      BaseAvatarComponent.prototype.setup = function(config) {
        this._config = config;
        this._baseRect || (this._baseRect = this.avatarRect.spriteFrame);
        this.setUpAvatar();
        this.setupRect();
      };
      BaseAvatarComponent.prototype.setUpAvatar = function() {
        var size = this._config.size || this.playerAvatar.node.width;
        if (this._config.useRoundCorner) {
          this.mask.type = cc.Mask.Type.IMAGE_STENCIL;
          this.mask.spriteFrame = this.maskframe;
          this.mask.alphaThreshold = .4;
        }
        this.mask.node.height = this.mask.node.width = size;
        var avatarSpriteFrame = this.avatarAtlas.getSpriteFrame(this._config.avatarId);
        avatarSpriteFrame && (this.playerAvatar.spriteFrame = avatarSpriteFrame);
        this.playerAvatar.node.width = this.playerAvatar.node.height = size;
      };
      BaseAvatarComponent.prototype.setupRect = function() {
        this.avatarRect.node.active = this._config.useRect;
        if (this._config.useRect) {
          var size = this.avatarRect.node.width;
          this._config.differentRect ? this.avatarRect.spriteFrame = this._config.differentRect : this.avatarRect.spriteFrame = this._baseRect;
          this.avatarRect.node.width = this.avatarRect.node.height = size;
        }
      };
      BaseAvatarComponent.prototype.onAvatarClick = function() {
        this._config.useClickOnAvatar && void 0 != this._config.clickCallBack && this._config.clickCallBack.call(this);
      };
      BaseAvatarComponent.prototype.changeAvatarRect = function(rect) {
        this._config.useRect = true;
        this._config.differentRect = rect;
        this.setupRect();
      };
      __decorate([ property(cc.Sprite) ], BaseAvatarComponent.prototype, "playerAvatar", void 0);
      __decorate([ property(cc.Sprite) ], BaseAvatarComponent.prototype, "avatarRect", void 0);
      __decorate([ property(cc.SpriteAtlas) ], BaseAvatarComponent.prototype, "avatarAtlas", void 0);
      __decorate([ property(cc.Mask) ], BaseAvatarComponent.prototype, "mask", void 0);
      __decorate([ property(cc.SpriteFrame) ], BaseAvatarComponent.prototype, "maskframe", void 0);
      BaseAvatarComponent = __decorate([ ccclass ], BaseAvatarComponent);
      return BaseAvatarComponent;
    }(cc.Component);
    exports.default = BaseAvatarComponent;
    cc._RF.pop();
  }, {} ],
  BaseCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96955ZLNnlG3K2aXHGbqhOW", "BaseCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../Card");
    var CombinationResult_1 = require("./CombinationResult");
    var BaseCombination = function() {
      function BaseCombination(name, rank) {
        this._patterns = [];
        this._fastCheckPatterns = [];
        this._limits = {
          min: 100500,
          max: 0
        };
        this._name = null != name ? name : "translation_default_combination";
        this._rank = rank;
      }
      Object.defineProperty(BaseCombination.prototype, "name", {
        get: function() {
          return this._name;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BaseCombination.prototype, "rank", {
        get: function() {
          return this._rank;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BaseCombination.prototype, "limits", {
        get: function() {
          return this._limits;
        },
        enumerable: true,
        configurable: true
      });
      BaseCombination.prototype.buildResult = function(cards, patternInd) {
        var combResult = new CombinationResult_1.CombinationResult(this.name, this.rank, patternInd, this, cards);
        return combResult;
      };
      BaseCombination.prototype.mapCardLevel = function(value) {
        return value;
      };
      BaseCombination.prototype.checkPattern = function(cards, from, pattern, float) {
        if (pattern.items.length > cards.length - from) return false;
        var mCardBase = Card_1.CardSuit.CLUBS;
        var cCardBase = 0;
        var patternItemIndex = 0;
        var _loop_1 = function(j) {
          var patternItem = pattern.items[patternItemIndex];
          var card = cards[j];
          var detect = true;
          false == patternItem.suitIsRandom && (true == patternItem.suitIsRelative ? true == patternItem.suitIsBase ? mCardBase = card.suit : mCardBase == card.suit == false && (detect = false) : detect = false);
          detect && null != patternItem.excludeValues && patternItem.excludeValues.length > 0 && patternItem.excludeValues.some(function(value) {
            return value === card.level;
          }) && (detect = false);
          if (detect && patternItem.valueIsRandom && patternItem.valueIsUnique && !float) {
            var countSameCards = cards.reduce(function(result, value, index) {
              return result + (value.level === card.level && index >= from && index < from + pattern.items.length ? 1 : 0);
            }, 0);
            countSameCards > 1 && (detect = false);
          }
          detect && false == patternItem.valueIsRandom && (true == patternItem.valueIsRelative ? true == patternItem.valueIsBase ? cCardBase = this_1.mapCardLevel(card.level) : cCardBase + patternItem.valueCode != this_1.mapCardLevel(card.level) && (detect = false) : patternItem.valueCode != card.level && (detect = false));
          if (detect) {
            if (patternItemIndex === pattern.items.length - 1) return {
              value: true
            };
            patternItemIndex += 1;
          } else if (!float) return {
            value: false
          };
        };
        var this_1 = this;
        for (var j = from; j < cards.length; j++) {
          var state_1 = _loop_1(j);
          if ("object" === typeof state_1) return state_1.value;
        }
        return false;
      };
      BaseCombination.prototype.fastCheckCombination = function(cards) {
        if (null == this._fastCheckPatterns || 0 === this._fastCheckPatterns.length) return true;
        for (var i = 0; i < this._fastCheckPatterns.length; i++) {
          var pattern = this._fastCheckPatterns[i];
          for (var j = 0; j < cards.length - pattern.items.length + 1; j++) {
            var result = this.checkPattern(cards, j, pattern, true);
            if (result) return true;
          }
        }
        return false;
      };
      BaseCombination.prototype.calculateCombination = function(cards) {
        if (this.limits.min > cards.length || this.limits.max < cards.length) return;
        var find = false;
        var i;
        for (i = 0; i < this._patterns.length && !find; i++) {
          var pattern = this._patterns[i];
          pattern.items.length === cards.length && (find = this.checkPattern(cards, 0, pattern, false));
        }
        return find ? this.buildResult(cards, i - 1) : void 0;
      };
      BaseCombination.prototype.parseCombinationConfig = function(config, fastCheckConfig) {
        var pattern;
        var i;
        for (i = 0; i < config.length; i++) {
          pattern = this.parsePatterns(config[i]);
          this._patterns.push(pattern);
          pattern.items.length < this.limits.min && (this.limits.min = pattern.items.length);
          pattern.items.length > this.limits.max && (this.limits.max = pattern.items.length);
        }
        if (null != fastCheckConfig) for (i = 0; i < fastCheckConfig.length; i++) {
          pattern = this.parsePatterns(fastCheckConfig[i]);
          this._fastCheckPatterns.push(pattern);
        }
      };
      BaseCombination.prototype.parsePatterns = function(sourcePatterns) {
        var pattern = {
          items: []
        };
        var patternItem;
        for (var j = 0; j < sourcePatterns.length; j++) {
          var needContinue = false;
          var patternItemConfig = sourcePatterns[j];
          var suitConfig = patternItemConfig[0];
          var valueConfig = patternItemConfig[1];
          patternItem = {
            valueIsRandom: false,
            valueIsRelative: false,
            valueIsBase: false,
            valueCode: 0,
            excludeValues: [],
            valueIsUnique: false,
            suitIsRandom: false,
            suitIsRelative: false,
            suitIsBase: false,
            suitCode: Card_1.CardSuit.HEARTS,
            useAsBest: false
          };
          if (suitConfig.length > 0) {
            if ("*" === suitConfig[0]) patternItem.suitIsRandom = true; else if ("R" === suitConfig[0]) {
              patternItem.suitIsRelative = true;
              suitConfig.length > 1 && ("B" === suitConfig[1] ? patternItem.suitIsBase = true : needContinue = true);
            }
          } else needContinue = true;
          if (!needContinue && valueConfig.length > 0) {
            var temp = valueConfig[0];
            if (temp.indexOf("!") >= 0) {
              patternItem.valueIsUnique = true;
              temp = temp.replace("!", "");
            }
            if (temp.indexOf("+") >= 0) {
              patternItem.useAsBest = true;
              temp = temp.replace("+", "");
            }
            valueConfig[0] = temp;
            if ("*" === valueConfig[0]) patternItem.valueIsRandom = true; else if ("R" === valueConfig[0]) {
              patternItem.valueIsRelative = true;
              valueConfig.length > 1 && ("B" === valueConfig[1] ? patternItem.valueIsBase = true : patternItem.valueCode = valueConfig[1]);
            } else "H" === valueConfig[0] && (patternItem.valueCode = valueConfig[1]);
            null != valueConfig[2] && valueConfig[2].length > 0 && (patternItem.excludeValues = valueConfig[2]);
          } else needContinue = true;
          needContinue || pattern.items.push(patternItem);
        }
        return pattern;
      };
      BaseCombination.prototype.compareTwoSameCombinations = function(combination1, combination2) {
        for (var i = 0; i < combination1.bestCards.length; i++) {
          var thisCard = combination1.bestCards[i];
          var otherCard = combination2.bestCards[i];
          var thisRank = this.mapCardLevel(thisCard.level);
          var otherRank = this.mapCardLevel(otherCard.level);
          if (thisRank > otherRank) return CombinationResult_1.CombinationCompareResult.BIGGER;
          if (thisRank < otherRank) return CombinationResult_1.CombinationCompareResult.SMALLER;
        }
        for (var i = 0; i < combination1.freeCards.length; i++) {
          var thisCard = combination1.freeCards[i];
          var otherCard = combination2.freeCards[i];
          var thisRank = this.mapCardLevel(thisCard.level);
          var otherRank = this.mapCardLevel(otherCard.level);
          if (thisRank > otherRank) return CombinationResult_1.CombinationCompareResult.BIGGER;
          if (thisRank < otherRank) return CombinationResult_1.CombinationCompareResult.SMALLER;
        }
        return CombinationResult_1.CombinationCompareResult.EQUAL;
      };
      return BaseCombination;
    }();
    exports.BaseCombination = BaseCombination;
    cc._RF.pop();
  }, {
    "../Card": "Card",
    "./CombinationResult": "CombinationResult"
  } ],
  BaseGameChip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b5ab4we2VF94zUlUAr0m0T", "BaseGameChip");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseGameChip = function(_super) {
      __extends(BaseGameChip, _super);
      function BaseGameChip() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chipFrames = [];
        _this.chipSpriteView = null;
        return _this;
      }
      BaseGameChip.prototype.stateCounts = function() {
        return this.chipFrames.length;
      };
      BaseGameChip.prototype.currentState = function() {
        return this._currentState;
      };
      BaseGameChip.prototype.setStateIndex = function(value) {
        this._currentState = value;
        this.chipSpriteView.spriteFrame = this.chipFrames[this._currentState];
      };
      __decorate([ property([ cc.SpriteFrame ]) ], BaseGameChip.prototype, "chipFrames", void 0);
      __decorate([ property(cc.Sprite) ], BaseGameChip.prototype, "chipSpriteView", void 0);
      BaseGameChip = __decorate([ ccclass ], BaseGameChip);
      return BaseGameChip;
    }(cc.Component);
    exports.BaseGameChip = BaseGameChip;
    cc._RF.pop();
  }, {} ],
  BaseRules: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99b0dD5IHFOwrsl2QzG0VlF", "BaseRules");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SampleSelector_1 = require("../SampleSelector");
    var CombinationResult_1 = require("./CombinationResult");
    var BaseRules = function() {
      function BaseRules() {
        this.findOnlyFirstCombination = false;
        this.combinations = [];
        this.countPlayerCombinationCards = 2;
        this.countDealerCombinationCards = 3;
      }
      BaseRules.prototype.sortCards = function(cards) {
        var temp;
        var len = cards.length;
        for (var i = 0; i < len - 1; i++) for (var j = i + 1; j < len; j++) if (this.getCardSortOrder(cards[i]) < this.getCardSortOrder(cards[j])) {
          temp = cards[i];
          cards[i] = cards[j];
          cards[j] = temp;
        }
        return cards;
      };
      BaseRules.prototype.getCardSortOrder = function(value) {
        return value.level;
      };
      BaseRules.prototype.findCombination = function(playerCards, dealerCards, minAviableCombination) {
        var _this = this;
        var combinationResult = void 0;
        var cardsToFastCheck = void 0;
        var combinationsToCheck = this.combinations;
        if (null == dealerCards || 0 === dealerCards.length) {
          playerCards = this.sortCards(playerCards.slice());
          cardsToFastCheck = playerCards;
        } else cardsToFastCheck = this.sortCards(playerCards.concat(dealerCards));
        combinationsToCheck = combinationsToCheck.filter(function(value) {
          return value.fastCheckCombination(cardsToFastCheck);
        });
        if (0 === combinationsToCheck.length) return;
        var cards = [];
        var cardsIndex = 0;
        var samplePlayer;
        samplePlayer = null == dealerCards || 0 === dealerCards.length ? new SampleSelector_1.SampleSelector(playerCards.length, this.countPlayerCombinationCards, function(playerPoints, current) {
          if (_this.findOnlyFirstCombination && current.length > 0) return false;
          for (var i = 0; i < combinationsToCheck.length && null == combinationResult; i++) {
            var combination = combinationsToCheck[i];
            cardsIndex = 0;
            for (var j = 0; j < playerPoints.length; j++) {
              cards[cardsIndex] = playerCards[playerPoints[j]];
              cardsIndex += 1;
            }
            var temp = combination.calculateCombination(cards);
            if (null != temp && void 0 != temp && (null == minAviableCombination || temp.compare(minAviableCombination) === CombinationResult_1.CombinationCompareResult.BIGGER)) return true;
          }
          return false;
        }) : new SampleSelector_1.SampleSelector(playerCards.length, this.countPlayerCombinationCards);
        var sampleDealer = new SampleSelector_1.SampleSelector(null == dealerCards ? 0 : dealerCards.length, this.countDealerCombinationCards);
        for (var i = 0; i < combinationsToCheck.length && null == combinationResult; i++) {
          var combination = combinationsToCheck[i];
          var indexPlayer = 0;
          var indexDealer = 0;
          while (indexPlayer < samplePlayer.size() && indexDealer <= sampleDealer.size()) {
            cardsIndex = 0;
            var playerPoints = samplePlayer.getCombination(indexPlayer);
            var dealerPoints = sampleDealer.getCombination(indexDealer);
            for (var j = 0; j < playerPoints.length; j++) {
              cards[cardsIndex] = playerCards[playerPoints[j]];
              cardsIndex += 1;
            }
            for (var j = 0; j < dealerPoints.length; j++) {
              cards[cardsIndex] = dealerCards[dealerPoints[j]];
              cardsIndex += 1;
            }
            null != dealerCards && dealerCards.length > 0 && this.sortCards(cards);
            var temp = combination.calculateCombination(cards);
            null != temp && void 0 != temp && (void 0 != combinationResult && temp.compare(combinationResult) !== CombinationResult_1.CombinationCompareResult.BIGGER || null != minAviableCombination && temp.compare(minAviableCombination) !== CombinationResult_1.CombinationCompareResult.BIGGER || (combinationResult = temp));
            indexPlayer += 1;
            if (indexPlayer >= samplePlayer.size()) {
              indexPlayer = 0;
              indexDealer += 1;
            }
          }
        }
        return combinationResult;
      };
      return BaseRules;
    }();
    exports.BaseRules = BaseRules;
    cc._RF.pop();
  }, {
    "../SampleSelector": "SampleSelector",
    "./CombinationResult": "CombinationResult"
  } ],
  BaseWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7651e5/zdlJOLJTlG8KQUqi", "BaseWindow");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseWindow = function(_super) {
      __extends(BaseWindow, _super);
      function BaseWindow() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BaseWindow.prototype.start = function() {};
      BaseWindow.prototype.windowLoaded = function(params) {
        this._params = params;
        this.init();
      };
      BaseWindow.prototype.init = function() {};
      BaseWindow.prototype.windowShowed = function() {};
      BaseWindow.prototype.windowClose = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            this.closeCallback = null;
            return [ 2 ];
          });
        });
      };
      BaseWindow.prototype.onClosedAnimationEnded = function() {};
      Object.defineProperty(BaseWindow.prototype, "windowAlignData", {
        get: function() {
          return null;
        },
        enumerable: true,
        configurable: true
      });
      BaseWindow.prototype.close = function() {
        this._close && this._close();
      };
      Object.defineProperty(BaseWindow.prototype, "closeCallback", {
        set: function(close) {
          this._close = close;
        },
        enumerable: true,
        configurable: true
      });
      BaseWindow = __decorate([ ccclass ], BaseWindow);
      return BaseWindow;
    }(cc.Component);
    exports.default = BaseWindow;
    cc._RF.pop();
  }, {} ],
  BjActions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d51arMEkVNAq24CXCBx5E/", "BjActions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SET_ACTIVE_PLAYER_INDEX = "SET_ACTIVE_PLAYER_INDEX";
    exports.SET_ACTIVE_HAND_INDEX = "SET_ACTIVE_HAND_INDEX";
    exports.RESTART = "RESTART";
    exports.SET_ROUND = "SET_ROUND";
    exports.STAND = "STAND";
    exports.SPLIT = "SPLIT";
    exports.HIT = "HIT";
    exports.HIT_AI = "HIT_AI";
    exports.DOUBLE = "DOUBLE";
    exports.WAIT_FOR_VIEW_SYNC = "WAIT_FOR_VIEW_SYNC";
    exports.WAIT_FOR_VIEW_SYNC_END = "WAIT_FOR_VIEW_SYNC_END";
    exports.SHOW_BUTTONS = "SHOW_BUTTONS";
    exports.HIDE_BUTTONS = "HIDE_BUTTONS";
    exports.FINISH_GAME = "FINISH_GAME";
    exports.SET_BET = "SET_BET";
    exports.SET_INITIAL_BET = "SET_INITIAL_BET";
    exports.PLAY_WITH_INITIAL_BET = "PLAY_WITH_INITIAL_BET";
    exports.CHANGE_MONEY = "CHANGE_MONEY";
    exports.WINNING_CHANGE_MONEY = "WINNING_CHANGE_MONEY";
    exports.INSURANCE_ACCEPT = "INSURANCE_ACCEPT";
    exports.INSURANCE_REJECT = "INSURANCE_REJECT";
    exports.INSURANCE_CLEAR = "INSURANCE_CLEAR";
    exports.SAVE_HISTORY = "SAVE_HISTORY";
    exports.SELECT_BET_STATE = "SELECT_BET_STATE";
    exports.SET_GAME_STATE = "SET_GAME_STATE";
    exports.SET_WIN_INFO_BY_HAND = "SET_WIN_INFO_BY_HAND";
    exports.SELECT_BET_INCREMENT = "SELECT_BET_INCREMENT";
    function setHitAiAction(cardData, index) {
      return {
        type: exports.HIT_AI,
        data: cardData,
        index: index
      };
    }
    exports.setHitAiAction = setHitAiAction;
    function setHitAction(cardData, index) {
      return {
        type: exports.HIT,
        data: cardData,
        index: index
      };
    }
    exports.setHitAction = setHitAction;
    function setHitPlayerIndexHandIndexAction(cardData, index, handIndex) {
      return {
        type: exports.HIT,
        data: cardData,
        index: index,
        hand_index: handIndex
      };
    }
    exports.setHitPlayerIndexHandIndexAction = setHitPlayerIndexHandIndexAction;
    function setHitAiPlayerIndexHandIndexAction(cardData, index, handIndex) {
      return {
        type: exports.HIT_AI,
        data: cardData,
        index: index,
        hand_index: handIndex
      };
    }
    exports.setHitAiPlayerIndexHandIndexAction = setHitAiPlayerIndexHandIndexAction;
    function setCurrentPlayerAction(index) {
      return {
        type: exports.SET_ACTIVE_PLAYER_INDEX,
        index: index
      };
    }
    exports.setCurrentPlayerAction = setCurrentPlayerAction;
    function setRoundAction(round) {
      return {
        type: exports.SET_ROUND,
        round: round
      };
    }
    exports.setRoundAction = setRoundAction;
    function setStandAction() {
      return {
        type: exports.STAND
      };
    }
    exports.setStandAction = setStandAction;
    function setSplitAction(bet, cardIndex) {
      return {
        type: exports.SPLIT,
        bet: bet,
        card_index: cardIndex
      };
    }
    exports.setSplitAction = setSplitAction;
    function setWaitForViewSyncAction(key) {
      return {
        type: exports.WAIT_FOR_VIEW_SYNC,
        key: key
      };
    }
    exports.setWaitForViewSyncAction = setWaitForViewSyncAction;
    function setWaitForViewEndSyncAction(key) {
      return {
        type: exports.WAIT_FOR_VIEW_SYNC_END,
        key: key
      };
    }
    exports.setWaitForViewEndSyncAction = setWaitForViewEndSyncAction;
    function setCurrentPlayerHandAction(index) {
      return {
        type: exports.SET_ACTIVE_HAND_INDEX,
        index: index
      };
    }
    exports.setCurrentPlayerHandAction = setCurrentPlayerHandAction;
    function setBetAction(bet, index) {
      return {
        type: exports.SET_BET,
        bet: bet,
        index: index
      };
    }
    exports.setBetAction = setBetAction;
    function setChangeMoneyAction(income) {
      return {
        type: exports.CHANGE_MONEY,
        income: income
      };
    }
    exports.setChangeMoneyAction = setChangeMoneyAction;
    function setChangeWinMoneyAction(income) {
      return {
        type: exports.WINNING_CHANGE_MONEY,
        income: income
      };
    }
    exports.setChangeWinMoneyAction = setChangeWinMoneyAction;
    function setSaveHistoreAction() {
      return {
        type: exports.SAVE_HISTORY
      };
    }
    exports.setSaveHistoreAction = setSaveHistoreAction;
    function setDoubleAction(bet, cardData, index) {
      return {
        type: exports.DOUBLE,
        bet: bet,
        data: cardData,
        index: index
      };
    }
    exports.setDoubleAction = setDoubleAction;
    function setWinInfoByHandAction(payload) {
      return {
        type: exports.SET_WIN_INFO_BY_HAND,
        payload: payload
      };
    }
    exports.setWinInfoByHandAction = setWinInfoByHandAction;
    function setSelectBetIncrement(payload) {
      return {
        type: exports.SELECT_BET_INCREMENT,
        payload: payload
      };
    }
    exports.setSelectBetIncrement = setSelectBetIncrement;
    function setInitialBet(currentBet) {
      return {
        type: exports.SET_INITIAL_BET,
        bet: currentBet
      };
    }
    exports.setInitialBet = setInitialBet;
    function playWithInitialBet(currentBet) {
      return {
        type: exports.PLAY_WITH_INITIAL_BET,
        bet: currentBet
      };
    }
    exports.playWithInitialBet = playWithInitialBet;
    function setInsuranceAccept(playerIndex, bet) {
      return {
        type: exports.INSURANCE_ACCEPT,
        index: playerIndex,
        bet: bet
      };
    }
    exports.setInsuranceAccept = setInsuranceAccept;
    function setInsuranceReject(playerIndex) {
      return {
        type: exports.INSURANCE_REJECT,
        index: playerIndex
      };
    }
    exports.setInsuranceReject = setInsuranceReject;
    function setInsuranceClear(playerIndex) {
      return {
        type: exports.INSURANCE_CLEAR,
        index: playerIndex
      };
    }
    exports.setInsuranceClear = setInsuranceClear;
    function sendRestartAction() {
      return {
        type: exports.RESTART
      };
    }
    exports.sendRestartAction = sendRestartAction;
    function finishGameAction() {
      return {
        type: exports.FINISH_GAME
      };
    }
    exports.finishGameAction = finishGameAction;
    function setSelectBetState() {
      return {
        type: exports.SELECT_BET_STATE
      };
    }
    exports.setSelectBetState = setSelectBetState;
    function setGameState(gameState) {
      return {
        type: exports.SET_GAME_STATE,
        game_state: gameState
      };
    }
    exports.setGameState = setGameState;
    cc._RF.pop();
  }, {} ],
  BjCardContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0ef1503OOhA65wsj41YxtRd", "BjCardContainer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjConstant_1 = require("../BjConstant");
    var BjCardContainer = function(_super) {
      __extends(BjCardContainer, _super);
      function BjCardContainer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cardPrefab = null;
        _this.cardAnchor = null;
        _this.cardOffset = 20;
        _this.maxCard = 5;
        _this.cards = [];
        _this.dealerPosition = null;
        _this.outPosition = null;
        _this.finished = false;
        _this.dealer = false;
        _this.callback = null;
        return _this;
      }
      BjCardContainer.prototype.onLoad = function() {
        var _this = this;
        this.reset();
        this.node.on(BjConstant_1.CARD_MOVE_COMPLETE, function(event) {
          var node = event.target;
          var card = node.getComponent("BjCard");
          node && card ? _this.onCardMoveFinish(card) : console.log("onCardMoveFinish error");
        });
      };
      Object.defineProperty(BjCardContainer.prototype, "hasMoveCard", {
        get: function() {
          var hasMoveCards = false;
          this.cards.forEach(function(element) {
            hasMoveCards = hasMoveCards || element.isInMove;
          });
          return hasMoveCards;
        },
        enumerable: true,
        configurable: true
      });
      BjCardContainer.prototype.setCallback = function(callback) {
        this.callback = callback;
      };
      BjCardContainer.prototype.onCardMoveFinish = function(card) {
        this.callback && this.callback(this);
      };
      BjCardContainer.prototype.start = function() {};
      BjCardContainer.prototype.action = function() {};
      BjCardContainer.prototype.setDealerPosition = function(postion) {
        this.dealerPosition = postion;
      };
      BjCardContainer.prototype.setOutPosition = function(postion) {
        this.outPosition = postion.clone();
      };
      BjCardContainer.prototype.animateCardOut = function() {
        this.packCard();
      };
      BjCardContainer.prototype.packCard = function() {
        var _this = this;
        var x = this.cards[0].node.getPosition().x;
        var y = this.cards[0].node.getPosition().y;
        this.cards.forEach(function(card) {
          x = Math.min(x, card.node.getPosition().x);
          y = Math.min(y, card.node.getPosition().y);
        });
        this.cards.forEach(function(card) {
          card.packAndPositionTo(new cc.Vec2(x, y), _this.outPosition.sub(_this.node.getPosition()));
        });
      };
      BjCardContainer.prototype.moveX = function(offset) {
        this.node.x += offset;
        this.cards.forEach(function(card, index) {
          var endPosition = card.node.getPosition().clone();
          card.node.x -= offset;
          card.positionTo(endPosition);
        });
      };
      BjCardContainer.prototype.reset = function() {
        this.cards && this.cards.forEach(function(item, i, arr) {
          item.node.removeFromParent();
        });
        this.cards = [];
        this.finished = false;
      };
      BjCardContainer.prototype.addNewCard = function(type) {
        var newCard = cc.instantiate(this.cardPrefab).getComponent("BjCard");
        newCard.setType(type);
        newCard.node.rotation = -45;
        this.processCard(newCard, false, true);
      };
      BjCardContainer.prototype.processCard = function(newCard, currentPosition, flip) {
        var _this = this;
        void 0 === currentPosition && (currentPosition = false);
        void 0 === flip && (flip = false);
        this.cardAnchor.addChild(newCard.node, 3);
        this.cards.push(newCard);
        currentPosition || newCard.node.setPosition(this.dealerPosition.sub(this.node.getPosition()));
        var fullWidth = (this.cards.length - 1) * this.cardOffset + newCard.node.width;
        var startX = -fullWidth / 2 + newCard.node.width / 2;
        this.cards.forEach(function(card, index) {
          var endPosition = new cc.Vec2(0, 0);
          endPosition.x = startX + index * _this.cardOffset;
          flip && index == _this.cards.length - 1 ? card.positionToFadeInAndOpen(endPosition) : card.positionTo(endPosition);
        });
      };
      BjCardContainer.prototype.removeLastCard = function() {
        var card = this.cards.pop();
        card.node.removeFromParent(false);
        return card;
      };
      __decorate([ property(cc.Prefab) ], BjCardContainer.prototype, "cardPrefab", void 0);
      __decorate([ property(cc.Node) ], BjCardContainer.prototype, "cardAnchor", void 0);
      __decorate([ property ], BjCardContainer.prototype, "cardOffset", void 0);
      __decorate([ property ], BjCardContainer.prototype, "maxCard", void 0);
      BjCardContainer = __decorate([ ccclass ], BjCardContainer);
      return BjCardContainer;
    }(cc.Component);
    exports.default = BjCardContainer;
    cc._RF.pop();
  }, {
    "../BjConstant": "BjConstant"
  } ],
  BjCardData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b05dz8q7RKY4Fhc3iDJ3GU", "BjCardData");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjCardData = function() {
      function BjCardData() {}
      return BjCardData;
    }();
    exports.default = BjCardData;
    cc._RF.pop();
  }, {} ],
  BjCardDeck: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a6bdb7v/IJC+o3eUZcaBh9P", "BjCardDeck");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constant = require("./BjConstant");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Actions = require("./store/BjActions");
    var BjCardDeck = function() {
      function BjCardDeck() {
        this._indexCard = 0;
        this._indexSequence = 0;
        this._testAllSequence = [];
        this._testSplitWinSequence = [];
        this._testSequence = [];
        this._testSequenceDouble = [];
        this._testSequenceInsurance = [];
        this._testDealer = [ {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.HEARTS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        }, {
          rank: Constant.C2,
          suit: Constant.DIAMONDS
        } ];
        this._testA = [ {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        } ];
        this._testDoubleBJ = [ {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.HEARTS
        }, {
          rank: Constant.C10,
          suit: Constant.DIAMONDS
        } ];
        this._testCard = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C8,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C8,
          suit: Constant.HEARTS
        }, {
          rank: Constant.C10,
          suit: Constant.DIAMONDS
        } ];
        this._testDoubleWin = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C8,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        } ];
        this._testDoubleLoose = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C8,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testInsuranceDealerNotBj = [ {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        } ];
        this._testInsuranceDealerBj = [ {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testMeBj = [ {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testDealerBj = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        } ];
        this._testSplitWin = [ {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testSplitHalfWinDealerLost = [ {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testSplitLoose = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testSplitInsuranceWin = [ {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testSplitInsuranceDealerBj = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testMeWin = [ {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.ACE,
          suit: Constant.CLUBS
        } ];
        this._testDealerWin = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testPush = [ {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        }, {
          rank: Constant.KING,
          suit: Constant.CLUBS
        } ];
        this._testC2 = [ {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        }, {
          rank: Constant.C2,
          suit: Constant.CLUBS
        } ];
        this._testAllSequence = [ this._testA, this._testC2, this._testDealer, this._testDoubleBJ, this._testCard, this._testDoubleWin, this._testDoubleLoose, this._testInsuranceDealerNotBj, this._testInsuranceDealerBj, this._testMeBj, this._testDealerBj, this._testSplitWin, this._testSplitHalfWinDealerLost, this._testSplitLoose, this._testSplitInsuranceWin, this._testSplitInsuranceDealerBj, this._testMeWin, this._testDealerWin, this._testPush ];
        this._testSplitWinSequence = [ this._testSplitWin, this._testSplitWin, this._testSplitWin, this._testSplitWin, this._testSplitWin ];
        this._testSequenceDouble = [ this._testDoubleWin, this._testDoubleLoose, this._testDoubleWin, this._testDoubleLoose, this._testDoubleWin, this._testDoubleLoose, this._testDoubleWin, this._testDoubleLoose, this._testDoubleWin, this._testDoubleLoose, this._testDoubleWin, this._testDoubleLoose ];
        this._testSequenceInsurance = [ this._testInsuranceDealerNotBj, this._testInsuranceDealerBj, this._testSplitInsuranceWin, this._testSplitInsuranceDealerBj ];
        this._testSequence = this._testAllSequence;
      }
      BjCardDeck.prototype.init = function(params) {
        var _this = this;
        params.storeController.addActionListener(function(action) {
          if (action["type"] == Actions.FINISH_GAME) {
            _this._indexSequence++;
            _this._indexCard = 0;
            console.log("BjCardDeck", "change", _this._indexSequence, _this._indexCard);
          }
        });
      };
      BjCardDeck.prototype.generateCardType = function() {
        var card = this.getCardFromTestSequence();
        card || (card = this.randomGenerate());
        var cardData = new BjStoreInterface_1.CardData();
        cardData.rank = card.rank;
        cardData.suit = card.suit;
        return cardData;
      };
      BjCardDeck.prototype.getCardFromTestSequence = function() {
        return null;
        var testSet;
      };
      BjCardDeck.prototype.randomGenerate = function() {
        var randomSuit = Math.round(1e3 * Math.random()) % Constant.SUITS.length;
        var randomRank = Math.round(1e3 * Math.random()) % Constant.A2_10JQK.length;
        return {
          suit: Constant.SUITS[randomSuit],
          rank: Constant.A2_10JQK[randomRank]
        };
      };
      return BjCardDeck;
    }();
    exports.default = BjCardDeck;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjCardScoreHint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a127ZfDv5McZmxCTx/gd5T", "BjCardScoreHint");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjCardScoreHint = function(_super) {
      __extends(BjCardScoreHint, _super);
      function BjCardScoreHint() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.score = null;
        return _this;
      }
      BjCardScoreHint.prototype.start = function() {};
      BjCardScoreHint.prototype.setActive = function() {
        this.score.node.color = cc.Color.WHITE;
      };
      BjCardScoreHint.prototype.setInActive = function() {
        this.score.node.color = cc.Color.GRAY;
      };
      __decorate([ property(cc.Label) ], BjCardScoreHint.prototype, "score", void 0);
      BjCardScoreHint = __decorate([ ccclass ], BjCardScoreHint);
      return BjCardScoreHint;
    }(cc.Component);
    exports.default = BjCardScoreHint;
    cc._RF.pop();
  }, {} ],
  BjCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fedddD6UxVKSpLzw5Pp6u30", "BjCard");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjConstant_1 = require("../BjConstant");
    var BjCard = function(_super) {
      __extends(BjCard, _super);
      function BjCard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.suit = null;
        _this.tex = null;
        _this.closedSuitFrame = null;
        _this.speed = 1;
        _this._isInMove = false;
        _this._isInFlip = false;
        _this._openedRequest = false;
        _this._frameUpdate = null;
        return _this;
      }
      BjCard_1 = BjCard;
      BjCard.prototype.onLoad = function() {
        if (!BjCard_1._cardHelper) {
          BjCard_1._cardHelper = new BjCardHelper();
          BjCard_1._cardHelper.texture = this.tex;
          BjCard_1._cardHelper.closed = this.closedSuitFrame;
        }
        this._frameUpdate = BjCard_1._cardHelper.closedFrame;
      };
      BjCard.prototype.start = function() {
        this.onMiddle();
      };
      BjCard.prototype.setType = function(type) {
        this._type = __assign({}, type);
      };
      BjCard.prototype.positionTo = function(moveTo, angle, needFadeOut, needFadeIn) {
        void 0 === angle && (angle = 0);
        void 0 === needFadeOut && (needFadeOut = false);
        void 0 === needFadeIn && (needFadeIn = false);
        this._isInMove = true;
        var moveAction = cc.moveTo(this.speed, moveTo);
        var rotateAction = cc.rotateTo(this.speed, angle);
        var callback = cc.callFunc(this.animationEnd, this);
        var pack;
        if (needFadeOut) {
          var fadeAction = cc.fadeOut(this.speed);
          pack = cc.spawn(moveAction, rotateAction, fadeAction);
        } else if (needFadeIn) {
          var fadeInAction = cc.fadeIn(this.speed);
          pack = cc.spawn(moveAction, rotateAction, fadeInAction);
        } else pack = cc.spawn(moveAction, rotateAction);
        this.node.runAction(cc.sequence(pack, callback));
      };
      BjCard.prototype.packAndPositionTo = function(packTo, moveTo) {
        var _this = this;
        this._isInMove = true;
        var packMoveAction = cc.moveTo(this.speed, packTo);
        var callback = cc.callFunc(function() {
          _this.close(function() {
            return _this.positionTo(moveTo, 30, true);
          });
        }, this);
        this.node.runAction(cc.sequence(packMoveAction, callback));
      };
      BjCard.prototype.positionToFadeInAndOpen = function(moveTo) {
        this._openedRequest = true;
        this.node.opacity = 0;
        this.positionTo(moveTo, 0, false, true);
      };
      BjCard.prototype.onMiddle = function() {
        this._frameUpdate && (this.suit.spriteFrame = this._frameUpdate);
      };
      BjCard.prototype.open = function(callback) {
        void 0 === callback && (callback = null);
        this._frameUpdate = BjCard_1._cardHelper.calculateFrame(this._type);
        null != callback ? this.flip(callback.bind(this)) : this.flip(this.dispatchEnd.bind(this));
      };
      BjCard.prototype.close = function(callback) {
        void 0 === callback && (callback = null);
        this._frameUpdate = BjCard_1._cardHelper.closedFrame;
        null != callback ? this.flip(callback.bind(this)) : this.flip(this.dispatchEnd.bind(this));
      };
      Object.defineProperty(BjCard.prototype, "type", {
        get: function() {
          return this._type;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjCard.prototype, "isInMove", {
        get: function() {
          return this._isInMove || this._isInFlip;
        },
        enumerable: true,
        configurable: true
      });
      BjCard.prototype.flip = function(callback) {
        var _this = this;
        var anim = this.node.getComponent(cc.Animation);
        this._isInFlip = true;
        anim.play("cardFlip");
        anim.on("finished", function(event) {
          _this._isInFlip = false;
          callback && callback();
        });
      };
      BjCard.prototype.animationEnd = function() {
        this._isInMove = false;
        if (this._openedRequest) {
          this._openedRequest = false;
          this.open();
        } else this.dispatchEnd();
      };
      BjCard.prototype.dispatchEnd = function() {
        this.node.dispatchEvent(new cc.Event.EventCustom(BjConstant_1.CARD_MOVE_COMPLETE, true));
      };
      var BjCard_1;
      BjCard._cardHelper = null;
      __decorate([ property(cc.Sprite) ], BjCard.prototype, "suit", void 0);
      __decorate([ property({
        type: cc.Texture2D
      }) ], BjCard.prototype, "tex", void 0);
      __decorate([ property(cc.SpriteFrame) ], BjCard.prototype, "closedSuitFrame", void 0);
      __decorate([ property ], BjCard.prototype, "speed", void 0);
      BjCard = BjCard_1 = __decorate([ ccclass ], BjCard);
      return BjCard;
    }(cc.Component);
    exports.default = BjCard;
    var BjCardHelper = function() {
      function BjCardHelper() {
        this._texture = null;
        this._cache = {};
        this._closed = null;
      }
      Object.defineProperty(BjCardHelper.prototype, "texture", {
        set: function(tex) {
          this._texture = tex;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjCardHelper.prototype, "closed", {
        set: function(spriteFrame) {
          if (spriteFrame) {
            spriteFrame.setOriginalSize(new cc.Size(BjCardHelper.withCard, BjCardHelper.heightCard));
            this._closed = spriteFrame;
          } else this._closed = new cc.SpriteFrame(this._texture, cc.rect(0, 882, BjCardHelper.withCard, BjCardHelper.heightCard));
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjCardHelper.prototype, "closedFrame", {
        get: function() {
          return this._closed;
        },
        enumerable: true,
        configurable: true
      });
      BjCardHelper.prototype.calculateFrame = function(type) {
        var suit = type.suit;
        var rank = type.rank;
        var key = suit + rank;
        if (!this._cache[key]) {
          var row = BjConstant_1.SUITS.indexOf(suit);
          var column = BjConstant_1.A2_10JQK.indexOf(rank);
          if (row < 0 || column < 0 || row >= BjCardHelper.yOffset.length || column >= BjCardHelper.xOffset.length) return this.closedFrame;
          var width = BjCardHelper.xOffset[column];
          var height = BjCardHelper.yOffset[row];
          width = Math.min(BjCardHelper.maxWithTex - BjCardHelper.withCard, width);
          height = Math.min(BjCardHelper.maxHeightTex - BjCardHelper.heightCard, height);
          this._cache[key] = new cc.SpriteFrame(this._texture, cc.rect(width, height, BjCardHelper.withCard, BjCardHelper.heightCard));
        }
        return this._cache[key];
      };
      BjCardHelper.xOffset = [ 0, 158, 315, 473, 630, 787, 944, 1102, 1260, 1417, 1575, 1733, 1891 ];
      BjCardHelper.yOffset = [ 0, 221, 442, 663, 882 ];
      BjCardHelper.withCard = 157;
      BjCardHelper.heightCard = 220;
      BjCardHelper.maxWithTex = 2048;
      BjCardHelper.maxHeightTex = 1102;
      return BjCardHelper;
    }();
    cc._RF.pop();
  }, {
    "../BjConstant": "BjConstant"
  } ],
  BjChipSelectController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3fb21Kh/vtHfLxsMkkzwsaB", "BjChipSelectController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actions = require("./store/BjActions");
    var Constant = require("./BjConstant");
    var BjChipSelectController = function() {
      function BjChipSelectController() {
        var _this = this;
        this.action = function(action) {
          var gameState = _this._params.storeController.getRootState.game_state;
          if (action["type"] == Actions.SET_GAME_STATE && gameState == Constant.GAME_STATE.select_chip) {
            _this._chipsContainer.indexCurrent = Constant.CHIPS_NOMINAL.indexOf(_this._params.storeController.getRootState.select_bet_increment);
            _this._chipsContainer.node.active = true;
          }
        };
      }
      BjChipSelectController.prototype.init = function(view, viewContainer, params) {
        var _this = this;
        this._params = params;
        this._chipSelect = view;
        this._chipsContainer = viewContainer;
        this._params.storeController.addActionListener(this.action);
        this._chipsContainer.setLabels(Constant.CHIPS_NOMINAL.map(function(nominal) {
          return nominal.toString();
        }));
        this._chipsContainer.setOnCallback(function(buttonIndex) {
          var result = buttonIndex >= 0 && buttonIndex < Constant.CHIPS_NOMINAL.length ? Constant.CHIPS_NOMINAL[buttonIndex] : Constant.CHIPS_NOMINAL[0];
          _this._params.storeController.dispatch(Actions.setSelectBetIncrement(result));
          _this._params.storeController.dispatch(Actions.setGameState(Constant.GAME_STATE.select_bet));
        });
        this._chipsContainer.node.active = false;
        this.chipSelectUpdate(this._params.storeController.getRootState);
        this._chipSelect.setClickCallback(function() {
          _this._chipSelect.node.active = false;
          _this._params.storeController.dispatch(Actions.setGameState(Constant.GAME_STATE.select_chip));
        });
        this._params.storeController.store.subscribe(function() {
          var gameState = _this._params.storeController.getRootState.game_state;
          _this._chipSelect.node.active = gameState == Constant.GAME_STATE.select_bet;
          gameState != Constant.GAME_STATE.select_chip && (_this._chipsContainer.node.active = false);
          _this._chipSelect.node.active && _this.chipSelectUpdate(_this._params.storeController.getRootState);
        });
      };
      BjChipSelectController.prototype.chipSelectUpdate = function(state) {
        var selectBetIncrement = state.select_bet_increment;
        var chipSelectFrame = Constant.CHIPS_NOMINAL.indexOf(selectBetIncrement);
        chipSelectFrame = chipSelectFrame >= 0 ? chipSelectFrame : 0;
        this._chipSelect.setFrame(chipSelectFrame);
        this._chipSelect.setText(Constant.CHIPS_NOMINAL[chipSelectFrame].toString());
      };
      return BjChipSelectController;
    }();
    exports.default = BjChipSelectController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./store/BjActions": "BjActions"
  } ],
  BjChipSelect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e0afencgY9HfqUQ8TvY/MZ/", "BjChipSelect");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjChipSelect = function(_super) {
      __extends(BjChipSelect, _super);
      function BjChipSelect() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.frames = [];
        _this.sprite = null;
        _this._clickCallback = null;
        return _this;
      }
      BjChipSelect.prototype.start = function() {};
      BjChipSelect.prototype.setFrame = function(frameIndex) {
        frameIndex >= 0 && frameIndex < this.frames.length && (this.sprite.spriteFrame = this.frames[frameIndex]);
      };
      BjChipSelect.prototype.setText = function(text) {
        this.label.string = text;
      };
      BjChipSelect.prototype.setClickCallback = function(callback) {
        this._clickCallback = callback;
      };
      BjChipSelect.prototype.onClick = function() {
        this._clickCallback && this._clickCallback();
      };
      __decorate([ property(cc.Label) ], BjChipSelect.prototype, "label", void 0);
      __decorate([ property(cc.SpriteFrame) ], BjChipSelect.prototype, "frames", void 0);
      __decorate([ property(cc.Sprite) ], BjChipSelect.prototype, "sprite", void 0);
      BjChipSelect = __decorate([ ccclass ], BjChipSelect);
      return BjChipSelect;
    }(cc.Component);
    exports.default = BjChipSelect;
    cc._RF.pop();
  }, {} ],
  BjChipsContainerUpdater: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eca59wSpx5PHLYCe+wqHaaY", "BjChipsContainerUpdater");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjChipsContainerUpdater = function() {
      function BjChipsContainerUpdater() {
        this._containers = [];
        this._chipsContainerPool = null;
        this._parent = null;
        this._containerPrefab = null;
        this._sortedNominations = [];
      }
      BjChipsContainerUpdater.prototype.init = function(containerPrefab, parent, nominations, fractionalFrame) {
        this._parent = parent;
        this._containerPrefab = containerPrefab;
        this._nominations = nominations;
        this._sortedNominations = this._nominations.concat().sort(function(a, b) {
          return b - a;
        });
        this._sortedNominations.push(this._sortedNominations[this._sortedNominations.length - 1] / 2);
        this._fractionalFrame = fractionalFrame;
      };
      Object.defineProperty(BjChipsContainerUpdater.prototype, "startPosition", {
        set: function(startPosition) {
          this._startPosition = startPosition;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjChipsContainerUpdater.prototype, "firstContainer", {
        get: function() {
          return this._containers[0];
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjChipsContainerUpdater.prototype, "lastDataUpdate", {
        get: function() {
          return this._lastDataUpdate;
        },
        enumerable: true,
        configurable: true
      });
      BjChipsContainerUpdater.prototype.updateContainers = function(data) {
        var _this = this;
        console.log("BjChipsController", "updateContainers", JSON.stringify(data));
        this._lastDataUpdate = data;
        var containers = this._containers.filter(function(container) {
          return null != container;
        });
        this._containers.length = 0;
        data.forEach(function(itemData, index) {
          console.log("BjChipsController", "updateContainers", "index", index);
          var container = _this.findContainer(containers, itemData);
          container || (container = _this.createContainer(_this._startPosition));
          _this.processUpdateDataContainer(container, itemData) ? _this._containers.push(container) : _this.removeContainer(container);
        });
        containers.forEach(function(container) {
          _this.removeContainer(container);
        });
      };
      BjChipsContainerUpdater.prototype.clear = function() {
        var _this = this;
        this._containers.forEach(function(container) {
          _this.removeContainer(container);
        });
        this._containers.length = 0;
      };
      BjChipsContainerUpdater.prototype.setAnimationEndCallback = function(callback) {
        var waitForAnimation = this.getWaitForAnimation();
        if (!waitForAnimation || 0 == waitForAnimation.length) {
          callback();
          return;
        }
        waitForAnimation.forEach(function(container) {
          container.addAnimationCallback(function(finishedContainer) {
            var index = waitForAnimation.indexOf(finishedContainer);
            index >= 0 && waitForAnimation.splice(index, 1);
            0 == waitForAnimation.length && callback();
          });
        });
      };
      BjChipsContainerUpdater.prototype.getWaitForAnimation = function() {
        var waitForAnimation = [];
        this._containers.forEach(function(container) {
          container && container.isInAnimation && waitForAnimation.push(container);
        });
        return waitForAnimation;
      };
      BjChipsContainerUpdater.prototype.processUpdateDataContainer = function(container, itemData) {
        container && itemData && (container.dataKey = itemData.data_key);
        if (itemData && itemData.animation_from) {
          this.setDataContainer(container, itemData.animation_from);
          this.animateFromDataContainer(container, itemData.animation_from, itemData);
        } else {
          if (!(itemData && itemData.bet > 0)) {
            container.hideLabel();
            this.setCurrentBet(container, 0);
            return false;
          }
          this.setDataContainer(container, itemData);
        }
        return true;
      };
      BjChipsContainerUpdater.prototype.animateFromDataContainer = function(container, itemDataFrom, itemData) {
        if (null != itemDataFrom.bet) {
          var incrementBet = null != itemData.bet ? itemData.bet : 0 - itemDataFrom.bet;
          if (null != itemData.bet) {
            incrementBet = itemData.bet - itemDataFrom.bet;
            incrementBet > 0 && this.addAnimCurrentBet(container, incrementBet);
          }
        }
        null != itemData.position ? container.moveTo(itemData.position) : null != itemData.position && container.node.setPosition(itemData.position);
      };
      BjChipsContainerUpdater.prototype.setDataContainer = function(container, itemData) {
        null != itemData.bet && this.setCurrentBet(container, itemData.bet);
        null != itemData.position && container.node.setPosition(itemData.position);
        null != itemData.label ? container.showLabel(itemData.label) : container.hideLabel();
      };
      BjChipsContainerUpdater.prototype.setCurrentBet = function(chipContainer, currentBet) {
        currentBet > 0 ? chipContainer.setChips(this.calculateChips(currentBet)) : chipContainer.setChips([]);
      };
      BjChipsContainerUpdater.prototype.addAnimCurrentBet = function(chipContainer, currentBet) {
        currentBet > 0 && chipContainer.addChipsWithAnim(this.calculateChips(currentBet));
      };
      BjChipsContainerUpdater.prototype.calculateChips = function(currentBet) {
        var _this = this;
        if (currentBet <= 0) return [];
        var countByNomination = this.divideToChips(this._sortedNominations, currentBet);
        var result = [];
        Object.keys(countByNomination).sort(function(a, b) {
          return Number(b) - Number(a);
        }).map(function(nomination) {
          var count = countByNomination[nomination];
          var frame = _this._nominations.indexOf(Number(nomination));
          frame < 0 && (frame = _this._fractionalFrame);
          for (var i = 0; i < count; i++) result.push({
            frame: frame,
            text: nomination
          });
        });
        return result;
      };
      BjChipsContainerUpdater.prototype.divideToChips = function(sortedNominations, currentBet) {
        var localBet = currentBet;
        var currentNomination = 0;
        var result = {};
        for (var index = 0; index < sortedNominations.length; index++) {
          currentNomination = sortedNominations[index];
          if (localBet >= currentNomination) {
            result[currentNomination] = Math.floor(localBet / currentNomination);
            localBet -= result[currentNomination] * currentNomination;
          }
          if (localBet < sortedNominations[sortedNominations.length - 1]) break;
        }
        return result;
      };
      BjChipsContainerUpdater.prototype.findContainer = function(containers, itemData) {
        var index = 0;
        if (null != itemData) for (index = 0; index < containers.length; index++) if (containers[index] && containers[index].dataKey == itemData.data_key) break;
        if (containers[index]) return containers.splice(index, 1)[0];
        return null;
      };
      BjChipsContainerUpdater.prototype.createContainer = function(position, index) {
        void 0 === index && (index = -1);
        console.log("BjChipsController", "createContainer");
        var container = this.getChipsContainer();
        this._parent.addChild(container.node);
        container.node.setPosition(position);
        return container;
      };
      BjChipsContainerUpdater.prototype.removeContainer = function(container) {
        console.log("BjChipsController", "removeContainer");
        container && (this._chipsContainerPool ? this._chipsContainerPool.put(container.node) : container.carefulDestroy());
      };
      BjChipsContainerUpdater.prototype.getChipsContainer = function() {
        if (!this._chipsContainerPool || this._chipsContainerPool.size() <= 0) return cc.instantiate(this._containerPrefab).getComponent("BjChipsContainer");
        return this._chipsContainerPool.get().getComponent("BjChipsContainer");
      };
      return BjChipsContainerUpdater;
    }();
    exports.default = BjChipsContainerUpdater;
    cc._RF.pop();
  }, {} ],
  BjChipsContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "023a0IzgalBrYV7UeNOhuvV", "BjChipsContainer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjChipsContainer = function(_super) {
      __extends(BjChipsContainer, _super);
      function BjChipsContainer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.chipAnchor = null;
        _this.chipPrefab = null;
        _this._chipCount = 0;
        _this._chipsPool = BjChipsContainer_1.chipsPool;
        _this._chipInAnimation = [];
        _this._animationCallbacks = [];
        _this._inMove = false;
        _this.dataKey = "";
        return _this;
      }
      BjChipsContainer_1 = BjChipsContainer;
      BjChipsContainer.prototype.onLoad = function() {};
      BjChipsContainer.prototype.start = function() {};
      BjChipsContainer.prototype.addChipsWithAnim = function(chips) {
        var _this = this;
        chips.forEach(function(element) {
          _this.addChipWithAnim(element["frame"], element["text"]);
        });
      };
      BjChipsContainer.prototype.setChips = function(chips) {
        var _this = this;
        this._chipCount = 0;
        this.clear();
        chips.forEach(function(element) {
          _this.setChip(element["frame"], element["text"]);
        });
      };
      BjChipsContainer.prototype.moveTo = function(position) {
        if (null != position) {
          var currentPosition = this.node.getPosition();
          if (!currentPosition.equals(position)) {
            var moveAction = cc.moveTo(BjChipsContainer_1.SPEED, position);
            var callback = cc.callFunc(this.onMoveToEnded.bind(this), this.node);
            this._inMove = true;
            this.node.runAction(cc.sequence(moveAction, callback));
          }
        }
      };
      BjChipsContainer.prototype.onMoveToEnded = function() {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) rest[_i] = arguments[_i];
        this._inMove = false;
        this.checkAllChipAnimationEnded();
      };
      BjChipsContainer.prototype.showLabel = function(text) {
        this.label.node.active = true;
        this.label.string = text;
      };
      BjChipsContainer.prototype.hideLabel = function() {
        this.label.node.active = false;
      };
      BjChipsContainer.prototype.carefulDestroy = function(destroy) {
        void 0 === destroy && (destroy = true);
        this.clear();
        destroy && this.node.destroy();
      };
      BjChipsContainer.prototype.addAnimationCallback = function(callback) {
        callback && this._animationCallbacks.push(callback);
      };
      BjChipsContainer.prototype.setSelectMod = function(state) {
        this.node.opacity = state ? 170 : 255;
      };
      Object.defineProperty(BjChipsContainer.prototype, "hasChipsInAnimation", {
        get: function() {
          return this._chipInAnimation.length > 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjChipsContainer.prototype, "isInAnimation", {
        get: function() {
          return this.hasChipsInAnimation || this._inMove;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjChipsContainer.prototype, "chipsPool", {
        set: function(pool) {
          this._chipsPool = pool;
        },
        enumerable: true,
        configurable: true
      });
      BjChipsContainer.prototype.positionTo = function(moveTo, chip) {
        var moveAction = cc.moveTo(BjChipsContainer_1.SPEED, moveTo);
        var callback = cc.callFunc(this.animationEnd.bind(this), chip);
        this._chipInAnimation.push(chip.node);
        chip.node.runAction(cc.sequence(moveAction, callback));
      };
      BjChipsContainer.prototype.animationEnd = function() {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) rest[_i] = arguments[_i];
        var node = rest[0];
        var index = this._chipInAnimation.indexOf(node);
        index >= 0 && this._chipInAnimation.splice(index, 1);
        this.checkAllChipAnimationEnded();
      };
      BjChipsContainer.prototype.checkAllChipAnimationEnded = function() {
        var _this = this;
        if (this._chipInAnimation.length > 0 || this._inMove) return;
        if (this._animationCallbacks && this._animationCallbacks.length > 0) {
          var animationCallbacks = this._animationCallbacks.slice();
          this._animationCallbacks.length = 0;
          animationCallbacks.forEach(function(callback) {
            callback(_this);
          });
        }
      };
      BjChipsContainer.prototype.addChipWithAnim = function(frame, text) {
        var chip = this.createChip();
        chip.setFrame(frame);
        chip.setText(text);
        this.chipAnchor.addChild(chip.node);
        var up = this._chipCount * BjChipsContainer_1.CHIP_GAP;
        chip.node.setPosition(new cc.Vec2(0, up + BjChipsContainer_1.CHIP_UP));
        this.positionTo(new cc.Vec2(0, up), chip);
        this._chipCount++;
      };
      BjChipsContainer.prototype.createChip = function() {
        var chip = null;
        chip = !this._chipsPool || this._chipsPool.size() <= 0 ? cc.instantiate(this.chipPrefab).getComponent("BjChip") : this._chipsPool.get().getComponent("BjChip");
        return chip;
      };
      BjChipsContainer.prototype.setChip = function(frame, text) {
        var chip = this.createChip();
        chip.setFrame(frame);
        chip.setText(text);
        this.chipAnchor.addChild(chip.node);
        chip.node.setPosition(new cc.Vec2(0, this._chipCount * BjChipsContainer_1.CHIP_GAP));
        this._chipCount++;
        return chip;
      };
      BjChipsContainer.prototype.clear = function() {
        this.checkAllChipAnimationEnded();
        this._chipInAnimation.length = 0;
        if (this._chipsPool) {
          var length = this.chipAnchor.children.length - 1;
          for (var i = length; i >= 0; i--) this._chipsPool.put(this.chipAnchor.children[i]);
        } else this.chipAnchor.removeAllChildren();
      };
      var BjChipsContainer_1;
      BjChipsContainer.SPEED = .5;
      BjChipsContainer.CHIP_GAP = 10;
      BjChipsContainer.CHIP_UP = 300;
      BjChipsContainer.chipsPool = new cc.NodePool();
      __decorate([ property(cc.Label) ], BjChipsContainer.prototype, "label", void 0);
      __decorate([ property(cc.Node) ], BjChipsContainer.prototype, "chipAnchor", void 0);
      __decorate([ property(cc.Prefab) ], BjChipsContainer.prototype, "chipPrefab", void 0);
      BjChipsContainer = BjChipsContainer_1 = __decorate([ ccclass ], BjChipsContainer);
      return BjChipsContainer;
    }(cc.Component);
    exports.default = BjChipsContainer;
    cc._RF.pop();
  }, {} ],
  BjChipsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c20fchgrUpEFYBqCOhxcCoE", "BjChipsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Constant = require("./BjConstant");
    var Actions = require("./store/BjActions");
    var BjChipsController = function() {
      function BjChipsController() {
        var _this = this;
        this._selectPosition = new cc.Vec2(0, -327);
        this._insurePosition = new cc.Vec2(-250, 0);
        this._split = [];
        this.action = function(action) {
          switch (action["type"]) {
           case Actions.SET_BET:
            _this._containerUpdate.clear();
            _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.processUpdate(_this._storeController.getRootState);
              value.queue.completeNode(value.id);
            });
            break;

           case Actions.SPLIT:
            _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.splitUpdate(_this._storeController.getRootState);
              _this._containerUpdate.setAnimationEndCallback(function() {
                _this.processUpdate(_this._storeController.getRootState);
                value.queue.completeNode(value.id);
              });
            });
            break;

           case Actions.DOUBLE:
            _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.processUpdate(_this._storeController.getRootState);
              value.queue.completeNode(value.id);
            });
            break;

           case Actions.INSURANCE_ACCEPT:
            _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.insuranceUpdate(_this._storeController.getRootState);
              _this._containerUpdate.setAnimationEndCallback(function() {
                _this.processUpdate(_this._storeController.getRootState);
                value.queue.completeNode(value.id);
              });
            });
            break;

           case Actions.INSURANCE_CLEAR:
            _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.processUpdate(_this._storeController.getRootState);
              value.queue.completeNode(value.id);
            });
            break;

           case Actions.SET_WIN_INFO_BY_HAND:
            var winMoney_1 = BjStoreInterface_1.StoreHelper.getWinMoney(_this._storeController.getRootState);
            _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.onGameEndUpdate(_this._storeController.getRootState);
              _this._containerUpdate.setAnimationEndCallback(function() {
                _this._containerUpdate.clear();
                var one = _this.createEmptyContainerData();
                one.bet = winMoney_1;
                one.label = one.bet.toString();
                _this._containerUpdate.updateContainers([ one ]);
                value.queue.completeNode(value.id);
              });
            });
            winMoney_1 > 0 && _this._synchronizer.addSyncCallRequest(action["type"], BjChipsController.VIEW_SYNC_WAIT_KEY2).then(function(value) {
              _this._containerUpdate.clear();
              value.queue.completeNode(value.id);
            });
          }
        };
      }
      BjChipsController.prototype.init = function(params, containerUpdate) {
        var _this = this;
        this._split.push(this._selectPosition.clone().add(new cc.Vec2(75, 0)));
        this._split.push(this._selectPosition.clone().add(new cc.Vec2(-75, 0)));
        containerUpdate.startPosition = this._selectPosition.clone();
        this._containerUpdate = containerUpdate;
        this._synchronizer = params.synchronizer;
        this._storeController = params.storeController;
        this._storeController.addActionListener(this.action);
        this._storeController.subscribe(function() {
          var state = _this._storeController.getRootState;
          state.game_state != Constant.GAME_STATE.select_bet && state.game_state != Constant.GAME_STATE.select_chip || _this.processUpdate(state);
        });
      };
      BjChipsController.prototype.onGameEndGenerateUpdateData = function(state) {
        var updateData = [];
        var winByHand = BjStoreInterface_1.StoreHelper.getWinByHand(state);
        var hands = BjStoreInterface_1.StoreHelper.getMeHands(state);
        if (winByHand.length > 0) {
          var containerData = null;
          for (var index = 0; index < winByHand.length; index++) {
            var value = winByHand[index].type != Constant.HAND_WIN_STATE.bj_insurance ? hands[index].current_bet : hands[index].bj_insurance;
            containerData = this.generateContainerData(winByHand[index].money - value, winByHand[index].money);
            if (containerData) {
              winByHand[index].type == Constant.HAND_WIN_STATE.bj_insurance ? containerData.data_key = BjChipsController.HAND_0_INSURANCE : 0 == index ? containerData.data_key = BjChipsController.HAND_0 : 1 == index && (containerData.data_key = BjChipsController.HAND_1);
              updateData.push(containerData);
            }
          }
        }
        return updateData;
      };
      BjChipsController.prototype.generateInsuranceUpdateData = function(state, hands) {
        var _this = this;
        var updateData = this.generateUpdateData(hands, state);
        updateData.forEach(function(item) {
          if (item && item.data_key == BjChipsController.HAND_0_INSURANCE) {
            item.animation_from = _this.createEmptyContainerData();
            item.animation_from.bet = item.bet;
            item.animation_from.position = _this._selectPosition;
            item.label = null;
          }
        });
        return updateData;
      };
      BjChipsController.prototype.generateSplitUpdateData = function(state, hands) {
        var updateData = this.generateUpdateData(hands, state);
        var old0;
        this._containerUpdate.lastDataUpdate.forEach(function(item) {
          item && item.data_key == BjChipsController.HAND_0 && (old0 = __assign({}, item));
        });
        updateData.forEach(function(item) {
          if (item && old0 && (item.data_key == BjChipsController.HAND_0 || item.data_key == BjChipsController.HAND_1)) {
            item.animation_from = __assign({}, old0);
            item.label = null;
          }
        });
        return updateData;
      };
      BjChipsController.prototype.generateUpdateData = function(hands, state) {
        var _this = this;
        var updateData = [];
        if (!hands || state.game_state != Constant.GAME_STATE.game) {
          updateData.push({
            bet: state.initial_bet,
            position: this._selectPosition,
            label: null,
            data_key: BjChipsController.SELECT_BET,
            animation_from: null
          });
          return updateData;
        }
        hands.forEach(function(hand, index) {
          updateData.push({
            bet: hand.current_bet,
            position: 2 == hands.length ? _this._split[index] : _this._selectPosition,
            label: hand.current_bet.toString(),
            data_key: 0 == index ? BjChipsController.HAND_0 : BjChipsController.HAND_1,
            animation_from: null
          });
        });
        BjStoreInterface_1.StoreHelper.hasMeInsuranceOnFirstHand(state) && updateData.push({
          bet: hands[0].bj_insurance,
          position: this._insurePosition,
          label: hands[0].bj_insurance.toString(),
          data_key: BjChipsController.HAND_0_INSURANCE,
          animation_from: null
        });
        return updateData;
      };
      BjChipsController.prototype.generateContainerData = function(add, all) {
        if (all > 0) {
          var result = this.createEmptyContainerData();
          result.bet = all;
          result.label = all.toString();
          result.position = this._selectPosition.clone();
          result.animation_from = this.createEmptyContainerData();
          add > 0 && (result.animation_from.bet = all - add);
          return result;
        }
        return null;
      };
      BjChipsController.prototype.processUpdate = function(state) {
        console.log("BjChipsController", "processUpdate");
        var hands = BjStoreInterface_1.StoreHelper.getMeHands(state);
        var updateData = this.generateUpdateData(hands, state);
        this._containerUpdate.updateContainers(updateData);
        this._containerUpdate.firstContainer && this._containerUpdate.firstContainer.setSelectMod(state.game_state == Constant.GAME_STATE.select_bet || state.game_state == Constant.GAME_STATE.select_chip);
      };
      BjChipsController.prototype.insuranceUpdate = function(state) {
        console.log("BjChipsController", "splitUpdate");
        var hands = BjStoreInterface_1.StoreHelper.getMeHands(state);
        var updateData = this.generateInsuranceUpdateData(state, hands);
        this._containerUpdate.updateContainers(updateData);
      };
      BjChipsController.prototype.splitUpdate = function(state) {
        console.log("BjChipsController", "splitUpdate");
        var hands = BjStoreInterface_1.StoreHelper.getMeHands(state);
        var updateData = this.generateSplitUpdateData(state, hands);
        this._containerUpdate.updateContainers(updateData);
      };
      BjChipsController.prototype.onGameEndUpdate = function(state) {
        this._containerUpdate.updateContainers(this.onGameEndGenerateUpdateData(state));
      };
      BjChipsController.prototype.createEmptyContainerData = function() {
        return {
          bet: null,
          label: null,
          position: null,
          data_key: null,
          animation_from: null
        };
      };
      BjChipsController.SELECT_BET = "select_bet";
      BjChipsController.HAND_0 = "hand_0";
      BjChipsController.HAND_1 = "hand_1";
      BjChipsController.HAND_0_INSURANCE = "hand_0_insurance";
      BjChipsController.VIEW_SYNC_WAIT_KEY = "BjChipsController";
      BjChipsController.VIEW_SYNC_WAIT_KEY2 = "BjChipsController2";
      return BjChipsController;
    }();
    exports.default = BjChipsController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjChipsSelectContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86585L33JhOYpzOS4AQ13nG", "BjChipsSelectContainer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjChipsSelectContainer = function(_super) {
      __extends(BjChipsSelectContainer, _super);
      function BjChipsSelectContainer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._onClickCallback = null;
        _this._indexCurrent = -1;
        _this._waitAnimation = [];
        return _this;
      }
      BjChipsSelectContainer_1 = BjChipsSelectContainer;
      BjChipsSelectContainer.prototype.onLoad = function() {
        if (0 == BjChipsSelectContainer_1._positions.length) {
          var chip = void 0;
          for (var index = 0; index < BjChipsSelectContainer_1.COUNT; index++) {
            chip = this.node.getChildByName(BjChipsSelectContainer_1.TOKEN + (index + 1).toString());
            if (chip) {
              var position = chip.getPosition().clone();
              BjChipsSelectContainer_1._positions.push(position);
            }
          }
        }
      };
      BjChipsSelectContainer.prototype.onEnable = function() {
        var _this = this;
        this._lock = true;
        this.animationIn(this._indexCurrent, function() {
          _this._lock = false;
        });
      };
      BjChipsSelectContainer.prototype.onDisable = function() {
        this._lock = true;
        var chip;
        this._endCallback = null;
        this._waitAnimation.length = 0;
        for (var index = 0; index < BjChipsSelectContainer_1.COUNT; index++) {
          chip = this.node.getChildByName(BjChipsSelectContainer_1.TOKEN + (index + 1).toString());
          chip && chip.stopAllActions();
        }
      };
      BjChipsSelectContainer.prototype.setLabels = function(texts) {
        for (var index = 0; index < texts.length; index++) this.node.getChildByName(BjChipsSelectContainer_1.TOKEN + (index + 1).toString()).getChildByName(BjChipsSelectContainer_1.LABEL + (index + 1).toString()).getComponent(cc.Label).string = texts[index];
      };
      BjChipsSelectContainer.prototype.setOnCallback = function(callback) {
        this._onClickCallback = callback;
      };
      BjChipsSelectContainer.prototype.animationIn = function(indexCurrent, callback) {
        var chip;
        this._waitAnimation.length = 0;
        this._endCallback = callback;
        for (var index = 0; index < BjChipsSelectContainer_1._positions.length; index++) {
          chip = this.node.getChildByName(BjChipsSelectContainer_1.TOKEN + (index + 1).toString()).getComponent(cc.Sprite);
          if (chip) {
            this._waitAnimation.push(chip.node);
            var position = BjChipsSelectContainer_1._positions[index];
            chip.node.active = true;
            indexCurrent >= index ? chip.node.setPosition(new cc.Vec2(BjChipsSelectContainer_1.MIN_X, position.y)) : chip.node.setPosition(new cc.Vec2(BjChipsSelectContainer_1.MAX_X, position.y));
            this.positionTo(chip.node, position);
          }
        }
      };
      BjChipsSelectContainer.prototype.animationOut = function(indexCurrent, callback) {
        var chip;
        this._waitAnimation.length = 0;
        this._endCallback = callback;
        this._lock = true;
        for (var index = 0; index < BjChipsSelectContainer_1._positions.length; index++) {
          chip = this.node.getChildByName(BjChipsSelectContainer_1.TOKEN + (index + 1).toString()).getComponent(cc.Sprite);
          if (chip) {
            var position = BjChipsSelectContainer_1._positions[index];
            if (indexCurrent != index) {
              chip.node.active = false;
              chip.node.setPosition(position);
            } else {
              this._waitAnimation.push(chip.node);
              this.positionTo(chip.node, new cc.Vec2(BjChipsSelectContainer_1.MIN_X, position.y));
            }
          }
        }
      };
      BjChipsSelectContainer.prototype.positionTo = function(node, moveTo) {
        var length = node.getPosition().sub(moveTo).mag();
        var duration = length > 50 ? BjChipsSelectContainer_1.DURATION : BjChipsSelectContainer_1.MIN_DURATION;
        var moveAction = cc.moveTo(duration, moveTo);
        var callback = cc.callFunc(this.animationEnd, this);
        node.runAction(cc.sequence(moveAction, callback));
      };
      Object.defineProperty(BjChipsSelectContainer.prototype, "indexCurrent", {
        set: function(index) {
          this._indexCurrent = index;
        },
        enumerable: true,
        configurable: true
      });
      BjChipsSelectContainer.prototype.animationEnd = function() {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) rest[_i] = arguments[_i];
        var node = rest[0];
        var index = this._waitAnimation.indexOf(node);
        index >= 0 && this._waitAnimation.splice(index, 1);
        if (this._waitAnimation.length <= 0 && this._endCallback) {
          this._endCallback();
          this._endCallback = null;
        }
      };
      BjChipsSelectContainer.prototype.on1st = function() {
        this.onClick(0);
      };
      BjChipsSelectContainer.prototype.on2st = function() {
        this.onClick(1);
      };
      BjChipsSelectContainer.prototype.on3st = function() {
        this.onClick(2);
      };
      BjChipsSelectContainer.prototype.on4st = function() {
        this.onClick(3);
      };
      BjChipsSelectContainer.prototype.on5st = function() {
        this.onClick(4);
      };
      BjChipsSelectContainer.prototype.on6st = function() {
        this.onClick(5);
      };
      BjChipsSelectContainer.prototype.onClick = function(index) {
        var _this = this;
        if (this._lock) return;
        this.animationOut(index, function() {
          _this._onClickCallback && _this._onClickCallback(index);
        });
      };
      var BjChipsSelectContainer_1;
      BjChipsSelectContainer.TOKEN = "token_0";
      BjChipsSelectContainer.LABEL = "label";
      BjChipsSelectContainer.MIN_X = -260;
      BjChipsSelectContainer.MAX_X = 260;
      BjChipsSelectContainer.DURATION = .5;
      BjChipsSelectContainer.MIN_DURATION = .01;
      BjChipsSelectContainer.COUNT = 6;
      BjChipsSelectContainer._positions = [];
      BjChipsSelectContainer = BjChipsSelectContainer_1 = __decorate([ ccclass ], BjChipsSelectContainer);
      return BjChipsSelectContainer;
    }(cc.Component);
    exports.default = BjChipsSelectContainer;
    cc._RF.pop();
  }, {} ],
  BjChip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40174M4qvBBP7p9T1trLdB1", "BjChip");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjChip = function(_super) {
      __extends(BjChip, _super);
      function BjChip() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.chip = null;
        _this.frames = [];
        return _this;
      }
      BjChip.prototype.start = function() {};
      BjChip.prototype.setFrame = function(frameIndex) {
        frameIndex >= 0 && frameIndex < this.frames.length && (this.chip.spriteFrame = this.frames[frameIndex]);
      };
      BjChip.prototype.setText = function(text) {
        this.label.string = text;
      };
      __decorate([ property(cc.Label) ], BjChip.prototype, "label", void 0);
      __decorate([ property(cc.Sprite) ], BjChip.prototype, "chip", void 0);
      __decorate([ property(cc.SpriteFrame) ], BjChip.prototype, "frames", void 0);
      BjChip = __decorate([ ccclass ], BjChip);
      return BjChip;
    }(cc.Component);
    exports.default = BjChip;
    cc._RF.pop();
  }, {} ],
  BjCommonInterfaces: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c1798xCyXNHV7Di2syDMqFm", "BjCommonInterfaces");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  BjConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3863a2jkKlGSKHvRwlDzslq", "BjConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjConfig = function() {
      function BjConfig() {
        this._data = {};
      }
      BjConfig.prototype.loadConfig = function(data) {
        this._data = data;
      };
      BjConfig.prototype.loadPartConfig = function(key, data) {
        this._data[key] = data;
      };
      Object.defineProperty(BjConfig.prototype, "hasMaxBet", {
        get: function() {
          return this.hasKeys([ "bet_config", "max_bet" ]);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjConfig.prototype, "maxBet", {
        get: function() {
          return this.hasKeys([ "bet_config", "max_bet" ]) ? this.getValueByKeys([ "bet_config", "max_bet" ]) : -1;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjConfig.prototype, "hasStartMoney", {
        get: function() {
          return this.hasKeys([ "start_money" ]);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjConfig.prototype, "startMoney", {
        get: function() {
          return this.hasKeys([ "start_money" ]) ? this.getValueByKeys([ "start_money" ]) : -1;
        },
        enumerable: true,
        configurable: true
      });
      BjConfig.prototype.checkExist = function(value) {
        return void 0 != value && null != value;
      };
      BjConfig.prototype.hasKeys = function(keys) {
        var _this = this;
        if (this.checkExist(this._data)) {
          var value_1 = this._data;
          keys.forEach(function(key) {
            value_1 && (value_1 = _this.t1(value_1, key));
          });
          return this.checkExist(value_1);
        }
        return false;
      };
      BjConfig.prototype.getValueByKeys = function(keys) {
        var _this = this;
        if (this.checkExist(this._data)) {
          var value_2 = this._data;
          keys.forEach(function(key) {
            value_2 && (value_2 = _this.t1(value_2, key));
          });
          return value_2;
        }
        return null;
      };
      BjConfig.prototype.t1 = function(value, key) {
        return this.checkExist(value) && this.checkExist(value[key]) ? value[key] : null;
      };
      return BjConfig;
    }();
    exports.default = BjConfig;
    cc._RF.pop();
  }, {} ],
  BjConstant: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9138h6o7xMI5WRQZ9cb+rA", "BjConstant");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.A2_10JQK = "A,2,3,4,5,6,7,8,9,10,J,Q,K".split(",");
    exports.SUITS = "clubs,hearts,spades,diamonds".split(",");
    exports.JQK = "J,Q,K".split(",");
    exports.ACE = "A";
    exports.KING = "K";
    exports.QUEEN = "Q";
    exports.JACK = "J";
    exports.C10 = "10";
    exports.C8 = "8";
    exports.C2 = "2";
    exports.CLUBS = "clubs";
    exports.HEARTS = "hearts";
    exports.SPADES = "spades";
    exports.DIAMONDS = "diamonds";
    exports.CARD_MOVE_COMPLETE = "card_move_complete";
    exports.CHIPS_NOMINAL = [ 1, 2, 5, 10, 20, 50 ];
    exports.BJ_SCORE = 21;
    exports.DEALER_17 = 17;
    exports.DEALER_MIN_CARD = 2;
    exports.DEFAULT = "default";
    var PlayerState = function() {
      function PlayerState() {}
      PlayerState.WAIT_FOR_MOVE = "WAIT_FOR_MOVE";
      PlayerState.WAIT_FOR_ANIMATION_END = "WAIT_ANIMATION_END";
      PlayerState.INACTIVE = "INACTIVE";
      PlayerState.WAIT_FOR_CARD = "WAIT_FOR_CARD";
      return PlayerState;
    }();
    exports.PlayerState = PlayerState;
    var HAND_WIN_STATE;
    (function(HAND_WIN_STATE) {
      HAND_WIN_STATE[HAND_WIN_STATE["blackjack"] = 0] = "blackjack";
      HAND_WIN_STATE[HAND_WIN_STATE["win"] = 1] = "win";
      HAND_WIN_STATE[HAND_WIN_STATE["win_double"] = 2] = "win_double";
      HAND_WIN_STATE[HAND_WIN_STATE["push"] = 3] = "push";
      HAND_WIN_STATE[HAND_WIN_STATE["bust"] = 4] = "bust";
      HAND_WIN_STATE[HAND_WIN_STATE["bj_insurance"] = 5] = "bj_insurance";
      HAND_WIN_STATE[HAND_WIN_STATE["bj_even_money"] = 6] = "bj_even_money";
      HAND_WIN_STATE[HAND_WIN_STATE["lose"] = 7] = "lose";
    })(HAND_WIN_STATE = exports.HAND_WIN_STATE || (exports.HAND_WIN_STATE = {}));
    var INSURE_STATE;
    (function(INSURE_STATE) {
      INSURE_STATE[INSURE_STATE["unused"] = 0] = "unused";
      INSURE_STATE[INSURE_STATE["request"] = 1] = "request";
      INSURE_STATE[INSURE_STATE["accepted"] = 2] = "accepted";
      INSURE_STATE[INSURE_STATE["rejected"] = 3] = "rejected";
      INSURE_STATE[INSURE_STATE["cleared"] = 4] = "cleared";
    })(INSURE_STATE = exports.INSURE_STATE || (exports.INSURE_STATE = {}));
    var GAME_STATE;
    (function(GAME_STATE) {
      GAME_STATE[GAME_STATE["undefined"] = -1] = "undefined";
      GAME_STATE[GAME_STATE["select_bet"] = 0] = "select_bet";
      GAME_STATE[GAME_STATE["select_chip"] = 1] = "select_chip";
      GAME_STATE[GAME_STATE["before_game"] = 10] = "before_game";
      GAME_STATE[GAME_STATE["game"] = 11] = "game";
      GAME_STATE[GAME_STATE["before_game_end"] = 12] = "before_game_end";
      GAME_STATE[GAME_STATE["game_end"] = 13] = "game_end";
      GAME_STATE[GAME_STATE["after_game_end"] = 14] = "after_game_end";
    })(GAME_STATE = exports.GAME_STATE || (exports.GAME_STATE = {}));
    cc._RF.pop();
  }, {} ],
  BjGameConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "687e6QI0tdFarkR0Kd2/AXp", "BjGameConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.config1 = {
      bet_config: {
        max_bet: 50
      },
      start_money: 1e3
    };
    cc._RF.pop();
  }, {} ],
  BjGameFieldController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33220sD5HhP/Jmr779Cg35p", "BjGameFieldController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actions = require("./store/BjActions");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var BjGameFieldController = function() {
      function BjGameFieldController() {
        var _this = this;
        this._callbacks = [];
        this.action = function(action, returnValue) {
          var state = _this._storeController.getRootState;
          -1 != [ Actions.HIT_AI, Actions.HIT, Actions.DOUBLE ].indexOf(action.type) && _this._synchronizer.addSyncCallRequest(action.type, BjGameFieldController.VIEW_SYNC_WAIT_KEY).then(function(queueCallback) {
            _this._callbacks.push(queueCallback);
            _this.addCard(action, state, returnValue.data);
          });
          if (action.type == Actions.SPLIT) {
            var indexPlayer = BjStoreInterface_1.StoreHelper.activePlayerIndex(state);
            var indexCardContainer = BjStoreInterface_1.StoreHelper.activePlayerHandIndex(state);
            var newIndexCardContainer = BjStoreInterface_1.StoreHelper.activePlayer(state).hands.length - 1;
            _this._gameField.split(indexPlayer, indexCardContainer, newIndexCardContainer);
          }
          -1 != [ Actions.RESTART, Actions.SELECT_BET_STATE ].indexOf(action.type) && _this._gameField.restart();
          action.type == Actions.SET_WIN_INFO_BY_HAND && _this._synchronizer.addSyncCallRequest(action.type, BjGameFieldController.VIEW_SYNC_WAIT_KEY).then(function(queueCallback) {
            _this._gameField.gameEnd();
            _this._callbacks.push(queueCallback);
          });
        };
        this.addCard = function(action, state, cardData) {
          var playerIndex = state.active_player_index;
          var handIndex = action["hand_index"] ? action["hand_index"] : BjStoreInterface_1.StoreHelper.activePlayer(state).active_hands_index;
          _this._gameField.addCard(cardData, playerIndex, handIndex);
        };
      }
      BjGameFieldController.prototype.init = function(view, params) {
        var _this = this;
        this._storeController = params.storeController;
        this._storeController.addActionListener(this.action);
        this._synchronizer = params.synchronizer;
        this._gameField = view;
        this._gameField.setAllMoveFinishCallback(function() {
          var callbacks = _this._callbacks.slice();
          _this._callbacks.length = 0;
          callbacks.forEach(function(item) {
            item.queue.completeNode(item.id);
          });
        });
      };
      BjGameFieldController.prototype.dispatch = function(params) {
        this._storeController.dispatch(params);
      };
      BjGameFieldController.VIEW_SYNC_WAIT_KEY = "GameField";
      return BjGameFieldController;
    }();
    exports.default = BjGameFieldController;
    cc._RF.pop();
  }, {
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjGameField: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c55fcKBp2FHpqht43pHHYA8", "BjGameField");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjGameField = function(_super) {
      __extends(BjGameField, _super);
      function BjGameField() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cardContainerPrefab = null;
        _this.playerPlace = null;
        _this.cardDeckPlace = null;
        _this.dealerPlace = null;
        _this.outPlace = null;
        _this._cardContainers = [];
        return _this;
      }
      BjGameField.prototype.start = function() {
        this.firstCreate();
      };
      Object.defineProperty(BjGameField.prototype, "cartContainer", {
        get: function() {
          return this._cardContainers;
        },
        enumerable: true,
        configurable: true
      });
      BjGameField.prototype.setAllMoveFinishCallback = function(callback) {
        this._allMoveFinishCallback = callback;
      };
      BjGameField.prototype.firstCreate = function() {
        var newCardContainer = this.createCardContainer(this.playerPlace.position, this.cardDeckPlace.position, this.outPlace.position);
        newCardContainer.indexPlayer = 0;
        newCardContainer.indexCardContainer = 0;
        newCardContainer = this.createCardContainer(this.dealerPlace.position, this.cardDeckPlace.position, this.outPlace.position);
        newCardContainer.indexPlayer = 1;
        newCardContainer.indexCardContainer = 0;
      };
      BjGameField.prototype.addCard = function(type, indexPlayer, indexCardContainer) {
        var cardContainer = this.findCardContainer(indexPlayer, indexCardContainer);
        cardContainer ? cardContainer.addNewCard(type) : console.log("BjGameField", "container not found", indexPlayer, indexCardContainer);
      };
      BjGameField.prototype.restart = function() {
        this._cardContainers.forEach(function(item, i, arr) {
          item.node.removeFromParent();
        });
        this._cardContainers.length = 0;
        this.firstCreate();
      };
      BjGameField.prototype.gameEnd = function() {
        this._cardContainers.forEach(function(item, i, arr) {
          item.animateCardOut();
        });
      };
      BjGameField.prototype.split = function(indexPlayer, indexCardContainer, newIndexCardContainer) {
        var offset = 150;
        var cardContainer = this.findCardContainer(indexPlayer, indexCardContainer);
        var position = cardContainer.node.getPosition().clone();
        var newCardContainer = this.createCardContainer(position, this.cardDeckPlace.position, this.outPlace.position);
        newCardContainer.indexPlayer = cardContainer.indexPlayer;
        newCardContainer.indexCardContainer = newIndexCardContainer;
        newCardContainer.node.x -= offset;
        var card = cardContainer.removeLastCard();
        card.node.x += offset;
        newCardContainer.processCard(card, true);
        cardContainer.moveX(offset);
      };
      BjGameField.prototype.findCardContainer = function(indexPlayer, indexCardContainer) {
        var cardContainer = null;
        for (var index = 0; index < this._cardContainers.length; index++) {
          cardContainer = this._cardContainers[index];
          if (cardContainer.indexPlayer == indexPlayer && cardContainer.indexCardContainer == indexCardContainer) return cardContainer;
        }
        return null;
      };
      BjGameField.prototype.createCardContainer = function(position, cardDeckPlace, outPosition) {
        var newCardContainer = this.makeCardContainer(cardDeckPlace, outPosition);
        newCardContainer.setCallback(this.onCardFinishMove.bind(this));
        this.node.addChild(newCardContainer.node);
        this._cardContainers.push(newCardContainer);
        newCardContainer.node.setPosition(position);
        return newCardContainer;
      };
      BjGameField.prototype.onCardFinishMove = function(cardContainer) {
        var hasMoveCards = false;
        this._cardContainers.forEach(function(item, i, arr) {
          hasMoveCards = hasMoveCards || item.hasMoveCard;
        });
        hasMoveCards || this._allMoveFinishCallback();
      };
      BjGameField.prototype.makeCardContainer = function(dealerPosition, outPosition) {
        var newCardContainer = cc.instantiate(this.cardContainerPrefab).getComponent("BjCardContainer");
        newCardContainer.setDealerPosition(dealerPosition);
        newCardContainer.setOutPosition(outPosition);
        return newCardContainer;
      };
      __decorate([ property(cc.Prefab) ], BjGameField.prototype, "cardContainerPrefab", void 0);
      __decorate([ property(cc.Node) ], BjGameField.prototype, "playerPlace", void 0);
      __decorate([ property(cc.Node) ], BjGameField.prototype, "cardDeckPlace", void 0);
      __decorate([ property(cc.Node) ], BjGameField.prototype, "dealerPlace", void 0);
      __decorate([ property(cc.Node) ], BjGameField.prototype, "outPlace", void 0);
      BjGameField = __decorate([ ccclass ], BjGameField);
      return BjGameField;
    }(cc.Component);
    exports.default = BjGameField;
    cc._RF.pop();
  }, {} ],
  BjGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "25221ylfgRF6pGa+ASFHJsF", "BjGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjMatchController_1 = require("./BjMatchController");
    var BjLanguage_1 = require("./lang/BjLanguage");
    var BjScoreHintController_1 = require("./BjScoreHintController");
    var BjHistoryController_1 = require("./BjHistoryController");
    var BjChipsController_1 = require("./BjChipsController");
    var BjChipSelect_1 = require("./views/BjChipSelect");
    var StoreController_1 = require("./store/StoreController");
    var BjCardDeck_1 = require("./BjCardDeck");
    var Actions = require("./store/BjActions");
    var BjTextLang_1 = require("./lang/BjTextLang");
    var BjPlayButtonController_1 = require("./BjPlayButtonController");
    var BjInsureMessageController_1 = require("./BjInsureMessageController");
    var BjWinMessageController_1 = require("./BjWinMessageController");
    var BjSelectBetController_1 = require("./BjSelectBetController");
    var BjChipSelectController_1 = require("./BjChipSelectController");
    var BjHandAnimationController_1 = require("./BjHandAnimationController");
    var BjGameFieldController_1 = require("./BjGameFieldController");
    var BjSynchronizerController_1 = require("./BjSynchronizerController");
    var BjSyncActionConfig_1 = require("./config/BjSyncActionConfig");
    var Constant = require("./BjConstant");
    var BjChipsContainerUpdater_1 = require("./BjChipsContainerUpdater");
    var BjWaitController_1 = require("./BjWaitController");
    var BjConfig_1 = require("./BjConfig");
    var BjGameConfig = require("./config/BjGameConfig");
    var BjGame = function(_super) {
      __extends(BjGame, _super);
      function BjGame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cardContainerPrefab = null;
        _this.btnContainerPrefab = null;
        _this.gameFieldPrefab = null;
        _this.selectBetPrefab = null;
        _this.cardScoreHint = null;
        _this.historyElement = null;
        _this.winMessagePrefab = null;
        _this.insureMessagePrefab = null;
        _this.chipsContainerPrefab = null;
        _this.chipsSelectContainerPrefab = null;
        _this.chipSelectPrefab = null;
        _this.buttonAnchor = null;
        _this.hands = null;
        _this.money = null;
        _this._matchController = null;
        _this._language = null;
        return _this;
      }
      BjGame.prototype.onLoad = function() {
        console.log("Game.onLoad");
      };
      BjGame.prototype.start = function() {
        var _this = this;
        console.log("Game.start");
        this._bjConfig = new BjConfig_1.default();
        this._bjConfig.loadConfig(BjGameConfig.config1);
        this._storeController = new StoreController_1.default();
        this._storeController.init(this._bjConfig);
        this._synchronizerController = new BjSynchronizerController_1.default();
        this._synchronizerController.init(this._storeController, BjSyncActionConfig_1.default);
        this._language = new BjLanguage_1.default(BjTextLang_1.TEXT);
        var params = {
          language: this._language,
          storeController: this._storeController,
          synchronizer: this._synchronizerController,
          config: this._bjConfig
        };
        this._cardDeck = new BjCardDeck_1.default();
        this._cardDeck.init(params);
        this.initControllers(params);
        this.node.getChildByName("History").getChildByName("player_history").getComponent(cc.Label).string = this._language.lang("player_history");
        this.node.getChildByName("History").getChildByName("dealer_history").getComponent(cc.Label).string = this._language.lang("dealer_history");
        this.money.string = this._storeController.store.getState().money.toFixed();
        this._storeController.addActionListener(function(action) {
          action.type == Actions.SET_WIN_INFO_BY_HAND && _this._synchronizerController.addSyncCallRequest(action.type, "BjGame").then(function(value) {
            value.queue.completeNode(value.id);
            _this._storeController.dispatch(Actions.setSelectBetState());
          });
        });
        this._storeController.store.subscribe(function() {
          var state = _this._storeController.store.getState();
          _this.money.string = state.money.toFixed(2);
        });
      };
      BjGame.prototype.update = function(dt) {};
      BjGame.prototype.onBack = function() {
        var canvas = cc.find("Canvas");
        canvas && canvas.getComponent("GameScene").onBackButtonPress();
      };
      BjGame.prototype.initControllers = function(params) {
        var gameResultLayer = this.node.getChildByName("GameResultLayer");
        var chipsLayer = this.node.getChildByName("ChipsLayer");
        var gameFieldLayer = this.node.getChildByName("GameFieldLayer");
        var gameField = this.createGameField(gameFieldLayer);
        this._matchController = new BjMatchController_1.default();
        this._matchController.init(params, this._cardDeck);
        this._gameFieldController = new BjGameFieldController_1.default();
        this._gameFieldController.init(gameField, params);
        this._playButtonController = new BjPlayButtonController_1.default();
        this._playButtonController.init(this.creareBtnContainer(), params, this._matchController.callbacks);
        this._scoreHintController = new BjScoreHintController_1.default();
        this._scoreHintController.init(this.cardScoreHint, this.node.getChildByName("HintLayer"), params, gameField);
        var helper = new BjChipsContainerUpdater_1.default();
        helper.init(this.chipsContainerPrefab, chipsLayer, Constant.CHIPS_NOMINAL, 6);
        this._chipsController = new BjChipsController_1.default();
        this._chipsController.init(params, helper);
        this._selectBetController = new BjSelectBetController_1.default();
        this._selectBetController.init(this.createSelectBetPrefabContainer(), params);
        this._chipSelectController = new BjChipSelectController_1.default();
        this._chipSelectController.init(this.createChipSelect(), this.createChipsSelectContainer(), params);
        this._historyController = new BjHistoryController_1.default();
        this._historyController.init(this._storeController.store, this.historyElement, this.node);
        this._winMessageController = new BjWinMessageController_1.default();
        this._winMessageController.init(this.createWinMessage(gameResultLayer), params);
        this._insureMessageController = new BjInsureMessageController_1.default();
        this._insureMessageController.init(this.createInsureMessage(gameResultLayer), params);
        this._handAnimationController = new BjHandAnimationController_1.default();
        this._handAnimationController.init(this.getHandAnimation(), params);
        this._waitController = new BjWaitController_1.default();
        this._waitController.init(params);
        this._waitController.addCallback(this._handAnimationController.waitCallBack);
      };
      BjGame.prototype.creareBtnContainer = function() {
        var btnContainer = cc.instantiate(this.btnContainerPrefab).getComponent("BjPlayerAction");
        this.buttonAnchor.addChild(btnContainer.node);
        return btnContainer;
      };
      BjGame.prototype.createSelectBetPrefabContainer = function() {
        this._selectBetcontainer = cc.instantiate(this.selectBetPrefab).getComponent("BjSelectBet");
        this.node.addChild(this._selectBetcontainer.node);
        return this._selectBetcontainer;
      };
      BjGame.prototype.createChipSelect = function() {
        this._chipSelect = cc.instantiate(this.chipSelectPrefab).getComponent(BjChipSelect_1.default);
        this.node.addChild(this._chipSelect.node);
        this._chipSelect.node.setPosition(new cc.Vec2(-255, -514));
        return this._chipSelect;
      };
      BjGame.prototype.createChipsSelectContainer = function() {
        this._chipsSelectContainer = cc.instantiate(this.chipsSelectContainerPrefab).getComponent("BjChipsSelectContainer");
        this.node.addChild(this._chipsSelectContainer.node);
        this._chipsSelectContainer.node.setPosition(new cc.Vec2(0, -512));
        return this._chipsSelectContainer;
      };
      BjGame.prototype.createInsureMessage = function(parent) {
        this._insureMessage = cc.instantiate(this.insureMessagePrefab).getComponent("BjInsureMessage");
        parent.addChild(this._insureMessage.node);
        return this._insureMessage;
      };
      BjGame.prototype.createWinMessage = function(parent) {
        this._winMessage = cc.instantiate(this.winMessagePrefab).getComponent("BjWinMessage");
        parent.addChild(this._winMessage.node);
        return this._winMessage;
      };
      BjGame.prototype.createGameField = function(parent) {
        var gameField = cc.instantiate(this.gameFieldPrefab).getComponent("BjGameField");
        parent.addChild(gameField.node);
        return gameField;
      };
      BjGame.prototype.getHandAnimation = function() {
        return this.hands.getComponent(cc.Animation);
      };
      BjGame.VIEW_SYNC_WAIT_KEY = "BjGame";
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "cardContainerPrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "btnContainerPrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "gameFieldPrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "selectBetPrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "cardScoreHint", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "historyElement", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "winMessagePrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "insureMessagePrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "chipsContainerPrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "chipsSelectContainerPrefab", void 0);
      __decorate([ property(cc.Prefab) ], BjGame.prototype, "chipSelectPrefab", void 0);
      __decorate([ property(cc.Node) ], BjGame.prototype, "buttonAnchor", void 0);
      __decorate([ property(cc.Sprite) ], BjGame.prototype, "hands", void 0);
      __decorate([ property(cc.Label) ], BjGame.prototype, "money", void 0);
      BjGame = __decorate([ ccclass ], BjGame);
      return BjGame;
    }(cc.Component);
    exports.default = BjGame;
    cc._RF.pop();
  }, {
    "./BjCardDeck": "BjCardDeck",
    "./BjChipSelectController": "BjChipSelectController",
    "./BjChipsContainerUpdater": "BjChipsContainerUpdater",
    "./BjChipsController": "BjChipsController",
    "./BjConfig": "BjConfig",
    "./BjConstant": "BjConstant",
    "./BjGameFieldController": "BjGameFieldController",
    "./BjHandAnimationController": "BjHandAnimationController",
    "./BjHistoryController": "BjHistoryController",
    "./BjInsureMessageController": "BjInsureMessageController",
    "./BjMatchController": "BjMatchController",
    "./BjPlayButtonController": "BjPlayButtonController",
    "./BjScoreHintController": "BjScoreHintController",
    "./BjSelectBetController": "BjSelectBetController",
    "./BjSynchronizerController": "BjSynchronizerController",
    "./BjWaitController": "BjWaitController",
    "./BjWinMessageController": "BjWinMessageController",
    "./config/BjGameConfig": "BjGameConfig",
    "./config/BjSyncActionConfig": "BjSyncActionConfig",
    "./lang/BjLanguage": "BjLanguage",
    "./lang/BjTextLang": "BjTextLang",
    "./store/BjActions": "BjActions",
    "./store/StoreController": "StoreController",
    "./views/BjChipSelect": "BjChipSelect"
  } ],
  BjHandAnimationController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e76a2QwyaRIb7ubFjBPlS3f", "BjHandAnimationController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actions = require("./store/BjActions");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Constant = require("./BjConstant");
    var BjHands_1 = require("./views/BjHands");
    var BjHandAnimationController = function() {
      function BjHandAnimationController() {
        var _this = this;
        this._isPlayAnimation = false;
        this._player = null;
        this._syncCallback = null;
        this._handWaitAnimation = null;
        this.wait = function(status) {
          _this._handWaitAnimation.wait(status);
        };
        this.onDispatchProcess = function(key) {
          _this._syncCallback && _this._syncCallback.queue.dispatch(key);
        };
        this.action = function(action) {
          if (_this._isPlayAnimation) return;
          switch (action["type"]) {
           case Actions.INSURANCE_ACCEPT:
           case Actions.DOUBLE:
           case Actions.SPLIT:
           case Actions.SET_BET:
            _this._synchronizer.addSyncCallRequest(action["type"], BjHandAnimationController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.playAnimation(value, [ BjHandAnimationController.BET_IN ]);
            });
            return;

           case Actions.HIT:
            _this._storeController.getRootState.round > 2 && BjStoreInterface_1.StoreHelper.isCurrentPlayerMe(_this._storeController.getRootState) && _this._synchronizer.addSyncCallRequest(Actions.HIT, BjHandAnimationController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.playAnimation(value, [ BjHandAnimationController.HIT ]);
            });
            return;

           case Actions.STAND:
            _this._synchronizer.addSyncCallRequest(Actions.STAND, BjHandAnimationController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.playAnimation(value, [ BjHandAnimationController.STAND ]);
            });
            return;

           case Actions.SET_WIN_INFO_BY_HAND:
            _this._synchronizer.addSyncCallRequest(Actions.SET_WIN_INFO_BY_HAND, BjHandAnimationController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              _this.playAnimation(value, _this.processGameEndAnimation(_this._storeController.getRootState));
            });
            return;
          }
        };
        this.playAnimation = function(value, animations) {
          if (value) {
            _this._syncCallback = value;
            _this._player.play(animations).then(function() {
              value.queue.completeNode(value.id);
            });
          } else _this._player.simplePlay(animations);
        };
      }
      BjHandAnimationController.prototype.init = function(anim, params) {
        this._player = new BjHandAnimationPlayer(anim, this.onDispatchProcess);
        this._storeController = params.storeController;
        this._storeController.addActionListener(this.action);
        this._synchronizer = params.synchronizer;
        this._player.simplePlay([ BjHandAnimationController.IDLE ]);
        this._handWaitAnimation = new HandWaitAnimation();
        this._handWaitAnimation.init(this._player);
      };
      Object.defineProperty(BjHandAnimationController.prototype, "waitCallBack", {
        get: function() {
          return this.wait;
        },
        enumerable: true,
        configurable: true
      });
      BjHandAnimationController.prototype.processGameEndAnimation = function(state) {
        var winState = BjStoreInterface_1.StoreHelper.getWinByHand(state).map(function(item) {
          return item.type;
        });
        var sequence = [];
        -1 != winState.indexOf(Constant.HAND_WIN_STATE.blackjack) ? sequence.push(BjHandAnimationController.CLAP, BjHandAnimationController.BET_OUT) : -1 != winState.indexOf(Constant.HAND_WIN_STATE.win) ? sequence.push(BjHandAnimationController.YES_RIGHT_HAND, BjHandAnimationController.BET_OUT) : -1 != winState.indexOf(Constant.HAND_WIN_STATE.win_double) ? sequence.push(BjHandAnimationController.YES, BjHandAnimationController.BET_OUT) : -1 != winState.indexOf(Constant.HAND_WIN_STATE.push) ? sequence.push(BjHandAnimationController.YES, BjHandAnimationController.BET_OUT) : -1 != winState.indexOf(Constant.HAND_WIN_STATE.bj_insurance) && sequence.push(BjHandAnimationController.BET_OUT);
        return sequence;
      };
      BjHandAnimationController.IDLE = "idle";
      BjHandAnimationController.BET_IN = "bet_in";
      BjHandAnimationController.BET_OUT = "bet_out";
      BjHandAnimationController.CLAP = "clap";
      BjHandAnimationController.HIT = "hit";
      BjHandAnimationController.STAND = "stand";
      BjHandAnimationController.WAIT_LEFT_HAND_IN = "wait_left_hand_in";
      BjHandAnimationController.WAIT_LEFT_HAND_OUT = "wait_left_hand_out";
      BjHandAnimationController.WAIT_LEFT_HAND = "wait_left_hand";
      BjHandAnimationController.WAIT_IDLE = "wait_idle";
      BjHandAnimationController.YES_RIGHT_HAND = "yes_right_hand";
      BjHandAnimationController.YES = "yes";
      BjHandAnimationController.VIEW_SYNC_WAIT_KEY = "hand_animation";
      return BjHandAnimationController;
    }();
    exports.default = BjHandAnimationController;
    var HandWaitAnimation = function() {
      function HandWaitAnimation() {
        var _this = this;
        this._player = null;
        this._isWaitState = false;
        this.playAnimation = function(animations) {
          _this._player.simplePlay(animations);
        };
      }
      HandWaitAnimation.prototype.init = function(player) {
        this._player = player;
      };
      HandWaitAnimation.prototype.wait = function(status) {
        this._isWaitState = status;
        this.clearTimeOut();
        if (status) {
          if (!this._player.hasSequenceAnimation) {
            console.log("BjHandAnimationController", "wait", status);
            this.playAnimation([ BjHandAnimationController.WAIT_LEFT_HAND_IN ]);
            var repeat = 1e3 * Math.random() % 5;
            for (var index = repeat; index > 0; index--) this.playAnimation([ BjHandAnimationController.WAIT_LEFT_HAND ]);
            this.playAnimation([ BjHandAnimationController.WAIT_LEFT_HAND_OUT ]);
          }
          this.startTimeOut();
        } else {
          console.log("BjHandAnimationController", "wait", "clear");
          this._player.clearAnimation(BjHandAnimationController.WAIT_LEFT_HAND);
        }
      };
      HandWaitAnimation.prototype.startTimeOut = function() {
        var _this = this;
        if (this._player.valid) this._timeOutKey = setTimeout(function() {
          return _this.wait(_this._isWaitState);
        }, 5e3); else {
          console.log("BjHandAnimationController", "valid", "clear");
          this.clearTimeOut();
        }
      };
      HandWaitAnimation.prototype.clearTimeOut = function() {
        this._timeOutKey >= 0 && clearTimeout(this._timeOutKey);
      };
      return HandWaitAnimation;
    }();
    exports.HandWaitAnimation = HandWaitAnimation;
    var BjHandAnimationPlayer = function() {
      function BjHandAnimationPlayer(anim, dispatch) {
        var _this = this;
        this._resolve = null;
        this._reject = null;
        this._anim = null;
        this._isPlayAnimation = false;
        this._sequence = [];
        this.IDLE = BjHandAnimationController.IDLE;
        this._anim = anim;
        var listener = this._anim.node.getComponent(BjHands_1.default);
        listener.setDispatchCallback(function(key) {
          return dispatch(key);
        });
        this._anim.on("finished", function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          var animationState = args.length > 1 ? args[1] : args[0].target;
          if (_this.nextAnimation(true)) return;
          if (animationState.name == _this.IDLE) {
            _this._isPlayAnimation = false;
            _this._resolve && _this._resolve();
            _this._resolve = null;
            _this._reject = null;
          } else _this.playAction(_this.IDLE);
        });
      }
      BjHandAnimationPlayer.prototype.simplePlay = function(animations) {
        this._sequence = this._sequence.concat(animations);
        this.nextAnimation();
      };
      BjHandAnimationPlayer.prototype.play = function(animations) {
        var _this = this;
        var promise = new Promise(function(resolve, reject) {
          _this._resolve = resolve;
          _this._reject = reject;
        });
        0 == animations.length && this._resolve && this._resolve();
        this.simplePlay(animations);
        return promise;
      };
      BjHandAnimationPlayer.prototype.clearAnimation = function(animationName) {
        this._sequence && this._sequence.length > 0 && -1 != this._sequence.indexOf(animationName) && (this._sequence = this._sequence.filter(function(animation) {
          return animation != animationName;
        }));
      };
      Object.defineProperty(BjHandAnimationPlayer.prototype, "hasSequenceAnimation", {
        get: function() {
          return this._sequence.length > 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjHandAnimationPlayer.prototype, "valid", {
        get: function() {
          return this._anim && this._anim.isValid && this._anim.node.isValid;
        },
        enumerable: true,
        configurable: true
      });
      BjHandAnimationPlayer.prototype.nextAnimation = function(force) {
        void 0 === force && (force = false);
        if ((force || !this._isPlayAnimation) && this._sequence.length > 0) {
          this.playAction(this._sequence.shift());
          return true;
        }
        return false;
      };
      BjHandAnimationPlayer.prototype.playAction = function(animation) {
        this._isPlayAnimation = true;
        this._anim.isValid && this._anim.node.isValid && this._anim.play(animation);
      };
      return BjHandAnimationPlayer;
    }();
    exports.BjHandAnimationPlayer = BjHandAnimationPlayer;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions",
    "./views/BjHands": "BjHands"
  } ],
  BjHands: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "014aeK31r5O1ra9twfVBrnt", "BjHands");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjHands = function(_super) {
      __extends(BjHands, _super);
      function BjHands() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._dispatchCallback = null;
        return _this;
      }
      BjHands.prototype.start = function() {};
      BjHands.prototype.onBetInPut = function() {
        this._dispatchCallback && this._dispatchCallback("onBetInPut");
      };
      BjHands.prototype.onBetOutGet = function() {
        this._dispatchCallback && this._dispatchCallback("onBetOutGet");
      };
      BjHands.prototype.setDispatchCallback = function(callback) {
        this._dispatchCallback = callback;
      };
      BjHands = __decorate([ ccclass ], BjHands);
      return BjHands;
    }(cc.Component);
    exports.default = BjHands;
    cc._RF.pop();
  }, {} ],
  BjHistoryController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22839eb0HhIcr4q04CRQYVm", "BjHistoryController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjHistoryController = function() {
      function BjHistoryController() {
        this._store = null;
        this._prefab = null;
        this._elements = [];
        this._parent = null;
      }
      BjHistoryController.prototype.init = function(store, prefab, parent) {
        var _this = this;
        this._store = store;
        this._prefab = prefab;
        this._parent = parent;
        this._store.subscribe(function() {
          var elementCount = 0;
          var element;
          var state = _this._store.getState();
          var circle = 0;
          for (var index = Math.max(state.history.length - BjHistoryController.MAX, 0); index < state.history.length; index++) {
            _this._elements.length == elementCount && _this._elements.push(_this.createElement());
            element = _this._elements[elementCount];
            element.label.string = Number(state.history[index]["player"][0]).toString();
            element.node.setPosition(BjHistoryController.CLIENT_POINT.clone().add(new cc.Vec2(circle * BjHistoryController.WIDTH, 0)));
            elementCount++;
            _this._elements.length == elementCount && _this._elements.push(_this.createElement());
            element = _this._elements[elementCount];
            element.label.string = Number(state.history[index]["dealer"][0]).toString();
            element.node.setPosition(BjHistoryController.DEALER_POINT.clone().add(new cc.Vec2(circle * BjHistoryController.WIDTH, 0)));
            elementCount++;
            circle++;
          }
          elementCount++;
          if (elementCount < _this._elements.length) {
            var remove = _this._elements.slice(elementCount, _this._elements.length - elementCount);
            remove.forEach(function(element) {
              element.node.removeFromParent();
            });
          }
          state.history.forEach;
        });
      };
      BjHistoryController.prototype.createElement = function() {
        var element = cc.instantiate(this._prefab).getComponent("BjHistory");
        this._parent.addChild(element.node);
        return element;
      };
      BjHistoryController.MAX = 5;
      BjHistoryController.WIDTH = 60;
      BjHistoryController.CLIENT_POINT = new cc.Vec2(-284, 376);
      BjHistoryController.DEALER_POINT = new cc.Vec2(35, 376);
      return BjHistoryController;
    }();
    exports.default = BjHistoryController;
    cc._RF.pop();
  }, {} ],
  BjHistory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86fb8W//ctNz4LSDmIs8j61", "BjHistory");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjHistory = function(_super) {
      __extends(BjHistory, _super);
      function BjHistory() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      BjHistory.prototype.start = function() {};
      __decorate([ property(cc.Label) ], BjHistory.prototype, "label", void 0);
      BjHistory = __decorate([ ccclass ], BjHistory);
      return BjHistory;
    }(cc.Component);
    exports.default = BjHistory;
    cc._RF.pop();
  }, {} ],
  BjInsureMessageController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9535r533xKbo90ZUr64VyW", "BjInsureMessageController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actions = require("./store/BjActions");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Constant = require("./BjConstant");
    var BjInsureMessageController = function() {
      function BjInsureMessageController() {
        this._showed = false;
      }
      BjInsureMessageController.prototype.init = function(view, params) {
        var _this = this;
        this._insureMessage = view;
        this._insureMessage.hide();
        this._storeController = params.storeController;
        var language = params.language;
        this._storeController.store.subscribe(function() {
          var state = _this._storeController.getRootState;
          var playerIndex = BjStoreInterface_1.StoreHelper.activePlayerIndex(state);
          _this._showed && state.game_state != Constant.GAME_STATE.game && (_this._showed = false);
          if (playerIndex < state.insure_state.length) {
            var insureState = state.insure_state[playerIndex];
            var betActiveHand_1 = BjStoreInterface_1.StoreHelper.activePlayerHandBet(state) / 2;
            if (_this._showed || 3 != state.round || insureState != Constant.INSURE_STATE.request || _this._insureMessage.viewStatus) insureState != Constant.INSURE_STATE.request && _this._insureMessage.viewStatus && _this._insureMessage.hide(); else {
              _this._showed = true;
              _this._insureMessage.show(language.substitution(language.lang("insure"), [ betActiveHand_1.toFixed(2) ]), function() {
                console.log("playerIndex", playerIndex, "betActiveHand", betActiveHand_1);
                console.log("this._storeController.store", _this._storeController.store);
                _this._storeController.dispatch(Actions.setInsuranceAccept(playerIndex, betActiveHand_1));
              }, function() {
                _this._storeController.dispatch(Actions.setInsuranceReject(playerIndex));
              }, language.lang("b_ok"), language.lang("b_cancel"));
            }
          }
        });
      };
      return BjInsureMessageController;
    }();
    exports.default = BjInsureMessageController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjInsureMessage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6619f6AAzpHyLNcMxGSAqCi", "BjInsureMessage");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjInsureMessage = function(_super) {
      __extends(BjInsureMessage, _super);
      function BjInsureMessage() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this._viewStatus = false;
        return _this;
      }
      BjInsureMessage.prototype.onLoad = function() {};
      BjInsureMessage.prototype.start = function() {
        this.viewUpdate();
      };
      BjInsureMessage.prototype.show = function(message, onAccept, onReject, onAcceptLabel, onRejectLabel) {
        this._viewStatus = true;
        this.label.string = message;
        this._onAccept = onAccept;
        this._onReject = onReject;
        this.node.getChildByName("buttonOk").getChildByName("Label").getComponent(cc.Label).string = onAcceptLabel;
        this.node.getChildByName("buttonCancel").getChildByName("Label").getComponent(cc.Label).string = onRejectLabel;
        this.viewUpdate();
      };
      BjInsureMessage.prototype.hide = function() {
        this._viewStatus = false;
        this.viewUpdate();
      };
      BjInsureMessage.prototype.onOk = function() {
        this._onAccept && this._onAccept();
      };
      BjInsureMessage.prototype.onCancel = function() {
        this._onReject && this._onReject();
      };
      Object.defineProperty(BjInsureMessage.prototype, "viewStatus", {
        get: function() {
          return this._viewStatus;
        },
        enumerable: true,
        configurable: true
      });
      BjInsureMessage.prototype.viewUpdate = function() {
        this.node.active = this._viewStatus;
      };
      __decorate([ property(cc.Label) ], BjInsureMessage.prototype, "label", void 0);
      BjInsureMessage = __decorate([ ccclass ], BjInsureMessage);
      return BjInsureMessage;
    }(cc.Component);
    exports.default = BjInsureMessage;
    cc._RF.pop();
  }, {} ],
  BjLanguage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "108b7ajca9Be4l3nJ0xsVrb", "BjLanguage");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjLanguage = function() {
      function BjLanguage(data, langKey) {
        void 0 === langKey && (langKey = "en");
        this._text = null;
        this._langKey = null;
        this._text = data;
        this._langKey = langKey;
      }
      BjLanguage.prototype.lang = function(key) {
        return this._text[key] && this._text[key][this._langKey] ? this._text[key][this._langKey] : key;
      };
      BjLanguage.prototype.substitution = function(line, payload) {
        var result = "";
        var bricks = line.split(/\{\d+\}/);
        for (var index = 0; index < bricks.length; index++) index < payload.length ? result += bricks[index] + payload[index] : result += bricks[index];
        return result;
      };
      return BjLanguage;
    }();
    exports.default = BjLanguage;
    cc._RF.pop();
  }, {} ],
  BjMatchController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d6bcUuUOtOcID2d6FUobcK", "BjMatchController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjPlayer_1 = require("./BjPlayer");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Actions = require("./store/BjActions");
    var Constant = require("./BjConstant");
    var BjMatchController = function() {
      function BjMatchController() {
        var _this = this;
        this.processPlayer = function(action) {
          var state = _this._storeController.getRootState;
          if (action.type == Actions.PLAY_WITH_INITIAL_BET) {
            _this._synchronizer.addSyncCallRequest(Actions.PLAY_WITH_INITIAL_BET, BjMatchController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              value.queue.completeNode(value.id);
              _this.start(state.initial_bet);
            });
            return;
          }
          if (action.type == Actions.FINISH_GAME) {
            var dealerScore = BjMatchController.bjPlayer.setDataRound(BjStoreInterface_1.StoreHelper.getDealerPlayer(state), state.round).scoreFirstHand();
            var dealerBj = BjStoreInterface_1.StoreHelper.isDealerBj(state);
            BjMatchController.bjPlayer.setDataRound(BjStoreInterface_1.StoreHelper.getMe(state), state.round);
            var _a = BjMatchController.bjPlayer.calculateWinMoney(dealerScore, dealerBj), winByHand = _a.winByHand, win = _a.win;
            state.game_state == Constant.GAME_STATE.game_end && _this.dispatch(Actions.setSaveHistoreAction());
            _this.dispatch(Actions.setChangeWinMoneyAction(win));
            _this.dispatch(Actions.setWinInfoByHandAction(winByHand));
            return;
          }
          if (action.type == Actions.SPLIT) {
            console.log("BjMatchController", "split request", action.type);
            _this._synchronizer.addSyncCallRequest(Actions.SPLIT, BjMatchController.VIEW_SYNC_WAIT_KEY).then(function(value) {
              console.log("BjMatchController", "split 1");
              _this.setHitPlayerIndexHandIndexAction(BjStoreInterface_1.StoreHelper.activePlayerIndex(state), 0);
              console.log("BjMatchController", "split 2");
              _this.setHitPlayerIndexHandIndexAction(BjStoreInterface_1.StoreHelper.activePlayerIndex(state), 1);
              value.queue.completeNode(value.id);
            });
            return;
          }
          -1 != [ Actions.SET_ACTIVE_PLAYER_INDEX, Actions.SET_ACTIVE_HAND_INDEX, Actions.SET_BET, Actions.SET_ROUND, Actions.STAND, Actions.HIT, Actions.HIT_AI, Actions.DOUBLE, Actions.INSURANCE_ACCEPT ].indexOf(action.type) && _this.processPlayerStage2(state, action);
        };
      }
      BjMatchController.prototype.init = function(params, cardDeck) {
        this._cardDeck = cardDeck;
        this._synchronizer = params.synchronizer;
        this._storeController = params.storeController;
        this._storeController.addActionListener(this.processPlayer);
      };
      Object.defineProperty(BjMatchController.prototype, "callbacks", {
        get: function() {
          return {
            hit: this.hit.bind(this),
            stand: this.stand.bind(this),
            split: this.split.bind(this),
            double: this.double.bind(this)
          };
        },
        enumerable: true,
        configurable: true
      });
      BjMatchController.prototype.processPlayerStage2 = function(state, action) {
        var _this = this;
        console.log("BjMatchController analize", "processPlayerStage2", action.type);
        BjMatchController.bjPlayer.setDataRound(BjStoreInterface_1.StoreHelper.activePlayer(state), state.round);
        var actionProcess = false;
        if (-1 != [ Actions.SET_ACTIVE_PLAYER_INDEX ].indexOf(action.type)) {
          if (state.round <= 2 && BjStoreInterface_1.StoreHelper.activePlayerHandCardsLength(state) < state.round) if (BjStoreInterface_1.StoreHelper.activePlayer(state).dealer && 2 == state.round) {
            actionProcess = true;
            this.dispatch(Actions.setRoundAction(state.round + 1));
          } else {
            actionProcess = true;
            this.setHitAiAction();
          }
        } else if (action.type == Actions.HIT_AI && state.round <= 2 && BjStoreInterface_1.StoreHelper.activePlayerHandCardsLength(state) == state.round) if (BjStoreInterface_1.StoreHelper.hasPlayerWithIndex(state, state.active_player_index + 1)) {
          actionProcess = true;
          this._synchronizer.addSyncCallRequest(action.type, BjMatchController.VIEW_SYNC_WAIT_KEY).then(function(value) {
            value.queue.completeNode(value.id);
            _this.dispatch(Actions.setCurrentPlayerAction(state.active_player_index + 1));
          });
        } else {
          actionProcess = true;
          this._synchronizer.addSyncCallRequest(action.type, BjMatchController.VIEW_SYNC_WAIT_KEY).then(function(value) {
            value.queue.completeNode(value.id);
            _this.dispatch(Actions.setRoundAction(state.round + 1));
          });
        } else if (-1 != [ Actions.SET_ROUND ].indexOf(action.type)) {
          actionProcess = true;
          this.dispatch(Actions.setCurrentPlayerAction(0));
        } else if (action.type == Actions.SET_BET) {
          actionProcess = true;
          this._synchronizer.addSyncCallRequest(Actions.SET_BET, BjMatchController.VIEW_SYNC_WAIT_KEY).then(function(value) {
            value.queue.completeNode(value.id);
            _this.dispatch(Actions.setCurrentPlayerAction(0));
          });
        }
        action.type == Actions.INSURANCE_ACCEPT && this.dispatch(Actions.setWaitForViewSyncAction("BjMatchController"));
        if (state.game_state == Constant.GAME_STATE.game && !actionProcess && state.round > 2) {
          console.log("BjMatchController analize", action.type);
          var func = null;
          BjStoreInterface_1.StoreHelper.hasPaidMeInsurance(state) && BjStoreInterface_1.StoreHelper.getDealerCardCount(state) >= 2 && !BjStoreInterface_1.StoreHelper.isDealerBj(state) && this.dispatch(Actions.setInsuranceClear(BjStoreInterface_1.StoreHelper.getMeIndex(state)));
          BjStoreInterface_1.StoreHelper.activePlayer(state).dealer ? func = BjStoreInterface_1.StoreHelper.isNeedDealerFinish(state) ? function() {
            _this.dispatch(Actions.finishGameAction());
          } : function() {
            _this.setHitAiAction();
          } : BjMatchController.bjPlayer.isNeedFinish() && BjStoreInterface_1.StoreHelper.hasNextPlayer(state) ? func = function() {
            _this.dispatch(Actions.setCurrentPlayerAction(state.active_player_index + 1));
          } : BjMatchController.bjPlayer.isNeedFinisCurrenthHand(Constant.BJ_SCORE) && BjStoreInterface_1.StoreHelper.hasNextHand(state) && (func = function() {
            _this.dispatch(Actions.setCurrentPlayerHandAction(BjStoreInterface_1.StoreHelper.activePlayer(state).active_hands_index + 1));
          });
          func || (func = function() {
            _this.dispatch(Actions.setWaitForViewEndSyncAction("BjMatchController"));
          });
          func && this.asyncCall(action.type, func);
        }
      };
      BjMatchController.prototype.asyncCall = function(key, callback) {
        this._synchronizer.has(key, BjMatchController.VIEW_SYNC_WAIT_KEY) || this._synchronizer.addSyncCallRequest(key, BjMatchController.VIEW_SYNC_WAIT_KEY).then(function(value) {
          value.queue.completeNode(value.id);
          callback();
        });
      };
      BjMatchController.prototype.generateCard = function() {
        var cardData = this._cardDeck.generateCardType();
        return cardData;
      };
      BjMatchController.prototype.setHitAction = function() {
        this.dispatch(Actions.setWaitForViewSyncAction("BjMatchController"));
        this.dispatch(Actions.setHitAction(this.generateCard(), this.getRootState.active_player_index));
      };
      BjMatchController.prototype.setHitAiAction = function() {
        this.dispatch(Actions.setHitAiAction(this.generateCard(), this.getRootState.active_player_index));
      };
      BjMatchController.prototype.setHitPlayerIndexHandIndexAction = function(playerIndex, handIndex) {
        this.dispatch(Actions.setHitAiPlayerIndexHandIndexAction(this.generateCard(), playerIndex, handIndex));
      };
      BjMatchController.prototype.dispatch = function(params) {
        this._storeController.dispatch(params);
      };
      BjMatchController.prototype.start = function(currentBet) {
        this.dispatch(Actions.sendRestartAction());
        this.dispatch(Actions.setBetAction(currentBet, BjStoreInterface_1.StoreHelper.getMeIndex(this.getRootState)));
      };
      BjMatchController.prototype.stand = function() {
        BjMatchController.bjPlayer.setDataRound(this.getCurrentPlayer, this.getRootState.round);
        BjMatchController.bjPlayer.isDealer() || this.dispatch(Actions.setStandAction());
      };
      BjMatchController.prototype.hit = function() {
        BjMatchController.bjPlayer.setDataRound(this.getCurrentPlayer, this.getRootState.round);
        BjMatchController.bjPlayer.isDealer() || BjStoreInterface_1.StoreHelper.isWaitForViewSync(this.getRootState) || BjMatchController.bjPlayer.isNeedFinishHand(BjMatchController.bjPlayer.getCurrentHand(), 21) || this.setHitAction();
      };
      BjMatchController.prototype.split = function() {
        BjMatchController.bjPlayer.setDataRound(this.getCurrentPlayer, this.getRootState.round);
        if (BjStoreInterface_1.StoreHelper.isCanSplitActiveHand(this.getRootState)) {
          var hand = BjMatchController.bjPlayer.getCurrentHand();
          var bet = hand.current_bet;
          var cardIndex = hand.cards.length - 1;
          this.dispatch(Actions.setWaitForViewSyncAction("BjMatchController"));
          this.dispatch(Actions.setSplitAction(bet, cardIndex));
        }
      };
      BjMatchController.prototype.double = function() {
        BjMatchController.bjPlayer.setDataRound(this.getCurrentPlayer, this.getRootState.round);
        if (BjStoreInterface_1.StoreHelper.isCanDouble(this.getRootState)) {
          var bet = BjMatchController.bjPlayer.getBetForCurrentHand();
          var card = this.generateCard();
          var index = BjStoreInterface_1.StoreHelper.getMeIndex(this.getRootState);
          this.dispatch(Actions.setDoubleAction(bet, card, index));
        }
      };
      Object.defineProperty(BjMatchController.prototype, "getRootState", {
        get: function() {
          return this._storeController.getRootState;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjMatchController.prototype, "getCurrentPlayer", {
        get: function() {
          return BjStoreInterface_1.StoreHelper.activePlayer(this.getRootState);
        },
        enumerable: true,
        configurable: true
      });
      BjMatchController.bjPlayer = new BjPlayer_1.default();
      BjMatchController.VIEW_SYNC_WAIT_KEY = "MatchController";
      return BjMatchController;
    }();
    exports.default = BjMatchController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjPlayer": "BjPlayer",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjPlayButtonController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4ad0edYBC9GKJy4TU7aj8Tn", "BjPlayButtonController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjPlayer_1 = require("./BjPlayer");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var BjConstant_1 = require("./BjConstant");
    var BjPlayButtonController = function() {
      function BjPlayButtonController() {
        this._playerStateHelper = new BjPlayer_1.default();
      }
      BjPlayButtonController.prototype.init = function(view, params, callbacks) {
        var _this = this;
        this._buttonContainer = view;
        this._storeController = params.storeController;
        var language = params.language;
        this._buttonContainer.setNames([ {
          btnName: "buttonSplit",
          lblName: "Label",
          text: language.lang("split_button_label")
        }, {
          btnName: "buttonHit",
          lblName: "Label",
          text: language.lang("hit_button_label")
        }, {
          btnName: "buttonStand",
          lblName: "Label",
          text: language.lang("stand_button_label")
        }, {
          btnName: "buttonDouble",
          lblName: "Label",
          text: language.lang("double_button_label")
        } ]);
        this._buttonContainer.node.active = false;
        this._buttonContainer.setHitCallback(callbacks["hit"]);
        this._buttonContainer.setStandCallback(callbacks["stand"]);
        this._buttonContainer.setSplitCallback(callbacks["split"]);
        this._buttonContainer.setDoubleCallback(callbacks["double"]);
        this._storeController.subscribe(function() {
          var state = _this._storeController.getRootState;
          var activePlayer = BjStoreInterface_1.StoreHelper.activePlayer(state);
          _this._playerStateHelper.setDataRound(activePlayer, state.round);
          var visible = state.round > 2 && !activePlayer.dealer && !BjStoreInterface_1.StoreHelper.isWaitForViewSync(state) && !_this._playerStateHelper.isNeedFinishHand(_this._playerStateHelper.getCurrentHand(), BjConstant_1.BJ_SCORE) && 0 == state.insure_state.filter(function(insureState) {
            return BjConstant_1.INSURE_STATE.request == insureState;
          }).length;
          console.log("BjPlayButtonController", "visible", visible);
          console.log("BjPlayButtonController", "insure_state_length", state.insure_state.filter(function(insureState) {
            return BjConstant_1.INSURE_STATE.request == insureState;
          }).length);
          if (visible) {
            _this._buttonContainer.splitButton(BjStoreInterface_1.StoreHelper.isCanSplitActiveHand(state));
            _this._buttonContainer.doubleButton(BjStoreInterface_1.StoreHelper.isCanDouble(state));
          }
          _this._buttonContainer.node.active = visible;
        });
      };
      return BjPlayButtonController;
    }();
    exports.default = BjPlayButtonController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjPlayer": "BjPlayer",
    "./BjStoreInterface": "BjStoreInterface"
  } ],
  BjPlayerAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33ce3qGzRhLipccd+hzUl5n", "BjPlayerAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjPlayerAction = function(_super) {
      __extends(BjPlayerAction, _super);
      function BjPlayerAction() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hitCallback = null;
        _this.standCallback = null;
        _this.splitCallback = null;
        _this.doubleCallback = null;
        return _this;
      }
      BjPlayerAction.prototype.start = function() {};
      BjPlayerAction.prototype.onHit = function() {
        console.log("onHit");
        this.hitCallback();
      };
      BjPlayerAction.prototype.onStand = function() {
        console.log("onStand");
        this.standCallback();
      };
      BjPlayerAction.prototype.onSplit = function() {
        console.log("onSplit");
        this.splitCallback();
      };
      BjPlayerAction.prototype.onDouble = function() {
        console.log("onDouble");
        this.doubleCallback();
      };
      BjPlayerAction.prototype.setNames = function(config) {
        var button;
        var label;
        var labelComponent;
        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
          var rowData = config_1[_i];
          button = this.node.getChildByName(rowData["btnName"]);
          label = button.getChildByName(rowData["lblName"]);
          labelComponent = label.getComponent(cc.Label);
          labelComponent.string = rowData["text"];
        }
      };
      BjPlayerAction.prototype.splitButton = function(visible) {
        var button = this.node.getChildByName("buttonSplit");
        button.active = visible;
      };
      BjPlayerAction.prototype.doubleButton = function(visible) {
        var button = this.node.getChildByName("buttonDouble");
        button.active = visible;
      };
      BjPlayerAction.prototype.setHitCallback = function(callback) {
        this.hitCallback = callback;
      };
      BjPlayerAction.prototype.setStandCallback = function(callback) {
        this.standCallback = callback;
      };
      BjPlayerAction.prototype.setSplitCallback = function(callback) {
        this.splitCallback = callback;
      };
      BjPlayerAction.prototype.setDoubleCallback = function(callback) {
        this.doubleCallback = callback;
      };
      BjPlayerAction = __decorate([ ccclass ], BjPlayerAction);
      return BjPlayerAction;
    }(cc.Component);
    exports.default = BjPlayerAction;
    cc._RF.pop();
  }, {} ],
  BjPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11ed7RNwtNM/6ZGwlv1Wub+", "BjPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var BjConstant_1 = require("./BjConstant");
    var BjPlayer = function() {
      function BjPlayer() {}
      BjPlayer.prototype.setDataRound = function(playerData, round) {
        this.playerData = playerData;
        this.round = round;
        return this;
      };
      BjPlayer.prototype.getBetForHand = function(index) {
        var hand = this.playerData.hands[index];
        if (hand) return hand.current_bet;
        return -1;
      };
      BjPlayer.prototype.getBetForCurrentHand = function() {
        return this.getBetForHand(this.getCurrentHandIndex());
      };
      BjPlayer.prototype.getCurrentHand = function() {
        return this.playerData.hands[this.playerData.active_hands_index];
      };
      BjPlayer.prototype.getCurrentHandIndex = function() {
        return this.playerData.active_hands_index;
      };
      BjPlayer.prototype.hasNextHand = function() {
        return this.playerData.active_hands_index + 1 < this.playerData.hands.length;
      };
      BjPlayer.prototype.hasHandIndex = function(index) {
        return index < this.playerData.hands.length;
      };
      BjPlayer.prototype.isNeedFinish = function() {
        var needFinish = true;
        for (var index = 0; index < this.playerData.hands.length; index++) needFinish = needFinish && this.isNeedFinishHand(this.playerData.hands[index], this.playerData.dealer ? 17 : 21);
        return needFinish;
      };
      BjPlayer.prototype.isNeedFinishHand = function(handData, maxScore) {
        return handData && (handData.finished || this.calculateScoreByHand(handData) >= maxScore);
      };
      BjPlayer.prototype.isNeedFinisCurrenthHand = function(maxScore) {
        return this.isNeedFinishHand(this.getCurrentHand(), maxScore);
      };
      BjPlayer.prototype.isDealer = function() {
        return this.playerData.dealer;
      };
      BjPlayer.prototype.scoreFirstHand = function() {
        return this.playerData.hands ? this.calculateScoreByHand(this.playerData.hands[0]) : 0;
      };
      BjPlayer.prototype.scoreByHandIndex = function(index) {
        return this.playerData.hands && index < this.playerData.hands.length ? this.calculateScoreByHand(this.playerData.hands[index]) : 0;
      };
      BjPlayer.prototype.scoreByHandIndexMinMax = function(index) {
        return this.playerData.hands && index < this.playerData.hands.length ? this.calculateScoreByHandWithVariant(this.playerData.hands[index]) : [ 0 ];
      };
      BjPlayer.prototype.score = function() {
        var _this = this;
        return this.playerData.hands.map(function(hand, index, hands) {
          return _this.calculateScoreByHand(hand);
        });
      };
      Object.defineProperty(BjPlayer.prototype, "firstHand", {
        get: function() {
          return this.playerData.hands[0];
        },
        enumerable: true,
        configurable: true
      });
      BjPlayer.prototype.isBjFirstHand = function() {
        return this.isBjHand(this.firstHand);
      };
      BjPlayer.prototype.isBjHand = function(handData) {
        var score = this.calculateScoreByHand(handData);
        return 21 == score && 2 == handData.cards.length;
      };
      BjPlayer.prototype.isBustHand = function(handData) {
        var score = this.calculateScoreByHand(handData);
        return score > 21;
      };
      BjPlayer.prototype.isInsureOnFirstHand = function() {
        return 1 == this.firstHand.cards.length && this.firstHand.cards[0].rank == BjConstant_1.ACE;
      };
      BjPlayer.prototype.\u0441ompareWithOpponent = function(handData, opponentScore, opponentBj) {
        var score = this.calculateScoreByHand(handData);
        var bJ = this.isBjHand(handData);
        var bust = score > 21;
        var opponentBust = opponentScore > 21;
        if (bust) return BjConstant_1.HAND_WIN_STATE.bust;
        if (bJ || opponentBj) return this.bJCompare(bJ, opponentBj, handData);
        if (!bust && !opponentBust) return this.scoreCompare(handData, score, opponentScore);
        return BjConstant_1.HAND_WIN_STATE.win;
      };
      BjPlayer.prototype.bJCompare = function(bJ, opponentBj, handData) {
        var bjInsurance = handData.bj_insurance > 0;
        var bjEvenMoney = handData.bj_even_money;
        if (bJ && bjEvenMoney) return BjConstant_1.HAND_WIN_STATE.bj_even_money;
        if (bJ && !opponentBj) return BjConstant_1.HAND_WIN_STATE.blackjack;
        if (bJ && opponentBj) return BjConstant_1.HAND_WIN_STATE.push;
        if (bjInsurance) return BjConstant_1.HAND_WIN_STATE.bj_insurance;
        return BjConstant_1.HAND_WIN_STATE.lose;
      };
      BjPlayer.prototype.scoreCompare = function(handData, score, opponentScore) {
        if (score > opponentScore) {
          if (handData.double) return BjConstant_1.HAND_WIN_STATE.win_double;
          return BjConstant_1.HAND_WIN_STATE.win;
        }
        if (score < opponentScore) return BjConstant_1.HAND_WIN_STATE.lose;
        return BjConstant_1.HAND_WIN_STATE.push;
      };
      BjPlayer.prototype.calculateWinStatus = function(opponentScore, opponentBj) {
        var _this = this;
        return this.playerData.hands.map(function(handData) {
          return _this.\u0441ompareWithOpponent(handData, opponentScore, opponentBj);
        });
      };
      BjPlayer.prototype.calculateWinMoney = function(opponentScore, opponentBj) {
        var _this = this;
        var currentWin = 0;
        var win = 0;
        var winByHand = [];
        this.playerData.hands.forEach(function(handData) {
          var handState = _this.\u0441ompareWithOpponent(handData, opponentScore, opponentBj);
          currentWin = 0;
          switch (handState) {
           case BjConstant_1.HAND_WIN_STATE.blackjack:
            currentWin += 2.5 * handData.current_bet;
            break;

           case BjConstant_1.HAND_WIN_STATE.win_double:
           case BjConstant_1.HAND_WIN_STATE.win:
            currentWin += 2 * handData.current_bet;
            break;

           case BjConstant_1.HAND_WIN_STATE.push:
           case BjConstant_1.HAND_WIN_STATE.bj_even_money:
            currentWin += handData.current_bet;
            break;

           case BjConstant_1.HAND_WIN_STATE.bj_insurance:
            currentWin += 2 * handData.bj_insurance;
          }
          win += currentWin;
          winByHand.push({
            money: currentWin,
            type: handState
          });
        });
        return {
          winByHand: winByHand,
          win: win
        };
      };
      BjPlayer.prototype.calculateScoreByHandWithVariant = function(handData) {
        if (handData) return BjStoreInterface_1.StoreHelper.calculateScoreByHandWithVariant(handData);
        return null;
      };
      BjPlayer.prototype.calculateScoreByHand = function(handData) {
        var scoreVariant = this.calculateScoreByHandWithVariant(handData);
        return scoreVariant ? scoreVariant[scoreVariant.length - 1] : 0;
      };
      return BjPlayer;
    }();
    exports.default = BjPlayer;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface"
  } ],
  BjScoreHintController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34ebbk0sZVCq6Ic7CgvWHo3", "BjScoreHintController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjPlayer_1 = require("./BjPlayer");
    var Constant = require("./BjConstant");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Actions = require("./store/BjActions");
    var BjScoreHintController = function() {
      function BjScoreHintController() {
        var _this = this;
        this._cardScoreHint = null;
        this._parent = null;
        this._gameField = null;
        this._hints = [];
        this.action = function(action) {
          -1 != [ Actions.HIT_AI, Actions.HIT, Actions.DOUBLE, Actions.SPLIT, Actions.STAND, Actions.SET_ACTIVE_PLAYER_INDEX, Actions.SET_ACTIVE_HAND_INDEX ].indexOf(action.type) && _this._storeController.getRootState.round > 2 && _this._synchronizer.addSyncCallRequest(action.type, BjScoreHintController.VIEW_SYNC_WAIT_KEY).then(function(queueCallback) {
            _this.update();
            queueCallback.queue.completeNode(queueCallback.id);
          });
          action.type == Actions.FINISH_GAME && _this.update();
          action.type == Actions.SET_WIN_INFO_BY_HAND && _this._synchronizer.addSyncCallRequest(action.type, BjScoreHintController.VIEW_SYNC_WAIT_KEY).then(function(queueCallback) {
            _this.removeAllHints();
            queueCallback.queue.completeNode(queueCallback.id);
          });
        };
      }
      BjScoreHintController.prototype.init = function(cardScoreHint, parent, params, gameField) {
        var _this = this;
        this._cardScoreHint = cardScoreHint;
        this._parent = parent;
        this._gameField = gameField;
        this._controllerParams = params;
        this._storeController = params.storeController;
        this._storeController.addActionListener(this.action);
        this._synchronizer = params.synchronizer;
        this._storeController.subscribe(function() {
          var state = _this._storeController.getRootState;
          if (state.game_state == Constant.GAME_STATE.game_end) return;
          if (state.game_state != Constant.GAME_STATE.game) {
            _this.removeAllHints();
            return;
          }
        });
      };
      BjScoreHintController.prototype.createHint = function() {
        var scoreHint = cc.instantiate(this._cardScoreHint).getComponent("BjCardScoreHint");
        this._parent.addChild(scoreHint.node);
        return scoreHint;
      };
      BjScoreHintController.prototype.update = function() {
        var state = this._storeController.getRootState;
        var cardContainers = this._gameField.cartContainer;
        var psn = new cc.Vec2(0, 75);
        var hint;
        var cardContainer;
        var index = 0;
        var player;
        var max;
        var min;
        var active;
        console.log("ScoreHintController", "prepare update", "cardContainers.length", cardContainers.length);
        console.log("ScoreHintController", "this._hints.length", this._hints.length);
        for (index = 0; index < cardContainers.length; index++) {
          if (this._hints.length == index) {
            this._hints.push(this.createHint());
            console.log("ScoreHintController", "createHint", index);
          }
          hint = this._hints[index];
          cardContainer = cardContainers[index];
          player = state.players[cardContainer.indexPlayer];
          if (!player) {
            console.log("ScoreHintController", "update", "continue");
            continue;
          }
          hint.node.setPosition(cardContainer.node.position.clone().add(this._gameField.node.position).add(psn));
          BjScoreHintController.bjPlayer.setDataRound(state.players[cardContainer.indexPlayer], state.round);
          var score = BjScoreHintController.bjPlayer.scoreByHandIndexMinMax(cardContainer.indexCardContainer);
          hint.node.active = score[0] > 0;
          active = BjStoreInterface_1.StoreHelper.activePlayerIndex(state) == cardContainer.indexPlayer && BjStoreInterface_1.StoreHelper.activePlayerHandIndex(state) == cardContainer.indexCardContainer && !BjStoreInterface_1.StoreHelper.activePlayerHandFinished(state) && state.game_state == Constant.GAME_STATE.game;
          min = score[0].toFixed();
          max = score.length > 1 ? score[1].toFixed() : min;
          score[0] > Constant.BJ_SCORE ? hint.score.string = this._controllerParams.language.lang("bust") : BjStoreInterface_1.StoreHelper.isHandBj(BjStoreInterface_1.StoreHelper.getHandByPlayerHandIndex(player, cardContainer.indexCardContainer)) ? hint.score.string = this._controllerParams.language.lang("blackjack") : hint.score.string = score.length > 1 && active ? min + "/" + max : max;
          active ? hint.setActive() : hint.setInActive();
        }
        index++;
        if (index < this._hints.length) {
          console.log("ScoreHintController", "removeHint", index);
          var removeHints = this._hints.slice(index, this._hints.length - index);
          removeHints.forEach(function(hint) {
            hint.node.removeFromParent();
          });
        }
      };
      BjScoreHintController.prototype.removeAllHints = function() {
        console.log("ScoreHintController", "removeAllHints");
        this._hints.forEach(function(hint) {
          hint.node.destroy();
        });
        this._hints = [];
      };
      BjScoreHintController.VIEW_SYNC_WAIT_KEY = "BjScoreHintController";
      BjScoreHintController.bjPlayer = new BjPlayer_1.default();
      return BjScoreHintController;
    }();
    exports.default = BjScoreHintController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjPlayer": "BjPlayer",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjSelectBetController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57e333Nl1JOv5NWW6FJTyjw", "BjSelectBetController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actions = require("./store/BjActions");
    var Constant = require("./BjConstant");
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var BjSelectBetController = function() {
      function BjSelectBetController() {}
      BjSelectBetController.prototype.init = function(view, params) {
        var _this = this;
        this._selectBetContainer = view;
        this._params = params;
        this._selectBetContainer.init(this._params.storeController.getRootState.select_bet_increment, function(currentBet) {
          currentBet = _this.processBet(currentBet);
          if (currentBet > 0) {
            _this._params.storeController.dispatch(Actions.setGameState(Constant.GAME_STATE.before_game));
            _this._params.storeController.dispatch(Actions.playWithInitialBet(currentBet));
          }
        }, 1);
        this._selectBetContainer.setOnUpdateLabelCallback(function(currentBet) {
          currentBet = _this.processBet(currentBet);
          _this._params.storeController.dispatch(Actions.setInitialBet(currentBet));
          return currentBet;
        });
        this._params.storeController.subscribe(function() {
          var gameState = _this._params.storeController.getRootState.game_state;
          var visible = _this._selectBetContainer.node.active;
          _this._selectBetContainer.node.active = gameState == Constant.GAME_STATE.select_bet;
          visible != _this._selectBetContainer.node.active && _this._selectBetContainer.updateLabel();
          gameState == Constant.GAME_STATE.select_bet && (_this._selectBetContainer.increment = _this._params.storeController.getRootState.select_bet_increment);
        });
      };
      BjSelectBetController.prototype.processBet = function(currentBet) {
        if (this._params.config.hasMaxBet) return Math.min(this._params.config.maxBet, BjStoreInterface_1.StoreHelper.currentMoney(this._params.storeController.getRootState), currentBet);
        return Math.min(BjStoreInterface_1.StoreHelper.currentMoney(this._params.storeController.getRootState), currentBet);
      };
      return BjSelectBetController;
    }();
    exports.default = BjSelectBetController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjSelectBet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "716e2XiBjBM6of1SN1JlIG2", "BjSelectBet");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjSelectBet = function(_super) {
      __extends(BjSelectBet, _super);
      function BjSelectBet() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.betLabel = null;
        _this._startBet = 0;
        _this._currentBet = 0;
        _this._increment = 1;
        _this._onDeal = null;
        _this._start = false;
        _this._onUpdateLabelCallback = null;
        return _this;
      }
      BjSelectBet.prototype.init = function(startBet, onDeal, increment) {
        this._currentBet = this._startBet = startBet;
        this._onDeal = onDeal;
        this._increment = increment;
        this._start && this.start();
      };
      Object.defineProperty(BjSelectBet.prototype, "increment", {
        set: function(increment) {
          this._increment = increment;
        },
        enumerable: true,
        configurable: true
      });
      BjSelectBet.prototype.setOnUpdateLabelCallback = function(callback) {
        this._onUpdateLabelCallback = callback;
      };
      BjSelectBet.prototype.start = function() {
        this._start = true;
        this.updateLabel();
      };
      BjSelectBet.prototype.onPlus = function() {
        this._currentBet += this._increment;
        this.updateLabel();
      };
      BjSelectBet.prototype.onMinus = function() {
        this._currentBet -= this._increment;
        this.updateLabel();
      };
      BjSelectBet.prototype.onDeal = function() {
        this._onDeal && this._onDeal(this._currentBet);
      };
      BjSelectBet.prototype.onCancel = function() {
        this._currentBet = this._increment;
        this.updateLabel();
      };
      BjSelectBet.prototype.updateLabel = function() {
        this._currentBet = Math.max(this._currentBet, this._startBet);
        this._currentBet = this._onUpdateLabelCallback(Number(this._currentBet.toFixed(0)));
        this.betLabel.string = this._currentBet.toFixed(0);
      };
      __decorate([ property(cc.Label) ], BjSelectBet.prototype, "betLabel", void 0);
      BjSelectBet = __decorate([ ccclass ], BjSelectBet);
      return BjSelectBet;
    }(cc.Component);
    exports.default = BjSelectBet;
    cc._RF.pop();
  }, {} ],
  BjStoreInterface: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b0ccgMDGBM16p6TgAxvizJ", "BjStoreInterface");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constant = require("./BjConstant");
    var StoreHelper = function() {
      function StoreHelper() {}
      StoreHelper.activePlayer = function(store) {
        return store && store.players && store.players[store.active_player_index] ? store.players[store.active_player_index] : null;
      };
      StoreHelper.activePlayerHand = function(store) {
        var player = this.activePlayer(store);
        return player && player.hands && player.hands[player.active_hands_index] ? player.hands[player.active_hands_index] : null;
      };
      StoreHelper.activePlayerHandBet = function(store) {
        var hand = this.activePlayerHand(store);
        return hand.current_bet;
      };
      StoreHelper.activePlayerIndex = function(store) {
        return store.active_player_index;
      };
      StoreHelper.activePlayerHandIndex = function(store) {
        var player = store.players[store.active_player_index];
        return player.active_hands_index;
      };
      StoreHelper.activePlayerHandFinished = function(store) {
        var hand = this.activePlayerHand(store);
        return hand && hand.finished;
      };
      StoreHelper.activePlayerHandCardsLength = function(store) {
        var hand = this.activePlayerHand(store);
        return hand && hand.cards ? hand.cards.length : -1;
      };
      StoreHelper.hasPlayerWithIndex = function(store, index) {
        return !(!store.players || !store.players[index]);
      };
      StoreHelper.hasNextPlayer = function(state) {
        return this.hasPlayerWithIndex(state, state.active_player_index + 1);
      };
      StoreHelper.hasActiveHandWithIndex = function(store, index) {
        var player = this.activePlayer(store);
        return !!(player && player.hands && player.hands[index]);
      };
      StoreHelper.hasNextHand = function(state) {
        var player = this.activePlayer(state);
        return player && this.hasActiveHandWithIndex(state, player.active_hands_index + 1);
      };
      StoreHelper.isBustPlayer = function(player) {
        var _this = this;
        var bust = true;
        player.hands.forEach(function(hand) {
          bust = bust && _this.maxScore(hand) > Constant.BJ_SCORE;
        });
        return bust;
      };
      StoreHelper.allUserExceptCurrentBust = function(state) {
        var _this = this;
        var bust = true;
        var playerIndex = this.activePlayerIndex(state);
        state.players.forEach(function(player, currentPlayerIndex) {
          currentPlayerIndex != playerIndex && (bust = bust && _this.isBustPlayer(player));
        });
        return bust;
      };
      StoreHelper.isNeedDealerFinish = function(state) {
        var player = this.activePlayer(state);
        if (player) {
          var maxDealerScore = this.maxScore(player.hands[0]) >= Constant.DEALER_17;
          return maxDealerScore || this.allUserExceptCurrentBust(state) && player.hands[0].cards.length >= Constant.DEALER_MIN_CARD;
        }
        return false;
      };
      StoreHelper.maxScore = function(hand) {
        var scores = this.calculateScoreByHandWithVariant(hand);
        return Math.max.apply(Math, scores);
      };
      StoreHelper.getDealerPlayer = function(store) {
        for (var _i = 0, _a = store.players; _i < _a.length; _i++) {
          var item = _a[_i];
          if (item.dealer) return item;
        }
        return null;
      };
      StoreHelper.getMe = function(store) {
        return store.players[0];
      };
      StoreHelper.getMeHands = function(store) {
        var player = this.getMe(store);
        return player ? player.hands : null;
      };
      StoreHelper.getWinByHand = function(store) {
        return store.win_by_hand;
      };
      StoreHelper.getMeIndex = function(store) {
        return 0;
      };
      StoreHelper.getRound = function(store) {
        return store.round;
      };
      StoreHelper.isWaitForViewSync = function(store) {
        return store.wait_view_sync.length > 0;
      };
      StoreHelper.isInsureOnFirstHandDealer = function(state) {
        var dealerCards = this.getDealerPlayer(state).hands[0].cards;
        return 1 == dealerCards.length && dealerCards[0].rank == Constant.ACE;
      };
      StoreHelper.isDealerBj = function(state) {
        return this.isHandBj(this.getDealerPlayer(state).hands[0]);
      };
      StoreHelper.isHandBj = function(handData) {
        return handData && this.maxScore(handData) == Constant.BJ_SCORE && 2 == handData.cards.length;
      };
      StoreHelper.getHandByPlayerHandIndex = function(player, handIndex) {
        return player && handIndex < player.hands.length ? player.hands[handIndex] : null;
      };
      StoreHelper.getDealerCardCount = function(state) {
        return this.getDealerPlayer(state).hands[0].cards.length;
      };
      StoreHelper.immutableHand = function(state, playerIndex, handIndex, callback) {
        return this.immutablePlayer(state, playerIndex, function(player) {
          return __assign({}, player, {
            hands: player.hands.map(function(hand, currentHandIndex, hands) {
              if (currentHandIndex == handIndex) return callback(hand);
              return hand;
            })
          });
        });
      };
      StoreHelper.immutablePlayer = function(state, playerIndex, callback) {
        return __assign({}, state, {
          players: state.players.map(function(player, currentPlayerIndex, players) {
            if (playerIndex == currentPlayerIndex) return callback(player);
            return player;
          })
        });
      };
      StoreHelper.isCurrentPlayerMe = function(state) {
        return this.getMeIndex(state) == this.activePlayerIndex(state);
      };
      StoreHelper.calculateScoreByHandWithVariant = function(handData) {
        if (handData) {
          var baseScore_1 = 0;
          var countA_1 = 0;
          handData.cards.forEach(function(card) {
            -1 != Constant.JQK.indexOf(card.rank) ? baseScore_1 += 10 : card.rank != Constant.ACE ? baseScore_1 += Number(card.rank) : card.rank == Constant.ACE && countA_1++;
          });
          var minScore = baseScore_1 + countA_1;
          if (countA_1 > 0) {
            var maxScore = void 0;
            var testScore = 0;
            for (var index = 0; index <= countA_1; index++) {
              testScore = index + 11 * (countA_1 - index);
              maxScore = baseScore_1 + testScore;
              if (maxScore <= Constant.BJ_SCORE) break;
            }
            if (maxScore == Constant.BJ_SCORE) return [ maxScore ];
            if (maxScore < Constant.BJ_SCORE && minScore != maxScore) return [ minScore, maxScore ];
          }
          return [ minScore ];
        }
        return null;
      };
      StoreHelper.hasPaidMeInsurance = function(state) {
        var result = false;
        var playerData = this.getMe(state);
        playerData && playerData.hands.forEach(function(hand) {
          result = result || hand.bj_insurance > 0;
        });
        return result;
      };
      StoreHelper.hasMeInsuranceOnFirstHand = function(state) {
        var handIndex = 0;
        var playerData = this.getMe(state);
        return playerData.hands[handIndex].bj_insurance > 0 && (StoreHelper.getDealerCardCount(state) <= 2 || StoreHelper.isDealerBj(state));
      };
      StoreHelper.getWinMoney = function(state) {
        var winByHand = StoreHelper.getWinByHand(state);
        if (winByHand.length > 0) return state.win_money;
        return 0;
      };
      StoreHelper.currentMoney = function(state) {
        return state.money;
      };
      StoreHelper.isCanSplit = function(handData) {
        if (handData && 2 == handData.cards.length && handData.cards[0].rank == handData.cards[1].rank) return true;
        return false;
      };
      StoreHelper.isCanSplitActiveHand = function(state) {
        var player = this.activePlayer(state);
        var hand = this.activePlayerHand(state);
        var bet = this.activePlayerHandBet(state);
        return !this.isPlayerDealer(player) && 1 == player.hands.length && this.isCanSplit(hand) && bet <= this.currentMoney(state);
      };
      StoreHelper.isCanDouble = function(state) {
        var score = this.maxScore(this.activePlayerHand(state));
        var cards = this.activePlayerHandCardsLength(state);
        var player = this.activePlayer(state);
        var bet = this.activePlayerHandBet(state);
        return !this.isPlayerDealer(player) && score >= 9 && score <= 11 && 2 == cards && bet <= this.currentMoney(state) && 1 == player.hands.length;
      };
      StoreHelper.isPlayerDealer = function(player) {
        return player.dealer;
      };
      return StoreHelper;
    }();
    exports.StoreHelper = StoreHelper;
    var RootStore = function() {
      function RootStore() {
        this.players = [];
        this.round = 0;
        this.active_player_index = 0;
        this.history = [];
        this.canRestart = true;
        this.wait_view_sync = [];
        this.show_buttons = false;
        this.money = 1e3;
        this.insure_state = [];
        this.initial_bet = 1;
        this.game_state = Constant.GAME_STATE.select_bet;
        this.win_money = 0;
        this.win_by_hand = [];
        this.select_bet_increment = 1;
      }
      return RootStore;
    }();
    exports.RootStore = RootStore;
    var PlayerData = function() {
      function PlayerData() {
        this.hands = [ new HandData() ];
        this.active_hands_index = 0;
        this.dealer = false;
        this.state = "";
      }
      return PlayerData;
    }();
    exports.PlayerData = PlayerData;
    var HandData = function() {
      function HandData() {
        this.cards = [];
        this.current_bet = 0;
        this.bj_insurance = 0;
        this.finished = false;
        this.bj_even_money = false;
        this.double = false;
      }
      return HandData;
    }();
    exports.HandData = HandData;
    var CardData = function() {
      function CardData() {
        this.suit = "";
        this.rank = "";
        this.open = false;
      }
      return CardData;
    }();
    exports.CardData = CardData;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant"
  } ],
  BjSyncActionConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5222wyXH5Pq6DwqD8pqxQA", "BjSyncActionConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var BJActions = require("../store/BjActions");
    var Constant = require("../BjConstant");
    var BjHandAnimationController_1 = require("../BjHandAnimationController");
    var BjChipsController_1 = require("../BjChipsController");
    var BjMatchController_1 = require("../BjMatchController");
    var BjGameFieldController_1 = require("../BjGameFieldController");
    var BjScoreHintController_1 = require("../BjScoreHintController");
    var BjWinMessageController_1 = require("../BjWinMessageController");
    var BjSyncActionConfig = (_a = {}, _a[BJActions.SET_BET] = (_b = {}, _b[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _b[BjChipsController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100,
      goal: [ "onBetInPut" ]
    }, _b), _a[BJActions.HIT] = (_c = {}, _c[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _c[BjGameFieldController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 99
    }, _c[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _c), _a[BJActions.HIT_AI] = (_d = {}, _d[BjGameFieldController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 99
    }, _d[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _d), _a[BJActions.DOUBLE] = (_e = {}, _e[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _e[BjChipsController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100,
      goal: [ "onBetInPut" ]
    }, _e[BjGameFieldController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 99
    }, _e[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _e), _a[BJActions.SPLIT] = (_f = {}, _f[BjGameFieldController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 99
    }, _f[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _f[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _f[BjChipsController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100,
      goal: [ "onBetInPut" ]
    }, _f), _a[BJActions.STAND] = (_g = {}, _g[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _g[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 99
    }, _g), _a[BJActions.SET_WIN_INFO_BY_HAND] = (_h = {}, _h[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 99
    }, _h[BjChipsController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _h[BjChipsController_1.default.VIEW_SYNC_WAIT_KEY2] = {
      priority: 99,
      goal: [ "onBetOutGet" ]
    }, _h[BjWinMessageController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _h[BjGameFieldController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 97
    }, _h[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _h["BjGame"] = {
      priority: 1
    }, _h), _a[BJActions.INSURANCE_ACCEPT] = (_j = {}, _j[BjChipsController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100,
      goal: [ "onBetInPut" ]
    }, _j[BjHandAnimationController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 100
    }, _j), _a[BJActions.SET_ACTIVE_PLAYER_INDEX] = (_k = {}, _k[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _k), _a[BJActions.SET_ACTIVE_HAND_INDEX] = (_l = {}, _l[BjScoreHintController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 98
    }, _l), _a[Constant.DEFAULT] = (_m = {}, _m[Constant.DEFAULT] = {
      priority: 3
    }, _m[BjMatchController_1.default.VIEW_SYNC_WAIT_KEY] = {
      priority: 2
    }, _m), _a);
    exports.default = BjSyncActionConfig;
    cc._RF.pop();
  }, {
    "../BjChipsController": "BjChipsController",
    "../BjConstant": "BjConstant",
    "../BjGameFieldController": "BjGameFieldController",
    "../BjHandAnimationController": "BjHandAnimationController",
    "../BjMatchController": "BjMatchController",
    "../BjScoreHintController": "BjScoreHintController",
    "../BjWinMessageController": "BjWinMessageController",
    "../store/BjActions": "BjActions"
  } ],
  BjSynchronizerController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbbf6G9CwhId4vjRTJH68QY", "BjSynchronizerController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constant = require("./BjConstant");
    var SynchronizerConfigNode = function() {
      function SynchronizerConfigNode() {
        this.priority = -1;
      }
      return SynchronizerConfigNode;
    }();
    exports.SynchronizerConfigNode = SynchronizerConfigNode;
    var SynchronizerStoreItem = function() {
      function SynchronizerStoreItem() {
        this.nodeKey = "";
        this.resolve = null;
        this.reject = null;
        this.configNode = null;
        this.started = false;
      }
      return SynchronizerStoreItem;
    }();
    exports.SynchronizerStoreItem = SynchronizerStoreItem;
    var BjSynchronizerController = function() {
      function BjSynchronizerController() {
        var _this = this;
        this._updated = false;
        this._store = {};
        this._storePromise = {};
        this._config = {};
        this._queue = [];
        this.onChainComplete = function() {
          if (!_this._updated) return;
          console.log("BjSynchronizerController", "onChainComplete");
          _this._updated = false;
          _this._storePromise = {};
          console.log("BjSynchronizerController", "onChainComplete", "store", JSON.stringify(_this._store));
          console.log("BjSynchronizerController", "queue before", _this._queue.length, JSON.stringify(_this._queue));
          for (var sectionKey in _this._store) {
            var items = _this.sort(_this._store[sectionKey], _this._config[sectionKey], _this._config[Constant.DEFAULT]);
            console.log("BjSynchronizerController", "onChainComplete", items.length, "items", JSON.stringify(items));
            if (items.length > 0) {
              console.log("BjSynchronizerController", "add queue", items.length);
              _this._queue.push(new BjSynchronizerQueue(sectionKey, items, function(queueItem) {
                var index = _this._queue.indexOf(queueItem);
                console.log("BjSynchronizerController", "clear index", index);
                index >= 0 && _this._queue.splice(index, 1);
                console.log("BjSynchronizerController", "clear", _this._queue.length, JSON.stringify(_this._queue));
              }));
            }
          }
          _this._store = {};
        };
      }
      BjSynchronizerController.prototype.init = function(storeController, config) {
        this._storeController = storeController;
        this._storeController.addChainCompleteCallbacks(this.onChainComplete);
        this._config = config;
      };
      BjSynchronizerController.prototype.addSyncCallRequest = function(sectionKey, nodeKey) {
        var _this = this;
        console.log("BjSynchronizerController", "addAsyncRequest", sectionKey, nodeKey);
        if (sectionKey in this._storePromise && nodeKey in this._storePromise[sectionKey]) {
          console.log("BjSynchronizerController", "addAsyncRequest", "double");
          return this._storePromise[sectionKey][nodeKey];
        }
        console.log("BjSynchronizerController", "addAsyncRequest", "pass");
        var promise = new Promise(function(resolve, reject) {
          sectionKey in _this._store || (_this._store[sectionKey] = []);
          nodeKey in _this._store[sectionKey] || _this._store[sectionKey].push({
            nodeKey: nodeKey,
            resolve: resolve,
            reject: reject
          });
        });
        this._storePromise[sectionKey] = {};
        this._storePromise[sectionKey][nodeKey] = promise;
        this._updated = true;
        return promise;
      };
      BjSynchronizerController.prototype.has = function(sectionKey, nodeKey) {
        var inStore = sectionKey in this._storePromise && nodeKey in this._storePromise[sectionKey];
        if (inStore) return true;
        var result = false;
        this._queue.forEach(function(item) {
          item.sectionKey == sectionKey && (result = result || item.hasNodeKey(nodeKey));
        });
        return result;
      };
      Object.defineProperty(BjSynchronizerController.prototype, "hasQueue", {
        get: function() {
          return this._queue.length > 0;
        },
        enumerable: true,
        configurable: true
      });
      BjSynchronizerController.prototype.sort = function(data, sortPriorityConfig, defaultSortPriorityConfig) {
        var sorted = {};
        var keys = [];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
          var item = data_1[_i];
          sortPriorityConfig && item.nodeKey in sortPriorityConfig ? item.configNode = __assign({}, sortPriorityConfig[item.nodeKey]) : defaultSortPriorityConfig && (item.nodeKey in defaultSortPriorityConfig || Constant.DEFAULT in defaultSortPriorityConfig) ? item.nodeKey in defaultSortPriorityConfig ? item.configNode = __assign({}, defaultSortPriorityConfig[item.nodeKey]) : Constant.DEFAULT in defaultSortPriorityConfig && (item.configNode = __assign({}, defaultSortPriorityConfig[Constant.DEFAULT])) : item.configNode = new SynchronizerConfigNode();
          sorted[item.configNode.priority] || (sorted[item.configNode.priority] = []);
          sorted[item.configNode.priority].push(item);
          -1 == keys.indexOf(item.configNode.priority) && keys.push(item.configNode.priority);
        }
        keys = keys.sort(function(a, b) {
          return b - a;
        });
        return keys.map(function(key) {
          return sorted[key];
        });
      };
      return BjSynchronizerController;
    }();
    exports.default = BjSynchronizerController;
    var BjSynchronizerQueue = function() {
      function BjSynchronizerQueue(key, data, callback) {
        void 0 === callback && (callback = null);
        this._waitIds = [];
        this._currentQueue = [];
        this._onComplete = null;
        this._sectionKey = null;
        this._complete = false;
        this._uniqueKey = -1;
        this._sectionKey = key;
        this._data = data;
        this._onComplete = callback;
        this._uniqueKey = Math.random();
        console.log("BjSynchronizerQueue", "constructor", this._uniqueKey);
        this.next();
      }
      BjSynchronizerQueue.prototype.dispatch = function(dispatchKey) {
        console.log("BjSynchronizerQueue", this._uniqueKey, "dispatchKey", dispatchKey);
        this._currentQueue.forEach(function(item) {
          item.started || (item.configNode.goal = item.configNode.goal.filter(function(key) {
            return key != dispatchKey;
          }));
        });
        this.checkForStart();
      };
      BjSynchronizerQueue.prototype.completeNode = function(nodeKey) {
        if (this._complete) return;
        console.log("BjSynchronizerQueue", "completeNode", this._sectionKey, nodeKey, this._uniqueKey);
        var index = this._waitIds.indexOf(nodeKey);
        if (index >= 0) {
          this._waitIds.splice(index, 1);
          0 == this._waitIds.length && (this._data.length > 0 ? this.next() : this.complete());
        } else console.log("BjSynchronizerQueue", "completeNode", "!!! key not found");
      };
      BjSynchronizerQueue.prototype.hasNodeKey = function(nodeKey) {
        var result = false;
        this._data.forEach(function(list) {
          list.forEach(function(item) {
            result = result || item.nodeKey == nodeKey;
          });
        });
        return result;
      };
      Object.defineProperty(BjSynchronizerQueue.prototype, "isComplete", {
        get: function() {
          return this._complete;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjSynchronizerQueue.prototype, "sectionKey", {
        get: function() {
          return this._sectionKey;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BjSynchronizerQueue.prototype, "uniqueKey", {
        get: function() {
          return this._uniqueKey;
        },
        enumerable: true,
        configurable: true
      });
      BjSynchronizerQueue.prototype.complete = function() {
        this._complete = true;
        console.log("BjSynchronizerQueue", "complete", this._sectionKey, this._uniqueKey);
        if (this._onComplete) {
          var complete = this._onComplete;
          this._data = null;
          this._waitIds = null;
          this._onComplete = null;
          complete(this);
        }
      };
      BjSynchronizerQueue.prototype.next = function() {
        console.log("BjSynchronizerQueue", "next", this._uniqueKey, JSON.stringify(this._data));
        this._data.length > 0 ? this.nextCurrentQueue(this._data.shift()) : this.complete();
      };
      BjSynchronizerQueue.prototype.nextCurrentQueue = function(currentQueue) {
        var _this = this;
        this._waitIds = [];
        this._currentQueue = currentQueue;
        this._currentQueue.forEach(function(item) {
          _this._waitIds.push(item.nodeKey);
        });
        this.checkForStart();
      };
      BjSynchronizerQueue.prototype.checkForStart = function() {
        var _this = this;
        this._currentQueue.forEach(function(item) {
          _this.hasStartGoal(item) || item.started || _this.start(item);
        });
      };
      BjSynchronizerQueue.prototype.hasStartGoal = function(item) {
        return item && item.configNode && null != item.configNode.goal && item.configNode.goal.length > 0;
      };
      BjSynchronizerQueue.prototype.start = function(item) {
        var resolve = item.resolve;
        console.log("BjSynchronizerQueue", "resolve", this._uniqueKey, this._sectionKey, item.nodeKey);
        item.started = true;
        resolve({
          queue: this,
          id: item.nodeKey
        });
      };
      return BjSynchronizerQueue;
    }();
    exports.BjSynchronizerQueue = BjSynchronizerQueue;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant"
  } ],
  BjTextLang: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f153b+AE5B7Lvju2eu/QWF", "BjTextLang");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TEXT = {
      hit_button_label: {
        en: "HIT"
      },
      split_button_label: {
        en: "SPLIT"
      },
      stand_button_label: {
        en: "STAND"
      },
      double_button_label: {
        en: "DOUBLE"
      },
      player_history: {
        en: "PLAYER"
      },
      dealer_history: {
        en: "DEALER"
      },
      win: {
        en: "WIN"
      },
      loss: {
        en: "LOSS"
      },
      push: {
        en: "PUSH"
      },
      bust: {
        en: "BUST"
      },
      blackjack: {
        en: "BLACKJACK"
      },
      insure: {
        en: "Do you want to insure your bet for {0}?"
      },
      b_ok: {
        en: "OK"
      },
      b_cancel: {
        en: "CANCEL"
      }
    };
    cc._RF.pop();
  }, {} ],
  BjWaitController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69b97j2AJNC6LRxypDdWN2q", "BjWaitController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjWaitController = function() {
      function BjWaitController() {
        var _this = this;
        this._isWaitState = false;
        this._callback = [];
        this.action = function(action) {
          _this.resetTimeOut();
          _this.startTimeOut();
        };
        this.timeOut = function() {
          console.log("BjWaitController", "timeOut");
          _this._params.synchronizer.hasQueue || _this.setWaitState(true);
        };
      }
      BjWaitController.prototype.init = function(params) {
        console.log("BjWaitController", "init");
        this._params = params;
        this._params.storeController.addActionListener(this.action);
      };
      BjWaitController.prototype.addCallback = function(callback) {
        -1 == this._callback.indexOf(callback) && this._callback.push(callback);
      };
      BjWaitController.prototype.removeCallback = function(callback) {
        var index = this._callback.indexOf(callback);
        -1 != index && this._callback.splice(index, 1);
      };
      BjWaitController.prototype.startTimeOut = function() {
        this._timeOutKey = setTimeout(this.timeOut, BjWaitController.WAIT_TIME);
      };
      BjWaitController.prototype.resetTimeOut = function() {
        this.setWaitState(false);
        this._timeOutKey >= 0 && clearTimeout(this._timeOutKey);
        this._timeOutKey = -1;
      };
      BjWaitController.prototype.setWaitState = function(value) {
        var _this = this;
        console.log("BjWaitController", "setWaitState", value);
        this._isWaitState = value;
        this._callback.forEach(function(callback) {
          callback(_this._isWaitState);
        });
      };
      BjWaitController.WAIT_TIME = 7e3;
      return BjWaitController;
    }();
    exports.default = BjWaitController;
    cc._RF.pop();
  }, {} ],
  BjWinMessageController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a009iYilRD4r4syv3I8izo", "BjWinMessageController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BjStoreInterface_1 = require("./BjStoreInterface");
    var Constant = require("./BjConstant");
    var Actions = require("./store/BjActions");
    var BjWinMessageController = function() {
      function BjWinMessageController() {
        var _this = this;
        this.action = function(action) {
          action["type"] == Actions.SET_WIN_INFO_BY_HAND && _this._synchronizer.addSyncCallRequest(action["type"], BjWinMessageController.VIEW_SYNC_WAIT_KEY).then(function(value) {
            _this.update();
            setTimeout(function() {
              _this._winMessage.hide();
              value.queue.completeNode(value.id);
            }, BjWinMessageController.TIME_OUT);
          });
        };
        this.update = function() {
          var state = _this._storeController.getRootState;
          var winByHand = BjStoreInterface_1.StoreHelper.getWinByHand(state);
          if (winByHand.length > 0) {
            var item = void 0;
            var winMsg = "game_end";
            for (var index = 0; index < winByHand.length; index++) {
              item = winByHand[index].type;
              winMsg = 0 == index ? _this._language.lang(_this.getTestByWinStatus(item)) : _this._language.lang(_this.getTestByWinStatus(item)) + " / " + winMsg;
            }
            _this._winMessage.show(winMsg);
          }
        };
      }
      BjWinMessageController.prototype.init = function(view, params) {
        this._winMessage = view;
        this._winMessage.hide();
        this._storeController = params.storeController;
        this._language = params.language;
        this._storeController.addActionListener(this.action);
        this._synchronizer = params.synchronizer;
      };
      BjWinMessageController.prototype.getTestByWinStatus = function(state) {
        var langKey = "push";
        switch (state) {
         case Constant.HAND_WIN_STATE.blackjack:
          langKey = "blackjack";
          break;

         case Constant.HAND_WIN_STATE.win_double:
         case Constant.HAND_WIN_STATE.win:
          langKey = "win";
          break;

         case Constant.HAND_WIN_STATE.lose:
          langKey = "loss";
          break;

         case Constant.HAND_WIN_STATE.push:
          langKey = "push";
          break;

         case Constant.HAND_WIN_STATE.bust:
          langKey = "bust";
          break;

         case Constant.HAND_WIN_STATE.bj_insurance:
          langKey = "loss";
        }
        return langKey;
      };
      BjWinMessageController.VIEW_SYNC_WAIT_KEY = "BjWinMessageController";
      BjWinMessageController.TIME_OUT = 2e3;
      return BjWinMessageController;
    }();
    exports.default = BjWinMessageController;
    cc._RF.pop();
  }, {
    "./BjConstant": "BjConstant",
    "./BjStoreInterface": "BjStoreInterface",
    "./store/BjActions": "BjActions"
  } ],
  BjWinMessage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1201bwTUgRJdrVS9WlLklJD", "BjWinMessage");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BjWinMessage = function(_super) {
      __extends(BjWinMessage, _super);
      function BjWinMessage() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this._viewStatus = false;
        return _this;
      }
      BjWinMessage.prototype.start = function() {
        this.viewUpdate();
      };
      BjWinMessage.prototype.show = function(message) {
        this._viewStatus = true;
        this.label.string = message;
        this.viewUpdate();
      };
      BjWinMessage.prototype.hide = function() {
        this._viewStatus = false;
        this.viewUpdate();
      };
      BjWinMessage.prototype.viewUpdate = function() {
        this.node.active = this._viewStatus;
      };
      __decorate([ property(cc.Label) ], BjWinMessage.prototype, "label", void 0);
      BjWinMessage = __decorate([ ccclass ], BjWinMessage);
      return BjWinMessage;
    }(cc.Component);
    exports.default = BjWinMessage;
    cc._RF.pop();
  }, {} ],
  BombCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8677o995VLC4N74C6z2iAz", "BombCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var BombCombination = function(_super) {
      __extends(BombCombination, _super);
      function BombCombination() {
        var _this = _super.call(this, BombCombination.NAME, 1) || this;
        _this._config = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      BombCombination.NAME = "BOMB";
      return BombCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.BombCombination = BombCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7fdefSr18RFxawYoW5ZeW5t", "Button");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Button = function(_super) {
      __extends(Button, _super);
      function Button() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Button = __decorate([ ccclass ], Button);
      return Button;
    }(cc.Button);
    exports.default = Button;
    cc._RF.pop();
  }, {} ],
  Card: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a1e3na6AdIOoWGjpTLcSkG", "Card");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CardSuit;
    (function(CardSuit) {
      CardSuit[CardSuit["NONE"] = 0] = "NONE";
      CardSuit[CardSuit["SPADES"] = 1] = "SPADES";
      CardSuit[CardSuit["CLUBS"] = 2] = "CLUBS";
      CardSuit[CardSuit["DIAMONDS"] = 3] = "DIAMONDS";
      CardSuit[CardSuit["HEARTS"] = 4] = "HEARTS";
    })(CardSuit = exports.CardSuit || (exports.CardSuit = {}));
    var CardLevel;
    (function(CardLevel) {
      CardLevel[CardLevel["ACE"] = 1] = "ACE";
      CardLevel[CardLevel["C2"] = 2] = "C2";
      CardLevel[CardLevel["C3"] = 3] = "C3";
      CardLevel[CardLevel["C4"] = 4] = "C4";
      CardLevel[CardLevel["C5"] = 5] = "C5";
      CardLevel[CardLevel["C6"] = 6] = "C6";
      CardLevel[CardLevel["C7"] = 7] = "C7";
      CardLevel[CardLevel["C8"] = 8] = "C8";
      CardLevel[CardLevel["C9"] = 9] = "C9";
      CardLevel[CardLevel["C10"] = 10] = "C10";
      CardLevel[CardLevel["JACK"] = 11] = "JACK";
      CardLevel[CardLevel["QUEEN"] = 12] = "QUEEN";
      CardLevel[CardLevel["KING"] = 13] = "KING";
      CardLevel[CardLevel["BLACK_JOKER"] = 14] = "BLACK_JOKER";
      CardLevel[CardLevel["RED_JOKER"] = 15] = "RED_JOKER";
    })(CardLevel = exports.CardLevel || (exports.CardLevel = {}));
    exports.BJ_INDEX = 4 * CardLevel.KING + 1;
    exports.RJ_INDEX = exports.BJ_INDEX + 1;
    var Card = function() {
      function Card(level, suit) {
        null != suit ? this.setupByLevelAndSuit(level, suit) : this.setupByIndex(level);
      }
      Object.defineProperty(Card.prototype, "level", {
        get: function() {
          return this._level;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Card.prototype, "suit", {
        get: function() {
          return this._suit;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Card.prototype, "index", {
        get: function() {
          return this._index;
        },
        enumerable: true,
        configurable: true
      });
      Card.prototype.setupByIndex = function(index) {
        this._index = index;
        if (index === exports.BJ_INDEX) {
          this._level = CardLevel.BLACK_JOKER;
          this._suit = CardSuit.NONE;
        } else if (index === exports.RJ_INDEX) {
          this._level = CardLevel.RED_JOKER;
          this._suit = CardSuit.NONE;
        } else {
          this._level = (index - 1) % 13 + 1;
          this._suit = Math.floor((index - 1) / 13) + 1;
        }
        this.buildShortName();
        return this;
      };
      Card.prototype.setupByLevelAndSuit = function(level, suit) {
        this._level = level;
        this._suit = suit;
        if (level === CardLevel.BLACK_JOKER) {
          this._index = exports.BJ_INDEX;
          this._suit = CardSuit.NONE;
        } else if (level === CardLevel.RED_JOKER) {
          this._index = exports.RJ_INDEX;
          this._suit = CardSuit.NONE;
        } else this._index = 13 * (suit - 1) + level;
        this.buildShortName();
        return this;
      };
      Card.prototype.buildShortName = function() {
        var out;
        out = this._level === CardLevel.ACE ? "A" : this._level === CardLevel.KING ? "K" : this._level === CardLevel.QUEEN ? "Q" : this._level === CardLevel.JACK ? "J" : this._level === CardLevel.BLACK_JOKER ? "BJK" : this._level === CardLevel.RED_JOKER ? "RJK" : "" + this._level;
        this._suit === CardSuit.CLUBS ? out += ":T" : this._suit === CardSuit.DIAMONDS ? out += ":B" : this._suit === CardSuit.HEARTS ? out += ":H" : this._suit === CardSuit.SPADES && (out += ":P");
        this._shortName = out;
      };
      Card.prototype.toString = function() {
        return this._shortName;
      };
      return Card;
    }();
    exports.Card = Card;
    cc._RF.pop();
  }, {} ],
  ChipView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27926uE/t5Ed4ZS0K+t1sad", "ChipView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChipView = function(_super) {
      __extends(ChipView, _super);
      function ChipView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.value = "";
        return _this;
      }
      ChipView.prototype.start = function() {};
      __decorate([ property ], ChipView.prototype, "value", void 0);
      ChipView = __decorate([ ccclass ], ChipView);
      return ChipView;
    }(cc.Toggle);
    exports.default = ChipView;
    cc._RF.pop();
  }, {} ],
  ChipsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "684421xOIJC/IcefM2fcdEB", "ChipsView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var gsap_1 = require("gsap");
    var ChipView_1 = require("./ChipView");
    var Pool_1 = require("../../utils/Pool");
    var BKGame_1 = require("../../BKGame");
    var SoundManager_1 = require("../../../../../common/managers/sound/SoundManager");
    var BKSounds_1 = require("./../../BKSounds");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChipsView = function(_super) {
      __extends(ChipsView, _super);
      function ChipsView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._gameChips = null;
        _this._chipSize = 110;
        _this._globalChipsCount = 0;
        _this._gapBetweenChips = 0;
        _this._tweenChipsContent = null;
        _this._chipsAmountContentVisibled = 4;
        _this._selectedChip = null;
        _this._selectedChipIndex = -1;
        _this.Chip = null;
        _this.chips = [];
        _this.content = null;
        _this.chipsAtlas = null;
        _this.scrollView = null;
        _this.gameField = null;
        return _this;
      }
      ChipsView.prototype.start = function() {
        var _this = this;
        this._gameChips = [ 5, 10, 50, 100, 500, 1e3, 2e3, 5e3 ];
        this.pool = new Pool_1.default(false, 50);
        this.pool.poolOutCallback = this.onPoolOut.bind(this);
        this.pool.poolEmptyCallback = this.onPoolEmpty.bind(this);
        this.pool.poolResetCallback = this.onPoolReset.bind(this);
        for (var i = 0; i < 50; i++) {
          var chip = cc.instantiate(this.Chip);
          this.pool.poolIn(chip);
        }
        this.scrollView.node.on("scroll-ended", this.touchScrollEnd, this);
        this.chips.forEach(function(chip) {
          chip.node.on("toggle", function(data) {
            _this._selectedChip && gsap_1.TweenMax.to(_this._selectedChip.node, .25, {
              y: 0
            });
            _this._selectedChip = data.isChecked ? data : null;
            _this._selectedChipIndex = _this.chips.indexOf(_this._selectedChip);
            gsap_1.TweenMax.to(_this._selectedChip.node, .25, {
              y: 25
            });
          });
        });
        this._chipSize = this.chips[0].node.width;
        this.arrageChips();
        this.openBetting();
      };
      ChipsView.prototype.arrageChips = function() {
        var _this = this;
        var xx = 0;
        this.chips.forEach(function(chip) {
          chip.node.x = xx + _this._chipSize / 2;
          xx += _this._chipSize + _this._gapBetweenChips;
        });
      };
      ChipsView.prototype.closeBetting = function() {
        var _this = this;
        if (this._selectedChip) {
          this._selectedChipIndex = this.chips.indexOf(this._selectedChip);
          gsap_1.TweenMax.to(this._selectedChip.node, .25, {
            y: 0
          });
        }
        this._selectedChip = null;
        this._gameChips.forEach(function(item, index) {
          _this.chips[index].isChecked = false;
          _this.chips[index].interactable = false;
        });
      };
      ChipsView.prototype.openBetting = function(balance) {
        this.disableChips(BKGame_1.default.gameCore.getCurrentPlayerInfo().balance);
        if (-1 != this._selectedChipIndex && balance >= +this.chips[this._selectedChipIndex].value) {
          this._selectedChip = this.chips[this._selectedChipIndex];
          this.chips[this._selectedChipIndex].isChecked = true;
          gsap_1.TweenMax.to(this._selectedChip.node, .25, {
            y: 25
          });
        }
      };
      ChipsView.prototype.disableChips = function(value) {
        var _this = this;
        this._gameChips.forEach(function(item, index) {
          _this.chips[index].interactable = item <= value;
          if (!_this.chips[index].interactable) {
            _this.chips[index].isChecked = false;
            if (_this.chips[index] == _this._selectedChip) {
              _this._selectedChipIndex = index;
              _this._selectedChip = null;
            }
          }
        });
      };
      ChipsView.prototype.clearChips = function() {
        this.moveOutside();
      };
      ChipsView.prototype.moveOutside = function() {
        var _this = this;
        var points = [];
        for (var i = 0; i < 100; i++) {
          var newAngle = this.getRandomInt(0, 360);
          var newX = 700 * Math.cos(newAngle);
          var newY = 700 * Math.sin(newAngle);
          points.push({
            x: newX,
            y: newY
          });
        }
        this.pool.poolArray.forEach(function(item, index) {
          var point = points[_this.getRandomInt(0, points.length - 1)];
          gsap_1.TweenMax.to(item, .5, {
            x: point.x,
            y: point.y + 150,
            onComplete: _this.onOutsideTweenComplete,
            onCompleteParams: [ index ],
            onCompleteScope: _this
          });
        });
      };
      ChipsView.prototype.onOutsideTweenComplete = function(index) {
        index == this.pool.poolArray.length - 1 && this.pool.reset();
      };
      ChipsView.prototype.arrowsHandler = function(event, customEventData) {
        if (this._tweenChipsContent) return;
        var chipsNumber = this._globalChipsCount + Number(customEventData);
        this.moveContentBy(chipsNumber);
      };
      ChipsView.prototype.touchScrollEnd = function(event, customEventData) {
        if (this._tweenChipsContent) return;
        var dx = Math.abs(this.content.x / (this._chipSize + this._gapBetweenChips));
        var chipsNumber = Math.round(dx);
        this.moveContentBy(chipsNumber);
      };
      ChipsView.prototype.moveContentBy = function(count) {
        this._globalChipsCount = count;
        this._globalChipsCount < 0 && (this._globalChipsCount = 0);
        this._globalChipsCount > this.chips.length - this._chipsAmountContentVisibled && (this._globalChipsCount = this.chips.length - this._chipsAmountContentVisibled);
        var positionX = this._globalChipsCount * (this._chipSize + this._gapBetweenChips);
        this._tweenChipsContent = gsap_1.TweenMax.to(this.content, .2, {
          x: -positionX,
          onComplete: function() {
            this._tweenChipsContent = null;
          },
          onCompleteScope: this
        });
      };
      ChipsView.prototype.flyChipTo = function(event) {
        if (!this._selectedChip) return;
        var chipData = {
          value: this._selectedChip.value,
          fieldCellId: event.currentTarget.name
        };
        var newChip = this.createChip(chipData);
        this.flyChip(chipData, newChip);
        this.node.emit("chipPlaced", {
          value: +this._selectedChip.value,
          fieldCellId: event.currentTarget.name
        });
      };
      ChipsView.prototype.spawnChip = function(data, fly) {
        var _this = this;
        void 0 === fly && (fly = true);
        var values = this.findChipValues(data.value);
        values.forEach(function(value) {
          var chipData = {
            value: value,
            fieldCellId: data.fieldCellId,
            placeId: data.placeId
          };
          var newChip = _this.createChip(chipData);
          fly ? _this.flyChip(chipData, newChip) : _this.placeChip(chipData, newChip);
        });
      };
      ChipsView.prototype.findChipValues = function(value) {
        var arr = [];
        for (var i = this._gameChips.length - 1; i >= 0; i--) {
          var chipValue = this._gameChips[i];
          while (value - chipValue >= 0) {
            value -= chipValue;
            arr.push(chipValue);
          }
        }
        return arr;
      };
      ChipsView.prototype.createChip = function(data) {
        var chip = this.pool.poolOut();
        chip.width = 50;
        chip.height = 50;
        chip.x = -250;
        chip.y = -350;
        chip.getComponent(cc.Sprite).spriteFrame = this.chipsAtlas.getSpriteFrame(data.value.toString() + "_1");
        this.gameField.addChild(chip);
        return chip;
      };
      ChipsView.prototype.placeChip = function(data, chip) {
        var finalSize = {
          width: 60,
          height: 60
        };
        var target = this.gameField.getChildByName(data.fieldCellId);
        var chipPlace = this.getChipPlace(target, finalSize);
        chip.x = chipPlace.x;
        chip.y = chipPlace.y;
        chip.width = finalSize.width;
        chip.height = finalSize.height;
        chip.rotation = chipPlace.rot;
      };
      ChipsView.prototype.flyChip = function(data, chip) {
        var finalSize = {
          width: 60,
          height: 60
        };
        var target = this.gameField.getChildByName(data.fieldCellId);
        var chipPlace = this.getChipPlace(target, finalSize);
        gsap_1.TweenMax.to(chip, .5, {
          x: chipPlace.x,
          y: chipPlace.y,
          width: finalSize.width,
          height: finalSize.height
        });
        gsap_1.TweenMax.to(chip, .5, {
          rotation: chipPlace.rot,
          ease: gsap_1.Power2.easeInOut
        });
        this.playSound(data.fieldCellId);
      };
      ChipsView.prototype.playSound = function(n) {
        SoundManager_1.SoundManager.instance.interfaceSound(BKSounds_1.Sounds["NUMBER_" + n]);
      };
      ChipsView.prototype.getChipPlace = function(target, finalSize) {
        return {
          x: finalSize.width / 2 + target.x - target.width / 2 + Math.random() * (target.width - .9 * finalSize.width),
          y: finalSize.height / 2 + target.y - target.height / 2 + Math.random() * (target.height - .9 * finalSize.height),
          rot: this.getRandomInt(-45, 45)
        };
      };
      ChipsView.prototype.onPoolOut = function(chip) {
        chip.parent && chip.parent.removeChild(chip);
        chip.x = 0;
        chip.y = 0;
      };
      ChipsView.prototype.onPoolEmpty = function() {
        var chip = cc.instantiate(this.Chip);
        this.pool.poolIn(chip);
      };
      ChipsView.prototype.onPoolReset = function(removed, inPool) {
        removed.forEach(function(item) {
          item.parent && item.parent.removeChild(item);
        });
        inPool.forEach(function(item) {
          item.parent && item.parent.removeChild(item);
        });
      };
      ChipsView.prototype.getRandomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };
      __decorate([ property(cc.Prefab) ], ChipsView.prototype, "Chip", void 0);
      __decorate([ property(ChipView_1.default) ], ChipsView.prototype, "chips", void 0);
      __decorate([ property(cc.Node) ], ChipsView.prototype, "content", void 0);
      __decorate([ property(cc.SpriteAtlas) ], ChipsView.prototype, "chipsAtlas", void 0);
      __decorate([ property(cc.ScrollView) ], ChipsView.prototype, "scrollView", void 0);
      __decorate([ property(cc.Node) ], ChipsView.prototype, "gameField", void 0);
      ChipsView = __decorate([ ccclass ], ChipsView);
      return ChipsView;
    }(cc.Component);
    exports.default = ChipsView;
    cc._RF.pop();
  }, {
    "../../../../../common/managers/sound/SoundManager": "SoundManager",
    "../../BKGame": "BKGame",
    "../../utils/Pool": "Pool",
    "./../../BKSounds": "BKSounds",
    "./ChipView": "ChipView",
    gsap: 117
  } ],
  CocosStorage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74eabYIRqFE+YpwL/C6mNwP", "CocosStorage");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CocosStorage = function() {
      function CocosStorage() {}
      CocosStorage.prototype.getItem = function(key) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, cc.sys.localStorage.getItem(key) ];

             case 1:
              return [ 2, _a.sent() ];
            }
          });
        });
      };
      CocosStorage.prototype.setItem = function(key, item) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, cc.sys.localStorage.setItem(key, item) ];

             case 1:
              return [ 2, _a.sent() ];
            }
          });
        });
      };
      CocosStorage.prototype.removeItem = function(key) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, cc.sys.localStorage.removeItem(key) ];

             case 1:
              return [ 2, _a.sent() ];
            }
          });
        });
      };
      return CocosStorage;
    }();
    exports.default = new CocosStorage();
    cc._RF.pop();
  }, {} ],
  CombinationResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3174fzCL4NNnp4FzDs+Jw73", "CombinationResult");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CombinationCompareResult;
    (function(CombinationCompareResult) {
      CombinationCompareResult[CombinationCompareResult["SMALLER"] = -1] = "SMALLER";
      CombinationCompareResult[CombinationCompareResult["EQUAL"] = 0] = "EQUAL";
      CombinationCompareResult[CombinationCompareResult["BIGGER"] = 1] = "BIGGER";
      CombinationCompareResult[CombinationCompareResult["INVALID"] = 2] = "INVALID";
    })(CombinationCompareResult = exports.CombinationCompareResult || (exports.CombinationCompareResult = {}));
    var CombinationResult = function() {
      function CombinationResult(name, rank, patternId, combinationsComparator, cards) {
        this._name = "Empty";
        this._rank = -1;
        this._bestCards = [];
        this._playerCards = [];
        this._freeCards = [];
        this._name = name;
        this._rank = rank;
        this._patternId = patternId;
        this._combinationsComparator = combinationsComparator;
        this._playerCards = cards.slice();
      }
      CombinationResult.prototype.setupBestCards = function(checker) {
        var _this = this;
        this._bestCards = [];
        this._freeCards = [];
        this._playerCards.forEach(function(value, index) {
          var result = checker(value, index);
          1 === result ? _this._bestCards.push(value) : 0 === result && _this._freeCards.push(value);
        });
      };
      Object.defineProperty(CombinationResult.prototype, "name", {
        get: function() {
          return this._name;
        },
        set: function(value) {
          this._name = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(CombinationResult.prototype, "rank", {
        get: function() {
          return this._rank;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(CombinationResult.prototype, "patternId", {
        get: function() {
          return this._patternId;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(CombinationResult.prototype, "bestCards", {
        get: function() {
          return this._bestCards;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(CombinationResult.prototype, "freeCards", {
        get: function() {
          return this._freeCards;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(CombinationResult.prototype, "playerCards", {
        get: function() {
          return this._playerCards;
        },
        enumerable: true,
        configurable: true
      });
      CombinationResult.prototype.compare = function(combinationResult) {
        if (this._rank == combinationResult.rank) {
          var comparator = this._combinationsComparator;
          return comparator.compareTwoSameCombinations(this, combinationResult);
        }
        return this._rank > combinationResult.rank ? CombinationCompareResult.BIGGER : CombinationCompareResult.SMALLER;
      };
      return CombinationResult;
    }();
    exports.CombinationResult = CombinationResult;
    cc._RF.pop();
  }, {} ],
  Component: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fac7a6MWClC5535fN3w0YtH", "Component");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Component = function(_super) {
      __extends(Component, _super);
      function Component() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Component.prototype.componentReceivedProps = function(oldProps) {};
      Component.prototype.onLoad = function() {};
      Component.prototype.start = function() {};
      Component.prototype.onDestroy = function() {};
      return Component;
    }(cc.Component);
    exports.default = Component;
    cc._RF.pop();
  }, {} ],
  Config: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00670yA6qlPxoBNWd0ATj79", "Config");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var selector_1 = require("../core/selector");
    var GameCode;
    (function(GameCode) {
      GameCode[GameCode["BRAG"] = 1] = "BRAG";
      GameCode[GameCode["BLACK_JACK"] = 2] = "BLACK_JACK";
      GameCode[GameCode["SPIN"] = 3] = "SPIN";
      GameCode[GameCode["SIDES"] = 4] = "SIDES";
      GameCode[GameCode["DOU_DIZHU"] = 5] = "DOU_DIZHU";
      GameCode[GameCode["TEXAS_HOLDEM"] = 6] = "TEXAS_HOLDEM";
      GameCode[GameCode["LOTTERY"] = 101] = "LOTTERY";
      GameCode[GameCode["PK10"] = 102] = "PK10";
    })(GameCode = exports.GameCode || (exports.GameCode = {}));
    var Config = function() {
      function Config() {
        this.games = [ {
          code: GameCode.BRAG,
          name: "Brag",
          scene: "BragGameScene",
          selectTableScene: "BragGameChoseBetScene",
          orientation: "portrait"
        }, {
          code: GameCode.BLACK_JACK,
          name: "BlackJack",
          scene: "BlackjackGameScene",
          orientation: "portrait"
        }, {
          code: GameCode.SPIN,
          name: "Spin",
          scene: "SpinGameScene",
          orientation: "portrait"
        }, {
          code: GameCode.SIDES,
          name: "Sides",
          scene: "SidesGameScene",
          orientation: "landscape"
        }, {
          code: GameCode.DOU_DIZHU,
          name: "Dou Dizhu",
          scene: "DouDizhuGameScene",
          selectTableScene: "DouDizhuGameChoseBetScene",
          orientation: "portrait"
        }, {
          code: GameCode.TEXAS_HOLDEM,
          name: "Texas Pocker",
          scene: "TexasHoldemGameScene",
          selectTableScene: "TexasHoldemGameChoseBetScene",
          orientation: "portrait"
        }, {
          code: GameCode.LOTTERY,
          name: "Lottery",
          scene: "BaccaratGameScene",
          orientation: "portrait"
        }, {
          code: GameCode.PK10,
          name: "Beijing's Race",
          scene: "BeijingRaceGameScene",
          orientation: "portrait"
        } ];
        this.nakamaServer = selector_1.default([ [ "stage", function() {
          return {
            host: "47.93.23.78",
            port: 7350,
            serverKey: "fhdjrigofdsd43eff332"
          };
        } ], [ "alpha", function() {
          return {
            host: "35.159.10.139",
            port: 7350,
            serverKey: "fhdjrigofdsd43eff332"
          };
        } ], [ "dev", function() {
          return {
            host: "134.249.230.205",
            port: 7350,
            serverKey: "fhdjrigofdsd43eff332"
          };
        } ], [ "local", function() {
          return {
            host: "127.0.0.1",
            port: 7350,
            serverKey: "fhdjrigofdsd43eff332"
          };
        } ] ])("alpha");
      }
      return Config;
    }();
    exports.default = new Config();
    cc._RF.pop();
  }, {
    "../core/selector": "selector"
  } ],
  CustomHitTestHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34f39k1cCxEdItgVvQLt/PN", "CustomHitTestHelper");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function add(node, widthOuterMargin, heightOutMargin) {
      var vecHelper = cc.v2();
      var result = function(point, listener) {
        var wT = widthOuterMargin;
        var hT = heightOutMargin;
        var affineTransformInvertIn = function(t) {
          var a = t.a;
          var b = t.b;
          var c = t.c;
          var d = t.d;
          var determinant = 1 / (a * d - b * c);
          var tx = t.tx;
          var ty = t.ty;
          t.a = determinant * d;
          t.b = -determinant * b;
          t.c = -determinant * c;
          t.d = determinant * a;
          t.tx = determinant * (c * ty - d * tx);
          t.ty = determinant * (b * tx - a * ty);
          return t;
        };
        var pointApplyAffineTransform = function(point, t) {
          var x = point.x;
          var y = point.y;
          return {
            x: t.a * x + t.c * y + t.tx,
            y: t.b * x + t.d * y + t.ty
          };
        };
        var w = this.width - wT;
        var h = this.height - hT;
        var pt = point;
        var Camera = cc.Camera;
        Camera && Camera.main && Camera.main.containsNode(this) && (pt = Camera.main.getCameraToWorldPoint(pt, vecHelper));
        var trans = affineTransformInvertIn(this._sgNode.getNodeToWorldTransform());
        pt = pointApplyAffineTransform(pt, trans);
        pt.x += this._anchorPoint.x * w;
        pt.y += this._anchorPoint.y * h;
        var left = pt.x;
        var right = w - pt.x;
        var bottom = pt.y;
        var top = h - pt.y;
        if (left >= 0 && right >= 0 && top >= 0 && bottom >= 0) return true;
        return false;
      };
    }
    exports.add = add;
    cc._RF.pop();
  }, {} ],
  DDAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a74f+Z8ydCjaFsrKIOEKTe", "DDAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DDActionType;
    (function(DDActionType) {
      DDActionType[DDActionType["PREPARE_FOR_ROUND"] = 0] = "PREPARE_FOR_ROUND";
      DDActionType[DDActionType["TABLE_CONFIG_UPDATE"] = 1] = "TABLE_CONFIG_UPDATE";
      DDActionType[DDActionType["ROUND_COMPLETE"] = 2] = "ROUND_COMPLETE";
      DDActionType[DDActionType["ROUND_DISMISSED"] = 3] = "ROUND_DISMISSED";
      DDActionType[DDActionType["REGISTER_PLACE"] = 4] = "REGISTER_PLACE";
      DDActionType[DDActionType["DROP_PLACE"] = 5] = "DROP_PLACE";
      DDActionType[DDActionType["DEAL_CARDS"] = 6] = "DEAL_CARDS";
      DDActionType[DDActionType["WAITING_LORD_BET"] = 7] = "WAITING_LORD_BET";
      DDActionType[DDActionType["MAKE_LORD_BET"] = 8] = "MAKE_LORD_BET";
      DDActionType[DDActionType["FOLD_LORD_BET"] = 9] = "FOLD_LORD_BET";
      DDActionType[DDActionType["DEAL_LORD_CARDS"] = 10] = "DEAL_LORD_CARDS";
      DDActionType[DDActionType["WAITING_MOVE"] = 11] = "WAITING_MOVE";
      DDActionType[DDActionType["MOVE_END"] = 12] = "MOVE_END";
      DDActionType[DDActionType["MOVE"] = 13] = "MOVE";
      DDActionType[DDActionType["FOLD"] = 14] = "FOLD";
      DDActionType[DDActionType["ACTIVATE_BOT"] = 15] = "ACTIVATE_BOT";
      DDActionType[DDActionType["DEACTIVATE_BOT"] = 16] = "DEACTIVATE_BOT";
    })(DDActionType = exports.DDActionType || (exports.DDActionType = {}));
    cc._RF.pop();
  }, {} ],
  DDBetItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8b03LfK2VAMKAaZxw7XsHo", "DDBetItem");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SelectTableSceneBase_1 = require("../../../../main/Script/scene/base/SelectTableSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDBetItem = function(_super) {
      __extends(DDBetItem, _super);
      function DDBetItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.text = null;
        return _this;
      }
      DDBetItem.prototype.setup = function(config) {
        _super.prototype.setup.call(this, config);
        this.node.on("touchstart", this._onButtonClick.bind(this));
        this.node.on("touchend", this.onButtonClickRelease.bind(this));
        this.node.on("touchcancel", this.onButtonClickCancel.bind(this));
      };
      DDBetItem.prototype.setupText = function(value) {
        this.text.string = value;
      };
      DDBetItem.prototype.setupIcon = function(value, pressed) {
        if (pressed) this._pressedSprite = value; else {
          this.node.getChildByName("sprite").getComponent("cc.Sprite").spriteFrame = value;
          this._normalSprite = value;
        }
      };
      DDBetItem.prototype.updateItem = function() {
        this.node.getComponent(cc.Button).enabled = !this.selected;
      };
      DDBetItem.prototype._onButtonClick = function(event) {
        this.node.getChildByName("sprite").getComponent("cc.Sprite").spriteFrame = this._pressedSprite;
      };
      DDBetItem.prototype.onButtonClickRelease = function(event) {
        this.node.getChildByName("sprite").getComponent("cc.Sprite").spriteFrame = this._normalSprite;
        this._callBack.call(this._target, this.index);
      };
      DDBetItem.prototype.onButtonClickCancel = function(event) {
        this.node.getChildByName("sprite").getComponent("cc.Sprite").spriteFrame = this._normalSprite;
      };
      DDBetItem.prototype.onSelected = function(value, target) {
        this._callBack = value;
        this._target = target;
      };
      __decorate([ property(cc.Label) ], DDBetItem.prototype, "text", void 0);
      DDBetItem = __decorate([ ccclass ], DDBetItem);
      return DDBetItem;
    }(SelectTableSceneBase_1.BetItem);
    exports.DDBetItem = DDBetItem;
    cc._RF.pop();
  }, {
    "../../../../main/Script/scene/base/SelectTableSceneBase": "SelectTableSceneBase"
  } ],
  DDBetTables: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b966XLLCBFF7VEFJuaTgaL", "DDBetTables");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SelectTableSceneBase_1 = require("../../../../main/Script/scene/base/SelectTableSceneBase");
    var Sound_1 = require("../../../../common/managers/sound/Sound");
    var WindowsManager_1 = require("../../../../common/core/windows/WindowsManager");
    var TextHelper_1 = require("../../../../common/helpers/TextHelper");
    var WindowsTypes_1 = require("../../../../common/core/windows/WindowsTypes");
    var SoundManager_1 = require("../../../../common/managers/sound/SoundManager");
    var DDSounds_1 = require("../DDSounds");
    var PrefabLoader_1 = require("../../../../main/Script/component/PrefabLoader");
    var BaseAvatarComponent_1 = require("../../../../main/Script/component/BaseAvatarComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDTableBetMenu = function(_super) {
      __extends(DDTableBetMenu, _super);
      function DDTableBetMenu() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemsContainerNode = null;
        _this.userAvater = null;
        _this.userId = null;
        _this.userName = null;
        _this.userBalance = null;
        _this.avatarAtlas = null;
        _this.itemsPrefab = null;
        _this.itemFrames = [];
        _this.pressedFrames = [];
        _this.promptPrefab = null;
        return _this;
      }
      DDTableBetMenu.prototype.start = function() {
        _super.prototype.start.call(this);
        SoundManager_1.SoundManager.instance.setup(DDSounds_1.Sounds.Config);
        SoundManager_1.SoundManager.instance.backgroundSound(DDSounds_1.Sounds.ROOM_BG);
        this._windowsManager = new WindowsManager_1.default();
        this._windowsManager.init({
          parent: this.node
        }).initAppearanceConfig(__assign({}, this._windowsManager.fillWindowParams("").appearanceConfig, {
          fade: true,
          directionShow: WindowsTypes_1.WindowShowDirection.DOWN,
          directionHide: WindowsTypes_1.WindowShowDirection.UP,
          scale: false
        }));
      };
      DDTableBetMenu.prototype.onDestroy = function() {
        SoundManager_1.SoundManager.instance.stopSoundsByType(Sound_1.Sound.BACKGROUND_MUSIC);
        _super.prototype.onDestroy.call(this);
        this._windowsManager && this._windowsManager.dispose();
      };
      DDTableBetMenu.prototype.drawItems = function(gameConfig) {
        var _this = this;
        var config = gameConfig.tables;
        if (null != this.itemsPrefab) {
          for (var i = 0; i < config.length; i++) if (i < this.itemFrames.length) {
            var betViewNode = cc.instantiate(this.itemsPrefab);
            var betView = betViewNode.getComponent(SelectTableSceneBase_1.BetItem);
            betView.setupIcon(this.itemFrames[i]);
            betView.setupIcon(this.pressedFrames[i], true);
            betView.onSelected(this.onChooseItem, this);
            betViewNode.parent = this.itemsContainerNode;
            switch (i) {
             case 0:
              betViewNode.position = cc.v2(-205, -250);
              break;

             case 1:
              betViewNode.position = cc.v2(0, -360);
              break;

             case 2:
              betViewNode.position = cc.v2(205, -250);
              break;

             case 3:
              betViewNode.position = cc.v2(0, -635);
            }
            this.addItem(betView);
          }
          this.updateButtons();
          this.updateTopMenu();
        }
        cc.view.setResizeCallback(function() {
          null != _this.itemsContainerNode && null != _this.itemsContainerNode.parent && (_this.itemsContainerNode.parent.width = 1136);
        });
      };
      DDTableBetMenu.prototype.updateButtons = function() {
        var _this = this;
        this._items.length > 0 && this._items.forEach(function(item) {
          var result = item.config.ballance.limits.minToJoin <= _this.props.playerBalance;
          if (!result) {
            item.node._bubblingListeners._callbackTable.touchend.callbacks.length = 1;
            item.node.on("touchend", _this._showPrompt.bind(_this));
          }
        });
      };
      DDTableBetMenu.prototype.updateTopMenu = function() {
        this.userId.string = this.props.playerId;
        this.userName.string = this.props.playerName;
        this.userBalance.string = TextHelper_1.default.coinsShortcut(this.props.playerBalance, 1);
        this.userAvater.getContent(BaseAvatarComponent_1.default).setup({
          size: 100,
          useRect: true,
          avatarId: this.props.playerAvatarId,
          useClickOnAvatar: false,
          useRoundCorner: true
        });
      };
      DDTableBetMenu.prototype.getItem = function() {
        return cc.instantiate(this.itemsPrefab);
      };
      DDTableBetMenu.prototype._showPrompt = function() {
        this._windowsManager.show(this.promptPrefab, {
          bothClose: true,
          textForField: "Not enough money!"
        });
      };
      __decorate([ property(cc.Node) ], DDTableBetMenu.prototype, "itemsContainerNode", void 0);
      __decorate([ property(PrefabLoader_1.default) ], DDTableBetMenu.prototype, "userAvater", void 0);
      __decorate([ property(cc.Label) ], DDTableBetMenu.prototype, "userId", void 0);
      __decorate([ property(cc.Label) ], DDTableBetMenu.prototype, "userName", void 0);
      __decorate([ property(cc.Label) ], DDTableBetMenu.prototype, "userBalance", void 0);
      __decorate([ property(cc.SpriteAtlas) ], DDTableBetMenu.prototype, "avatarAtlas", void 0);
      __decorate([ property(cc.Prefab) ], DDTableBetMenu.prototype, "itemsPrefab", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], DDTableBetMenu.prototype, "itemFrames", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], DDTableBetMenu.prototype, "pressedFrames", void 0);
      __decorate([ property(cc.Prefab) ], DDTableBetMenu.prototype, "promptPrefab", void 0);
      DDTableBetMenu = __decorate([ ccclass ], DDTableBetMenu);
      return DDTableBetMenu;
    }(SelectTableSceneBase_1.default);
    exports.DDTableBetMenu = DDTableBetMenu;
    cc._RF.pop();
  }, {
    "../../../../common/core/windows/WindowsManager": "WindowsManager",
    "../../../../common/core/windows/WindowsTypes": "WindowsTypes",
    "../../../../common/helpers/TextHelper": "TextHelper",
    "../../../../common/managers/sound/Sound": "Sound",
    "../../../../common/managers/sound/SoundManager": "SoundManager",
    "../../../../main/Script/component/BaseAvatarComponent": "BaseAvatarComponent",
    "../../../../main/Script/component/PrefabLoader": "PrefabLoader",
    "../../../../main/Script/scene/base/SelectTableSceneBase": "SelectTableSceneBase",
    "../DDSounds": "DDSounds"
  } ],
  DDCardView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "14aecb17VdAIa/TtWMzGOo6", "DDCardView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ccclass = cc._decorator.ccclass;
    var DDCardView = function(_super) {
      __extends(DDCardView, _super);
      function DDCardView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._isSelected = false;
        _this._isSelectable = true;
        _this._baseY = -1;
        return _this;
      }
      DDCardView_1 = DDCardView;
      DDCardView.prototype.initialize = function(rate, suit) {
        this._rate = rate;
        this._suit = suit;
      };
      DDCardView.prototype.invertSelection = function() {
        this.isSelected = !this.isSelected;
      };
      Object.defineProperty(DDCardView.prototype, "isSelected", {
        get: function() {
          return this._isSelected;
        },
        set: function(value) {
          if (this._isSelected === value) return;
          this.node.stopAllActions();
          this._isSelected = value;
          value ? this.node.runAction(cc.moveTo(.05, this.node.x, this._baseY + DDCardView_1.SELECTION_OFFSET)) : this.node.runAction(cc.moveTo(.05, this.node.x, this._baseY));
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DDCardView.prototype, "isSelectable", {
        get: function() {
          return this._isSelectable;
        },
        set: function(value) {
          this._isSelectable = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DDCardView.prototype, "isFaded", {
        get: function() {
          return this.node.getChildByName("fader").active;
        },
        set: function(value) {
          this.node.getChildByName("fader").active = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DDCardView.prototype, "baseY", {
        get: function() {
          return this._baseY;
        },
        set: function(value) {
          this.node.y = value + (this._isSelected ? DDCardView_1.SELECTION_OFFSET : 0);
          this._baseY = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DDCardView.prototype, "rate", {
        get: function() {
          return this._rate;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DDCardView.prototype, "suit", {
        get: function() {
          return this._suit;
        },
        enumerable: true,
        configurable: true
      });
      var DDCardView_1;
      DDCardView.SELECTION_OFFSET = 30;
      DDCardView = DDCardView_1 = __decorate([ ccclass ], DDCardView);
      return DDCardView;
    }(cc.Component);
    exports.DDCardView = DDCardView;
    cc._RF.pop();
  }, {} ],
  DDCoinGroup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e6c3DJ16tBloKqM6MmTYQP", "DDCoinGroup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DDCoin_1 = require("./DDCoin");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDCoinGroup = function(_super) {
      __extends(DDCoinGroup, _super);
      function DDCoinGroup() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.coinPrefab = null;
        return _this;
      }
      DDCoinGroup_1 = DDCoinGroup;
      DDCoinGroup.prototype.initialize = function(winner, loser) {
        var count = Math.random() * DDCoinGroup_1.COINS_COUNT_DISPERSION + DDCoinGroup_1.COINS_COUNT;
        for (var index = 0; index < count; index++) {
          var prefab = cc.instantiate(this.coinPrefab);
          prefab.getComponent(DDCoin_1.default).initialize(DDCoinGroup_1.POSITIONS[winner], DDCoinGroup_1.POSITIONS[loser]);
          prefab.parent = this.node;
        }
      };
      var DDCoinGroup_1;
      DDCoinGroup.COINS_COUNT_DISPERSION = 10;
      DDCoinGroup.COINS_COUNT = 15;
      DDCoinGroup.POSITIONS = [ new cc.Vec2(520, -350), new cc.Vec2(130, -350), new cc.Vec2(50, -1100) ];
      __decorate([ property(cc.Prefab) ], DDCoinGroup.prototype, "coinPrefab", void 0);
      DDCoinGroup = DDCoinGroup_1 = __decorate([ ccclass ], DDCoinGroup);
      return DDCoinGroup;
    }(cc.Component);
    exports.default = DDCoinGroup;
    cc._RF.pop();
  }, {
    "./DDCoin": "DDCoin"
  } ],
  DDCoin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81a4b9gRh5D5b0F7Zzt+5+L", "DDCoin");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ccclass = cc._decorator.ccclass;
    var DDCoin = function(_super) {
      __extends(DDCoin, _super);
      function DDCoin() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DDCoin_1 = DDCoin;
      DDCoin.prototype.start = function() {
        var animation = this.node.getComponent(cc.Animation);
        animation.on(cc.Animation.EventType.FINISHED, function() {
          return animation.play();
        });
        animation.play();
      };
      DDCoin.prototype.initialize = function(target, start) {
        this.node.position = start;
        this.node.rotation = Math.random() * Math.PI * 2;
        this.node.scale = .6 * Math.random() + .4;
        var jump = DDCoin_1.JUMP + Math.random() * DDCoin_1.JUMP_DISPERSION;
        var offset = new cc.Vec2(Math.cos(this.node.rotation) * jump, Math.sin(this.node.rotation) * jump);
        var time = .35 + .1 * Math.random();
        this.node.runAction(cc.rotateBy(time, this.node.rotation + 2 * Math.PI).repeatForever());
        this.node.runAction(cc.sequence(cc.moveTo(time, start.add(offset)), cc.delayTime(.1), cc.moveTo(.6 + .15 * Math.random(), target), cc.fadeOut(.2), cc.removeSelf()));
      };
      var DDCoin_1;
      DDCoin.JUMP_DISPERSION = 25;
      DDCoin.JUMP = 40;
      DDCoin = DDCoin_1 = __decorate([ ccclass ], DDCoin);
      return DDCoin;
    }(cc.Component);
    exports.default = DDCoin;
    cc._RF.pop();
  }, {} ],
  DDGameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac3cbhqrXJEbqTBCdJfo7wc", "DDGameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCore_1 = require("../../../../common/core/GameCore");
    var DDCore = function(_super) {
      __extends(DDCore, _super);
      function DDCore() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DDCore.prototype.init = function(logicAdapter, viewAdapter) {
        _super.prototype.init.call(this, logicAdapter, viewAdapter);
      };
      return DDCore;
    }(GameCore_1.GameCoreBase);
    exports.DDCore = DDCore;
    cc._RF.pop();
  }, {
    "../../../../common/core/GameCore": "GameCore"
  } ],
  DDGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc5f2xtcUBGGJ0YJAwC+pTf", "DDGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CombinationResult_1 = require("../../../common/core/cards/combinations/CombinationResult");
    var WindowsManager_1 = require("../../../common/core/windows/WindowsManager");
    var WindowsTypes_1 = require("../../../common/core/windows/WindowsTypes");
    var TextHelper_1 = require("../../../common/helpers/TextHelper");
    var SoundManager_1 = require("../../../common/managers/sound/SoundManager");
    var ServerController_1 = require("../../../common/server/ServerController");
    var store_1 = require("../../../common/store");
    var sceneActions_1 = require("../../../common/store/sceneActions");
    var DouDizhuRules_1 = require("./core/combinations/DouDizhuRules");
    var DDAction_1 = require("./core/DDAction");
    var DDGameCore_1 = require("./core/DDGameCore");
    var DDServerCard_1 = require("./core/DDServerCard");
    var DDServerLogicAdapter_1 = require("./core/DDServerLogicAdapter");
    var DDViewAdapterBase_1 = require("./core/DDViewAdapterBase");
    var DDPlayerData_1 = require("./data/DDPlayerData");
    var DDSounds_1 = require("./DDSounds");
    var DDCoinGroup_1 = require("./ui/coins/DDCoinGroup");
    var DDPlayerView_1 = require("./ui/DDPlayerView");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDGame = function(_super) {
      __extends(DDGame, _super);
      function DDGame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cardInstantiate = null;
        _this.coinGroupInstance = null;
        _this.cardText = null;
        _this.makeBetNode = null;
        _this.players = [];
        _this.lordCards = null;
        _this.defaultSuit = null;
        _this.animNode = null;
        _this.currentXRate = null;
        _this.turnNode = null;
        _this.noturnNode = null;
        _this.waitingPlayersNode = null;
        _this.gameResultsNode = null;
        _this.wrongCombinationNode = null;
        _this.cardsPlace = null;
        _this.cardsCounterNode = null;
        _this.enableBotButton = null;
        _this.disableBotButton = null;
        _this.topMenu = null;
        _this.windowHolder = null;
        _this.rulesPrefab = null;
        _this.settingsPrefab = null;
        _this.promptPrefab = null;
        _this.cards = [];
        _this.cardsPositionX = [];
        _this.extendedCardsPositionX = [];
        _this.degreeForCardsRotation = [];
        _this._rules = new DouDizhuRules_1.DouDizhuRules();
        _this._playerByPlace = {};
        _this._playerViewByPlace = {};
        _this._landLord = false;
        _this._landLordPlace = -1;
        _this._firstBomborRocket = true;
        _this._possibleMoves = [];
        _this._cardTouchStarted = false;
        _this._selectedCards = [];
        _this._cardsOnTable = [];
        _this._waitingPlayers = false;
        _this._initedPlayers = 0;
        _this._globalXRate = 0;
        _this._isGameStarted = false;
        _this._firstCardSelected = null;
        _this._isAirPlaneFirstTime = true;
        _this._firstDealingTime = true;
        _this.topMenuInAction = false;
        _this._thisCardsToAdd = [];
        _this._cardsToAddOnDiactivated = [];
        _this._windowIsActivated = true;
        _this._spineAnimationNodes = [];
        _this.onActivated = function() {
          _this._windowIsActivated = true;
          _this._spineAnimationNodes.map(function(node) {
            return node.active = false;
          });
          _this._spineAnimationNodes = [];
          for (var i = 0; i < 3; i++) _this._playerViewByPlace[i] && _this._playerViewByPlace[i].redraw(DDGame_1.gameCore.currentTime);
          _this.node.getChildByName("no_move").active && (_this.node.getChildByName("no_move").active = false);
          if (_this._needEnableNoTurnView) {
            _this._needEnableNoTurnView = false;
            _this._enableNoTurnView();
          }
          console.log(_this._cardsToAddOnDiactivated);
          if (_this._cardsToAddOnDiactivated.length > 0) {
            _this._cardsHolderNode.removeAllChildren();
            for (var i = 0; i < _this._cardsToAddOnDiactivated.length; i++) _this._addCard(_this._cardsToAddOnDiactivated[i].rate, _this._cardsToAddOnDiactivated[i].suit, i, _this._cardsToAddOnDiactivated.length);
            _this._reorderFunction();
            _this._orderCards();
            _this._addListenersToCards();
          }
        };
        _this.onDeactivated = function() {
          _this.node.stopAllActions();
          _this._windowIsActivated = false;
          for (var i = 0; i < _this.cards.length; i++) _this.cards[i].node.stopAllActions();
          if (_this._thisCardsToAdd.length > 0) {
            _this._cardsToAddOnDiactivated = Array.from(_this._thisCardsToAdd);
            _this._thisCardsToAdd = [];
            _this._cardsHolderNode.removeAllChildren();
            console.log(_this._cardsToAddOnDiactivated);
            for (var i = 0; i < _this._cardsToAddOnDiactivated.length; i++) _this._addCard(_this._cardsToAddOnDiactivated[i].rate, _this._cardsToAddOnDiactivated[i].suit, i, _this._cardsToAddOnDiactivated.length);
            _this._cardsToAddOnDiactivated = [];
            _this._reorderFunction();
            _this._orderCards();
            _this._addListenersToCards();
          }
        };
        return _this;
      }
      DDGame_1 = DDGame;
      DDGame.prototype.onLoad = function() {
        DDGame_1.gameCore.init(new DDServerLogicAdapter_1.DDServerLogicAdapter(ServerController_1.default.instance.connector, store_1.default.getState().sceneState.current.params.tableId || 1), this);
        this._initFreePlaces();
        this._createPlaceForCards(72, 55, 10, this.cardsPositionX);
        this._addListenersToSpineObj(this.animNode);
        this.enableBotButton.interactable = false;
        this.waitingPlayersNode.active = true;
        this.topMenu.getChildByName("menu_panel").scaleX = 0;
        this.turnNode.getChildByName("apply_bet").getComponent(cc.Button).interactable = false;
        SoundManager_1.SoundManager.instance.setup(DDSounds_1.Sounds.Config);
        SoundManager_1.SoundManager.instance.backgroundSound(DDSounds_1.Sounds.GAME_BG);
        this._cardsHolderNode = cc.find("Canvas/content/Game/card_view");
        this._addListenersToCardsParent();
      };
      DDGame.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              cc.game.on(cc.game.EVENT_SHOW, this.onActivated, this);
              cc.game.on(cc.game.EVENT_HIDE, this.onDeactivated, this);
              this._windowsManager = new WindowsManager_1.default();
              this._windowsManager.init({
                parent: this.windowHolder
              }).initAppearanceConfig(__assign({}, this._windowsManager.fillWindowParams("").appearanceConfig, {
                fade: true,
                directionShow: WindowsTypes_1.WindowShowDirection.DOWN,
                directionHide: WindowsTypes_1.WindowShowDirection.UP,
                scale: false
              }));
              return [ 4, DDGame_1.gameCore.start() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      DDGame.prototype.update = function(dt) {
        this._initedPlayers < 3 && !this._waitingPlayers && (this._waitingPlayers = true);
        if (3 === this._initedPlayers && this.waitingPlayersNode.active) {
          this._waitingPlayers = false;
          this.waitingPlayersNode.active = false;
        }
      };
      DDGame.prototype.onDestroy = function() {
        cc.game.off(cc.game.EVENT_SHOW, this.onActivated, this);
        cc.game.off(cc.game.EVENT_HIDE, this.onDeactivated, this);
        this._windowsManager && this._windowsManager.dispose();
        DDGame_1.gameCore.destroy();
      };
      DDGame.prototype.prepare = function() {
        return __awaiter(this, void 0, void 0, function() {
          var player, playerView;
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerInputActionHandler(DDAction_1.DDActionType.TABLE_CONFIG_UPDATE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.currentXRate.node.parent.getChildByName("min_bet_label").getComponent(cc.Label).string = "" + action.data.ante;
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.REGISTER_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerData, i;
                  var _this = this;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      playerData = {
                        id: action.data.playerInfo.id,
                        balance: action.data.playerInfo.balance,
                        isGoldMember: action.data.playerInfo.isGoldMember,
                        name: action.data.playerInfo.name,
                        avatarId: action.data.playerInfo.avatarId,
                        gender: action.data.playerInfo.gender
                      };
                      playerData.id === DDGame_1.gameCore.getCurrentPlayerInfo().id && this._initViewStatredFromMain(action.data.placeId);
                      player = this._playerByPlace[action.data.placeId];
                      player.playerInfo = playerData;
                      this._playerViewByPlace[player.placeId].initPlayer(player);
                      null == action.data.playerInfo.avatarId ? this._playerViewByPlace[player.placeId].avatar = Math.floor(5 * Math.random()).toString() : this._playerViewByPlace[player.placeId].avatar = action.data.playerInfo.avatarId;
                      player.placeId === this._ownPlace && (this._playerViewByPlace[this._ownPlace].playerAvatar.node.active = false);
                      this._ownPlace + 1 <= 2 ? this._leftOppId = this._ownPlace + 1 : this._leftOppId = 0;
                      this._initedPlayers++;
                      for (i = 0; i < this.lordCards.children.length; i++) this.lordCards.children[i].getComponent("cc.Sprite").spriteFrame = this.defaultSuit;
                      return [ 4, new Promise(function(resolve) {
                        _this.logger.log("Pause after action:", new Date(), action);
                        setTimeout(resolve, 100);
                      }) ];

                     case 1:
                      _a.sent();
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.PREPARE_FOR_ROUND, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.DEAL_CARDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var i;
                  return __generator(this, function(_a) {
                    this._firstDealingTime ? this._firstDealingTime = false : this._cleanCardsHelper();
                    this._cleanPrevCards();
                    for (i = 0; i < 3; i++) this._playerViewByPlace[i].hideAuctionActions();
                    this._windowIsActivated ? this._thisCardsToAdd = action.data.cards : this._cardsToAddOnDiactivated = action.data.cards;
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.WAITING_LORD_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var chunk, actionArray, i, j, chunkArr, indxArr, timeForMove;
                  var _this = this;
                  return __generator(this, function(_a) {
                    if (this._thisCardsToAdd.length > 0) {
                      chunk = 5;
                      actionArray = [];
                      for (i = 0, j = this._thisCardsToAdd.length; i < j; i += chunk) {
                        chunkArr = this._thisCardsToAdd.slice(i, i + chunk);
                        indxArr = Array.from(Array(17).keys()).slice(i, i + chunk);
                        if (0 === i) this._addPortionOfCards(chunkArr, indxArr, this._thisCardsToAdd.length); else {
                          actionArray.push(cc.delayTime(.1));
                          actionArray.push(cc.callFunc(function(target, data) {
                            _this._addPortionOfCards(data.chunk, data.index, data.length);
                          }, this, {
                            chunk: chunkArr,
                            index: indxArr,
                            length: this._thisCardsToAdd.length
                          }));
                        }
                      }
                      actionArray.push(cc.delayTime(.1));
                      actionArray.push(cc.callFunc(function(target, data) {
                        _this._reorderCards();
                        _this._checkNrunBombAnim();
                        _this._updateCardsCounter(_this.cards);
                        _this._thisCardsToAdd = [];
                      }));
                      this.node.runAction(cc.sequence(actionArray));
                    }
                    this._stopTimers();
                    timeForMove = Math.floor(action.data.processEnd - DDGame_1.gameCore.currentTime);
                    this.lordCards.active || (this.lordCards.active = true);
                    this._playerViewByPlace[action.data.activePlaceId].processEnd = action.data.processEnd;
                    if (action.data.activePlaceId === this._ownPlace) {
                      this.makeBetNode.active = true;
                      switch (action.data.betsMultiplier) {
                       case 1:
                        this.makeBetNode.getChildByName("x_1").getComponent("cc.Button").interactable = false;
                        break;

                       case 2:
                        this.makeBetNode.getChildByName("x_1").getComponent("cc.Button").interactable = false;
                        this.makeBetNode.getChildByName("x_2").getComponent("cc.Button").interactable = false;
                      }
                      this.makeBetNode.getChildByName("clock").getChildByName("timer").getComponent("cc.Label").string = timeForMove;
                      this._playerViewByPlace[action.data.activePlaceId].showMyTime(timeForMove, 0);
                    } else {
                      this.makeBetNode.active = false;
                      this._playerViewByPlace[action.data.activePlaceId].showFoeTimer(timeForMove);
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.MAKE_LORD_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    if (this._globalXRate !== action.data.betsMultiplier && this._globalXRate < action.data.betsMultiplier) {
                      this._playerViewByPlace[action.data.placeId].showAuctionBetAction(action.data.betsMultiplier);
                      this._globalXRate = action.data.betsMultiplier;
                      this._runXrateAnim(action.data.betsMultiplier);
                      switch (action.data.betsMultiplier) {
                       case 1:
                        0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_ONE_POINT) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_ONE_POINT);
                        break;

                       case 2:
                        0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TWO_POINT) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TWO_POINT);
                        break;

                       case 3:
                        0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_THREE_POINT) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_THREE_POINT);
                      }
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.FOLD_LORD_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._playerViewByPlace[action.data.placeId].showAuctionSkipAction();
                    this._playerViewByPlace[action.data.placeId].stopTimer();
                    0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_NO_POINT) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_NO_POINT);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.DEAL_LORD_CARDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var i, i, i;
                  return __generator(this, function(_a) {
                    this._isGameStarted = true;
                    this._stopTimers();
                    this.makeBetNode.active = false;
                    this.enableBotButton.interactable = true;
                    SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.SHOW_CARDS);
                    for (i = 0; i < 3; i++) {
                      this._playerViewByPlace[i].setCardsCount(i === action.data.lordPlaceId ? 20 : 17);
                      this._playerViewByPlace[i].hideAuctionActions();
                    }
                    if (action.data.lordPlaceId === this._ownPlace) {
                      this._landLord = true;
                      this._landLordPlace = this._ownPlace;
                      for (i = 19; i > 16; i--) this._addCard(action.data.cards[19 - i].rate, action.data.cards[19 - i].suit, i, 20);
                      this._updateCardsCounter(action.data.cards);
                      this._reorderCards();
                      this._setSpineForPlayers(action.data.lordPlaceId);
                    } else {
                      this._landLordPlace = action.data.lordPlaceId;
                      this._landLord = false;
                      this._setSpineForPlayers(action.data.lordPlaceId);
                    }
                    for (i = 0; i < this.lordCards.children.length; i++) "none" === action.data.cards[i].suit ? this.lordCards.children[i].getComponent("cc.Sprite").spriteFrame = this.cardText.getSpriteFrame("" + action.data.cards[i].rate) : this.lordCards.children[i].getComponent("cc.Sprite").spriteFrame = this.cardText.getSpriteFrame(action.data.cards[i].rate + "_" + action.data.cards[i].suit);
                    this._addListenersToCards();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.WAITING_MOVE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var timeForMove, i;
                  return __generator(this, function(_a) {
                    this.noturnNode.active && !this.disableBotButton.node.active && this._resumeListenersFromCards();
                    this._playerViewByPlace[action.data.activePlaceId].processEnd = action.data.processEnd;
                    timeForMove = Math.floor(action.data.processEnd - DDGame_1.gameCore.currentTime);
                    this._disableTurnNodes();
                    action.data.moveCards && (this._possibleMoves = action.data.moveCards);
                    this._setIdleAnimForPlayers();
                    this._playerViewByPlace[action.data.activePlaceId].setSpineAnimation("sikao");
                    if (action.data.isFirstMove) {
                      this._cardsOnTable = [];
                      for (i = 0; i < 3; i++) this._playerViewByPlace[i].hideRoundPlacedCards();
                    } else this._playerViewByPlace[action.data.activePlaceId].hideRoundPlacedCards();
                    if (action.data.activePlaceId === this._ownPlace) {
                      this.disableBotButton.node.active || this._resumeListenersFromCards();
                      action.data.moveCards.length > 0 && (this._possibleMoves = action.data.moveCards);
                      if (action.data.moveCards.length > 0) {
                        this.disableBotButton.node.active || (this.turnNode.active = true);
                        this.turnNode.getChildByName("clock").getChildByName("timer").getComponent("cc.Label").string = timeForMove;
                        this._playerViewByPlace[action.data.activePlaceId].showMyTime(timeForMove, 1);
                      } else {
                        this.disableBotButton.node.active || (this._windowIsActivated ? this._enableNoTurnView() : this._needEnableNoTurnView = true);
                        this._removeListenersFromCards();
                        this.turnNode.getChildByName("clock").getChildByName("timer").getComponent("cc.Label").string = 7;
                        this._playerViewByPlace[action.data.activePlaceId].showMyTime(7, 2);
                      }
                      action.data.isFirstMove ? this.turnNode.getChildByName("skip").getComponent("cc.Button").interactable = false : this.turnNode.getChildByName("skip").getComponent("cc.Button").interactable = true;
                    } else this._playerViewByPlace[action.data.activePlaceId].showFoeTimer(timeForMove);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.MOVE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var cardsLeft;
                  return __generator(this, function(_a) {
                    this._possibleMoves = [];
                    this._cardsOnTable = action.data.cards;
                    this._stopTimers();
                    this._playerViewByPlace[action.data.placeId].hideRoundPlacedCards();
                    this._showCards(this._quantitiveCardSortingMethod(action.data.cards), action.data.placeId);
                    SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.PLAY_CARD);
                    if (action.data.placeId !== this._ownPlace) {
                      cardsLeft = this._playerViewByPlace[action.data.placeId].getCardsCount() - action.data.cards.length;
                      this._playerViewByPlace[action.data.placeId].setCardsCount(cardsLeft);
                      if (cardsLeft < 3) {
                        this._playerViewByPlace[action.data.placeId].highlightCardsCount();
                        SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.SPECIAL_ALERT);
                      }
                      2 === cardsLeft && (0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TWO_CARD_LEFT_2) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TWO_CARD_LEFT_2));
                      1 === cardsLeft && (0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_ONE_CARD_LEFT_2) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_ONE_CARD_LEFT_2));
                    }
                    action.data.combinationName && this._showComboAnim(action.data.combinationName, action.data.placeId);
                    this._runSoundsForCombination(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.MOVE_END, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.FOLD, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._stopTimers();
                    this._playerViewByPlace[action.data.placeId].showRoundSkipAction();
                    action.data.placeId !== this._ownPlace || this.disableBotButton.node.active || this._resumeListenersFromCards();
                    0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_NO) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_NO);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.ROUND_COMPLETE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var i, isLordWinner, rewards, i, winnerPlaceIndex, j, loserPlaceIndex, coinGroup, i, i, i, i, i, curPlayer;
                  var _this = this;
                  return __generator(this, function(_a) {
                    this._isGameStarted = false;
                    this.cardsCounterNode.active = false;
                    this.enableBotButton.interactable = false;
                    this.disableBotButton.node.active = false;
                    SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.RUN_GOLD);
                    for (i = 0; i < 3; i++) this._playerViewByPlace[i].hideRoundActions();
                    isLordWinner = false;
                    rewards = action.data.rewards;
                    for (i = 0; i < rewards.length; i++) if (rewards[i].isWinner) {
                      winnerPlaceIndex = this.players.indexOf(this._playerViewByPlace[i]);
                      this._landLordPlace === i && (isLordWinner = true);
                      for (j = 0; j < rewards.length; j++) if (i !== j && !rewards[j].isWinner) {
                        loserPlaceIndex = this.players.indexOf(this._playerViewByPlace[j]);
                        coinGroup = cc.instantiate(this.coinGroupInstance);
                        coinGroup.getComponent(DDCoinGroup_1.default).initialize(winnerPlaceIndex, loserPlaceIndex);
                        coinGroup.parent = this.node;
                      }
                    }
                    if (action.data.isSpringOccurred) {
                      this._showSpecifiedAnimation(this.animNode, "game_over", "Animations");
                      this._increaseBetMultiplayer();
                    }
                    if (this._landLord) if (isLordWinner) for (i = 0; i < 3; i++) if (i === this._ownPlace) {
                      this._playerViewByPlace[i].setSpineAnimation("shengli");
                      SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.VICTORY);
                      this.gameResultsNode.getChildByName("labels").getChildByName("win_lose_header").getChildByName("win").active = true;
                      this.gameResultsNode.getChildByName("labels").getChildByName("lord_mark").getChildByName((i + 1).toString()).active = true;
                    } else this._playerViewByPlace[i].setSpineAnimation("shibai"); else for (i = 0; i < 3; i++) if (i === this._ownPlace) {
                      this._playerViewByPlace[i].setSpineAnimation("shibai");
                      SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FAILURE);
                      this.gameResultsNode.getChildByName("labels").getChildByName("win_lose_header").getChildByName("lose").active = true;
                      this.gameResultsNode.getChildByName("labels").getChildByName("lord_mark").getChildByName((i + 1).toString()).active = true;
                    } else this._playerViewByPlace[i].setSpineAnimation("shengli"); else if (isLordWinner) for (i = 0; i < 3; i++) if (this._landLordPlace === i) {
                      this._playerViewByPlace[i].setSpineAnimation("shengli");
                      this.gameResultsNode.getChildByName("labels").getChildByName("lord_mark").getChildByName((i + 1).toString()).active = true;
                    } else {
                      SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FAILURE);
                      this._playerViewByPlace[i].setSpineAnimation("shibai");
                      this.gameResultsNode.getChildByName("labels").getChildByName("win_lose_header").getChildByName("lose").active = true;
                    } else for (i = 0; i < 3; i++) if (this._landLordPlace === i) {
                      this._playerViewByPlace[i].setSpineAnimation("shibai");
                      this.gameResultsNode.getChildByName("labels").getChildByName("lord_mark").getChildByName((i + 1).toString()).active = true;
                    } else {
                      SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.VICTORY);
                      this._playerViewByPlace[i].setSpineAnimation("shengli");
                      this.gameResultsNode.getChildByName("labels").getChildByName("win_lose_header").getChildByName("win").active = true;
                    }
                    for (i = 0; i < action.data.rewards.length; i++) {
                      i === this._ownPlace || i === this._leftOppId ? this._showCards(action.data.rewards[i].cards.sort(this._declineCardSortingMethod), i) : this._showCards(action.data.rewards[i].cards.sort(this._inclineCardSortingMethod), i);
                      this._setResults(action.data.rewards[i].coins, i);
                      this._playerByPlace[i].playerInfo.balance = action.data.rewards[i].player.balance;
                      this._playerViewByPlace[i].updatePlayer(this._playerByPlace[i]);
                      curPlayer = this.gameResultsNode.getChildByName("results").getChildByName("player_" + (i + 1));
                      curPlayer.getChildByName("name").getComponent("cc.Label").string = TextHelper_1.default.textShorterer(action.data.rewards[i].player.name, 5);
                      curPlayer.getChildByName("result").getComponent("cc.Label").string = TextHelper_1.default.coinsShortcutOptional(action.data.rewards[i].coins, 1);
                      curPlayer.getChildByName("min_bet").getComponent("cc.Label").string = action.data.ante;
                      curPlayer.getChildByName("multiplayer").getComponent("cc.Label").string = action.data.rewards[i].multipliersCount;
                      0 === action.data.rewards[i].cards.length && (this.gameResultsNode.getChildByName("labels").getChildByName("who_ended").getChildByName((i + 1).toString()).active = true);
                    }
                    this.gameResultsNode.runAction(cc.sequence(cc.delayTime(3), cc.callFunc(function() {
                      _this.gameResultsNode.getComponent("cc.Animation").play("results-enter");
                    })));
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.ROUND_DISMISSED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.backButtonHandler();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(DDAction_1.DDActionType.DROP_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var player;
                  return __generator(this, function(_a) {
                    player = this._playerByPlace[action.data.placeId];
                    this._playerViewByPlace[player.placeId].resetPlayer(player);
                    this._playerViewByPlace[player.placeId].avatar = null;
                    this._initedPlayers--;
                    return [ 2 ];
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      DDGame.prototype._createPlaceForCards = function(start, step, quant, arrayToFill) {
        for (var i = 0; i < quant; i++) arrayToFill.push(start + step * i);
      };
      DDGame.prototype._addListenersToSpineObj = function(node) {
        var _this = this;
        var _loop_1 = function(i) {
          node.children[i].getComponent("sp.Skeleton") && node.children[i].getComponent("sp.Skeleton").setCompleteListener(function(trackEntry, loopCount) {
            var index = _this._spineAnimationNodes.indexOf(node.children[i]);
            -1 !== index && _this._spineAnimationNodes.splice(index, 1);
            node.children[i].active = false;
            -1 !== node.children[i].name.indexOf("beishu") && (_this.currentXRate.string = "" + _this._globalXRate);
          });
          node.children[i].children.length > 0 && this_1._addListenersToSpineObj(node.children[i]);
        };
        var this_1 = this;
        for (var i = 0; i < node.children.length; i++) _loop_1(i);
      };
      DDGame.prototype._initFreePlaces = function() {
        for (var i = 0; i < this.players.length + 1; i++) {
          var playerData = new DDPlayerData_1.DDGamePlayerData();
          playerData.placeId = i;
          this._playerByPlace[i] = playerData;
        }
      };
      DDGame.prototype._initViewStatredFromMain = function(placeId) {
        this._ownPlace = placeId;
        for (var i = 1; i < 4; i++) this._playerViewByPlace[(placeId + i) % 3] = this.players[i - 1];
      };
      DDGame.prototype._cleanPrevCards = function() {
        this.cards = [];
        for (var i = 0; i < this._cardsHolderNode.children.length; i++) {
          this._cardsHolderNode.children[i].stopAllActions();
          this._cardsHolderNode.children[i].parent = null;
          i--;
        }
        this._cardsHolderNode.children.length = 0;
      };
      DDGame.prototype._addCard = function(rate, suit, index, arrLength) {
        var card = cc.instantiate(this.cardInstantiate);
        card.parent = this._cardsHolderNode;
        card.scale = .8;
        if (index <= 9) {
          card.x = this.cardsPositionX[index];
          card.y = 0;
        } else {
          var positionFixer = (20 - arrLength) / 2;
          card.x = this.cardsPositionX[index - 10] + 55 * positionFixer;
          card.y = -85;
        }
        index >= 17 && (card.x = 320);
        card.getComponent("cc.Sprite").spriteFrame = "none" === suit ? this.cardText.getSpriteFrame("" + rate) : this.cardText.getSpriteFrame(rate + "_" + suit);
        this.cards[index] = card.getComponent("DDCardView");
        this.cards[index].initialize(rate, suit);
      };
      DDGame.prototype._addPortionOfCards = function(cardsArr, indexArr, arrLength) {
        for (var i = 0; i < cardsArr.length; i++) {
          this._addCard(cardsArr[i].rate, cardsArr[i].suit, indexArr[i], arrLength);
          this.cards[indexArr[i]].node.y += 30;
          this.cards[indexArr[i]].node.runAction(cc.moveBy(.1, 0, -30));
        }
      };
      DDGame.prototype._reorderFunction = function() {
        this.cards = this.cards.sort(this._declineCardSortingMethod);
      };
      DDGame.prototype._reorderCards = function() {
        var _this = this;
        var middleCard = 4;
        for (var i = 0; i < this.cards.length; i++) i !== middleCard && (i === this.cards.length - 1 ? this.cards[i].node.runAction(cc.sequence(cc.delayTime(.2), cc.moveTo(.2, this.cards[middleCard].node.x, 0), cc.callFunc(function() {
          _this._reorderFunction();
          _this._orderCards();
        }, this))) : this.cards[i].node.runAction(cc.sequence(cc.delayTime(.2), cc.moveTo(.2, this.cards[middleCard].node.x, 0))));
      };
      DDGame.prototype._enableRibbon = function(node) {
        node ? node.getChildByName("ribbon").active = true : this.cards.length > 0 && (this.cards[this.cards.length - 1].node.getChildByName("ribbon").active = true);
      };
      DDGame.prototype._stopTimers = function() {
        for (var i = 0; i < 3; i++) this._playerViewByPlace[i].stopTimer();
      };
      DDGame.prototype._checkNrunBombAnim = function() {
        var cardsObj = this.cards.reduce(this._cardsRateReducerFunction, {});
        var bombQuant = 0;
        for (var key in cardsObj) 4 === cardsObj[key] && bombQuant++;
        bombQuant > 0 && this._showSpecifiedAnimation(this.animNode.getChildByName("bomb_anim"), bombQuant + "zha");
      };
      DDGame.prototype._runXrateAnim = function(rate) {
        this._showSpecifiedAnimation(this.animNode.getChildByName("x_rate"), rate + "beishu");
      };
      DDGame.prototype._setSpineForPlayers = function(lordId) {
        for (var i = 0; i < 3; i++) this._playerViewByPlace[i].enableSpine(this._playerByPlace[i].playerInfo.gender, i === lordId);
      };
      DDGame.prototype._setIdleAnimForPlayers = function() {
        for (var i = 0; i < 3; i++) this._playerViewByPlace[i].setSpineAnimation("zhengchang");
      };
      DDGame.prototype._orderCards = function() {
        var firstLineCounter = 0;
        var reducedCardObj = this.cards.reduce(this._cardsRateReducerFunction, {});
        var reducedArr = Object.keys(reducedCardObj).map(function(i) {
          return reducedCardObj[i];
        }).reverse();
        for (var i = 0; i < reducedArr.length; i++) firstLineCounter <= 9 && (firstLineCounter += reducedArr[i]);
        this.extendedCardsPositionX = [];
        this._createPlaceForCards(72, 495 / (firstLineCounter - 1), firstLineCounter, this.extendedCardsPositionX);
        this.degreeForCardsRotation = [];
        this._createPlaceForCards(-15, 30 / (firstLineCounter - 1), firstLineCounter, this.degreeForCardsRotation);
        var sceneWidth = 640;
        var borderAngle = Math.min(1.4 * (firstLineCounter - 1), 14);
        var bendRadius = 900;
        var tNode;
        var pointAlignTo = new cc.Vec2(sceneWidth / 2, -bendRadius);
        var align1 = new cc.Vec2(0, 0);
        var align2 = new cc.Vec2(0, 1);
        var cr = Math.PI / 180;
        var deltaA = -cr * borderAngle * 2 / (firstLineCounter - 1);
        var rotatePositionVector = new cc.Vec2(0, 0);
        var rotateVector = new cc.Vec2(0, -pointAlignTo.y);
        rotateVector.rotateSelf(cr * borderAngle).add(pointAlignTo, rotatePositionVector);
        for (var i = 0; i < this.cards.length; i++) {
          this.cards[i].isSelected = false;
          this.cards[i].node.stopAllActions();
          this.cards[i].node.zIndex = i;
          if (i < firstLineCounter) {
            tNode = this.cards[i].node;
            tNode.setPosition(rotatePositionVector);
            rotateVector.rotateSelf(deltaA).add(pointAlignTo, rotatePositionVector);
            tNode.getPosition().sub(pointAlignTo, align1).normalizeSelf();
            tNode.rotation = Math.abs(align1.x) / align1.x / cr * align2.angle(align1);
            this.cards[i].baseY = tNode.y + 25;
          } else {
            var positionFixer = (10 - (this.cards.length - firstLineCounter)) / 2;
            this.cards[i].node.x = this.cardsPositionX[i - firstLineCounter] + 55 * positionFixer;
            this.cards[i].node.rotation = 0;
            this.cards[i].baseY = -85;
          }
        }
        this._landLord && this._enableRibbon();
      };
      DDGame.prototype._addListenersToCards = function() {
        for (var i = 0; i < this.cards.length; i++) this.cards[i].node.on("touchstart", this._touchStart.bind(this));
      };
      DDGame.prototype._addListenersToCardsParent = function() {
        this._cardsHolderNode.on("touchmove", this._touchMove.bind(this));
        this._cardsHolderNode.on("touchend", this._touchEnd.bind(this));
        this._cardsHolderNode.on("touchcancel", this._touchCancel.bind(this));
      };
      DDGame.prototype._touchStart = function(event) {
        if (event.target.getComponent("DDCardView").isSelectable && !this._cardTouchStarted) {
          SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.CARD_CLICK);
          this._selectedCards.push(event.target);
          event.target.getChildByName("fader").active = true;
          this._cardTouchStarted = true;
          this._firstCardSelected = event.target.getComponent("DDCardView");
        }
      };
      DDGame.prototype._touchMove = function(event) {
        if (this._cardTouchStarted) for (var i = 0; i < this.cards.length; i++) this.cards[i].isSelectable && this.cards[i].node.getBoundingBoxToWorld().contains(event.getLocation()) && this._recheckCardsBetween(i);
      };
      DDGame.prototype._touchEnd = function(event) {
        this._endTouch();
      };
      DDGame.prototype._touchCancel = function(event) {
        this._endTouch();
      };
      DDGame.prototype._endTouch = function() {
        if (this._cardTouchStarted) {
          this._cardTouchStarted = false;
          this._selDeselCards();
          this._firstCardSelected = null;
          this._checkIfAnyCardSelected();
        }
      };
      DDGame.prototype._checkIfAnyCardSelected = function() {
        var reducer = function(acc, card) {
          card.isSelected && acc++;
          return acc;
        };
        var cardsSelected = this.cards.reduce(reducer, 0);
        this.turnNode.getChildByName("apply_bet").getComponent(cc.Button).interactable = cardsSelected > 0;
      };
      DDGame.prototype._removeListenersFromCards = function() {
        for (var i = 0; i < this.cards.length; i++) {
          this.cards[i].isSelectable = false;
          this.cards[i].isFaded = true;
        }
      };
      DDGame.prototype._resumeListenersFromCards = function() {
        for (var i = 0; i < this.cards.length; i++) {
          this.cards[i].isSelectable = true;
          this.cards[i].isFaded = false;
        }
      };
      DDGame.prototype._selDeselCards = function() {
        if (this._selectedCards.length > 0) for (var i = 0; i < this._selectedCards.length; i++) {
          this._selectedCards[i].getChildByName("fader").active = false;
          this._selectedCards[i].getComponent("DDCardView").invertSelection();
          this._selectedCards.splice(i, 1);
          i--;
        }
      };
      DDGame.prototype._recheckCardsBetween = function(index) {
        var startIndx = -1;
        var endIndx = -1;
        var indxOfFirstCatd = this.cards.indexOf(this._firstCardSelected);
        if (indxOfFirstCatd > index) {
          startIndx = index;
          endIndx = indxOfFirstCatd;
        } else {
          startIndx = indxOfFirstCatd;
          endIndx = index;
        }
        for (var i = 0; i < this.cards.length; i++) if (i >= startIndx && i <= endIndx) {
          if (-1 === this._selectedCards.indexOf(this.cards[i].node)) {
            this._selectedCards.push(this.cards[i].node);
            this.cards[i].isFaded = true;
          }
        } else if (-1 !== this._selectedCards.indexOf(this.cards[i].node)) {
          this._selectedCards.splice(this._selectedCards.indexOf(this.cards[i].node), 1);
          this.cards[i].isFaded = false;
        }
      };
      DDGame.prototype._checkForDublicates = function(cards) {
        for (var i = 0; i < cards.length; i++) for (var j = 0; j < this.cards.length; j++) if (cards[i].rate === this.cards[j].rate && cards[i].suit === this.cards[j].suit) {
          this.cards[j].node.parent = null;
          this.cards[j].node.stopAllActions();
          this.cards.splice(j, 1);
          j--;
        }
        this._orderCards();
      };
      DDGame.prototype._runSoundsForCombination = function(action) {
        var femaleVoice = 0 === this._playerByPlace[action.data.placeId].playerInfo.gender ? "female" : "man";
        switch (action.data.combinationName) {
         case "BOMB":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_BOMB) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_BOMB);
          break;

         case "HIGH CARD":
          SoundManager_1.SoundManager.instance.interfaceSound(femaleVoice + "_single_" + action.data.cards[0].rate);
          break;

         case "PAIR":
          SoundManager_1.SoundManager.instance.interfaceSound(femaleVoice + "_pair_" + action.data.cards[0].rate);
          break;

         case "QUARD WITH CARDS":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_QUAD_TWO_CARDS) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_QUAD_TWO_CARDS);
          break;

         case "QUARD WITH PAIRS":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_QUAD_TWO_PAIRS) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_QUAD_TWO_PAIRS);
          break;

         case "ROCKET":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_ROCKET) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_ROCKET);
          break;

         case "SEQUENCE":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_SEQUENCE) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_SEQUENCE);
          break;

         case "SEQUENCE OF PAIRS":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_PAIRS_SEQUENCE) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_PAIRS_SEQUENCE);
          break;

         case "SEQUENCE OF TRIPLETS":
         case "SEQUENCE OF TRIPLETS WITH CARD":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TRIPLETS_SEQUENCE_OR_WITH_CARDS) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TRIPLETS_SEQUENCE_OR_WITH_CARDS);
          break;

         case "SEQUENCE OF TRIPLETS WITH PAIR":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TRIPLETS_SEQUENCE_OR_WITH_PAIRS) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TRIPLETS_SEQUENCE_OR_WITH_PAIRS);
          break;

         case "TRIPLET":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TRIPLET) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TRIPLET);
          break;

         case "TRIPLET WITH CARD":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TRIPLET_WITH_CARD) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TRIPLET_WITH_CARD);
          break;

         case "TRIPLET WITH PAIR":
          "female" === femaleVoice ? SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.FEMALE_TRIPLET_WITH_PAIR) : SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MALE_TRIPLET_WITH_PAIR);
        }
      };
      DDGame.prototype._showCards = function(cardsArr, placeId) {
        for (var i = 0; i < cardsArr.length; i++) {
          var cardXFixer = 0;
          var curCard = cc.instantiate(this.cardInstantiate);
          "none" === cardsArr[i].suit ? curCard.getComponent("cc.Sprite").spriteFrame = this.cardText.getSpriteFrame("" + cardsArr[i].rate) : curCard.getComponent("cc.Sprite").spriteFrame = this.cardText.getSpriteFrame(cardsArr[i].rate + "_" + cardsArr[i].suit);
          this._playerViewByPlace[placeId].pushRoundMoveActionCard(curCard);
          if (i < 9) {
            cardXFixer = i;
            curCard.y = 0;
          } else {
            cardXFixer = i - 9;
            curCard.y = -90;
          }
          if (placeId === this._ownPlace) {
            this._landLord && i === cardsArr.length - 1 && this._enableRibbon(curCard);
            var middleIndx = Math.floor(cardsArr.length / 2);
            curCard.scale = 5;
            curCard.x = 0;
            curCard.y = -200;
            curCard.runAction(cc.sequence(cc.spawn(cc.moveTo(.1, 0, 0), cc.scaleTo(.1, 1.3)), cc.moveTo(.2, 0 + 50 * i - 50 * middleIndx, 0)));
            this._checkForDublicates(cardsArr);
          } else {
            curCard.scale = 1.3;
            this._landLordPlace === placeId && i === cardsArr.length - 1 && this._enableRibbon(curCard);
            if (placeId === this._leftOppId) {
              curCard.x = 0;
              curCard.runAction(cc.sequence(cc.delayTime(.05 * i), cc.moveTo(.2, 0 - 50 * cardXFixer - 160, curCard.y)));
              curCard.zIndex = cardsArr.length - cardXFixer;
            } else {
              curCard.x = 0;
              curCard.runAction(cc.sequence(cc.delayTime(.05), cc.moveTo(.2, 0 + 50 * cardXFixer + 160, curCard.y)));
            }
          }
        }
        placeId !== this._ownPlace && this._updateCardsCounter(cardsArr);
      };
      DDGame.prototype._setResults = function(coins, placeId) {
        this._playerViewByPlace[placeId].showResult(coins);
      };
      DDGame.prototype._showSpecifiedAnimation = function(node, name, animation) {
        void 0 === animation && (animation = "animation");
        var animationNode = node.getChildByName(name);
        animationNode.active = true;
        animationNode.getComponent(sp.Skeleton).setAnimation(0, animation, false);
        this._spineAnimationNodes.push(animationNode);
      };
      DDGame.prototype._showComboAnim = function(anim, placeId) {
        var comboAnimNode = this.animNode.getChildByName("card_combo");
        switch (anim) {
         case "ROCKET":
          for (var i = 0; i < 3; i++) i !== placeId && this._playerViewByPlace[i].showRoundSkipAction();
          this._showSpecifiedAnimation(comboAnimNode, "rocket");
          this._increaseBetMultiplayer();
          if (this._firstBomborRocket) {
            this._firstBomborRocket = false;
            SoundManager_1.SoundManager.instance.backgroundSound(DDSounds_1.Sounds.AFTER_MULTIPLY);
          }
          SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.ROCKET);
          break;

         case "BOMB":
          this._showSpecifiedAnimation(comboAnimNode, "bomb");
          this._increaseBetMultiplayer();
          if (this._firstBomborRocket) {
            this._firstBomborRocket = false;
            SoundManager_1.SoundManager.instance.backgroundSound(DDSounds_1.Sounds.AFTER_MULTIPLY);
          }
          SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.BOMB);
          break;

         case "SEQUENCE OF TRIPLETS":
         case "SEQUENCE OF TRIPLETS WITH CARD":
         case "SEQUENCE OF TRIPLETS WITH PAIR":
          this._showSpecifiedAnimation(comboAnimNode, "plane");
          if (this._isAirPlaneFirstTime) {
            this._isAirPlaneFirstTime = false;
            SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.AIRPLANE_FIRST_TIME);
          } else SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.AIRPLANE);
          break;

         case "SEQUENCE OF PAIRS":
          this._showSpecifiedAnimation(comboAnimNode, "pairs_row");
          SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.PAIR_SEQUENCE);
          break;

         case "SEQUENCE":
          this._showSpecifiedAnimation(comboAnimNode, "five_row");
          SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.SHUNZI);
        }
      };
      DDGame.prototype._disableTurnNodes = function() {
        this._needEnableNoTurnView = false;
        this.turnNode.active = false;
        this.noturnNode.active = false;
      };
      DDGame.prototype._increaseBetMultiplayer = function() {
        SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.MULTIPLY);
        this._globalXRate *= 2;
        this._showSpecifiedAnimation(this.animNode.getChildByName("x_rate"), this._globalXRate + "beishu");
      };
      DDGame.prototype._cleanCardsHelper = function() {
        for (var i = 1; i < 16; i++) if (i < 14) {
          this.cardsCounterNode.getChildByName("" + i).getComponent("cc.Label").string = 4;
          this.cardsCounterNode.getChildByName("" + i).color = cc.color(247, 206, 4);
        } else this.cardsCounterNode.getChildByName("" + i).getComponent("cc.Label").string = 1;
      };
      DDGame.prototype._updateCardsCounter = function(cards) {
        for (var i = 0; i < cards.length; i++) {
          this.cardsCounterNode.getChildByName("" + cards[i].rate).getComponent("cc.Label").string = parseInt(this.cardsCounterNode.getChildByName("" + cards[i].rate).getComponent("cc.Label").string, 10) - 1;
          this.cardsCounterNode.getChildByName("" + cards[i].rate).color = cc.color(255, 255, 255);
        }
      };
      DDGame.prototype._enableNoTurnView = function() {
        var _this = this;
        this.noturnNode.active = true;
        this.node.getChildByName("no_move").active = true;
        this.cards.length <= 10 && this.node.getChildByName("no_move").y <= -940 && (this.node.getChildByName("no_move").y += 100);
        this.node.runAction(cc.sequence(cc.delayTime(3), cc.callFunc(function() {
          _this.node.getChildByName("no_move").active = false;
        })));
        this.turnNode.getChildByName("apply_bet").getComponent(cc.Button).interactable = false;
        for (var i = 0; i < this.cards.length; i++) this.cards[i].isSelected = false;
      };
      DDGame.prototype.showMenu = function(event) {
        var _this = this;
        var actionTarget = event.target.getChildByName("menu_panel");
        if (!this.topMenuInAction) {
          this.topMenuInAction = true;
          0 === actionTarget.scaleX ? actionTarget.runAction(cc.sequence(cc.scaleTo(.3, 1, 1).easing(cc.easeBackOut()), cc.callFunc(function() {
            _this.topMenuInAction = false;
          }))) : actionTarget.runAction(cc.sequence(cc.scaleTo(.3, 0, 1).easing(cc.easeBackIn()), cc.callFunc(function() {
            _this.topMenuInAction = false;
          })));
        }
      };
      DDGame.prototype.showRules = function(event) {
        this._windowsManager.show(this.rulesPrefab, null);
      };
      DDGame.prototype.showSettings = function(event) {
        this._windowsManager.show(this.settingsPrefab, null);
      };
      DDGame.prototype.showCardsHelper = function(event) {
        if (this.cardsCounterNode.parent.active) {
          this.topMenu.y += 85;
          this.cardsCounterNode.parent.active = false;
        } else {
          this.topMenu.y -= 85;
          this.cardsCounterNode.parent.active = true;
        }
      };
      DDGame.prototype.backButtonHandler = function() {
        var _this = this;
        this._isGameStarted ? this._windowsManager.show(this.promptPrefab, {
          bothClose: false,
          textForField: "Do you want to enable the bot?",
          acceptFunction: function() {
            _this.dispatchAction({
              type: DDAction_1.DDActionType.ACTIVATE_BOT,
              data: {}
            });
            cc.find("Canvas").getComponent("GameScene").onBackButtonPress();
          },
          denyFunction: function() {
            cc.find("Canvas").getComponent("GameScene").onBackButtonPress();
          }
        }) : cc.find("Canvas").getComponent("GameScene").onBackButtonPress();
      };
      DDGame.prototype.tableBetsButton = function() {
        store_1.default.dispatch(sceneActions_1.SceneActions.scenePop());
      };
      DDGame.prototype.makeLordBetButton = function(event) {
        this.dispatchAction({
          type: DDAction_1.DDActionType.MAKE_LORD_BET,
          data: {
            betsMultiplier: parseInt(event.target.name.split("_")[1], 10),
            placeId: this._ownPlace
          }
        });
        this.makeBetNode.active = false;
        this._playerViewByPlace[this._ownPlace].stopTimer();
      };
      DDGame.prototype.skipLordBetButton = function(event) {
        this.dispatchAction({
          type: DDAction_1.DDActionType.FOLD_LORD_BET,
          data: {
            placeId: this._ownPlace
          }
        });
        this.makeBetNode.active = false;
        this._playerViewByPlace[this._ownPlace].stopTimer();
      };
      DDGame.prototype.skipMove = function(event) {
        this.dispatchAction({
          type: DDAction_1.DDActionType.FOLD,
          data: {
            placeId: this._ownPlace
          }
        });
        if (this.noturnNode.active && !this.disableBotButton.node.active) {
          for (var i = 0; i < this.cards.length; i++) this.cards[i].isFaded = false;
          this._resumeListenersFromCards();
        }
        this.turnNode.active = false;
        this.noturnNode.active = false;
        this.node.getChildByName("no_move").active = false;
      };
      DDGame.prototype.showHint = function(event) {
        if (this._possibleMoves.length > 0) {
          for (var i = 0; i < this.cards.length; i++) {
            this.cards[i].isSelected = false;
            this.cards[i].isFaded = false;
          }
          for (var i = 0; i < this._possibleMoves.length; i++) for (var j = 0; j < this.cards.length; j++) this.cards[j].rate === this._possibleMoves[i].rate && this.cards[j].suit === this._possibleMoves[i].suit && (this.cards[j].isSelected = true);
          this.turnNode.getChildByName("apply_bet").getComponent(cc.Button).interactable = true;
        }
      };
      DDGame.prototype.applyMove = function(event) {
        var _this = this;
        var cards = [];
        for (var i = 0; i < this.cards.length; i++) this.cards[i].isSelected && cards.push({
          rate: this.cards[i].rate,
          suit: this.cards[i].suit
        });
        var combinationName = this._isMovePossible(cards, this._cardsOnTable);
        if (null != combinationName) {
          this._orderCards();
          this.dispatchAction({
            type: DDAction_1.DDActionType.MOVE,
            data: {
              combinationName: combinationName,
              cards: cards
            }
          });
          this.turnNode.active = false;
          event.target.getComponent(cc.Button).interactable = false;
        } else {
          this.wrongCombinationNode.active = true;
          this.wrongCombinationNode.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
            _this.wrongCombinationNode.active = false;
          })));
        }
      };
      DDGame.prototype.enableBot = function(event) {
        this.dispatchAction({
          type: DDAction_1.DDActionType.ACTIVATE_BOT,
          data: {}
        });
        this.enableBotButton.interactable = false;
        this.disableBotButton.node.active = true;
        this.turnNode.active && (this.turnNode.active = false);
        this.noturnNode.active && (this.noturnNode.active = false);
        this._removeListenersFromCards();
      };
      DDGame.prototype.diableBot = function(event) {
        this.dispatchAction({
          type: DDAction_1.DDActionType.DEACTIVATE_BOT,
          data: {}
        });
        this.enableBotButton.interactable = true;
        this.disableBotButton.node.active = false;
        this._resumeListenersFromCards();
      };
      DDGame.prototype.newGame = function(event) {};
      DDGame.prototype._isMovePossible = function(playerCards, tableCards) {
        if (0 === playerCards.length) return null;
        var result1 = this._rules.findCombination(playerCards.map(function(card) {
          return DDServerCard_1.cardToServerCard(card);
        }));
        if (null != result1 && 0 === tableCards.length) return result1.name;
        var result2 = this._rules.findCombination(tableCards.map(function(card) {
          return DDServerCard_1.cardToServerCard(card);
        }));
        if (null != result1 && null != result2 && result1.compare(result2) === CombinationResult_1.CombinationCompareResult.BIGGER) return result1.name;
        return null;
      };
      DDGame.prototype._quantitiveCardSortingMethod = function(cards) {
        var groups = [];
        for (var i = 0; i < cards.length; i++) {
          var card = cards[i];
          for (var j = 0; j < groups.length; j++) {
            var group = groups[j];
            if (group.rate === card.rate) {
              group.cards.push(card);
              card = null;
              break;
            }
          }
          null != card && groups.push({
            rate: card.rate,
            cards: [ card ]
          });
        }
        groups.sort(function(a, b) {
          if (b.cards.length !== a.cards.length) return b.cards.length - a.cards.length;
          return b.rate - a.rate;
        });
        return groups.reduce(function(a, b) {
          return a.concat(b.cards);
        }, []);
      };
      DDGame.prototype._declineCardSortingMethod = function(a, b) {
        if (a.rate < b.rate) return 1;
        if (a.rate > b.rate) return -1;
      };
      DDGame.prototype._inclineCardSortingMethod = function(a, b) {
        if (a.rate > b.rate) return 1;
        if (a.rate < b.rate) return -1;
      };
      DDGame.prototype._cardsRateReducerFunction = function(obj, quant) {
        obj[quant.rate] ? obj[quant.rate]++ : obj[quant.rate] = 1;
        return obj;
      };
      var DDGame_1;
      DDGame.gameCore = new DDGameCore_1.DDCore();
      __decorate([ property(cc.Prefab) ], DDGame.prototype, "cardInstantiate", void 0);
      __decorate([ property(cc.Prefab) ], DDGame.prototype, "coinGroupInstance", void 0);
      __decorate([ property(cc.SpriteAtlas) ], DDGame.prototype, "cardText", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "makeBetNode", void 0);
      __decorate([ property([ DDPlayerView_1.DDPlayerView ]) ], DDGame.prototype, "players", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "lordCards", void 0);
      __decorate([ property(cc.SpriteFrame) ], DDGame.prototype, "defaultSuit", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "animNode", void 0);
      __decorate([ property(cc.Label) ], DDGame.prototype, "currentXRate", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "turnNode", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "noturnNode", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "waitingPlayersNode", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "gameResultsNode", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "wrongCombinationNode", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "cardsPlace", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "cardsCounterNode", void 0);
      __decorate([ property(cc.Button) ], DDGame.prototype, "enableBotButton", void 0);
      __decorate([ property(cc.Button) ], DDGame.prototype, "disableBotButton", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "topMenu", void 0);
      __decorate([ property(cc.Node) ], DDGame.prototype, "windowHolder", void 0);
      __decorate([ property(cc.Prefab) ], DDGame.prototype, "rulesPrefab", void 0);
      __decorate([ property(cc.Prefab) ], DDGame.prototype, "settingsPrefab", void 0);
      __decorate([ property(cc.Prefab) ], DDGame.prototype, "promptPrefab", void 0);
      DDGame = DDGame_1 = __decorate([ ccclass ], DDGame);
      return DDGame;
    }(DDViewAdapterBase_1.DDViewAdapterBase);
    exports.default = DDGame;
    cc._RF.pop();
  }, {
    "../../../common/core/cards/combinations/CombinationResult": "CombinationResult",
    "../../../common/core/windows/WindowsManager": "WindowsManager",
    "../../../common/core/windows/WindowsTypes": "WindowsTypes",
    "../../../common/helpers/TextHelper": "TextHelper",
    "../../../common/managers/sound/SoundManager": "SoundManager",
    "../../../common/server/ServerController": "ServerController",
    "../../../common/store": "index",
    "../../../common/store/sceneActions": "sceneActions",
    "./DDSounds": "DDSounds",
    "./core/DDAction": "DDAction",
    "./core/DDGameCore": "DDGameCore",
    "./core/DDServerCard": "DDServerCard",
    "./core/DDServerLogicAdapter": "DDServerLogicAdapter",
    "./core/DDViewAdapterBase": "DDViewAdapterBase",
    "./core/combinations/DouDizhuRules": "DouDizhuRules",
    "./data/DDPlayerData": "DDPlayerData",
    "./ui/DDPlayerView": "DDPlayerView",
    "./ui/coins/DDCoinGroup": "DDCoinGroup"
  } ],
  DDPlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d03f1VIgoxAg6pM7wZIGalY", "DDPlayerData");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../../../../common/core/Logger");
    var DDGamePlayerData = function() {
      function DDGamePlayerData() {
        this.cards = [];
        this._logger = Logger_1.default.getLogger(this);
      }
      DDGamePlayerData.prototype.resetPlayer = function() {
        this.cards = [];
        this.playerInfo = null;
      };
      DDGamePlayerData.prototype.clearForNewRound = function() {
        this.cards = [];
      };
      DDGamePlayerData.prototype.changeBalanceOn = function(value) {
        if (this.playerInfo) {
          this._logger.info("Change player place " + this.placeId + " balance from " + this.playerInfo.balance + " to " + (this.playerInfo.balance + value).toString());
          this.playerInfo.balance = this.playerInfo.balance + value;
        }
      };
      return DDGamePlayerData;
    }();
    exports.DDGamePlayerData = DDGamePlayerData;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger"
  } ],
  DDPlayerView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b88eaB7T9IK4CIyW/n7NWP", "DDPlayerView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseAvatarComponent_1 = require("../../../../main/Script/component/BaseAvatarComponent");
    var PrefabLoader_1 = require("../../../../main/Script/component/PrefabLoader");
    var commonTypes_1 = require("../../../../common/commonTypes");
    var TextHelper_1 = require("../../../../common/helpers/TextHelper");
    var SoundManager_1 = require("../../../../common/managers/sound/SoundManager");
    var DDSounds_1 = require("../DDSounds");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDPlayerView = function(_super) {
      __extends(DDPlayerView, _super);
      function DDPlayerView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerWorker = null;
        _this.playerLandLord = null;
        _this.playerWorkerWoman = null;
        _this.playerLandLordWoman = null;
        _this.playerData = null;
        _this.playerAvatar = null;
        _this.playerNameLabel = null;
        _this.playerBalanceLabel = null;
        _this.foeClock = null;
        _this.auctionClock = null;
        _this.turnClock = null;
        _this.noturnClock = null;
        _this.gameResult = null;
        _this._inited = false;
        _this._timerStarted = false;
        _this._myTimerStarted = false;
        _this._myClockType = -1;
        _this._currentTime = 100;
        _this._cardsCount = 0;
        _this.processEnd = 0;
        return _this;
      }
      Object.defineProperty(DDPlayerView.prototype, "avatar", {
        set: function(avatarUid) {
          this.playerAvatar.getContent(BaseAvatarComponent_1.default).setup({
            useRect: true,
            avatarId: avatarUid,
            useClickOnAvatar: false,
            useRoundCorner: true
          });
        },
        enumerable: true,
        configurable: true
      });
      DDPlayerView.prototype.initPlayer = function(user) {
        this._inited = true;
        this.updatePlayer(user);
        this._clockTick = SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.CLOCK_TICKING);
        this._clockTick.setLoops(-1).stop();
        this._clockFastTick = SoundManager_1.SoundManager.instance.interfaceSound(DDSounds_1.Sounds.CLOCK_ALARM);
        this._clockFastTick.setLoops(-1).stop();
      };
      DDPlayerView.prototype.resetPlayer = function(user) {
        this._inited = false;
        this.playerData.active = false;
        this.playerNameLabel.string = "";
        this.playerBalanceLabel.string = "";
      };
      DDPlayerView.prototype.updatePlayer = function(user) {
        this.playerData.active = true;
        this.playerData.getChildByName("gender") && (user.playerInfo.gender === commonTypes_1.Gender.FEMALE ? this.playerData.getChildByName("gender").getChildByName("female").active = true : this.playerData.getChildByName("gender").getChildByName("male").active = true);
        this.playerNameLabel.string = TextHelper_1.default.textShorterer(user.playerInfo.name, 5);
        this.playerBalanceLabel.string = TextHelper_1.default.coinsShortcut(user.playerInfo.balance, 1);
      };
      DDPlayerView.prototype.showFoeTimer = function(timer) {
        this.foeClock.active = true;
        this.foeClock.getChildByName("timer").getComponent("cc.Label").string = timer;
        this._currentTime = timer;
        this._timerStarted = true;
      };
      DDPlayerView.prototype.showMyTime = function(timer, clockType) {
        this._currentTime = timer;
        this._myClockType = clockType;
        this._myTimerStarted = true;
      };
      DDPlayerView.prototype.start = function() {};
      DDPlayerView.prototype.update = function(dt) {
        if (this._timerStarted) {
          this._currentTime -= dt;
          this._controlAnimAndSounds();
          this.drawTime();
        }
        if (this._myTimerStarted) {
          this._currentTime -= dt;
          this._controlAnimAndSounds();
          this.drawMyTime();
        }
      };
      DDPlayerView.prototype._controlAnimAndSounds = function() {
        if (this._currentTime < 6 && this._currentTime > 0 && !this._clockTick.isPlaying && !this._clockFastTick.isPlaying) {
          this._clockTick.play();
          if (this.foeClock) this.foeClock.getComponent(sp.Skeleton).setAnimation(0, "animation", true); else switch (this._myClockType) {
           case 0:
            this.auctionClock.node.parent.getChildByName("clock_image").getComponent(sp.Skeleton).setAnimation(0, "animation", true);
            break;

           case 1:
            this.turnClock.node.parent.getChildByName("clock_image").getComponent(sp.Skeleton).setAnimation(0, "animation", true);
            break;

           case 2:
            this.noturnClock.node.parent.getChildByName("clock_image").getComponent(sp.Skeleton).setAnimation(0, "animation", true);
          }
        }
        if (this._currentTime < 1 && !this._clockFastTick.isPlaying) {
          this._clockTick.stop();
          this._clockFastTick.play();
        }
      };
      DDPlayerView.prototype.drawTime = function() {
        this.checkTime() ? this.stopTimer() : this.foeClock.getChildByName("timer").getComponent("cc.Label").string = Math.floor(this._currentTime);
      };
      DDPlayerView.prototype.drawMyTime = function() {
        if (this.checkTime()) this.stopTimer(); else switch (this._myClockType) {
         case 0:
          this.auctionClock.string = "" + Math.floor(this._currentTime);
          break;

         case 1:
          this.turnClock.string = "" + Math.floor(this._currentTime);
          break;

         case 2:
          this.noturnClock.string = "" + Math.floor(this._currentTime);
        }
      };
      DDPlayerView.prototype.checkTime = function() {
        return this._currentTime <= 0;
      };
      DDPlayerView.prototype.stopTimer = function() {
        this._clockTick.stop();
        this._clockFastTick.stop();
        if (this.foeClock) this.foeClock.getComponent(sp.Skeleton).clearTrack(0); else switch (this._myClockType) {
         case 0:
          this.auctionClock.node.parent.getChildByName("clock_image").getComponent(sp.Skeleton).clearTrack(0);
          break;

         case 1:
          this.turnClock.node.parent.getChildByName("clock_image").getComponent(sp.Skeleton).clearTrack(0);
          break;

         case 2:
          this.noturnClock.node.parent.getChildByName("clock_image").getComponent(sp.Skeleton).clearTrack(0);
        }
        this._currentTime = 0;
        this._timerStarted = false;
        if (this.foeClock) this.foeClock.active = false; else {
          this.auctionClock.node.parent.parent.active && (this.auctionClock.node.parent.parent.active = false);
          this.turnClock.node.parent.parent.active && (this.turnClock.node.parent.parent.active = false);
          this.noturnClock.node.parent.parent.active && (this.noturnClock.node.parent.parent.active = false);
        }
        this._myClockType = -1;
      };
      DDPlayerView.prototype.enableSpine = function(gender, landlord, myId) {
        this.playerAvatar.node.active = false;
        gender === commonTypes_1.Gender.FEMALE ? this._currentSpine = landlord ? this.playerLandLordWoman : this.playerWorkerWoman : this._currentSpine = landlord ? this.playerLandLord : this.playerWorker;
        this._currentSpine.node.active = true;
        this._currentSpine.setAnimation(0, "zhengchang", true);
      };
      DDPlayerView.prototype.setSpineAnimation = function(animName) {
        this._currentSpine.setAnimation(0, animName, true);
      };
      DDPlayerView.prototype.showResult = function(coins) {
        var _this = this;
        this.gameResult.string = "" + coins;
        this.gameResult.node.active = true;
        this.gameResult.node.runAction(cc.sequence(cc.moveBy(1, 0, 50), cc.callFunc(function() {
          _this.gameResult.node.active = false;
        })));
      };
      DDPlayerView.prototype.redraw = function(curServerTime) {
        this._currentTime = this.processEnd - curServerTime;
      };
      DDPlayerView.prototype.showAuctionBetAction = function(bet) {
        this.node.getChildByName(bet + "_auc").active = true;
      };
      DDPlayerView.prototype.showAuctionSkipAction = function() {
        this.node.getChildByName("skip_lord").active = true;
      };
      DDPlayerView.prototype.hideAuctionActions = function() {
        this.node.getChildByName("skip_lord").active = false;
        this.node.getChildByName("1_auc").active = false;
        this.node.getChildByName("2_auc").active = false;
        this.node.getChildByName("3_auc").active = false;
      };
      DDPlayerView.prototype.pushRoundMoveActionCard = function(card) {
        card.parent = this.node.getChildByName("cards_holder");
      };
      DDPlayerView.prototype.showRoundSkipAction = function() {
        this.node.getChildByName("pass_cards").active = true;
      };
      DDPlayerView.prototype.hideRoundActions = function() {
        this.node.getChildByName("pass_cards").active = false;
        var cardsNode = this.node.getChildByName("cards");
        var alarmNode = this.node.getChildByName("alarm");
        null != cardsNode && (cardsNode.active = false);
        null != alarmNode && (alarmNode.active = false);
      };
      DDPlayerView.prototype.hideRoundPlacedCards = function() {
        this.node.getChildByName("pass_cards").active = false;
        var cardsHolder = this.node.getChildByName("cards_holder");
        while (cardsHolder.children.length > 0) cardsHolder.children[0].parent = null;
      };
      DDPlayerView.prototype.highlightCardsCount = function() {
        var cardsNode = this.node.getChildByName("cards");
        var alarmNode = this.node.getChildByName("alarm");
        if (null != cardsNode) {
          var label = cardsNode.getChildByName("numb").getComponent(cc.Label);
          label.node.color = cc.color(255, 0, 0);
          label.node.runAction(cc.sequence(cc.scaleTo(.3, 2), cc.scaleTo(.3, 1).easing(cc.easeQuadraticActionOut())));
        }
        if (null != alarmNode && true !== alarmNode.active) {
          alarmNode.active = true;
          alarmNode.getComponent(sp.Skeleton).setAnimation(0, "animation", true);
        }
      };
      DDPlayerView.prototype.setCardsCount = function(count) {
        var cardsNode = this.node.getChildByName("cards");
        this._cardsCount = count;
        if (null != cardsNode) {
          cardsNode.active = true;
          cardsNode.getChildByName("numb").getComponent(cc.Label).string = count.toString();
        }
      };
      DDPlayerView.prototype.getCardsCount = function() {
        return this._cardsCount;
      };
      __decorate([ property(sp.Skeleton) ], DDPlayerView.prototype, "playerWorker", void 0);
      __decorate([ property(sp.Skeleton) ], DDPlayerView.prototype, "playerLandLord", void 0);
      __decorate([ property(sp.Skeleton) ], DDPlayerView.prototype, "playerWorkerWoman", void 0);
      __decorate([ property(sp.Skeleton) ], DDPlayerView.prototype, "playerLandLordWoman", void 0);
      __decorate([ property(cc.Node) ], DDPlayerView.prototype, "playerData", void 0);
      __decorate([ property(PrefabLoader_1.default) ], DDPlayerView.prototype, "playerAvatar", void 0);
      __decorate([ property(cc.Label) ], DDPlayerView.prototype, "playerNameLabel", void 0);
      __decorate([ property(cc.Label) ], DDPlayerView.prototype, "playerBalanceLabel", void 0);
      __decorate([ property(cc.Node) ], DDPlayerView.prototype, "foeClock", void 0);
      __decorate([ property(cc.Label) ], DDPlayerView.prototype, "auctionClock", void 0);
      __decorate([ property(cc.Label) ], DDPlayerView.prototype, "turnClock", void 0);
      __decorate([ property(cc.Label) ], DDPlayerView.prototype, "noturnClock", void 0);
      __decorate([ property(cc.Label) ], DDPlayerView.prototype, "gameResult", void 0);
      DDPlayerView = __decorate([ ccclass ], DDPlayerView);
      return DDPlayerView;
    }(cc.Component);
    exports.DDPlayerView = DDPlayerView;
    cc._RF.pop();
  }, {
    "../../../../common/commonTypes": "commonTypes",
    "../../../../common/helpers/TextHelper": "TextHelper",
    "../../../../common/managers/sound/SoundManager": "SoundManager",
    "../../../../main/Script/component/BaseAvatarComponent": "BaseAvatarComponent",
    "../../../../main/Script/component/PrefabLoader": "PrefabLoader",
    "../DDSounds": "DDSounds"
  } ],
  DDServerCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0861Ow3sFIxIYhgLsTN3KK", "DDServerCard");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerCards = require("../../../../common/core/cards/Card");
    var Card_1 = require("../../../../common/core/cards/Card");
    var ClientCardLevel;
    (function(ClientCardLevel) {
      ClientCardLevel[ClientCardLevel["C3"] = 1] = "C3";
      ClientCardLevel[ClientCardLevel["C4"] = 2] = "C4";
      ClientCardLevel[ClientCardLevel["C5"] = 3] = "C5";
      ClientCardLevel[ClientCardLevel["C6"] = 4] = "C6";
      ClientCardLevel[ClientCardLevel["C7"] = 5] = "C7";
      ClientCardLevel[ClientCardLevel["C8"] = 6] = "C8";
      ClientCardLevel[ClientCardLevel["C9"] = 7] = "C9";
      ClientCardLevel[ClientCardLevel["C10"] = 8] = "C10";
      ClientCardLevel[ClientCardLevel["JACK"] = 9] = "JACK";
      ClientCardLevel[ClientCardLevel["QUEEN"] = 10] = "QUEEN";
      ClientCardLevel[ClientCardLevel["KING"] = 11] = "KING";
      ClientCardLevel[ClientCardLevel["ACE"] = 12] = "ACE";
      ClientCardLevel[ClientCardLevel["C2"] = 13] = "C2";
      ClientCardLevel[ClientCardLevel["BLACK_JOKER"] = 14] = "BLACK_JOKER";
      ClientCardLevel[ClientCardLevel["RED_JOKER"] = 15] = "RED_JOKER";
    })(ClientCardLevel = exports.ClientCardLevel || (exports.ClientCardLevel = {}));
    var STRINGS_TO_SUITS = {
      none: Card_1.CardSuit.NONE,
      spades: Card_1.CardSuit.SPADES,
      clubs: Card_1.CardSuit.CLUBS,
      diamonds: Card_1.CardSuit.DIAMONDS,
      hearts: Card_1.CardSuit.HEARTS
    };
    var SUITS_TO_STRINGS = [ "none", "spades", "clubs", "diamonds", "hearts" ];
    function indexToCard(index) {
      if (index === Card_1.BJ_INDEX) return {
        suit: SUITS_TO_STRINGS[Card_1.CardSuit.NONE],
        rate: Card_1.CardLevel.BLACK_JOKER
      };
      if (index === Card_1.RJ_INDEX) return {
        suit: SUITS_TO_STRINGS[Card_1.CardSuit.NONE],
        rate: Card_1.CardLevel.RED_JOKER
      };
      var serverCard = new ServerCards.Card(index);
      return {
        rate: (serverCard.level + ClientCardLevel.KING - 1) % ClientCardLevel.C2 + 1,
        suit: SUITS_TO_STRINGS[serverCard.suit]
      };
    }
    exports.indexToCard = indexToCard;
    function cardToServerCard(card) {
      if (card.rate === Card_1.CardLevel.BLACK_JOKER) return new ServerCards.Card(Card_1.CardLevel.BLACK_JOKER, Card_1.CardSuit.NONE);
      if (card.rate === Card_1.CardLevel.RED_JOKER) return new ServerCards.Card(Card_1.CardLevel.RED_JOKER, Card_1.CardSuit.NONE);
      return new ServerCards.Card((card.rate + Card_1.CardLevel.C2 - 1) % Card_1.CardLevel.KING + 1, STRINGS_TO_SUITS[card.suit]);
    }
    exports.cardToServerCard = cardToServerCard;
    function cardToIndex(card) {
      return cardToServerCard(card).index;
    }
    exports.cardToIndex = cardToIndex;
    cc._RF.pop();
  }, {
    "../../../../common/core/cards/Card": "Card"
  } ],
  DDServerLogicAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19024BQhfhLR4MgD6B41s08", "DDServerLogicAdapter");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerLogicAdapterBase_1 = require("../../../../common/server/ServerLogicAdapterBase");
    var DDAction_1 = require("./DDAction");
    var DDServerCard_1 = require("./DDServerCard");
    var Config_1 = require("../../../../common/config/Config");
    var DDServerLogicAdapter = function(_super) {
      __extends(DDServerLogicAdapter, _super);
      function DDServerLogicAdapter(serverConnector, tableId) {
        var _this = _super.call(this, serverConnector, Config_1.GameCode.DOU_DIZHU, tableId) || this;
        _this._places = {};
        _this._currentPlayerPlace = void 0;
        _this._lastSendMessage = void 0;
        return _this;
      }
      DDServerLogicAdapter.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.start.call(this) ];

             case 1:
              _a.sent();
              return [ 4, this.dispatchAction({
                type: DDAction_1.DDActionType.TABLE_CONFIG_UPDATE,
                data: {
                  ante: this.tableConfig.ante
                }
              }) ];

             case 2:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      DDServerLogicAdapter.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerViewActionHandler(DDAction_1.DDActionType.MAKE_LORD_BET, function(action) {
                DDServerLogicAdapter.SIMULATE_RESPONSE && _this.simulateServerResponse(OpCode.MAKE_LORD_BET, {
                  type: DDAction_1.DDActionType.MAKE_LORD_BET,
                  data: {
                    betsMultiplier: action.data.betsMultiplier,
                    placeId: _this._currentPlayerPlace.placeId
                  }
                });
                _this.sendMessage(OpCode.MAKE_LORD_BET, {
                  betsMultiplier: action.data.betsMultiplier
                });
              });
              this.registerViewActionHandler(DDAction_1.DDActionType.FOLD_LORD_BET, function(action) {
                DDServerLogicAdapter.SIMULATE_RESPONSE && _this.simulateServerResponse(OpCode.FOLD_LORD_BET, {
                  type: DDAction_1.DDActionType.FOLD_LORD_BET,
                  data: {
                    placeId: _this._currentPlayerPlace.placeId
                  }
                });
                _this.sendMessage(OpCode.FOLD_LORD_BET, {});
              });
              this.registerViewActionHandler(DDAction_1.DDActionType.MOVE, function(action) {
                DDServerLogicAdapter.SIMULATE_RESPONSE && _this.simulateServerResponse(OpCode.MOVE, {
                  type: DDAction_1.DDActionType.MOVE,
                  data: {
                    cards: action.data.cards,
                    combinationName: action.data.combinationName,
                    placeId: _this._currentPlayerPlace.placeId
                  }
                });
                _this.sendMessage(OpCode.MOVE, {
                  cards: action.data.cards.map(function(value) {
                    return DDServerCard_1.cardToIndex(value);
                  })
                });
              });
              this.registerViewActionHandler(DDAction_1.DDActionType.FOLD, function(action) {
                DDServerLogicAdapter.SIMULATE_RESPONSE && _this.simulateServerResponse(OpCode.FOLD, {
                  type: DDAction_1.DDActionType.FOLD,
                  data: {
                    placeId: _this._currentPlayerPlace.placeId
                  }
                });
                _this.sendMessage(OpCode.FOLD, {});
              });
              this.registerViewActionHandler(DDAction_1.DDActionType.ACTIVATE_BOT, function(action) {
                _this.sendMessage(OpCode.ACTIVATE_BOT, {});
              });
              this.registerViewActionHandler(DDAction_1.DDActionType.DEACTIVATE_BOT, function(action) {
                _this.sendMessage(OpCode.DEACTIVATE_BOT, {});
              });
              this.registerServerMessageHandler(OpCode.UPDATE_PLACES, function(data) {
                var places = data.places;
                var currentPlayerId = _this.getCurrentPlayerInfo().id;
                places = places.sort(function(a, b) {
                  if (null != a.player && a.player.id === currentPlayerId) return -1;
                  if (null != b.player && b.player.id === currentPlayerId) return 1;
                  return a.placeId - b.placeId;
                });
                null != places[0].player && places[0].player.id === currentPlayerId && places.forEach(function(placeInfo) {
                  var currentPlaceInfo = placeInfo.placeId in _this._places ? _this._places[placeInfo.placeId] : {
                    placeId: placeInfo.placeId
                  };
                  _this._places[currentPlaceInfo.placeId] = currentPlaceInfo;
                  if (null != currentPlaceInfo.player && null == placeInfo.player) {
                    currentPlaceInfo.player = null;
                    _this.dispatchAction({
                      type: DDAction_1.DDActionType.DROP_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId
                      }
                    });
                  } else if (null == currentPlaceInfo.player && null != placeInfo.player) {
                    currentPlaceInfo.player = placeInfo.player;
                    currentPlaceInfo.player.id === currentPlayerId && (_this._currentPlayerPlace = currentPlaceInfo);
                    _this.dispatchAction({
                      type: DDAction_1.DDActionType.REGISTER_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId,
                        playerInfo: currentPlaceInfo.player
                      }
                    });
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.PREPARE_FOR_ROUND, function(data) {
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.PREPARE_FOR_ROUND,
                  data: {
                    placesId: data.places.map(function(value) {
                      return value.placeId;
                    })
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.DEAL_CARDS, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, this.dispatchAction({
                        type: DDAction_1.DDActionType.DEAL_CARDS,
                        data: {
                          cards: data.cards.map(function(index) {
                            return DDServerCard_1.indexToCard(index);
                          })
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.WAITING_LORD_BET, function(data) {
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.WAITING_LORD_BET,
                  data: {
                    betsMultiplier: data.betsMultiplier,
                    activePlaceId: data.activePlaceId,
                    processEnd: _this.currentTime() + data.time
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.MAKE_LORD_BET, function(data) {
                if (DDServerLogicAdapter.SIMULATE_RESPONSE && _this.isLastResponseSimulated(data.placeId, OpCode.MAKE_LORD_BET)) return;
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.MAKE_LORD_BET,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.FOLD_LORD_BET, function(data) {
                if (DDServerLogicAdapter.SIMULATE_RESPONSE && _this.isLastResponseSimulated(data.placeId, OpCode.FOLD_LORD_BET)) return;
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.FOLD_LORD_BET,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.DEAL_LORD_CARDS, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this._lordPlaceId = data.lordPlaceId;
                      return [ 4, this.dispatchAction({
                        type: DDAction_1.DDActionType.DEAL_LORD_CARDS,
                        data: {
                          cards: data.cards.map(function(index) {
                            return DDServerCard_1.indexToCard(index);
                          }),
                          lordPlaceId: data.lordPlaceId
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.WAITING_MOVE, function(data) {
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.WAITING_MOVE,
                  data: {
                    activePlaceId: data.activePlaceId,
                    moveCards: data.moveCards && data.moveCards.length ? data.moveCards.map(function(index) {
                      return DDServerCard_1.indexToCard(index);
                    }) : [],
                    isFirstMove: data.isFirstMove,
                    processEnd: _this.currentTime() + data.time
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.MOVE_END, function(data) {
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.MOVE_END,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.MOVE, function(data) {
                if (DDServerLogicAdapter.SIMULATE_RESPONSE && _this.isLastResponseSimulated(data.placeId, OpCode.MOVE)) return;
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.MOVE,
                  data: {
                    cards: data.cards.map(function(index) {
                      return DDServerCard_1.indexToCard(index);
                    }),
                    combinationName: data.combinationName,
                    placeId: data.placeId
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.FOLD, function(data) {
                if (DDServerLogicAdapter.SIMULATE_RESPONSE && _this.isLastResponseSimulated(data.placeId, OpCode.FOLD)) return;
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.FOLD,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.ROUND_COMPLETE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  var _this = this;
                  return __generator(this, function(_a) {
                    this.logger.info("Round complete");
                    this.dispatchAction({
                      type: DDAction_1.DDActionType.ROUND_COMPLETE,
                      data: {
                        ante: this.tableConfig.ante,
                        isSpringOccurred: data.isSpringOccurred,
                        rewards: data.rewards.map(function(reward) {
                          var playerInfo = _this._places[reward.placeId].player;
                          playerInfo.balance += reward.coins;
                          playerInfo.id === _this.getCurrentPlayerInfo().id && _this.changeCurrentPlayerBalance(playerInfo.balance);
                          return {
                            isWinner: reward.coins > 0,
                            player: playerInfo,
                            multipliersCount: reward.multipliersCount,
                            coins: reward.coins,
                            cards: reward.cards.length ? reward.cards.map(function(card) {
                              return DDServerCard_1.indexToCard(card);
                            }) : []
                          };
                        })
                      }
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.GAME_OVER, function(data) {
                _this.dispatchAction({
                  type: DDAction_1.DDActionType.ROUND_DISMISSED,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_ROUND_STATE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      DDServerLogicAdapter.prototype.simulateServerResponse = function(opCode, action) {
        this._lastSendMessage = opCode;
        this.dispatchAction(action);
      };
      DDServerLogicAdapter.prototype.isLastResponseSimulated = function(placeId, opCode) {
        if (placeId === this._currentPlayerPlace.placeId && opCode === this._lastSendMessage) {
          this._lastSendMessage = void 0;
          return true;
        }
        return false;
      };
      DDServerLogicAdapter.SIMULATE_RESPONSE = true;
      return DDServerLogicAdapter;
    }(ServerLogicAdapterBase_1.ServerLogicAdapterBase);
    exports.DDServerLogicAdapter = DDServerLogicAdapter;
    var OpCode;
    (function(OpCode) {
      OpCode[OpCode["UPDATE_PLACES"] = 1] = "UPDATE_PLACES";
      OpCode[OpCode["PREPARE_FOR_ROUND"] = 2] = "PREPARE_FOR_ROUND";
      OpCode[OpCode["ROUND_START"] = 3] = "ROUND_START";
      OpCode[OpCode["ROUND_COMPLETE"] = 4] = "ROUND_COMPLETE";
      OpCode[OpCode["UPDATE_ROUND_STATE"] = 5] = "UPDATE_ROUND_STATE";
      OpCode[OpCode["GAME_OVER"] = 6] = "GAME_OVER";
      OpCode[OpCode["READY_FOR_NEXT_ACTION"] = 7] = "READY_FOR_NEXT_ACTION";
      OpCode[OpCode["DEAL_CARDS"] = 11] = "DEAL_CARDS";
      OpCode[OpCode["WAITING_LORD_BET"] = 12] = "WAITING_LORD_BET";
      OpCode[OpCode["MAKE_LORD_BET"] = 13] = "MAKE_LORD_BET";
      OpCode[OpCode["FOLD_LORD_BET"] = 14] = "FOLD_LORD_BET";
      OpCode[OpCode["DEAL_LORD_CARDS"] = 15] = "DEAL_LORD_CARDS";
      OpCode[OpCode["WAITING_MOVE"] = 16] = "WAITING_MOVE";
      OpCode[OpCode["MOVE_END"] = 17] = "MOVE_END";
      OpCode[OpCode["MOVE"] = 18] = "MOVE";
      OpCode[OpCode["FOLD"] = 19] = "FOLD";
      OpCode[OpCode["ACTIVATE_BOT"] = 20] = "ACTIVATE_BOT";
      OpCode[OpCode["DEACTIVATE_BOT"] = 21] = "DEACTIVATE_BOT";
    })(OpCode = exports.OpCode || (exports.OpCode = {}));
    cc._RF.pop();
  }, {
    "../../../../common/config/Config": "Config",
    "../../../../common/server/ServerLogicAdapterBase": "ServerLogicAdapterBase",
    "./DDAction": "DDAction",
    "./DDServerCard": "DDServerCard"
  } ],
  DDSounds: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0cd63wwJhJDcrDm+qHRyPsL", "DDSounds");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Sounds;
    (function(Sounds) {
      var _a;
      Sounds.AFTER_MULTIPLY = "After_the_bomb_rocket";
      Sounds.ROOM_BG = "background_room";
      Sounds.GAME_BG = "background_table";
      Sounds.GOLD_LOTTERY = "gold_lottery";
      Sounds.SHOW_CARDS = "showcards";
      Sounds.FEMALE_ONE_POINT = "female_1_point";
      Sounds.FEMALE_TWO_POINT = "female_2_point";
      Sounds.FEMALE_THREE_POINT = "female_3_point";
      Sounds.FEMALE_NO_POINT = "female_not_call";
      Sounds.MALE_ONE_POINT = "man_1_point";
      Sounds.MALE_TWO_POINT = "man_2_point";
      Sounds.MALE_THREE_POINT = "man_3_point";
      Sounds.MALE_NO_POINT = "man_not_call";
      Sounds.GOLD_LOTTERIES = "gold_lotteries";
      Sounds.MULTIPLY = "multiple";
      Sounds.CLOCK_TICKING = "audio_reminded_myself";
      Sounds.CLOCK_ALARM = "audio_reminded_myself2";
      Sounds.SPECIAL_ALERT = "special_alert_warning";
      Sounds.FEMALE_BOMB = "female_bomb";
      Sounds.FEMALE_ONE_CARD_LEFT_2 = "female_I_got_left_one_cards_2";
      Sounds.FEMALE_ONE_CARD_LEFT_1 = "female_I_got_left_one_cards";
      Sounds.FEMALE_TWO_CARD_LEFT_2 = "female_I_got_left_two_cards_2";
      Sounds.FEMALE_TWO_CARD_LEFT_1 = "female_I_got_left_two_cards";
      Sounds.FEMALE_NO = "female_no";
      Sounds.FEMALE_PAIR_2 = "female_pair_13";
      Sounds.FEMALE_PAIR_3 = "female_pair_1";
      Sounds.FEMALE_PAIR_4 = "female_pair_2";
      Sounds.FEMALE_PAIR_5 = "female_pair_3";
      Sounds.FEMALE_PAIR_6 = "female_pair_4";
      Sounds.FEMALE_PAIR_7 = "female_pair_5";
      Sounds.FEMALE_PAIR_8 = "female_pair_6";
      Sounds.FEMALE_PAIR_9 = "female_pair_7";
      Sounds.FEMALE_PAIR_10 = "female_pair_8";
      Sounds.FEMALE_PAIR_J = "female_pair_9";
      Sounds.FEMALE_PAIR_Q = "female_pair_10";
      Sounds.FEMALE_PAIR_K = "female_pair_11";
      Sounds.FEMALE_PAIR_A = "female_pair_12";
      Sounds.FEMALE_PASS = "female_pass";
      Sounds.FEMALE_QUAD_TWO_CARDS = "female_quad_with_two_cards";
      Sounds.FEMALE_QUAD_TWO_PAIRS = "female_quad_with_two_pairs";
      Sounds.FEMALE_ROCKET = "female_rocket";
      Sounds.FEMALE_PAIRS_SEQUENCE = "female_sequence_of_pairs";
      Sounds.FEMALE_TRIPLETS_SEQUENCE_OR_WITH_CARDS = "female_sequence_of_triplets_or_with_attached_cards";
      Sounds.FEMALE_TRIPLETS_SEQUENCE_OR_WITH_PAIRS = "female_sequence_of_triplets_with_attached_pairs";
      Sounds.FEMALE_SEQUENCE = "female_sequence";
      Sounds.FEMALE_SINGLE_2 = "female_single_13";
      Sounds.FEMALE_SINGLE_3 = "female_single_1";
      Sounds.FEMALE_SINGLE_4 = "female_single_2";
      Sounds.FEMALE_SINGLE_5 = "female_single_3";
      Sounds.FEMALE_SINGLE_6 = "female_single_4";
      Sounds.FEMALE_SINGLE_7 = "female_single_5";
      Sounds.FEMALE_SINGLE_8 = "female_single_6";
      Sounds.FEMALE_SINGLE_9 = "female_single_7";
      Sounds.FEMALE_SINGLE_10 = "female_single_8";
      Sounds.FEMALE_SINGLE_J = "female_single_9";
      Sounds.FEMALE_SINGLE_Q = "female_single_10";
      Sounds.FEMALE_SINGLE_K = "female_single_11";
      Sounds.FEMALE_SINGLE_A = "female_single_12";
      Sounds.FEMALE_SINGLE_BJ = "female_single_14";
      Sounds.FEMALE_SINGLE_RJ = "female_single_15";
      Sounds.FEMALE_TRIPLET_WITH_CARD = "female_triplet_with_an_attached_card";
      Sounds.FEMALE_TRIPLET_WITH_PAIR = "female_triplet_with_an_attached_pair";
      Sounds.FEMALE_TRIPLET = "female_triplet";
      Sounds.MALE_BOMB = "man_bomb";
      Sounds.MALE_ONE_CARD_LEFT_2 = "man_I_got_left_one_cards_2";
      Sounds.MALE_ONE_CARD_LEFT_1 = "man_I_got_left_one_cards";
      Sounds.MALE_TWO_CARD_LEFT_2 = "man_I_got_left_two_cards_2";
      Sounds.MALE_TWO_CARD_LEFT_1 = "man_I_got_left_two_cards";
      Sounds.MALE_NO = "man_no";
      Sounds.MALE_PAIR_2 = "man_pair_13";
      Sounds.MALE_PAIR_3 = "man_pair_1";
      Sounds.MALE_PAIR_4 = "man_pair_2";
      Sounds.MALE_PAIR_5 = "man_pair_3";
      Sounds.MALE_PAIR_6 = "man_pair_4";
      Sounds.MALE_PAIR_7 = "man_pair_5";
      Sounds.MALE_PAIR_8 = "man_pair_6";
      Sounds.MALE_PAIR_9 = "man_pair_7";
      Sounds.MALE_PAIR_10 = "man_pair_8";
      Sounds.MALE_PAIR_J = "man_pair_9";
      Sounds.MALE_PAIR_Q = "man_pair_10";
      Sounds.MALE_PAIR_K = "man_pair_11";
      Sounds.MALE_PAIR_A = "man_pair_12";
      Sounds.MALE_PASS = "man_pass";
      Sounds.MALE_QUAD_TWO_CARDS = "man_quad_with_two_cards";
      Sounds.MALE_QUAD_TWO_PAIRS = "man_quad_with_two_pairs";
      Sounds.MALE_ROCKET = "man_rocket";
      Sounds.MALE_PAIRS_SEQUENCE = "man_sequence_of_pairs";
      Sounds.MALE_TRIPLETS_SEQUENCE_OR_WITH_CARDS = "man_sequence_of_triplets_or_with_attached_cards";
      Sounds.MALE_TRIPLETS_SEQUENCE_OR_WITH_PAIRS = "man_sequence_of_triplets_with_attached_pairs";
      Sounds.MALE_SEQUENCE = "man_sequence";
      Sounds.MALE_SINGLE_2 = "man_single_13";
      Sounds.MALE_SINGLE_3 = "man_single_1";
      Sounds.MALE_SINGLE_4 = "man_single_2";
      Sounds.MALE_SINGLE_5 = "man_single_3";
      Sounds.MALE_SINGLE_6 = "man_single_4";
      Sounds.MALE_SINGLE_7 = "man_single_5";
      Sounds.MALE_SINGLE_8 = "man_single_6";
      Sounds.MALE_SINGLE_9 = "man_single_7";
      Sounds.MALE_SINGLE_10 = "man_single_8";
      Sounds.MALE_SINGLE_J = "man_single_9";
      Sounds.MALE_SINGLE_Q = "man_single_10";
      Sounds.MALE_SINGLE_K = "man_single_11";
      Sounds.MALE_SINGLE_A = "man_single_12";
      Sounds.MALE_SINGLE_BJ = "man_single_14";
      Sounds.MALE_SINGLE_RJ = "man_single_15";
      Sounds.MALE_TRIPLET_WITH_CARD = "man_triplet_with_an_attached_card";
      Sounds.MALE_TRIPLET_WITH_PAIR = "man_triplet_with_an_attached_pair";
      Sounds.MALE_TRIPLET = "man_triplet";
      Sounds.AIRPLANE = "airplane_beiguan";
      Sounds.AIRPLANE_FIRST_TIME = "airplane_the_first_time";
      Sounds.BOMB = "bomb";
      Sounds.PAIR_SEQUENCE = "continuous_pair";
      Sounds.ROCKET = "rocket";
      Sounds.SHUNZI = "shunzi";
      Sounds.CARD_CLICK = "click_cards";
      Sounds.PLAY_CARD = "Playing_cards";
      Sounds.FAILURE = "Failure";
      Sounds.UPGRADE = "Upgrade";
      Sounds.VICTORY = "Victory";
      Sounds.RUN_GOLD = "run_gold";
      Sounds.Config = (_a = {}, _a[Sounds.AFTER_MULTIPLY] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/background/After_the_bomb_rocket.mp3",
        sourceVolume: 1
      } ], _a[Sounds.ROOM_BG] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/background/background_room.mp3",
        sourceVolume: 1
      } ], _a[Sounds.GAME_BG] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/background/background_table.mp3",
        sourceVolume: 1
      } ], _a[Sounds.GOLD_LOTTERY] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/addition_gold_lotteries/gold_lottery.mp3",
        sourceVolume: 1
      } ], _a[Sounds.SHOW_CARDS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/show_cards/showcards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_ONE_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/female_voice/female_1_point.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TWO_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/female_voice/female_2_point.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_THREE_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/female_voice/female_3_point.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_NO_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/female_voice/female_not_call.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_ONE_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/male_voice/man_1_point.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TWO_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/male_voice/man_2_point.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_THREE_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/male_voice/man_3_point.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_NO_POINT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Preparation_phase/male_voice/man_not_call.mp3",
        sourceVolume: 1
      } ], _a[Sounds.GOLD_LOTTERIES] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/addition_gold_lotteries/gold_lotteries.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MULTIPLY] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/addition_multiple/multiple.mp3",
        sourceVolume: 1
      } ], _a[Sounds.CLOCK_TICKING] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Alarm_Clock/audio_reminded_myself.mp3",
        sourceVolume: 1
      } ], _a[Sounds.CLOCK_ALARM] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Alarm_Clock/audio_reminded_myself2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.SPECIAL_ALERT] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Alarm_Clock/special_alert_warning.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_BOMB] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_bomb.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_ONE_CARD_LEFT_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_I_got_left_one_cards_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_ONE_CARD_LEFT_1] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_I_got_left_one_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TWO_CARD_LEFT_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_I_got_left_two_cards_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TWO_CARD_LEFT_1] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_I_got_left_two_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_NO] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_no.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_3] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_3.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_4] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_4.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_5] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_5.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_6] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_6.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_7] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_7.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_8] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_8.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_9] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_9.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_10] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_10.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_J] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_J.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_Q] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_Q.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_K] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_K.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIR_A] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pair_A.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PASS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_pass.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_QUAD_TWO_CARDS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_quad_with_two_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_QUAD_TWO_PAIRS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_quad_with_two_pairs.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_ROCKET] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_rocket.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_PAIRS_SEQUENCE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_sequence_of_pairs.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TRIPLETS_SEQUENCE_OR_WITH_CARDS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_sequence_of_triplets_or_with_attached_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TRIPLETS_SEQUENCE_OR_WITH_PAIRS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_sequence_of_triplets_with_attached_pairs.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SEQUENCE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_sequence.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_3] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_3.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_4] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_4.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_5] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_5.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_6] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_6.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_7] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_7.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_8] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_8.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_9] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_9.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_10] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_10.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_J] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_J.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_Q] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_Q.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_K] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_K.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_A] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_A.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_BJ] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_black_joker.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_SINGLE_RJ] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_single_red_joker.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TRIPLET_WITH_CARD] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_triplet_with_an_attached_card.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TRIPLET_WITH_PAIR] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_triplet_with_an_attached_pair.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FEMALE_TRIPLET] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/female_voice/female_triplet.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_BOMB] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_bomb.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_ONE_CARD_LEFT_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_I_got_left_one_cards_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_ONE_CARD_LEFT_1] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_I_got_left_one_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TWO_CARD_LEFT_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_I_got_left_two_cards_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TWO_CARD_LEFT_1] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_I_got_left_two_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_NO] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_no.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_3] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_3.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_4] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_4.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_5] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_5.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_6] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_6.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_7] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_7.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_8] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_8.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_9] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_9.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_10] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_10.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_J] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_J.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_Q] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_Q.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_K] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_K.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIR_A] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pair_A.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PASS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_pass.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_QUAD_TWO_CARDS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_quad_with_two_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_QUAD_TWO_PAIRS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_quad_with_two_pairs.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_ROCKET] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_rocket.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_PAIRS_SEQUENCE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_sequence_of_pairs.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TRIPLETS_SEQUENCE_OR_WITH_CARDS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_sequence_of_triplets_or_with_attached_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TRIPLETS_SEQUENCE_OR_WITH_PAIRS] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_sequence_of_triplets_with_attached_pairs.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SEQUENCE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_sequence.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_2] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_3] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_3.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_4] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_4.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_5] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_5.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_6] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_6.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_7] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_7.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_8] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_8.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_9] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_9.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_10] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_10.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_J] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_J.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_Q] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_Q.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_K] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_K.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_A] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_A.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_BJ] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_black_joker.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_SINGLE_RJ] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_single_red_joker.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TRIPLET_WITH_CARD] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_triplet_with_an_attached_card.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TRIPLET_WITH_PAIR] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_triplet_with_an_attached_pair.mp3",
        sourceVolume: 1
      } ], _a[Sounds.MALE_TRIPLET] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/male_voice/man_triplet.mp3",
        sourceVolume: 1
      } ], _a[Sounds.AIRPLANE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Special_card_type/airplane_beiguan.mp3",
        sourceVolume: 1
      } ], _a[Sounds.AIRPLANE_FIRST_TIME] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Special_card_type/airplane_the_first_time.mp3",
        sourceVolume: 1
      } ], _a[Sounds.BOMB] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Special_card_type/bomb.mp3",
        sourceVolume: 1
      } ], _a[Sounds.PAIR_SEQUENCE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Special_card_type/continuous_pair.mp3",
        sourceVolume: 1
      } ], _a[Sounds.ROCKET] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Special_card_type/rocket.mp3",
        sourceVolume: 1
      } ], _a[Sounds.SHUNZI] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Special_card_type/shunzi.mp3",
        sourceVolume: 1
      } ], _a[Sounds.CARD_CLICK] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Tables_sound/click_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.PLAY_CARD] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_Process_Phase/Tables_sound/Playing_cards.mp3",
        sourceVolume: 1
      } ], _a[Sounds.FAILURE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_over_phase/Sound_Settlement/Failure.mp3",
        sourceVolume: 1
      } ], _a[Sounds.UPGRADE] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_over_phase/Sound_Settlement/Upgrade.mp3",
        sourceVolume: 1
      } ], _a[Sounds.VICTORY] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_over_phase/Sound_Settlement/Victory.mp3",
        sourceVolume: 1
      } ], _a[Sounds.RUN_GOLD] = [ {
        sourcePath: "resources/games/dou_dizhu/Sounds/game_over_phase/run_gold.mp3",
        sourceVolume: 1
      } ], _a);
    })(Sounds = exports.Sounds || (exports.Sounds = {}));
    cc._RF.pop();
  }, {} ],
  DDViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a423e4zxH5M0qqi1qNdvwci", "DDViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ViewAdapterBase_1 = require("../../../../common/core/ViewAdapterBase");
    var DDViewAdapterBase = function(_super) {
      __extends(DDViewAdapterBase, _super);
      function DDViewAdapterBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return DDViewAdapterBase;
    }(ViewAdapterBase_1.ViewAdapterBase);
    exports.DDViewAdapterBase = DDViewAdapterBase;
    cc._RF.pop();
  }, {
    "../../../../common/core/ViewAdapterBase": "ViewAdapterBase"
  } ],
  DebugHelpers: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30031tJqs9PIIqQUF7oCvvI", "DebugHelpers");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function debugRect(parent, target, dataWidthK) {
      parent.addComponent(cc.Graphics);
      var ctx = parent.getComponent(cc.Graphics);
      var widthK = null != dataWidthK ? dataWidthK : 1;
      var offsetXWidth = (target.width * widthK - target.width) / 2;
      ctx.rect(target.x - offsetXWidth, target.y + target.height, target.width * widthK, target.height);
      ctx.fillColor = new cc.Color(0, 0, 0, Math.floor(127.5));
      ctx.fill();
    }
    exports.debugRect = debugRect;
    function debugCircle(parent, offsetX, offsetY, radius) {
      parent.addComponent(cc.Graphics);
      var ctx = parent.getComponent(cc.Graphics);
      ctx.circle(offsetX, 0 - radius - offsetY, radius);
      ctx.fillColor = new cc.Color(0, 0, 0, Math.floor(127.5));
      ctx.fill();
    }
    exports.debugCircle = debugCircle;
    cc._RF.pop();
  }, {} ],
  DebugTouchComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2ac4a2wUuFH3pvFoLgxYr9P", "DebugTouchComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DebugTouchComponent = function(_super) {
      __extends(DebugTouchComponent, _super);
      function DebugTouchComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.showDebugTouch = false;
        _this.debugTouchSize = 20;
        _this.debugTouchColor = cc.color(255, 255, 255);
        _this.showBoundingBox = false;
        _this._parent = null;
        _this._graphicsComponent = null;
        return _this;
      }
      DebugTouchComponent.prototype.onLoad = function() {
        this._parent = this.node.parent;
        this._graphicsComponent = this.node.getComponent("cc.Graphics");
        this._graphicsComponent.fillColor = this.debugTouchColor;
        this._setListeners(this._parent);
        this._parent.on("touchmove", this._touchMove.bind(this));
        this._parent.on("touchend", this._touchEnd.bind(this));
        this._parent.on("touchcancel", this._touchCancel.bind(this));
      };
      DebugTouchComponent.prototype._touchStart = function(event) {
        if (this.showDebugTouch) {
          var curLoc = this.node.convertToNodeSpace(event.getLocation());
          this._graphicsComponent.circle(curLoc.x, curLoc.y, this.debugTouchSize);
          this._graphicsComponent.fill();
        }
        console.log(event.target.name);
      };
      DebugTouchComponent.prototype._touchMove = function(event) {
        if (this.showDebugTouch) {
          this._graphicsComponent.clear();
          this._graphicsComponent.circle(event.getLocation().x, event.getLocation().y, this.debugTouchSize);
          this._graphicsComponent.fill();
        }
      };
      DebugTouchComponent.prototype._touchEnd = function(event) {
        this._graphicsComponent.clear();
      };
      DebugTouchComponent.prototype._touchCancel = function(event) {
        this._graphicsComponent.clear();
      };
      DebugTouchComponent.prototype._setListeners = function(node) {
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].on("touchstart", this._touchStart.bind(this));
          node.children[i].children.length > 0 && this._setListeners(node.children[i]);
        }
      };
      DebugTouchComponent.prototype.start = function() {};
      __decorate([ property(Boolean) ], DebugTouchComponent.prototype, "showDebugTouch", void 0);
      __decorate([ property(Number) ], DebugTouchComponent.prototype, "debugTouchSize", void 0);
      __decorate([ property(cc.Color) ], DebugTouchComponent.prototype, "debugTouchColor", void 0);
      __decorate([ property(Boolean) ], DebugTouchComponent.prototype, "showBoundingBox", void 0);
      DebugTouchComponent = __decorate([ ccclass ], DebugTouchComponent);
      return DebugTouchComponent;
    }(cc.Component);
    exports.DebugTouchComponent = DebugTouchComponent;
    cc._RF.pop();
  }, {} ],
  DialogWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f966aedBZCRqBfGwzt+t9p", "DialogWindow");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseWindow_1 = require("./BaseWindow");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DialogWindow = function(_super) {
      __extends(DialogWindow, _super);
      function DialogWindow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.title = null;
        _this.text = null;
        _this.leftButton = null;
        _this.rightButton = null;
        return _this;
      }
      DialogWindow.prototype.start = function() {};
      DialogWindow.prototype.init = function() {
        this.customParams.title ? this.title.string = this.customParams.title : this.title.string = "";
        this.customParams.text ? this.text.string = this.customParams.text : this.text.string = "";
        if (null == this.customParams.leftTitle) {
          this.leftButton.node.active = false;
          this.rightButton.node.x = 0;
        } else this.leftButton.node.getChildByName("Label").getComponent(cc.Label).string = this.customParams.leftTitle;
        if (null == this.customParams.rightTitle) {
          this.rightButton.node.active = false;
          this.leftButton.node.x = 0;
        } else this.rightButton.node.getChildByName("Label").getComponent(cc.Label).string = this.customParams.rightTitle;
      };
      DialogWindow.prototype.onLeftClick = function() {
        this.customParams.onLeft && this.customParams.onLeft();
        null == this.customParams.closeBy || this.customParams.closeBy !== LeftRightClose.LEFT && this.customParams.closeBy !== LeftRightClose.BOTH || this.close();
        return true;
      };
      DialogWindow.prototype.onRightClick = function() {
        this.customParams.onLeft && this.customParams.onRight();
        null == this.customParams.closeBy || this.customParams.closeBy !== LeftRightClose.RIGHT && this.customParams.closeBy !== LeftRightClose.BOTH || this.close();
        return true;
      };
      Object.defineProperty(DialogWindow.prototype, "customParams", {
        get: function() {
          if (this._params && this._params.customParams) return this._params.customParams;
          return {};
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Label) ], DialogWindow.prototype, "title", void 0);
      __decorate([ property(cc.Label) ], DialogWindow.prototype, "text", void 0);
      __decorate([ property(cc.Button) ], DialogWindow.prototype, "leftButton", void 0);
      __decorate([ property(cc.Button) ], DialogWindow.prototype, "rightButton", void 0);
      DialogWindow = __decorate([ ccclass ], DialogWindow);
      return DialogWindow;
    }(BaseWindow_1.default);
    exports.default = DialogWindow;
    var LeftRightClose;
    (function(LeftRightClose) {
      LeftRightClose[LeftRightClose["RIGHT"] = 0] = "RIGHT";
      LeftRightClose[LeftRightClose["LEFT"] = 1] = "LEFT";
      LeftRightClose[LeftRightClose["BOTH"] = 2] = "BOTH";
    })(LeftRightClose = exports.LeftRightClose || (exports.LeftRightClose = {}));
    cc._RF.pop();
  }, {
    "./BaseWindow": "BaseWindow"
  } ],
  DouDizhuBaseCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3747bEcLpJJY7IRw4A68ebw", "DouDizhuBaseCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../common/core/cards/Card");
    var BaseCombination_1 = require("../../../../../common/core/cards/combinations/BaseCombination");
    var CombinationResult_1 = require("../../../../../common/core/cards/combinations/CombinationResult");
    var DouDizhuBaseCombination = function(_super) {
      __extends(DouDizhuBaseCombination, _super);
      function DouDizhuBaseCombination(name, rank) {
        void 0 === rank && (rank = 0);
        return _super.call(this, name, null != rank ? rank : 0) || this;
      }
      DouDizhuBaseCombination.prototype.mapCardLevel = function(value) {
        if (value === Card_1.CardLevel.ACE) return Card_1.CardLevel.KING + 1;
        if (value === Card_1.CardLevel.C2) return Card_1.CardLevel.KING + 2;
        if (value === Card_1.CardLevel.BLACK_JOKER) return Card_1.CardLevel.KING + 3;
        if (value === Card_1.CardLevel.RED_JOKER) return Card_1.CardLevel.KING + 4;
        return _super.prototype.mapCardLevel.call(this, value);
      };
      DouDizhuBaseCombination.prototype.buildResult = function(cards, patternInd, checkBestCardsWithPattern) {
        void 0 === checkBestCardsWithPattern && (checkBestCardsWithPattern = false);
        var result = _super.prototype.buildResult.call(this, cards, patternInd);
        if (true === checkBestCardsWithPattern) {
          var pattern_1 = this._patterns[patternInd];
          result.setupBestCards(function(value, index) {
            return pattern_1.items[index].useAsBest ? 1 : -1;
          });
        } else result.setupBestCards(function(value, index) {
          return 0 === index ? 1 : -1;
        });
        return result;
      };
      DouDizhuBaseCombination.prototype.compareTwoSameCombinations = function(combination1, combination2) {
        if (combination1.name !== combination2.name) return CombinationResult_1.CombinationCompareResult.INVALID;
        return _super.prototype.compareTwoSameCombinations.call(this, combination1, combination2);
      };
      return DouDizhuBaseCombination;
    }(BaseCombination_1.BaseCombination);
    exports.DouDizhuBaseCombination = DouDizhuBaseCombination;
    cc._RF.pop();
  }, {
    "../../../../../common/core/cards/Card": "Card",
    "../../../../../common/core/cards/combinations/BaseCombination": "BaseCombination",
    "../../../../../common/core/cards/combinations/CombinationResult": "CombinationResult"
  } ],
  DouDizhuRules: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1aa4aGfYOpNWJT4/x2T1ydp", "DouDizhuRules");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../common/core/cards/Card");
    var BaseRules_1 = require("../../../../../common/core/cards/combinations/BaseRules");
    var BombCombination_1 = require("./dou_dizhu/BombCombination");
    var HighCardCombination_1 = require("./dou_dizhu/HighCardCombination");
    var PairCombination_1 = require("./dou_dizhu/PairCombination");
    var QuardWithCardsCombination_1 = require("./dou_dizhu/QuardWithCardsCombination");
    var QuardWithPairsCombination_1 = require("./dou_dizhu/QuardWithPairsCombination");
    var RocketCombination_1 = require("./dou_dizhu/RocketCombination");
    var SequenceCombination_1 = require("./dou_dizhu/SequenceCombination");
    var SequenceOfPairsCombination_1 = require("./dou_dizhu/SequenceOfPairsCombination");
    var SequenceOfQuardsCombination_1 = require("./dou_dizhu/SequenceOfQuardsCombination");
    var SequenceOfTripletsCombination_1 = require("./dou_dizhu/SequenceOfTripletsCombination");
    var SequenceOfTripletsWithCardCombination_1 = require("./dou_dizhu/SequenceOfTripletsWithCardCombination");
    var SequenceOfTripletsWithPairCombination_1 = require("./dou_dizhu/SequenceOfTripletsWithPairCombination");
    var TripletCombination_1 = require("./dou_dizhu/TripletCombination");
    var TripletWithCardCombination_1 = require("./dou_dizhu/TripletWithCardCombination");
    var TripletWithPairCombination_1 = require("./dou_dizhu/TripletWithPairCombination");
    var DouDizhuRules = function(_super) {
      __extends(DouDizhuRules, _super);
      function DouDizhuRules() {
        var _this = _super.call(this) || this;
        _this.findOnlyFirstCombination = true;
        _this.countPlayerCombinationCards = 0;
        _this.countDealerCombinationCards = 0;
        _this._bombCombination = new BombCombination_1.BombCombination();
        _this._rocketCombination = new RocketCombination_1.RocketCombination();
        _this.combinations = [ _this._rocketCombination, new SequenceOfQuardsCombination_1.SequenceOfQuardsCombination(5), new SequenceOfQuardsCombination_1.SequenceOfQuardsCombination(4), new SequenceOfQuardsCombination_1.SequenceOfQuardsCombination(3), new SequenceOfQuardsCombination_1.SequenceOfQuardsCombination(2), new QuardWithPairsCombination_1.QuardWithPairsCombination(), new QuardWithCardsCombination_1.QuardWithCardsCombination(), new SequenceOfTripletsCombination_1.SequenceOfTripletsCombination(6), new SequenceOfTripletsCombination_1.SequenceOfTripletsCombination(5), new SequenceOfTripletsCombination_1.SequenceOfTripletsCombination(4), new SequenceOfTripletsCombination_1.SequenceOfTripletsCombination(3), new SequenceOfTripletsCombination_1.SequenceOfTripletsCombination(2), new SequenceOfTripletsWithPairCombination_1.SequenceOfTripletsWithPairCombination(4), new SequenceOfTripletsWithPairCombination_1.SequenceOfTripletsWithPairCombination(3), new SequenceOfTripletsWithPairCombination_1.SequenceOfTripletsWithPairCombination(2), new SequenceOfTripletsWithCardCombination_1.SequenceOfTripletsWithCardCombination(5), new SequenceOfTripletsWithCardCombination_1.SequenceOfTripletsWithCardCombination(4), new SequenceOfTripletsWithCardCombination_1.SequenceOfTripletsWithCardCombination(3), new SequenceOfTripletsWithCardCombination_1.SequenceOfTripletsWithCardCombination(2), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(10), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(9), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(8), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(7), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(6), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(5), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(4), new SequenceOfPairsCombination_1.SequenceOfPairsCombination(3), new SequenceCombination_1.SequenceCombination(12), new SequenceCombination_1.SequenceCombination(11), new SequenceCombination_1.SequenceCombination(10), new SequenceCombination_1.SequenceCombination(9), new SequenceCombination_1.SequenceCombination(8), new SequenceCombination_1.SequenceCombination(7), new SequenceCombination_1.SequenceCombination(6), new SequenceCombination_1.SequenceCombination(5), _this._bombCombination, new TripletWithPairCombination_1.TripletWithPairCombination(), new TripletWithCardCombination_1.TripletWithCardCombination(), new TripletCombination_1.TripletCombination(), new PairCombination_1.PairCombination(), new HighCardCombination_1.HighCardCombination() ];
        return _this;
      }
      DouDizhuRules.prototype.findCombination = function(playerCards, dealerCards, minAviableCombination) {
        this.countPlayerCombinationCards = playerCards.length;
        return _super.prototype.findCombination.call(this, playerCards, dealerCards, minAviableCombination);
      };
      DouDizhuRules.prototype.findCombinationBiggerThan = function(playerCards, otherCards) {
        var compareCombination = this.findCombination(otherCards);
        playerCards = this.sortCards(playerCards.slice());
        var cards = playerCards;
        var hasRocket = this._rocketCombination.fastCheckCombination(playerCards);
        var hasBomb = this._bombCombination.fastCheckCombination(playerCards);
        hasRocket && (cards = cards.filter(function(value) {
          return value.level !== Card_1.CardLevel.BLACK_JOKER && value.level !== Card_1.CardLevel.RED_JOKER;
        }));
        var oldCombinations = this.combinations;
        this.combinations = oldCombinations.filter(function(value) {
          return value.name === compareCombination.name;
        });
        this.countPlayerCombinationCards = otherCards.length;
        var result = null;
        var filterIndex = 0;
        compareCombination.name === HighCardCombination_1.HighCardCombination.NAME ? filterIndex = 1 : compareCombination.name === PairCombination_1.PairCombination.NAME && (filterIndex = 2);
        if (filterIndex > 0) {
          var temp = cards.reduce(function(result, card) {
            var cardLevel = card.level;
            var item = result.find(function(value) {
              return value.level === cardLevel;
            });
            if (null == item) {
              item = {
                level: cardLevel,
                cards: []
              };
              result.push(item);
            }
            item.cards.push(card);
            return result;
          }, []).filter(function(a) {
            return a.cards.length == filterIndex;
          }).reduce(function(result, a) {
            return result.concat(a.cards);
          }, []);
          if (temp.length >= filterIndex) {
            temp = this.sortCards(temp);
            for (var i = temp.length - filterIndex; i >= 0 && null == result; i -= filterIndex) {
              var tempForCheck = temp.slice(i, i + filterIndex);
              result = _super.prototype.findCombination.call(this, tempForCheck, [], compareCombination);
            }
          }
        }
        null == result && (result = _super.prototype.findCombination.call(this, cards, [], compareCombination));
        if (null == result && (hasRocket || hasBomb)) {
          if (hasBomb) {
            this.countPlayerCombinationCards = this._bombCombination.limits.min;
            this.combinations = [ this._bombCombination ];
            result = _super.prototype.findCombination.call(this, playerCards, [], compareCombination);
          }
          if (null == result && hasRocket) {
            this.countPlayerCombinationCards = this._rocketCombination.limits.min;
            this.combinations = [ this._rocketCombination ];
            result = _super.prototype.findCombination.call(this, playerCards, []);
          }
        }
        this.combinations = oldCombinations;
        return result;
      };
      DouDizhuRules.prototype.findFirstCombination = function(playerCards) {
        var _this = this;
        var combinationResult = this.findCombination(playerCards);
        if (null != combinationResult) return combinationResult;
        var temp = playerCards.reduce(function(result, card) {
          var cardLevel = card.level;
          cardLevel !== Card_1.CardLevel.BLACK_JOKER && cardLevel !== Card_1.CardLevel.RED_JOKER || (cardLevel = Card_1.CardLevel.BLACK_JOKER);
          var item = result.find(function(value) {
            return value.level === cardLevel;
          });
          if (null == item) {
            item = {
              level: cardLevel,
              cards: []
            };
            result.push(item);
          }
          item.cards.push(card);
          return result;
        }, []).sort(function(a1, a2) {
          if (a1.cards.length === a2.cards.length) return _this.getCardLevelSortOrder(a1.level) - _this.getCardLevelSortOrder(a2.level);
          return a1.cards.length - a2.cards.length;
        });
        if (temp.length > 1) return this.findCombination(temp[0].cards);
        return;
      };
      DouDizhuRules.prototype.findCombinationForRobot = function(playerCards, otherCards) {
        var _this = this;
        if (null != otherCards && otherCards.length > 0) return this.findCombinationBiggerThan(playerCards, otherCards);
        playerCards = this.sortCards(playerCards.slice());
        var oldCombinations = this.combinations;
        var combinationsToCheck = this.combinations;
        var hasRocket = this._rocketCombination.fastCheckCombination(playerCards);
        combinationsToCheck = combinationsToCheck.filter(function(value) {
          return value.name !== _this._rocketCombination.name && value.fastCheckCombination(playerCards);
        }).sort(function(a1, a2) {
          return a2.limits.max - a1.limits.max;
        });
        var cards = playerCards;
        hasRocket && (cards = cards.filter(function(value) {
          return value.level !== Card_1.CardLevel.BLACK_JOKER && value.level !== Card_1.CardLevel.RED_JOKER;
        }));
        for (var i = 0; i < combinationsToCheck.length; i++) {
          this.countPlayerCombinationCards = combinationsToCheck[i].limits.max;
          this.combinations = [ combinationsToCheck[i] ];
          var result = _super.prototype.findCombination.call(this, cards, []);
          this.combinations = oldCombinations;
          if (null != result) return result;
        }
        if (hasRocket) {
          this.countPlayerCombinationCards = this._rocketCombination.limits.min;
          this.combinations = [ this._rocketCombination ];
          var result = _super.prototype.findCombination.call(this, playerCards, []);
          this.combinations = oldCombinations;
          if (null != result) return result;
        }
        this.countPlayerCombinationCards = 1;
        return _super.prototype.findCombination.call(this, playerCards, []);
      };
      DouDizhuRules.prototype.getCardLevelSortOrder = function(value) {
        if (value === Card_1.CardLevel.ACE) return Card_1.CardLevel.KING + 1;
        if (value === Card_1.CardLevel.C2) return Card_1.CardLevel.KING + 2;
        if (value === Card_1.CardLevel.BLACK_JOKER) return Card_1.CardLevel.KING + 3;
        if (value === Card_1.CardLevel.RED_JOKER) return Card_1.CardLevel.KING + 4;
        return value;
      };
      DouDizhuRules.prototype.getCardSortOrder = function(value) {
        return this.getCardLevelSortOrder(value.level);
      };
      return DouDizhuRules;
    }(BaseRules_1.BaseRules);
    exports.DouDizhuRules = DouDizhuRules;
    cc._RF.pop();
  }, {
    "../../../../../common/core/cards/Card": "Card",
    "../../../../../common/core/cards/combinations/BaseRules": "BaseRules",
    "./dou_dizhu/BombCombination": "BombCombination",
    "./dou_dizhu/HighCardCombination": "HighCardCombination",
    "./dou_dizhu/PairCombination": "PairCombination",
    "./dou_dizhu/QuardWithCardsCombination": "QuardWithCardsCombination",
    "./dou_dizhu/QuardWithPairsCombination": "QuardWithPairsCombination",
    "./dou_dizhu/RocketCombination": "RocketCombination",
    "./dou_dizhu/SequenceCombination": "SequenceCombination",
    "./dou_dizhu/SequenceOfPairsCombination": "SequenceOfPairsCombination",
    "./dou_dizhu/SequenceOfQuardsCombination": "SequenceOfQuardsCombination",
    "./dou_dizhu/SequenceOfTripletsCombination": "SequenceOfTripletsCombination",
    "./dou_dizhu/SequenceOfTripletsWithCardCombination": "SequenceOfTripletsWithCardCombination",
    "./dou_dizhu/SequenceOfTripletsWithPairCombination": "SequenceOfTripletsWithPairCombination",
    "./dou_dizhu/TripletCombination": "TripletCombination",
    "./dou_dizhu/TripletWithCardCombination": "TripletWithCardCombination",
    "./dou_dizhu/TripletWithPairCombination": "TripletWithPairCombination"
  } ],
  ExampleWindowManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f03e93/Sx1M47/ErpUNJIJV", "ExampleWindowManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WindowsManager_1 = require("./WindowsManager");
    var WindowsTypes_1 = require("./WindowsTypes");
    var DialogWindow = require("./DialogWindow");
    var ExampleWindowManager = function() {
      function ExampleWindowManager() {}
      ExampleWindowManager.start = function(parent) {
        var _this = this;
        parent.removeAllChildren();
        this.testOpen(parent, function() {
          parent.removeAllChildren();
          _this.testPriority(parent, function() {
            parent.removeAllChildren();
            _this.testDialogWindow(parent, function() {
              parent.removeAllChildren();
              _this.testAlign(parent, function() {
                parent.removeAllChildren();
                _this.testAppearance(parent, function() {
                  parent.removeAllChildren();
                  _this.testScaleAppearance(parent, function() {
                    parent.removeAllChildren();
                    _this.testShowPrebab(parent, null);
                  });
                });
              });
            });
          });
        });
      };
      ExampleWindowManager.testShowPrebab = function(parent, callback) {
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent
        });
        var wp = {
          title: "TEST PREFAB",
          text: "TEST PREFAB",
          onRight: function() {
            console.log("!!!!!!onRight");
          },
          onLeft: function() {
            console.log("!!!!!!onLeft");
          },
          closeBy: DialogWindow.LeftRightClose.RIGHT,
          rightTitle: "Right",
          leftTitle: "Left"
        };
        cc.loader.loadRes(ExampleWindowManager.PATH_PREFIX + ExampleWindowManager.WINDOW_NAME, function(err, prefab) {
          wm.show(prefab, wp);
        });
      };
      ExampleWindowManager.testScaleAppearance = function(parent, callback) {
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent,
          path_prefix: ExampleWindowManager.PATH_PREFIX
        }).initAppearanceConfig(__assign({}, wm.fillWindowParams(null).appearanceConfig, {
          directionShow: WindowsTypes_1.WindowShowDirection.NONE,
          directionHide: WindowsTypes_1.WindowShowDirection.NONE,
          scale: true
        }));
        var wp = {
          title: "TEST SCALE APPEARANCE",
          text: "SCALE APPEARANCE",
          onRight: function() {
            console.log("!!!!!!onRight");
          },
          onLeft: function() {
            console.log("!!!!!!onLeft");
          },
          closeBy: DialogWindow.LeftRightClose.BOTH,
          rightTitle: "Right",
          leftTitle: null
        };
        var config = wm.fillWindowParams(ExampleWindowManager.WINDOW_NAME);
        config.customParams = wp;
        wm.showWithFullParams(config);
        wm.showWithAppearanceConfig(ExampleWindowManager.WINDOW_NAME, __assign({}, wm.fillWindowParams(ExampleWindowManager.WINDOW_NAME).appearanceConfig, {
          directionShow: WindowsTypes_1.WindowShowDirection.UP,
          directionHide: WindowsTypes_1.WindowShowDirection.DOWN
        }), wp);
      };
      ExampleWindowManager.testOpen = function(parent, callback) {
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent,
          path_prefix: ExampleWindowManager.PATH_PREFIX
        });
        var wp = {
          title: "TEST OPEN",
          text: "TEST TEXT",
          onRight: function() {
            console.log("!!!!!!onRight");
          },
          onLeft: function() {
            console.log("!!!!!!onLeft");
          },
          closeBy: DialogWindow.LeftRightClose.RIGHT,
          rightTitle: "Right",
          leftTitle: "Left"
        };
        var config = wm.fillWindowParams(ExampleWindowManager.WINDOW_NAME);
        config.customParams = wp;
        wm.showWithFullParams(config);
        wm.show(ExampleWindowManager.WINDOW_NAME, wp);
      };
      ExampleWindowManager.testDialogWindow = function(parent, callback) {
        var wp = {
          title: "TEST CUSTOM PARAMS",
          text: "TEST TEXT",
          onRight: function() {
            console.log("!!!!!!onRight");
          },
          onLeft: function() {
            console.log("!!!!!!onLeft");
          },
          closeBy: DialogWindow.LeftRightClose.RIGHT,
          rightTitle: "Right",
          leftTitle: "Left"
        };
        var wp2 = __assign({}, wp, {
          leftTitle: null,
          closeBy: DialogWindow.LeftRightClose.BOTH
        });
        var wp3 = __assign({}, wp, {
          rightTitle: null,
          closeBy: DialogWindow.LeftRightClose.BOTH
        });
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent,
          path_prefix: ExampleWindowManager.PATH_PREFIX
        }).initAppearanceConfig(__assign({}, wm.fillWindowParams(null).appearanceConfig, {
          directionShow: WindowsTypes_1.WindowShowDirection.UP,
          directionHide: WindowsTypes_1.WindowShowDirection.DOWN
        })).initPositionConfig(__assign({}, wm.fillWindowParams(null).positionConfig, {
          alignHorizontal: WindowsTypes_1.PositionHorizontalAlign.CENTER,
          alignVertical: WindowsTypes_1.PositionVerticalAlign.BOTTOM
        }));
        wm.show(ExampleWindowManager.WINDOW_NAME, wp);
        wm.show(ExampleWindowManager.WINDOW_NAME, wp2);
        wm.show(ExampleWindowManager.WINDOW_NAME, wp3);
      };
      ExampleWindowManager.testAlign = function(parent, callback) {
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent,
          path_prefix: ExampleWindowManager.PATH_PREFIX
        });
        var windowCustomParams = {
          title: "TEST ALIGN",
          text: "TEST TEXT",
          onRight: function() {
            console.log("!!!!!!onRight");
          },
          onLeft: function() {
            console.log("!!!!!!onLeft");
          },
          closeBy: DialogWindow.LeftRightClose.BOTH,
          rightTitle: null,
          leftTitle: "Left"
        };
        var horizontal = [ WindowsTypes_1.PositionHorizontalAlign.CENTER, WindowsTypes_1.PositionHorizontalAlign.RIGHT, WindowsTypes_1.PositionHorizontalAlign.LEFT ];
        var vertical = [ WindowsTypes_1.PositionVerticalAlign.UP, WindowsTypes_1.PositionVerticalAlign.CENTER, WindowsTypes_1.PositionVerticalAlign.BOTTOM ];
        for (var index = 0; index < horizontal.length; index++) for (var index2 = 0; index2 < vertical.length; index2++) {
          var config = wm.fillWindowParams(ExampleWindowManager.WINDOW_NAME);
          wm.showWithAlignConfig(ExampleWindowManager.WINDOW_NAME, __assign({}, config.positionConfig, {
            alignHorizontal: horizontal[index],
            alignVertical: vertical[index2]
          }), __assign({}, windowCustomParams, {
            text: horizontal[index] + " " + vertical[index2]
          }));
        }
      };
      ExampleWindowManager.testAppearance = function(parent, callback) {
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent,
          path_prefix: ExampleWindowManager.PATH_PREFIX
        });
        var windowCustomParams = {
          title: "TEST Appearance",
          text: "TEST TEXT",
          onRight: function() {
            console.log("!!!!!!onRight");
          },
          onLeft: function() {
            console.log("!!!!!!onLeft");
          },
          closeBy: DialogWindow.LeftRightClose.BOTH,
          rightTitle: "Right",
          leftTitle: null
        };
        var direction = [ WindowsTypes_1.WindowShowDirection.UP, WindowsTypes_1.WindowShowDirection.DOWN, WindowsTypes_1.WindowShowDirection.LEFT, WindowsTypes_1.WindowShowDirection.RIGHT ];
        for (var index = 0; index < direction.length; index++) for (var index2 = 0; index2 < direction.length; index2++) {
          var config = wm.fillWindowParams(ExampleWindowManager.WINDOW_NAME);
          wm.showWithAppearanceConfig(ExampleWindowManager.WINDOW_NAME, __assign({}, config.appearanceConfig, {
            directionShow: direction[index],
            directionHide: direction[index2]
          }), __assign({}, windowCustomParams, {
            text: "directionShow:" + direction[index] + " directionHide:" + direction[index2]
          }));
        }
      };
      ExampleWindowManager.testPriority = function(parent, callback) {
        var wm = new WindowsManager_1.default();
        wm.onCloseAllCallback = callback;
        wm.init({
          parent: parent,
          path_prefix: ExampleWindowManager.PATH_PREFIX
        });
        var windowCustomParams = {
          title: "TEST PRIORITY",
          text: "Usual priority",
          onRight: null,
          onLeft: null,
          closeBy: DialogWindow.LeftRightClose.BOTH,
          rightTitle: "Close",
          leftTitle: null
        };
        var counter = 1;
        wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams));
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "Urgent priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.URGENT);
        }, 1e3);
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "URGENT_CANT_CLOSE priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.URGENT_CANT_CLOSE);
        }, 2e3);
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "URGENT priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.URGENT);
        }, 3e3);
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "USUAL priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.USUAL);
        }, 4e3);
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "URGENT priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.URGENT);
        }, 5e3);
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "USUAL priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.USUAL);
        }, 6e3);
        setTimeout(function() {
          counter++;
          wm.show(ExampleWindowManager.WINDOW_NAME, __assign({}, windowCustomParams, {
            text: "USUAL priority;" + counter.toString()
          }), WindowsTypes_1.WindowShowPriority.USUAL);
        }, 7e3);
      };
      ExampleWindowManager.WINDOW_NAME = "DialogWindowPrefab";
      ExampleWindowManager.PATH_PREFIX = "main/Prefab/";
      return ExampleWindowManager;
    }();
    exports.default = ExampleWindowManager;
    cc._RF.pop();
  }, {
    "./DialogWindow": "DialogWindow",
    "./WindowsManager": "WindowsManager",
    "./WindowsTypes": "WindowsTypes"
  } ],
  GameController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68ed6YTFABCB5d/5GxrvAZP", "GameController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChipsView_1 = require("./views/chips/ChipsView");
    var PlayersListPopup_1 = require("./views/popups/PlayersListPopup");
    var RoundTimer_1 = require("./views/elements/RoundTimer");
    var GameTimer_1 = require("./GameTimer");
    var BKAction_1 = require("./core/BKAction");
    var BKGame_1 = require("./BKGame");
    var ResultInfo_1 = require("./views/resultInfo/ResultInfo");
    var RoundResultPopup_1 = require("./views/popups/RoundResultPopup");
    var GameStatistic_1 = require("./views/statistics/GameStatistic");
    var UserInfoPanel_1 = require("./views/panels/UserInfoPanel");
    var HostsPanel_1 = require("./views/panels/HostsPanel");
    var PlayersAvatarsPanel_1 = require("./views/panels/PlayersAvatarsPanel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameController = function(_super) {
      __extends(GameController, _super);
      function GameController() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chipsView = null;
        _this.playersListPopup = null;
        _this.userInfoPanel = null;
        _this.playersAvatarsPanel = null;
        _this.hostsPanel = null;
        _this.roundTimer = null;
        _this.resultInfo = null;
        _this.roundResultPopup = null;
        _this.gameStatistics = null;
        _this.currentPlayerAvatarPanel = null;
        _this._bkGame = null;
        _this._gameTimer = null;
        _this._types = null;
        _this.currentPlayerData = null;
        _this.currentPlayerBalance = 0;
        _this.currentPlayerRoundBet = 0;
        return _this;
      }
      GameController.prototype.start = function() {
        var _this = this;
        this._bkGame = this.node.getComponent(BKGame_1.default);
        this.chipsView.node.on("chipPlaced", function(data) {
          _this.chipPlaced(data);
        });
        this._types = {};
        this._types[BKAction_1.BKActionType.REGISTER_PLACE] = this.onPlacesRegistered;
        this._types[BKAction_1.BKActionType.PLACES_UPDATED] = this.onPlacesUpdated;
        this._types[BKAction_1.BKActionType.ROUND_STARTED] = this.onRoundStarted;
        this._types[BKAction_1.BKActionType.ROUND_UPDATED] = this.onRoundUpdated;
        this._types[BKAction_1.BKActionType.ROUND_COMPLETE] = this.onRoundComplete;
        this._types[BKAction_1.BKActionType.BETS_MAKED] = this.onBetsMaked;
        this._types[BKAction_1.BKActionType.ROUND_SPIN] = this.onRoundSpin;
        this._gameTimer = new GameTimer_1.default();
        this._gameTimer.addUpdateCallback(this.roundTimer.updateValue, this.roundTimer);
        this._gameTimer.addUpdateCallback(this.updateTimerValue, this);
      };
      GameController.prototype.onActionHandler = function(action) {
        var callback = this._types[action.type];
        callback ? callback.call(this, action) : console.log("???");
      };
      GameController.prototype.onPlacesUpdated = function(action) {
        this.playersListPopup.addItems(action.data.places);
        this.userInfoPanel.addPlaces(action.data.places);
        this.playersAvatarsPanel.addPlaces(action.data.places);
        this.hostsPanel.addPlaces(action.data.places);
        this.playersAvatarsPanel.updatePlayersData();
        this.chipsView.disableChips(action.data.places[0].player.balance);
      };
      GameController.prototype.onPlacesRegistered = function(action) {
        this.updatBalance(this.currentPlayerData.playerInfo.balance);
      };
      GameController.prototype.onRoundStarted = function(action) {
        this._gameTimer.startTimer(action.data);
        this.chipsView.openBetting(this.currentPlayerBalance);
        this.currentPlayerRoundBet = 0;
      };
      GameController.prototype.onRoundUpdated = function(action) {
        var _this = this;
        this._gameTimer.startTimer(action.data);
        this.chipsView.openBetting(this.currentPlayerBalance);
        this.gameStatistics.updateStatistic(action.data.statistic);
        action.data.bets instanceof Array && action.data.bets.forEach(function(item) {
          _this.chipsView.spawnChip(item, false);
        });
      };
      GameController.prototype.onRoundComplete = function(action) {
        var _this = this;
        this.chipsView.clearChips();
        this.resultInfo.showResult(action.data.digits);
        this.playersListPopup.hide();
        this.gameStatistics.updateStatistic(action.data.statistic);
        var findedItem = null;
        var winning = 0;
        if (action.data.rewards instanceof Array) {
          findedItem = action.data.rewards.find(function(item) {
            return item.placeId == _this.currentPlayerData.placeId;
          });
          findedItem && (winning = findedItem.coins);
        }
        if (this.currentPlayerRoundBet > 0) {
          var win = winning - this.currentPlayerRoundBet;
          this.updatBalance(win > 0 ? win : 0);
          this.roundResultPopup.show(win);
        }
      };
      GameController.prototype.onRoundSpin = function(action) {
        this.resultInfo.showResult(action.data.digits);
      };
      GameController.prototype.onBetsMaked = function(action) {
        var _this = this;
        action.data.bets.forEach(function(item, index) {
          setTimeout(function() {
            _this.chipsView.spawnChip(item);
          }, 2e3 / action.data.bets.length * index);
        });
      };
      GameController.prototype.updateTimerValue = function(value) {
        var sss = this.resultInfo.node.parent.getChildByName("statistics");
        if (value > 8) {
          sss.active = true;
          this.resultInfo.node.active = false;
        }
        if (value <= 8) {
          sss.active = false;
          this.resultInfo.node.active = true;
          this.chipsView.closeBetting();
        }
        value <= 8 && value > 5 && this.resultInfo.hideResult();
      };
      GameController.prototype.updatBalance = function(value) {
        this.currentPlayerBalance += value;
        this.currentPlayerAvatarPanel.getChildByName("moneyValueLabel").getComponent(cc.Label).string = this.currentPlayerBalance.toString();
      };
      GameController.prototype.chipPlaced = function(data) {
        if (this.currentPlayerBalance - data.value >= 0) {
          this.currentPlayerRoundBet += data.value;
          this.updatBalance(-data.value);
          this.chipsView.openBetting(this.currentPlayerBalance);
          this._bkGame.chipPlaced(data);
        }
      };
      __decorate([ property(ChipsView_1.default) ], GameController.prototype, "chipsView", void 0);
      __decorate([ property(PlayersListPopup_1.default) ], GameController.prototype, "playersListPopup", void 0);
      __decorate([ property(UserInfoPanel_1.default) ], GameController.prototype, "userInfoPanel", void 0);
      __decorate([ property(PlayersAvatarsPanel_1.default) ], GameController.prototype, "playersAvatarsPanel", void 0);
      __decorate([ property(HostsPanel_1.default) ], GameController.prototype, "hostsPanel", void 0);
      __decorate([ property(RoundTimer_1.default) ], GameController.prototype, "roundTimer", void 0);
      __decorate([ property(ResultInfo_1.default) ], GameController.prototype, "resultInfo", void 0);
      __decorate([ property(RoundResultPopup_1.default) ], GameController.prototype, "roundResultPopup", void 0);
      __decorate([ property(GameStatistic_1.default) ], GameController.prototype, "gameStatistics", void 0);
      __decorate([ property(cc.Node) ], GameController.prototype, "currentPlayerAvatarPanel", void 0);
      GameController = __decorate([ ccclass ], GameController);
      return GameController;
    }(cc.Component);
    exports.default = GameController;
    cc._RF.pop();
  }, {
    "./BKGame": "BKGame",
    "./GameTimer": "GameTimer",
    "./core/BKAction": "BKAction",
    "./views/chips/ChipsView": "ChipsView",
    "./views/elements/RoundTimer": "RoundTimer",
    "./views/panels/HostsPanel": "HostsPanel",
    "./views/panels/PlayersAvatarsPanel": "PlayersAvatarsPanel",
    "./views/panels/UserInfoPanel": "UserInfoPanel",
    "./views/popups/PlayersListPopup": "PlayersListPopup",
    "./views/popups/RoundResultPopup": "RoundResultPopup",
    "./views/resultInfo/ResultInfo": "ResultInfo",
    "./views/statistics/GameStatistic": "GameStatistic"
  } ],
  GameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9053aDvLP9Oq5EXeEeBioCD", "GameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCoreBase = function() {
      function GameCoreBase() {
        this.waitLogicPromise = Promise.resolve(true);
        this.waitViewPromise = Promise.resolve(true);
      }
      GameCoreBase.prototype.init = function(logicAdapter, viewAdapter) {
        var _this = this;
        this.logicAdapter = logicAdapter;
        this.viewAdapters = [];
        this.addViewAdapter(viewAdapter);
        this.logicAdapter.registerActionDispatcher(function(action) {
          return _this.logicToViewActionHandler(action);
        });
      };
      GameCoreBase.prototype.addViewAdapter = function(viewAdapter) {
        var _this = this;
        this.viewAdapters.push(viewAdapter);
        viewAdapter.registerActionDispatcher(function(action) {
          return _this.viewToLogicActionHandler(action);
        });
      };
      GameCoreBase.prototype.start = function() {
        return __awaiter(this, void 0, Promise, function() {
          var i;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              i = 0;
              _a.label = 1;

             case 1:
              if (!(i < this.viewAdapters.length)) return [ 3, 4 ];
              return [ 4, this.viewAdapters[i].prepare() ];

             case 2:
              _a.sent();
              _a.label = 3;

             case 3:
              i++;
              return [ 3, 1 ];

             case 4:
              return [ 4, this.logicAdapter.prepare() ];

             case 5:
              _a.sent();
              this.logicAdapter.start();
              return [ 2 ];
            }
          });
        });
      };
      GameCoreBase.prototype.getCurrentPlayerInfo = function() {
        return this.logicAdapter.getCurrentPlayerInfo();
      };
      GameCoreBase.prototype.destroy = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, this.logicAdapter.destroy() ];

             case 1:
              _a.sent();
              this.logicAdapter = null;
              this.viewAdapters = [];
              return [ 2 ];
            }
          });
        });
      };
      GameCoreBase.prototype.viewToLogicActionHandler = function(action) {
        var _this = this;
        this.waitLogicPromise = this.waitLogicPromise.then(function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
               case 0:
                if (!(null != this.logicAdapter)) return [ 3, 2 ];
                return [ 4, this.logicAdapter.applyAction(action) ];

               case 1:
                return [ 2, _a.sent() ];

               case 2:
                return [ 2, true ];
              }
            });
          });
        });
        return this.waitLogicPromise;
      };
      GameCoreBase.prototype.logicToViewActionHandler = function(action) {
        var _this = this;
        this.viewAdapters.forEach(function(value) {
          _this.waitLogicPromise = _this.waitViewPromise.then(function() {
            return value.applyAction(action);
          });
        });
        return this.waitLogicPromise;
      };
      Object.defineProperty(GameCoreBase.prototype, "currentTime", {
        get: function() {
          return this.logicAdapter.currentTime();
        },
        enumerable: true,
        configurable: true
      });
      return GameCoreBase;
    }();
    exports.GameCoreBase = GameCoreBase;
    cc._RF.pop();
  }, {} ],
  GameModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0389asdWbNLt4HunDtWr6Qq", "GameModel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameModel = function() {
      function GameModel() {}
      return GameModel;
    }();
    exports.default = GameModel;
    cc._RF.pop();
  }, {} ],
  GameScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6fea0rrH1ClZGX1hCsMTe0", "GameScene");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../../../common/core/Logger");
    var sceneActions_1 = require("../../../common/store/sceneActions");
    var Component_1 = require("../../../common/component/Component");
    var connect_1 = require("../../../common/core/redux-connect/connect/connect");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var mapStateToProps = function(state) {
      return {
        name: "GameScene",
        scene: state.sceneState.current
      };
    };
    var mapDispatchToProps = __assign({}, sceneActions_1.SceneActions);
    var GameScene = function(_super) {
      __extends(GameScene, _super);
      function GameScene() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.onBackButtonPress = function() {
          logger.info("onBackButtonPress");
          _this.props.scenePop();
        };
        return _this;
      }
      GameScene.prototype.checkOrientation = function() {
        if (cc.sys.isNative) {
          cc.view.setDesignResolutionSize(640, 1136, cc.ResolutionPolicy.SHOW_ALL);
          "landscape" === this._config.orientation && (this.content.rotation = -90);
        } else if ("portrait" === this._config.orientation) {
          cc.view.setOrientation(cc.macro.ORIENTATION_PORTRAIT);
          var currentSize = cc.view.getFrameSize();
          logger.log("Current size: " + currentSize.width + " x " + currentSize.height);
          if (currentSize.width > currentSize.height) {
            logger.log("Swap size to: " + currentSize.height + " x " + currentSize.width);
            cc.view.setFrameSize(currentSize.height, currentSize.width);
          }
          cc.view.setDesignResolutionSize(640, 1136, cc.ResolutionPolicy.SHOW_ALL);
        } else {
          cc.view.setOrientation(cc.macro.ORIENTATION_LANDSCAPE);
          var currentSize = cc.view.getFrameSize();
          logger.log("Current size: " + currentSize.width + " x " + currentSize.height);
          if (currentSize.width < currentSize.height) {
            logger.log("Swap size to: " + currentSize.height + " x " + currentSize.width);
            cc.view.setFrameSize(currentSize.height, currentSize.width);
          }
          cc.view.setDesignResolutionSize(1136, 640, cc.ResolutionPolicy.SHOW_ALL);
        }
      };
      GameScene.prototype.start = function() {
        null != this.props.scene && null != this.props.scene.params && null != this.props.scene.params.config && (this._config = this.props.scene.params.config);
        null != this._config && this.checkOrientation();
      };
      __decorate([ property(cc.Node) ], GameScene.prototype, "content", void 0);
      GameScene = __decorate([ ccclass, connect_1.connect(mapStateToProps, mapDispatchToProps) ], GameScene);
      return GameScene;
    }(Component_1.default);
    exports.default = GameScene;
    var logger = Logger_1.default.getLogger(GameScene);
    cc._RF.pop();
  }, {
    "../../../common/component/Component": "Component",
    "../../../common/core/Logger": "Logger",
    "../../../common/core/redux-connect/connect/connect": "connect",
    "../../../common/store/sceneActions": "sceneActions"
  } ],
  GameStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b396XKlS9PhZT5EYE8s1DO", "GameStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersonalStatistic_1 = require("./PersonalStatistic");
    var ResultsStatistic_1 = require("./ResultsStatistic");
    var RoadmapStatistic_1 = require("./RoadmapStatistic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameStatistic = function(_super) {
      __extends(GameStatistic, _super);
      function GameStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._result = null;
        _this._roadmapBigSmall1 = null;
        _this._roadmapBigSmall2 = null;
        _this._roadmapBigSmall3 = null;
        _this._roadmapBigSmall4 = null;
        _this._roadmapBigSmall5 = null;
        _this._roadmapEvenOdd1 = null;
        _this._roadmapEvenOdd2 = null;
        _this._roadmapEvenOdd3 = null;
        _this._roadmapEvenOdd4 = null;
        _this._roadmapEvenOdd5 = null;
        _this._personal = null;
        return _this;
      }
      GameStatistic.prototype.start = function() {
        this._result = this.node.getChildByName("Result").getComponent(ResultsStatistic_1.default);
        this._roadmapBigSmall1 = this.node.getChildByName("RoadmapBigSmall").getChildByName("1").getComponent(RoadmapStatistic_1.default);
        this._roadmapBigSmall2 = this.node.getChildByName("RoadmapBigSmall").getChildByName("2").getComponent(RoadmapStatistic_1.default);
        this._roadmapBigSmall3 = this.node.getChildByName("RoadmapBigSmall").getChildByName("3").getComponent(RoadmapStatistic_1.default);
        this._roadmapBigSmall4 = this.node.getChildByName("RoadmapBigSmall").getChildByName("4").getComponent(RoadmapStatistic_1.default);
        this._roadmapBigSmall5 = this.node.getChildByName("RoadmapBigSmall").getChildByName("5").getComponent(RoadmapStatistic_1.default);
        this._roadmapEvenOdd1 = this.node.getChildByName("RoadmapEvenOdd").getChildByName("1").getComponent(RoadmapStatistic_1.default);
        this._roadmapEvenOdd2 = this.node.getChildByName("RoadmapEvenOdd").getChildByName("2").getComponent(RoadmapStatistic_1.default);
        this._roadmapEvenOdd3 = this.node.getChildByName("RoadmapEvenOdd").getChildByName("3").getComponent(RoadmapStatistic_1.default);
        this._roadmapEvenOdd4 = this.node.getChildByName("RoadmapEvenOdd").getChildByName("4").getComponent(RoadmapStatistic_1.default);
        this._roadmapEvenOdd5 = this.node.getChildByName("RoadmapEvenOdd").getChildByName("5").getComponent(RoadmapStatistic_1.default);
        this._personal = this.node.getChildByName("Personal").getComponent(PersonalStatistic_1.default);
      };
      GameStatistic.prototype.updateStatistic = function(data) {
        this._result.updateStatistic(data.lastDigits);
        this._roadmapBigSmall1.updateStatistic(data.bigOrSmall, true);
        this._roadmapBigSmall2.updateStatistic(data.bigOrSmall);
        this._roadmapBigSmall3.updateStatistic(data.bigOrSmall);
        this._roadmapBigSmall4.updateStatistic(data.bigOrSmall);
        this._roadmapBigSmall5.updateStatistic(data.bigOrSmall);
        this._roadmapEvenOdd1.updateStatistic(data.oddOrEven, true);
        this._roadmapEvenOdd2.updateStatistic(data.oddOrEven);
        this._roadmapEvenOdd3.updateStatistic(data.oddOrEven);
        this._roadmapEvenOdd4.updateStatistic(data.oddOrEven);
        this._roadmapEvenOdd5.updateStatistic(data.oddOrEven);
        this._personal.updateStatistic(data.personal);
      };
      GameStatistic = __decorate([ ccclass ], GameStatistic);
      return GameStatistic;
    }(cc.Component);
    exports.default = GameStatistic;
    cc._RF.pop();
  }, {
    "./PersonalStatistic": "PersonalStatistic",
    "./ResultsStatistic": "ResultsStatistic",
    "./RoadmapStatistic": "RoadmapStatistic"
  } ],
  GameTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6cedbkADz9IdoI9ngAwcdCF", "GameTimer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameTimer = function() {
      function GameTimer() {
        this._timerTimeout = null;
        this._updateCallbacks = null;
        this._leftTime = 0;
        this._updateCallbacks = [];
      }
      GameTimer.prototype.start = function() {};
      GameTimer.prototype.startTimer = function(data) {
        var time = (data.roundCompleteTime - data.currentTime) / 1e3;
        if (time < 0) return;
        var delay = 1e3 * (time - Math.floor(time));
        this._leftTime = Math.ceil(time);
        this.callUpdateCallbacks(this._leftTime);
        this.startTimerForNewValue(0 == delay ? 1e3 : delay);
      };
      GameTimer.prototype.startTimerForNewValue = function(delay) {
        var _this = this;
        void 0 === delay && (delay = 1e3);
        clearInterval(this._timerTimeout);
        this._timerTimeout = setTimeout(function() {
          _this._leftTime--;
          _this.callUpdateCallbacks(_this._leftTime);
          if (0 == _this._leftTime) {
            clearInterval(_this._timerTimeout);
            _this._timerTimeout = null;
          } else _this.startTimerForNewValue();
        }, delay);
      };
      GameTimer.prototype.addUpdateCallback = function(callback, context) {
        this._updateCallbacks.push({
          callback: callback,
          context: context
        });
      };
      GameTimer.prototype.removeUpdateCallback = function(callback, context) {};
      GameTimer.prototype.callUpdateCallbacks = function(data) {
        this._updateCallbacks.forEach(function(item) {
          item.callback.call(item.context, data);
        });
      };
      Object.defineProperty(GameTimer.prototype, "leftTime", {
        get: function() {
          return this._leftTime;
        },
        enumerable: true,
        configurable: true
      });
      GameTimer = __decorate([ ccclass ], GameTimer);
      return GameTimer;
    }();
    exports.default = GameTimer;
    cc._RF.pop();
  }, {} ],
  GameViewComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbfffuxy/JCc6KFNZsVXpVz", "GameViewComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../../../common/core/Logger");
    var connect_1 = require("../../../common/core/redux-connect/connect/connect");
    var Component_1 = require("../../../common/component/Component");
    var mainActions_1 = require("../mainActions");
    var assetsActions_1 = require("../../../common/store/assetsActions");
    var assets_1 = require("../../../common/store/reducers/assets");
    var Config_1 = require("../../../common/config/Config");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var mapStateToProps = function(state) {
      return {
        name: "GameViewComponent",
        games: state.main.modelState.games,
        assets: Object.values(state.assets).reduce(function(result, item) {
          var _a;
          if (item.type === assets_1.AssetType.SCENE) return __assign({}, result, (_a = {}, 
          _a[item.name] = item, _a));
          return result;
        }, {})
      };
    };
    var mapDispatchToProps = {
      updateGameState: mainActions_1.MainActions.updateGameState,
      assetLoad: assetsActions_1.AssetsActions.assetLoad
    };
    var GameViewComponent = function(_super) {
      __extends(GameViewComponent, _super);
      function GameViewComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.gameIcon = [];
        _this.load = null;
        _this._gamecodeToIndexGameIcon = [ Config_1.GameCode.BRAG, Config_1.GameCode.BLACK_JACK, Config_1.GameCode.SPIN, Config_1.GameCode.SIDES, Config_1.GameCode.DOU_DIZHU, Config_1.GameCode.TEXAS_HOLDEM, Config_1.GameCode.LOTTERY, Config_1.GameCode.PK10 ];
        return _this;
      }
      GameViewComponent.prototype.setup = function(config, buttonHandler) {
        logger.log("setup: " + config.code);
        this._config = config;
        this._buttonHandler = buttonHandler;
      };
      GameViewComponent.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        logger.log("onLoad");
        this.updateButton();
      };
      GameViewComponent.prototype.start = function() {
        logger.log("start");
      };
      GameViewComponent.prototype.updateButton = function() {
        if (null == this._config.scene) return;
        var mainSceneAsset = this.props.assets[this._config.scene] || {
          loaded: false,
          progress: 0
        };
        var selectTableSceneAsset = null != this._config.selectTableScene ? this.props.assets[this._config.selectTableScene] || {
          loaded: false,
          progress: 0
        } : {
          loaded: true,
          progress: 1
        };
        var loaded = mainSceneAsset.loaded && selectTableSceneAsset.loaded;
        var loading = mainSceneAsset.loading || selectTableSceneAsset.loading;
        this.load.getChildByName("load").active = !loaded || loading;
        this.load.getChildByName("play").active = loaded;
        this.load.getChildByName("loading").active = loading;
        if (loading) {
          this.load.getChildByName("loading").active = true;
          var raw = (mainSceneAsset.progress + selectTableSceneAsset.progress) / 2;
          this.load.getChildByName("loading").getChildByName("mask").anchorY = .1 + 1 * Math.max(Math.min(raw, 1), 0);
        }
        this.gameIcon.forEach(function(item) {
          item && (item.active = false);
        });
        var index = this._gamecodeToIndexGameIcon.indexOf(this._config.code);
        if (index >= 0 && index < this.gameIcon.length && this.gameIcon[index]) {
          var node = this.gameIcon[index];
          node.active = true;
          var label = node.getComponentInChildren(cc.Label);
          label.string = this._config.name;
        }
      };
      Object.defineProperty(GameViewComponent.prototype, "gameState", {
        get: function() {
          var _this = this;
          return this.props.games.find(function(value) {
            return value.config.code === _this._config.code;
          });
        },
        enumerable: true,
        configurable: true
      });
      GameViewComponent.prototype.onButtonPress = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        logger.log("onButtonPress");
        var mainSceneAsset = this.props.assets[this._config.scene] || {
          loaded: false,
          progress: 0
        };
        var selectTableSceneAsset = null != this._config.selectTableScene ? this.props.assets[this._config.selectTableScene] || {
          loaded: false,
          progress: 0
        } : {
          loaded: true,
          progress: 1
        };
        var loaded = mainSceneAsset.loaded && selectTableSceneAsset.loaded;
        var loading = mainSceneAsset.loading || selectTableSceneAsset.loading;
        if (true === loaded) this._buttonHandler(this._config); else if (!loading) {
          this.props.assetLoad(this._config.scene, assets_1.AssetType.SCENE);
          null != this._config.selectTableScene && this.props.assetLoad(this._config.selectTableScene, assets_1.AssetType.SCENE);
        }
      };
      GameViewComponent.prototype.componentReceivedProps = function(oldProps) {
        this.updateButton();
      };
      GameViewComponent.prototype.onDestroy = function() {};
      __decorate([ property([ cc.Node ]) ], GameViewComponent.prototype, "gameIcon", void 0);
      __decorate([ property(cc.Node) ], GameViewComponent.prototype, "load", void 0);
      GameViewComponent = __decorate([ ccclass, connect_1.connect(mapStateToProps, mapDispatchToProps) ], GameViewComponent);
      return GameViewComponent;
    }(Component_1.default);
    exports.default = GameViewComponent;
    var logger = Logger_1.default.getLogger(GameViewComponent);
    cc._RF.pop();
  }, {
    "../../../common/component/Component": "Component",
    "../../../common/config/Config": "Config",
    "../../../common/core/Logger": "Logger",
    "../../../common/core/redux-connect/connect/connect": "connect",
    "../../../common/store/assetsActions": "assetsActions",
    "../../../common/store/reducers/assets": "assets",
    "../mainActions": "mainActions"
  } ],
  HighCardCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "181eaMm01VOeZCtSRJESO/9", "HighCardCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var HighCardCombination = function(_super) {
      __extends(HighCardCombination, _super);
      function HighCardCombination() {
        var _this = _super.call(this, HighCardCombination.NAME) || this;
        _this._config = [ [ [ [ "*" ], [ "*" ] ] ] ];
        _this.parseCombinationConfig(_this._config);
        return _this;
      }
      HighCardCombination.NAME = "HIGH CARD";
      return HighCardCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.HighCardCombination = HighCardCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  HostsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5352bOA8WBO7qqN9nsEYXq1", "HostsPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HostsPanel = function(_super) {
      __extends(HostsPanel, _super);
      function HostsPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.name1 = null;
        _this.name2 = null;
        _this.name3 = null;
        _this.name4 = null;
        _this.name5 = null;
        _this.appleHostNode = null;
        _this.showHostBtn = null;
        _this.hideHostBtn = null;
        _this._places = [];
        return _this;
      }
      HostsPanel.prototype.show = function(event) {
        this.node.active = true;
        this.name1.string = this._places[0].player.name;
        this.name2.string = this._places[1].player.name;
        this.name3.string = this._places[2].player.name;
        this.name4.string = this._places[3].player.name;
        this.name5.string = this._places[4].player.name;
        this.appleHostNode.getComponent(cc.Sprite).enabled = false;
      };
      HostsPanel.prototype.hide = function(event) {
        this.node.active = false;
        this.appleHostNode.getComponent(cc.Sprite).enabled = true;
      };
      HostsPanel.prototype.addPlaces = function(data) {
        this._places = data;
      };
      __decorate([ property(cc.Label) ], HostsPanel.prototype, "name1", void 0);
      __decorate([ property(cc.Label) ], HostsPanel.prototype, "name2", void 0);
      __decorate([ property(cc.Label) ], HostsPanel.prototype, "name3", void 0);
      __decorate([ property(cc.Label) ], HostsPanel.prototype, "name4", void 0);
      __decorate([ property(cc.Label) ], HostsPanel.prototype, "name5", void 0);
      __decorate([ property(cc.Node) ], HostsPanel.prototype, "appleHostNode", void 0);
      __decorate([ property(cc.SpriteFrame) ], HostsPanel.prototype, "showHostBtn", void 0);
      __decorate([ property(cc.SpriteFrame) ], HostsPanel.prototype, "hideHostBtn", void 0);
      HostsPanel = __decorate([ ccclass ], HostsPanel);
      return HostsPanel;
    }(cc.Component);
    exports.default = HostsPanel;
    cc._RF.pop();
  }, {} ],
  ISoundManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12e2dKbhZVN9ZCEYpNc/0uC", "ISoundManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  ISoundPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c184bywWRRH74ZEWsdeXlIm", "ISoundPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  LabelHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9fad45a8d5Mo70z9U3lpMYR", "LabelHelper");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DebugHelpers_1 = require("./DebugHelpers");
    function fitFontSize(label, text, maxWidth) {
      label.string = text;
      updateWidthLabel(label);
      if (label.node.width > maxWidth) {
        label.enableWrapText = true;
        updateWidthLabel(label);
        while (label.node.width > maxWidth) label.fontSize--;
      }
      return Math.min(maxWidth, label.node.width);
    }
    exports.fitFontSize = fitFontSize;
    function bendLabel(value, config) {
      var parent = config.parent;
      var Radius = config.radius;
      var offsetY = config.offset_y;
      var offsetX = config.offset_x;
      var prefab = config.label_prefab;
      var notNativeVersion = void 0 !== config.not_native && null != config.not_native;
      var with\u0421oefficient = 1;
      var node = cc.instantiate(prefab);
      var label = node.getComponent(cc.Label);
      label.string = value;
      parent.addChild(node);
      updateWidthLabel(label);
      var width = label.node.width;
      if (notNativeVersion && !cc.sys.isNative) {
        var inc = label.node.height / 2;
        null != config.not_native.radius_with_height && (Radius += inc);
        null != config.not_native.offset_y_with_height && (offsetY -= inc / 2);
        null != config.not_native.offset_y && (offsetY += config.not_native.offset_y);
        null != config.not_native.with_coefficient && (with\u0421oefficient = config.not_native.with_coefficient);
      }
      width *= with\u0421oefficient;
      var circleLength = 6.28318 * Radius;
      node.destroy();
      var arc = width / circleLength * 360;
      var arcRadian = cc.misc.degreesToRadians(arc);
      var angle = arcRadian / 2;
      config.debug_circle && DebugHelpers_1.debugCircle(parent, offsetX, offsetY, Radius);
      for (var index = 0; index < value.length; index++) {
        var node_1 = cc.instantiate(prefab);
        var label_1 = node_1.getComponent(cc.Label);
        label_1.string = value.substr(index, 1);
        parent.addChild(node_1);
        updateWidthLabel(label_1);
        var incRad = label_1.node.width * with\u0421oefficient / width * arcRadian;
        var angleCurrent = angle - incRad / 2;
        var x = 0;
        var y = Radius;
        var xT = x * Math.cos(angleCurrent) - y * Math.sin(angleCurrent);
        var yT = x * Math.sin(angleCurrent) + y * Math.cos(angleCurrent);
        node_1.x = offsetX + xT;
        node_1.y = yT - y - offsetY;
        label_1.node.rotation = cc.misc.radiansToDegrees(-angleCurrent);
        angle -= incRad;
      }
    }
    exports.bendLabel = bendLabel;
    function updateWidthLabel(label) {
      if (void 0 === label || null == label || void 0 === label.string || null == label.string || 0 === label.string.length) return;
      var updateRenderData = label["_updateRenderData"].bind(label);
      var updateAssembler = label["_updateAssembler"];
      updateRenderData && null != updateAssembler && void 0 !== updateAssembler && updateRenderData(true);
    }
    cc._RF.pop();
  }, {
    "./DebugHelpers": "DebugHelpers"
  } ],
  LoadingWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec0f6V5AxxJF7Lhk0KL9rOc", "LoadingWindow");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseWindow_1 = require("./BaseWindow");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadingWindow = function(_super) {
      __extends(LoadingWindow, _super);
      function LoadingWindow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressMaskObject = null;
        _this.progressNode = null;
        return _this;
      }
      LoadingWindow.prototype.init = function() {
        this.node.getComponent(cc.Widget).target = this.customParams.widgetTarget;
      };
      LoadingWindow.prototype.update = function(dt) {
        var progers = this.customParams.progerssFunc();
        this.progressMaskObject.width = 2 * this.progressNode.width * progers;
      };
      Object.defineProperty(LoadingWindow.prototype, "customParams", {
        get: function() {
          return this._params.customParams;
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Node) ], LoadingWindow.prototype, "progressMaskObject", void 0);
      __decorate([ property(cc.Node) ], LoadingWindow.prototype, "progressNode", void 0);
      LoadingWindow = __decorate([ ccclass ], LoadingWindow);
      return LoadingWindow;
    }(BaseWindow_1.default);
    exports.LoadingWindow = LoadingWindow;
    cc._RF.pop();
  }, {
    "./BaseWindow": "BaseWindow"
  } ],
  Logger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d4d8KLz95AKYpoiSJzx5kb", "Logger");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger = function() {
      function Logger(target) {
        this._target = "string" === typeof target ? target : "function" === typeof target ? target.name : target.constructor.name;
      }
      Logger.getLogger = function(target) {
        return new Logger(target);
      };
      Logger.prototype.log = function(message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        var mainMessage = "[" + this._target + "] " + message;
        if (cc.sys.isBrowser) console.log.apply(this, [ mainMessage ].concat(args)); else {
          var extraMessage = args.map(function(value) {
            return JSON.stringify(value);
          }).join("\n  ");
          null != extraMessage && extraMessage.length > 0 ? cc.log(mainMessage + "\n  " + extraMessage) : cc.log(mainMessage);
        }
      };
      Logger.prototype.info = function(message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        var mainMessage = "[" + this._target + "] " + message;
        if (cc.sys.isBrowser) console.info.apply(this, [ mainMessage ].concat(args)); else {
          var extraMessage = args.map(function(value) {
            return JSON.stringify(value);
          }).join("\n  ");
          null != extraMessage && extraMessage.length > 0 ? cc.log(mainMessage + "\n  " + extraMessage) : cc.log(mainMessage);
        }
      };
      Logger.prototype.error = function(message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        var mainMessage = "[" + this._target + "] ERROR: " + message;
        if (cc.sys.isBrowser) console.error.apply(this, [ mainMessage ].concat(args)); else {
          var extraMessage = args.map(function(value) {
            return JSON.stringify(value);
          }).join("\n  ");
          null != extraMessage && extraMessage.length > 0 ? cc.error(mainMessage + "\n  " + extraMessage) : cc.error(mainMessage);
        }
      };
      return Logger;
    }();
    exports.default = Logger;
    cc._RF.pop();
  }, {} ],
  Main: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b589CH6StCCYqDcidVJV0r", "Main");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var commonTypes_1 = require("./commonTypes");
    var ServerController_1 = require("./server/ServerController");
    var Logger_1 = require("./core/Logger");
    var Base64_1 = require("Base64");
    var store_1 = require("./store");
    var mainActions_1 = require("../main/Script/mainActions");
    var uuid_1 = require("uuid");
    var faker = require("faker/locale/en");
    var Component_1 = require("./component/Component");
    var connect_1 = require("./core/redux-connect/connect/connect");
    var AssetsController_1 = require("./core/AssetsController");
    var SceneController_1 = require("./core/SceneController");
    var sceneActions_1 = require("./store/sceneActions");
    var AvatarIcon_1 = require("./component/AvatarIcon");
    var _a = cc._decorator, ccclass = _a.ccclass, executionOrder = _a.executionOrder, property = _a.property;
    var mapStateToProps = function(state) {
      return {
        loaded: state.main.sessionState.loaded,
        loading: state.main.sessionState.loading
      };
    };
    var mapDispatchToProps = __assign({}, mainActions_1.MainActions);
    var Main = function(_super) {
      __extends(Main, _super);
      function Main() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Main.prototype.onLoad = function() {
        return __awaiter(this, void 0, void 0, function() {
          var storeState, name;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              cc.debug.setDisplayStats(false);
              this.props.applicationInitializing();
              cc.game.addPersistRootNode(this.node);
              null == window.btoa && (window.btoa = Base64_1.btoa);
              null == window.atob && (window.atob = Base64_1.atob);
              this.assetsController = new AssetsController_1.default();
              this.assetsController.init();
              this.sceneController = new SceneController_1.default();
              this.sceneController.init();
              store_1.default.dispatch(sceneActions_1.SceneActions.sceneResetTo("Application", {}));
              return [ 4, store_1.default.loadStore() ];

             case 1:
              _a.sent();
              this.props.updateSession();
              storeState = store_1.default.getState();
              logger.log("Store loaded: " + JSON.stringify(storeState));
              if ("" === storeState.main.applicationState.uuid) {
                name = faker.name.findName().replace(/[^\w\d]/, "");
                this.props.createPlayer(uuid_1.v4(), name, AvatarIcon_1.default.randomAvatar(), Math.random() > .5 ? commonTypes_1.Gender.MALE : commonTypes_1.Gender.FEMALE);
              }
              if (null == storeState.main.applicationState.avatarId) {
                this.props.updatePlayer({
                  avatarId: AvatarIcon_1.default.randomAvatar()
                });
                logger.log("Reinit existing player avatar");
              }
              if (null == storeState.main.applicationState.gender) {
                this.props.updatePlayer({
                  gender: commonTypes_1.Gender.MALE
                });
                logger.log("Reinit existing player gender");
              }
              return [ 4, ServerController_1.default.instance.connect() ];

             case 2:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      Main.prototype.start = function() {
        this.props.applicationStarted();
      };
      Main.prototype.componentReceivedProps = function(oldProps) {
        logger.log("componentReceivedProps: old = " + JSON.stringify(oldProps) + ", new = " + JSON.stringify(this.props));
      };
      Main.prototype.onDestroy = function() {
        this.assetsController.destroy();
        this.sceneController.destroy();
      };
      Main = __decorate([ ccclass, executionOrder(-100500), connect_1.connect(mapStateToProps, mapDispatchToProps) ], Main);
      return Main;
    }(Component_1.default);
    exports.default = Main;
    var logger = Logger_1.default.getLogger("Main");
    cc._RF.pop();
  }, {
    "../main/Script/mainActions": "mainActions",
    "./commonTypes": "commonTypes",
    "./component/AvatarIcon": "AvatarIcon",
    "./component/Component": "Component",
    "./core/AssetsController": "AssetsController",
    "./core/Logger": "Logger",
    "./core/SceneController": "SceneController",
    "./core/redux-connect/connect/connect": "connect",
    "./server/ServerController": "ServerController",
    "./store": "index",
    "./store/sceneActions": "sceneActions",
    Base64: 2,
    "faker/locale/en": 114,
    uuid: 136
  } ],
  PKAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb351VyK4FOYIykw+vcetgW", "PKAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKActionType;
    (function(PKActionType) {
      PKActionType[PKActionType["PREPARE_FOR_ROUND"] = 0] = "PREPARE_FOR_ROUND";
      PKActionType[PKActionType["READY_FOR_NEXT_ACTION"] = 1] = "READY_FOR_NEXT_ACTION";
      PKActionType[PKActionType["ROUND_COMPLETE"] = 2] = "ROUND_COMPLETE";
      PKActionType[PKActionType["REGISTER_PLACE"] = 3] = "REGISTER_PLACE";
      PKActionType[PKActionType["DROP_PLACE"] = 4] = "DROP_PLACE";
      PKActionType[PKActionType["MAKE_BET"] = 5] = "MAKE_BET";
      PKActionType[PKActionType["GAME_OVER"] = 6] = "GAME_OVER";
      PKActionType[PKActionType["PLACES_UPDATED"] = 7] = "PLACES_UPDATED";
      PKActionType[PKActionType["BETS_MAKED"] = 8] = "BETS_MAKED";
      PKActionType[PKActionType["ROUND_STARTED"] = 9] = "ROUND_STARTED";
      PKActionType[PKActionType["ROUND_UPDATED"] = 10] = "ROUND_UPDATED";
      PKActionType[PKActionType["ROUND_SPIN"] = 11] = "ROUND_SPIN";
    })(PKActionType = exports.PKActionType || (exports.PKActionType = {}));
    cc._RF.pop();
  }, {} ],
  PKCenterPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9ba3M8YeNLL7Vl/dPqcMSk", "PKCenterPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKCenterPanel = function(_super) {
      __extends(PKCenterPanel, _super);
      function PKCenterPanel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PKCenterPanel.prototype.hideBetSign = function() {
        this.node.getChildByName("place-bet").active = false;
      };
      PKCenterPanel.prototype.showBetSign = function() {
        this.node.getChildByName("place-bet").active = true;
      };
      PKCenterPanel = __decorate([ ccclass ], PKCenterPanel);
      return PKCenterPanel;
    }(cc.Component);
    exports.default = PKCenterPanel;
    cc._RF.pop();
  }, {} ],
  PKChipView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36cafQT70hDq7VVcdC+LIEa", "PKChipView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKChipView = function(_super) {
      __extends(PKChipView, _super);
      function PKChipView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.value = "";
        _this._moveItUp = false;
        _this._moveItDown = false;
        _this._movementSpeed = 100;
        return _this;
      }
      PKChipView.prototype.start = function() {};
      PKChipView.prototype.clickHandler = function(direction) {
        void 0 === direction && (direction = "");
        if ("Down" === direction) {
          this._moveItDown = true;
          this._moveItUp = false;
          this.node.getChildByName("glow").active = false;
        } else {
          this._moveItUp = true;
          this._moveItDown = false;
          false === this.node.getChildByName("glow").active && (this.node.getChildByName("glow").active = true);
        }
      };
      PKChipView.prototype.update = function(dt) {
        this._moveItUp && (this.node.position.y >= 20 ? this._moveItUp = false : this.node.setPosition(this.node.position.x, this.node.position.y += this._movementSpeed * dt));
        if (this._moveItDown) if (this.node.position.y <= 0) {
          this.node.position.y = 0;
          this._moveItDown = false;
        } else this.node.setPosition(this.node.position.x, this.node.position.y -= this._movementSpeed * dt);
      };
      PKChipView.prototype.stopAnimation = function() {
        this._moveItUp = false;
        this._moveItDown = false;
      };
      __decorate([ property ], PKChipView.prototype, "value", void 0);
      PKChipView = __decorate([ ccclass ], PKChipView);
      return PKChipView;
    }(cc.Toggle);
    exports.default = PKChipView;
    cc._RF.pop();
  }, {} ],
  PKChipsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9437bUO5iNJDIJe3a0U5veK", "PKChipsView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var gsap_1 = require("gsap");
    var PKChipView_1 = require("./PKChipView");
    var PKPool_1 = require("../../utils/PKPool");
    var PKGame_1 = require("../../PKGame");
    var SoundManager_1 = require("../../../../../common/managers/sound/SoundManager");
    var PKSounds_1 = require("./../../PKSounds");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKChipsView = function(_super) {
      __extends(PKChipsView, _super);
      function PKChipsView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._gameChips = null;
        _this._chipSize = 110;
        _this._globalChipsCount = 0;
        _this._gapBetweenChips = 0;
        _this._tweenChipsContent = null;
        _this._chipsAmountContentVisibled = 4;
        _this._selectedChip = null;
        _this._selectedChipIndex = -1;
        _this.Chip = null;
        _this.chips = [];
        _this.content = null;
        _this.chipsAtlas = null;
        _this.scrollView = null;
        _this.gameField = null;
        return _this;
      }
      PKChipsView.prototype.start = function() {
        var _this = this;
        this._gameChips = [ 5, 10, 50, 100, 500, 1e3, 2e3, 5e3 ];
        this.pool = new PKPool_1.default(false, 50);
        this.pool.poolOutCallback = this.onPoolOut.bind(this);
        this.pool.poolEmptyCallback = this.onPoolEmpty.bind(this);
        this.pool.poolResetCallback = this.onPoolReset.bind(this);
        for (var i = 0; i < 50; i++) {
          var chip = cc.instantiate(this.Chip);
          this.pool.poolIn(chip);
        }
        this.scrollView.node.on("scroll-ended", this.touchScrollEnd, this);
        this.chips.forEach(function(chip) {
          chip.node.on("toggle", function(data) {
            _this._selectedChip = data.isChecked ? data : null;
            null != _this._selectedChipIndex && _this._selectedChipIndex > -1 && _this.chips[_this._selectedChipIndex].clickHandler("Down");
            _this._selectedChipIndex = _this.chips.indexOf(_this._selectedChip);
            _this._selectedChipIndex > -1 && _this.chips[_this._selectedChipIndex].clickHandler();
          });
        });
        this._chipSize = this.chips[0].node.width;
        this.arrageChips();
        this.openBetting();
      };
      PKChipsView.prototype.arrageChips = function() {
        var _this = this;
        var xx = 0;
        this.chips.forEach(function(chip) {
          chip.node.x = xx + _this._chipSize / 2;
          xx += _this._chipSize + _this._gapBetweenChips;
        });
      };
      PKChipsView.prototype.closeBetting = function() {
        var _this = this;
        this._selectedChip && (this._selectedChipIndex = this.chips.indexOf(this._selectedChip));
        this._selectedChip = null;
        this._gameChips.forEach(function(item, index) {
          _this.chips[index].stopAnimation();
          index == _this._selectedChipIndex && _this.chips[_this._selectedChipIndex].clickHandler("Down");
          _this.chips[index].isChecked = false;
          _this.chips[index].interactable = false;
        });
      };
      PKChipsView.prototype.openBetting = function(balance) {
        this.disableChips(void 0 != balance ? balance : PKGame_1.default.gameCore.getCurrentPlayerInfo().balance);
        if (-1 != this._selectedChipIndex && balance >= +this.chips[this._selectedChipIndex].value) {
          this._selectedChip = this.chips[this._selectedChipIndex];
          this.chips[this._selectedChipIndex].isChecked = true;
          this.chips[this._selectedChipIndex].clickHandler();
        }
      };
      PKChipsView.prototype.disableChips = function(value) {
        var _this = this;
        this._gameChips.forEach(function(item, index) {
          _this.chips[index].interactable = item <= value;
          if (!_this.chips[index].interactable) {
            _this.chips[index].isChecked = false;
            if (_this.chips[index] == _this._selectedChip) {
              _this._selectedChipIndex = index;
              _this._selectedChip = null;
            }
          }
        });
      };
      PKChipsView.prototype.clearChips = function() {
        this.moveOutside();
      };
      PKChipsView.prototype.moveOutside = function() {
        var _this = this;
        var points = [];
        for (var i = 0; i < 100; i++) {
          var newAngle = this.getRandomInt(0, 360);
          var newX = 700 * Math.cos(newAngle);
          var newY = 700 * Math.sin(newAngle);
          points.push({
            x: newX,
            y: newY
          });
        }
        this.pool.poolArray.forEach(function(item, index) {
          var point = points[_this.getRandomInt(0, points.length - 1)];
          gsap_1.TweenMax.to(item, .5, {
            x: point.x,
            y: point.y + 150,
            onComplete: _this.onOutsideTweenComplete,
            onCompleteParams: [ index ],
            onCompleteScope: _this
          });
        });
      };
      PKChipsView.prototype.onOutsideTweenComplete = function(index) {
        index == this.pool.poolArray.length - 1 && this.pool.reset();
      };
      PKChipsView.prototype.arrowsHandler = function(event, customEventData) {
        if (this._tweenChipsContent) return;
        var chipsNumber = this._globalChipsCount + Number(customEventData);
        this.moveContentBy(chipsNumber);
      };
      PKChipsView.prototype.touchScrollEnd = function(event, customEventData) {
        if (this._tweenChipsContent) return;
        var dx = Math.abs(this.content.x / (this._chipSize + this._gapBetweenChips));
        var chipsNumber = Math.round(dx);
        this.moveContentBy(chipsNumber);
      };
      PKChipsView.prototype.moveContentBy = function(count) {
        this._globalChipsCount = count;
        this._globalChipsCount < 0 && (this._globalChipsCount = 0);
        this._globalChipsCount > 1 && (this._globalChipsCount = 1);
        var positionX = 4 * this._globalChipsCount * (this._chipSize + this._gapBetweenChips);
        this._tweenChipsContent = gsap_1.TweenMax.to(this.content, .2, {
          x: -positionX,
          onComplete: function() {
            this._tweenChipsContent = null;
          },
          onCompleteScope: this
        });
      };
      PKChipsView.prototype.flyChipTo = function(event) {
        if (!this._selectedChip) return;
        var chipData = {
          value: this._selectedChip.value,
          fieldCellId: event.currentTarget.name
        };
        var newChip = this.createChip(chipData);
        this.flyChip(chipData, newChip);
        this.node.emit("chipPlaced", {
          value: +this._selectedChip.value,
          fieldCellId: event.currentTarget.name
        });
      };
      PKChipsView.prototype.spawnChip = function(data, fly) {
        var _this = this;
        void 0 === fly && (fly = true);
        var values = this.findChipValues(data.value);
        values.forEach(function(value) {
          var chipData = {
            value: value,
            fieldCellId: data.fieldCellId,
            placeId: data.placeId
          };
          var newChip = _this.createChip(chipData);
          fly ? _this.flyChip(chipData, newChip) : _this.placeChip(chipData, newChip);
        });
      };
      PKChipsView.prototype.findChipValues = function(value) {
        var arr = [];
        for (var i = this._gameChips.length - 1; i >= 0; i--) {
          var chipValue = this._gameChips[i];
          while (value - chipValue >= 0) {
            value -= chipValue;
            arr.push(chipValue);
          }
        }
        return arr;
      };
      PKChipsView.prototype.createChip = function(data) {
        var chip = this.pool.poolOut();
        chip.width = 50;
        chip.height = 50;
        chip.x = -250;
        chip.y = -350;
        chip.getComponent(cc.Sprite).spriteFrame = this.chipsAtlas.getSpriteFrame(data.value.toString() + "_1");
        this.gameField.addChild(chip);
        return chip;
      };
      PKChipsView.prototype.placeChip = function(data, chip) {
        var finalSize = {
          width: 60,
          height: 60
        };
        var target = this.gameField.getChildByName(data.fieldCellId);
        var chipPlace = this.getChipPlace(target, finalSize);
        chip.x = chipPlace.x;
        chip.y = chipPlace.y;
        chip.width = finalSize.width;
        chip.height = finalSize.height;
        chip.rotation = chipPlace.rot;
      };
      PKChipsView.prototype.flyChip = function(data, chip) {
        var finalSize = {
          width: 60,
          height: 60
        };
        var target = this.gameField.getChildByName(data.fieldCellId);
        var chipPlace = this.getChipPlace(target, finalSize);
        gsap_1.TweenMax.to(chip, .5, {
          x: chipPlace.x,
          y: chipPlace.y,
          width: finalSize.width,
          height: finalSize.height
        });
        gsap_1.TweenMax.to(chip, .5, {
          rotation: chipPlace.rot,
          ease: gsap_1.Power2.easeInOut
        });
        this.playSound(data.fieldCellId);
      };
      PKChipsView.prototype.playSound = function(n) {
        SoundManager_1.SoundManager.instance.interfaceSound(PKSounds_1.Sounds["NUMBER_" + n]);
      };
      PKChipsView.prototype.getChipPlace = function(target, finalSize) {
        return {
          x: finalSize.width / 2 + target.x - target.width / 2 + Math.random() * (target.width - .9 * finalSize.width),
          y: finalSize.height / 2 + target.y - target.height / 2 + Math.random() * (target.height - .9 * finalSize.height),
          rot: this.getRandomInt(-45, 45)
        };
      };
      PKChipsView.prototype.onPoolOut = function(chip) {
        chip.parent && chip.parent.removeChild(chip);
        chip.x = 0;
        chip.y = 0;
      };
      PKChipsView.prototype.onPoolEmpty = function() {
        var chip = cc.instantiate(this.Chip);
        this.pool.poolIn(chip);
      };
      PKChipsView.prototype.onPoolReset = function(removed, inPool) {
        removed.forEach(function(item) {
          item.parent && item.parent.removeChild(item);
        });
        inPool.forEach(function(item) {
          item.parent && item.parent.removeChild(item);
        });
      };
      PKChipsView.prototype.getRandomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };
      __decorate([ property(cc.Prefab) ], PKChipsView.prototype, "Chip", void 0);
      __decorate([ property(PKChipView_1.default) ], PKChipsView.prototype, "chips", void 0);
      __decorate([ property(cc.Node) ], PKChipsView.prototype, "content", void 0);
      __decorate([ property(cc.SpriteAtlas) ], PKChipsView.prototype, "chipsAtlas", void 0);
      __decorate([ property(cc.ScrollView) ], PKChipsView.prototype, "scrollView", void 0);
      __decorate([ property(cc.Node) ], PKChipsView.prototype, "gameField", void 0);
      PKChipsView = __decorate([ ccclass ], PKChipsView);
      return PKChipsView;
    }(cc.Component);
    exports.default = PKChipsView;
    cc._RF.pop();
  }, {
    "../../../../../common/managers/sound/SoundManager": "SoundManager",
    "../../PKGame": "PKGame",
    "../../utils/PKPool": "PKPool",
    "./../../PKSounds": "PKSounds",
    "./PKChipView": "PKChipView",
    gsap: 117
  } ],
  PKGameController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa76blHMIZDApf5mBUO8x0j", "PKGameController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKChipsView_1 = require("./views/chips/PKChipsView");
    var PKPlayersListPopup_1 = require("./views/popups/PKPlayersListPopup");
    var PKRoundTimer_1 = require("./views/elements/PKRoundTimer");
    var PKGameTimer_1 = require("./PKGameTimer");
    var PKAction_1 = require("./core/PKAction");
    var PKGame_1 = require("./PKGame");
    var PKResultInfo_1 = require("./views/resultInfo/PKResultInfo");
    var PKRoundResultPopup_1 = require("./views/popups/PKRoundResultPopup");
    var PKGameStatistic_1 = require("./views/statistics/PKGameStatistic");
    var PKUserInfoPanel_1 = require("./views/panels/PKUserInfoPanel");
    var PKPlayersAvatarsPanel_1 = require("./views/panels/PKPlayersAvatarsPanel");
    var PKCenterPanel_1 = require("./views/panels/PKCenterPanel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKGameController = function(_super) {
      __extends(PKGameController, _super);
      function PKGameController() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chipsView = null;
        _this.playersListPopup = null;
        _this.userInfoPanel = null;
        _this.playersAvatarsPanel = null;
        _this.roundTimer = null;
        _this.resultInfo = null;
        _this.roundResultPopup = null;
        _this.gameStatistics = null;
        _this.currentPlayerAvatarPanel = null;
        _this.\u0441enterPanel = null;
        _this._pkGame = null;
        _this._gameTimer = null;
        _this._types = null;
        _this.currentPlayerData = null;
        _this.currentPlayerBalance = 0;
        _this.currentPlayerRoundBet = 0;
        return _this;
      }
      PKGameController.prototype.start = function() {
        var _this = this;
        this._pkGame = this.node.getComponent(PKGame_1.default);
        this.chipsView.node.on("chipPlaced", function(data) {
          _this.chipPlaced(data);
        });
        this._types = {};
        this._types[PKAction_1.PKActionType.REGISTER_PLACE] = this.onPlacesRegistered;
        this._types[PKAction_1.PKActionType.PLACES_UPDATED] = this.onPlacesUpdated;
        this._types[PKAction_1.PKActionType.ROUND_STARTED] = this.onRoundStarted;
        this._types[PKAction_1.PKActionType.ROUND_UPDATED] = this.onRoundUpdated;
        this._types[PKAction_1.PKActionType.ROUND_COMPLETE] = this.onRoundComplete;
        this._types[PKAction_1.PKActionType.BETS_MAKED] = this.onBetsMaked;
        this._types[PKAction_1.PKActionType.ROUND_SPIN] = this.onRoundSpin;
        this._gameTimer = new PKGameTimer_1.default();
        this._gameTimer.addUpdateCallback(this.roundTimer.updateValue, this.roundTimer);
        this._gameTimer.addUpdateCallback(this.updateTimerValue, this);
      };
      PKGameController.prototype.onActionHandler = function(action) {
        var callback = this._types[action.type];
        callback ? callback.call(this, action) : console.log("???");
      };
      PKGameController.prototype.onPlacesUpdated = function(action) {
        this.playersListPopup.addItems(action.data.places);
        this.chipsView.disableChips(action.data.places[0].player.balance);
      };
      PKGameController.prototype.onPlacesRegistered = function(action) {
        this.updatBalance(this.currentPlayerData.playerInfo.balance);
      };
      PKGameController.prototype.onRoundStarted = function(action) {
        this._gameTimer.startTimer(action.data);
        this.chipsView.openBetting(this.currentPlayerBalance);
        this.currentPlayerRoundBet = 0;
      };
      PKGameController.prototype.onRoundUpdated = function(action) {
        var _this = this;
        this._gameTimer.startTimer(action.data);
        this.chipsView.openBetting(this.currentPlayerBalance);
        this.gameStatistics.updateStatistic(action.data.statistic);
        action.data.bets instanceof Array && action.data.bets.forEach(function(item) {
          _this.chipsView.spawnChip(item, false);
        });
      };
      PKGameController.prototype.onRoundComplete = function(action) {
        var _this = this;
        this.chipsView.clearChips();
        this.resultInfo.showResult(action.data.digits);
        this.playersListPopup.hide();
        this.gameStatistics.updateStatistic(action.data.statistic);
        var findedItem = null;
        var winning = 0;
        if (action.data.rewards instanceof Array) {
          findedItem = action.data.rewards.find(function(item) {
            return item.placeId == _this.currentPlayerData.placeId;
          });
          findedItem && (winning = findedItem.coins);
        }
        if (this.currentPlayerRoundBet > 0) {
          var win = winning - this.currentPlayerRoundBet;
          this.updatBalance(win > 0 ? win : 0);
          this.roundResultPopup.show(win);
        }
      };
      PKGameController.prototype.onRoundSpin = function(action) {
        this.resultInfo.showResult(action.data.digits);
      };
      PKGameController.prototype.onBetsMaked = function(action) {
        var _this = this;
        action.data.bets.forEach(function(item, index) {
          setTimeout(function() {
            _this.chipsView.spawnChip(item);
          }, 2e3 / action.data.bets.length * index);
        });
      };
      PKGameController.prototype.updateTimerValue = function(value) {
        var sss = this.resultInfo.node.parent.getChildByName("statistics");
        if (value > 10) {
          sss.active = true;
          this.resultInfo.node.active = false;
          this.\u0441enterPanel.showBetSign();
        }
        if (value <= 10) {
          sss.active = false;
          this.resultInfo.node.active = true;
          this.chipsView.closeBetting();
        }
        if (value <= 10 && value > 5) {
          this.resultInfo.hideResult();
          this.\u0441enterPanel.hideBetSign();
        }
      };
      PKGameController.prototype.updatBalance = function(value) {
        this.currentPlayerBalance += value;
        this.currentPlayerAvatarPanel.getChildByName("moneyValueLabel").getComponent(cc.Label).string = this.currentPlayerBalance.toString();
      };
      PKGameController.prototype.chipPlaced = function(data) {
        if (this.currentPlayerBalance - data.value >= 0) {
          this.currentPlayerRoundBet += data.value;
          this.updatBalance(-data.value);
          this.chipsView.openBetting(this.currentPlayerBalance);
          this._pkGame.chipPlaced(data);
        }
      };
      __decorate([ property(PKChipsView_1.default) ], PKGameController.prototype, "chipsView", void 0);
      __decorate([ property(PKPlayersListPopup_1.default) ], PKGameController.prototype, "playersListPopup", void 0);
      __decorate([ property(PKUserInfoPanel_1.default) ], PKGameController.prototype, "userInfoPanel", void 0);
      __decorate([ property(PKPlayersAvatarsPanel_1.default) ], PKGameController.prototype, "playersAvatarsPanel", void 0);
      __decorate([ property(PKRoundTimer_1.default) ], PKGameController.prototype, "roundTimer", void 0);
      __decorate([ property(PKResultInfo_1.default) ], PKGameController.prototype, "resultInfo", void 0);
      __decorate([ property(PKRoundResultPopup_1.default) ], PKGameController.prototype, "roundResultPopup", void 0);
      __decorate([ property(PKGameStatistic_1.default) ], PKGameController.prototype, "gameStatistics", void 0);
      __decorate([ property(cc.Node) ], PKGameController.prototype, "currentPlayerAvatarPanel", void 0);
      __decorate([ property(PKCenterPanel_1.default) ], PKGameController.prototype, "\u0441enterPanel", void 0);
      PKGameController = __decorate([ ccclass ], PKGameController);
      return PKGameController;
    }(cc.Component);
    exports.default = PKGameController;
    cc._RF.pop();
  }, {
    "./PKGame": "PKGame",
    "./PKGameTimer": "PKGameTimer",
    "./core/PKAction": "PKAction",
    "./views/chips/PKChipsView": "PKChipsView",
    "./views/elements/PKRoundTimer": "PKRoundTimer",
    "./views/panels/PKCenterPanel": "PKCenterPanel",
    "./views/panels/PKPlayersAvatarsPanel": "PKPlayersAvatarsPanel",
    "./views/panels/PKUserInfoPanel": "PKUserInfoPanel",
    "./views/popups/PKPlayersListPopup": "PKPlayersListPopup",
    "./views/popups/PKRoundResultPopup": "PKRoundResultPopup",
    "./views/resultInfo/PKResultInfo": "PKResultInfo",
    "./views/statistics/PKGameStatistic": "PKGameStatistic"
  } ],
  PKGameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "567e3MPv6dFR5549Tz/6Qw5", "PKGameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCore_1 = require("../../../../common/core/GameCore");
    var PKCore = function(_super) {
      __extends(PKCore, _super);
      function PKCore() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PKCore.prototype.init = function(logicAdapter, viewAdapter) {
        _super.prototype.init.call(this, logicAdapter, viewAdapter);
      };
      return PKCore;
    }(GameCore_1.GameCoreBase);
    exports.PKCore = PKCore;
    cc._RF.pop();
  }, {
    "../../../../common/core/GameCore": "GameCore"
  } ],
  PKGameModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f554MxZBFIO6bCx2xM6QNc", "PKGameModel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKGameModel = function() {
      function PKGameModel() {}
      return PKGameModel;
    }();
    exports.default = PKGameModel;
    cc._RF.pop();
  }, {} ],
  PKGameStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1a37fAOWItMcoMF064gucl8", "PKGameStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKPersonalStatistic_1 = require("./PKPersonalStatistic");
    var PKResultsStatistic_1 = require("./PKResultsStatistic");
    var PKRoadmapStatistic_1 = require("./PKRoadmapStatistic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKGameStatistic = function(_super) {
      __extends(PKGameStatistic, _super);
      function PKGameStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._result = null;
        _this._roadmapBigSmall = null;
        _this._roadmapEvenOdd = null;
        _this._roadmapDragonTiger = null;
        _this._personal = null;
        return _this;
      }
      PKGameStatistic.prototype.start = function() {
        this._result = this.node.getChildByName("Result").getComponent(PKResultsStatistic_1.default);
        this._roadmapBigSmall = this.node.getChildByName("RoadmapBigSmall").getComponent(PKRoadmapStatistic_1.default);
        this._roadmapEvenOdd = this.node.getChildByName("RoadmapEvenOdd").getComponent(PKRoadmapStatistic_1.default);
        this._roadmapDragonTiger = this.node.getChildByName("RoadmapDragonTiger").getComponent(PKRoadmapStatistic_1.default);
        this._personal = this.node.getChildByName("Personal").getComponent(PKPersonalStatistic_1.default);
      };
      PKGameStatistic.prototype.updateStatistic = function(data) {
        this._result.updateStatistic(data.lastDigits);
        this._roadmapBigSmall.updateStatistic(data.bigOrSmall);
        this._roadmapEvenOdd.updateStatistic(data.oddOrEven);
        this._roadmapDragonTiger.updateStatistic(data.bigOrSmall);
        this._personal.updateStatistic(data.personal);
      };
      PKGameStatistic = __decorate([ ccclass ], PKGameStatistic);
      return PKGameStatistic;
    }(cc.Component);
    exports.default = PKGameStatistic;
    cc._RF.pop();
  }, {
    "./PKPersonalStatistic": "PKPersonalStatistic",
    "./PKResultsStatistic": "PKResultsStatistic",
    "./PKRoadmapStatistic": "PKRoadmapStatistic"
  } ],
  PKGameTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "be9593dNWxBH4Uyu4UL7Ywt", "PKGameTimer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKGameTimer = function() {
      function PKGameTimer() {
        this._timerTimeout = null;
        this._updateCallbacks = null;
        this._leftTime = 0;
        this._updateCallbacks = [];
      }
      PKGameTimer.prototype.start = function() {};
      PKGameTimer.prototype.startTimer = function(data) {
        var time = (data.roundCompleteTime - data.currentTime) / 1e3;
        if (time < 0) return;
        var delay = 1e3 * (time - Math.floor(time));
        this._leftTime = Math.ceil(time);
        this.callUpdateCallbacks(this._leftTime);
        this.startTimerForNewValue(0 == delay ? 1e3 : delay);
      };
      PKGameTimer.prototype.startTimerForNewValue = function(delay) {
        var _this = this;
        void 0 === delay && (delay = 1e3);
        clearInterval(this._timerTimeout);
        this._timerTimeout = setTimeout(function() {
          _this._leftTime--;
          _this.callUpdateCallbacks(_this._leftTime);
          if (0 == _this._leftTime) {
            clearInterval(_this._timerTimeout);
            _this._timerTimeout = null;
          } else _this.startTimerForNewValue();
        }, delay);
      };
      PKGameTimer.prototype.addUpdateCallback = function(callback, context) {
        this._updateCallbacks.push({
          callback: callback,
          context: context
        });
      };
      PKGameTimer.prototype.removeUpdateCallback = function() {
        this._updateCallbacks = [];
      };
      PKGameTimer.prototype.callUpdateCallbacks = function(data) {
        this._updateCallbacks.forEach(function(item) {
          item.callback.call(item.context, data);
        });
      };
      Object.defineProperty(PKGameTimer.prototype, "leftTime", {
        get: function() {
          return this._leftTime;
        },
        enumerable: true,
        configurable: true
      });
      PKGameTimer = __decorate([ ccclass ], PKGameTimer);
      return PKGameTimer;
    }();
    exports.default = PKGameTimer;
    cc._RF.pop();
  }, {} ],
  PKGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44dbeS5+YJGzKQP79a3FJWn", "PKGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var store_1 = require("../../../common/store");
    var WindowsManager_1 = require("../../../common/core/windows/WindowsManager");
    var WindowsTypes_1 = require("../../../common/core/windows/WindowsTypes");
    var PKViewAdapterBase_1 = require("./core/PKViewAdapterBase");
    var PKGameCore_1 = require("./core/PKGameCore");
    var PKServerLogicAdapter_1 = require("./core/PKServerLogicAdapter");
    var ServerController_1 = require("../../../common/server/ServerController");
    var PKAction_1 = require("./core/PKAction");
    var PKGameController_1 = require("./PKGameController");
    var SoundManager_1 = require("../../../common/managers/sound/SoundManager");
    var PKSounds_1 = require("./PKSounds");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKGame = function(_super) {
      __extends(PKGame, _super);
      function PKGame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._gameController = null;
        _this.onActivated = function() {};
        _this.onDeactivated = function() {};
        return _this;
      }
      PKGame_1 = PKGame;
      PKGame.prototype.onLoad = function() {
        PKGame_1.gameCore.init(new PKServerLogicAdapter_1.PKServerLogicAdapter(ServerController_1.default.instance.connector, store_1.default.getState().sceneState.current.params.tableId || 1), this);
        SoundManager_1.SoundManager.instance.setup(PKSounds_1.Sounds.Config);
      };
      PKGame.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              PKGame_1.gameCore.init(new PKServerLogicAdapter_1.PKServerLogicAdapter(ServerController_1.default.instance.connector, store_1.default.getState().sceneState.current.params.tableId || 1), this);
              cc.game.on(cc.game.EVENT_SHOW, this.onActivated, this);
              cc.game.on(cc.game.EVENT_HIDE, this.onDeactivated, this);
              this._windowsManager = new WindowsManager_1.default();
              this._windowsManager.init({
                parent: this.node
              }).initAppearanceConfig(__assign({}, this._windowsManager.fillWindowParams("").appearanceConfig, {
                fade: true,
                directionShow: WindowsTypes_1.WindowShowDirection.DOWN,
                directionHide: WindowsTypes_1.WindowShowDirection.UP,
                scale: false
              }));
              this._gameController = this.node.getComponent(PKGameController_1.default);
              return [ 4, PKGame_1.gameCore.start() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      PKGame.prototype.update = function(dt) {};
      PKGame.prototype.onDestroy = function() {
        cc.game.off(cc.game.EVENT_SHOW, this.onActivated, this);
        cc.game.off(cc.game.EVENT_HIDE, this.onDeactivated, this);
        this._windowsManager && this._windowsManager.dispose();
        PKGame_1.gameCore.destroy();
      };
      PKGame.prototype.prepare = function() {
        return __awaiter(this, void 0, void 0, function() {
          var player, playerView;
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerInputActionHandler(PKAction_1.PKActionType.REGISTER_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerData;
                  return __generator(this, function(_a) {
                    playerData = {
                      id: action.data.playerInfo.id,
                      balance: action.data.playerInfo.balance,
                      isGoldMember: action.data.playerInfo.isGoldMember,
                      name: action.data.playerInfo.name,
                      avatarId: action.data.playerInfo.avatarId,
                      gender: action.data.playerInfo.gender
                    };
                    playerData.id === PKGame_1.gameCore.getCurrentPlayerInfo().id && (this._gameController.currentPlayerData = action.data);
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.PREPARE_FOR_ROUND, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.ROUND_COMPLETE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.ROUND_SPIN, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.GAME_OVER, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.DROP_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.ROUND_STARTED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    SoundManager_1.SoundManager.instance.interfaceSound(PKSounds_1.Sounds.COUNT_DOWN);
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.ROUND_UPDATED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.PLACES_UPDATED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(PKAction_1.PKActionType.BETS_MAKED, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameController.onActionHandler(action);
                    return [ 2 ];
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      PKGame.prototype.backButtonHandler = function() {
        this._gameController._gameTimer.removeUpdateCallback();
        cc.find("Canvas").getComponent("GameScene").onBackButtonPress();
      };
      PKGame.prototype.chipPlaced = function(data) {
        this.dispatchAction({
          type: PKAction_1.PKActionType.MAKE_BET,
          data: {
            fieldCellId: data.fieldCellId,
            value: data.value
          }
        });
      };
      var PKGame_1;
      PKGame.gameCore = new PKGameCore_1.PKCore();
      PKGame = PKGame_1 = __decorate([ ccclass ], PKGame);
      return PKGame;
    }(PKViewAdapterBase_1.PKViewAdapterBase);
    exports.default = PKGame;
    cc._RF.pop();
  }, {
    "../../../common/core/windows/WindowsManager": "WindowsManager",
    "../../../common/core/windows/WindowsTypes": "WindowsTypes",
    "../../../common/managers/sound/SoundManager": "SoundManager",
    "../../../common/server/ServerController": "ServerController",
    "../../../common/store": "index",
    "./PKGameController": "PKGameController",
    "./PKSounds": "PKSounds",
    "./core/PKAction": "PKAction",
    "./core/PKGameCore": "PKGameCore",
    "./core/PKServerLogicAdapter": "PKServerLogicAdapter",
    "./core/PKViewAdapterBase": "PKViewAdapterBase"
  } ],
  PKHostsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a47c3nZYj1BurtvZCbJrAwz", "PKHostsPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKHostsPanel = function(_super) {
      __extends(PKHostsPanel, _super);
      function PKHostsPanel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PKHostsPanel.prototype.start = function() {};
      PKHostsPanel.prototype.show = function() {
        this.node.parent.getChildByName("CenterPanel").getChildByName("ApplyHostBtn").getComponent(cc.Button).interactable = false;
        this.node.active = true;
      };
      PKHostsPanel.prototype.hide = function() {
        this.node.parent.getChildByName("CenterPanel").getChildByName("ApplyHostBtn").getComponent(cc.Button).interactable = true;
        this.node.active = false;
      };
      PKHostsPanel.prototype.showHide = function() {
        this.node.active = !this.node.active;
      };
      PKHostsPanel = __decorate([ ccclass ], PKHostsPanel);
      return PKHostsPanel;
    }(cc.Button);
    exports.default = PKHostsPanel;
    cc._RF.pop();
  }, {} ],
  PKPersonalStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c1e49sCoRF/Lm81ihmsb46", "PKPersonalStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKPersonalStatistic = function(_super) {
      __extends(PKPersonalStatistic, _super);
      function PKPersonalStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._lastShowed = null;
        _this._dailyFrequency = null;
        _this._data = null;
        _this._started = false;
        return _this;
      }
      PKPersonalStatistic.prototype.start = function() {
        this._lastShowed = this.node.getChildByName("lastShowed");
        this._dailyFrequency = this.node.getChildByName("dailyFrequency");
        this._started = true;
        this._data && this.updatePanel();
      };
      PKPersonalStatistic.prototype.updateStatistic = function(data) {
        this._data = data;
        if (!this._started) return;
        this.updatePanel();
      };
      PKPersonalStatistic.prototype.updatePanel = function() {
        var _this = this;
        this._data.forEach(function(item) {
          _this._lastShowed.getChildByName("value" + item.value).getComponent(cc.Label).string = item.lastShowed;
          _this._dailyFrequency.getChildByName("value" + item.value).getComponent(cc.Label).string = item.dailyFrequency;
        });
      };
      PKPersonalStatistic = __decorate([ ccclass ], PKPersonalStatistic);
      return PKPersonalStatistic;
    }(cc.Component);
    exports.default = PKPersonalStatistic;
    cc._RF.pop();
  }, {} ],
  PKPlayersAvatarsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a394fQnxVMXIduSZMnGIbq", "PKPlayersAvatarsPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKPlayersAvatarsPanel = function(_super) {
      __extends(PKPlayersAvatarsPanel, _super);
      function PKPlayersAvatarsPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerAvatar = null;
        _this.player1 = null;
        _this.player2 = null;
        _this.player3 = null;
        _this.player4 = null;
        _this._places = [];
        return _this;
      }
      PKPlayersAvatarsPanel.prototype.addPlaces = function(data) {
        this._places = data;
      };
      PKPlayersAvatarsPanel.prototype.updatePlayersData = function() {};
      PKPlayersAvatarsPanel.prototype._updateData = function(player, data) {
        player.id = data.player.id;
        player.getChildByName("levelValueLabel").getComponent(cc.Label).string = "v" + data.player.level;
        player.getChildByName("moneyValueLabel").getComponent(cc.Label).string = data.player.balance;
        player.getChildByName("userNamelabel") && (player.getChildByName("userNamelabel").getComponent(cc.Label).string = data.player.name);
      };
      __decorate([ property(cc.Node) ], PKPlayersAvatarsPanel.prototype, "playerAvatar", void 0);
      __decorate([ property(cc.Node) ], PKPlayersAvatarsPanel.prototype, "player1", void 0);
      __decorate([ property(cc.Node) ], PKPlayersAvatarsPanel.prototype, "player2", void 0);
      __decorate([ property(cc.Node) ], PKPlayersAvatarsPanel.prototype, "player3", void 0);
      __decorate([ property(cc.Node) ], PKPlayersAvatarsPanel.prototype, "player4", void 0);
      PKPlayersAvatarsPanel = __decorate([ ccclass ], PKPlayersAvatarsPanel);
      return PKPlayersAvatarsPanel;
    }(cc.Component);
    exports.default = PKPlayersAvatarsPanel;
    cc._RF.pop();
  }, {} ],
  PKPlayersListPopupItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cfdfaiHagxNgJ5qIl/VLRXI", "PKPlayersListPopupItem");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKPlayersListPopupItem = function(_super) {
      __extends(PKPlayersListPopupItem, _super);
      function PKPlayersListPopupItem() {
        var _this = _super.call(this) || this;
        _this.winLabel = null;
        _this.numberLabel = null;
        _this.nameLabel = null;
        _this.winFont = null;
        _this.loseFont = null;
        _this._winValue = 0;
        _this._numberValue = 0;
        _this._playerNameValue = "";
        return _this;
      }
      PKPlayersListPopupItem.prototype.start = function() {};
      Object.defineProperty(PKPlayersListPopupItem.prototype, "playerNameValue", {
        get: function() {
          return this._playerNameValue;
        },
        set: function(value) {
          this._playerNameValue = value;
          this.nameLabel.string = this.playerNameValue;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPlayersListPopupItem.prototype, "winValue", {
        get: function() {
          return this._winValue;
        },
        set: function(value) {
          this._winValue = value;
          this.winLabel.font = value > 0 ? this.winFont : this.loseFont;
          this.winLabel.string = (value > 0 ? "+" : "") + this.winValue.toString();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPlayersListPopupItem.prototype, "numberValue", {
        get: function() {
          return this._numberValue;
        },
        set: function(value) {
          this._numberValue = value;
          this.numberLabel.string = this.numberValue.toString();
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Label) ], PKPlayersListPopupItem.prototype, "winLabel", void 0);
      __decorate([ property(cc.Label) ], PKPlayersListPopupItem.prototype, "numberLabel", void 0);
      __decorate([ property(cc.Label) ], PKPlayersListPopupItem.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Font) ], PKPlayersListPopupItem.prototype, "winFont", void 0);
      __decorate([ property(cc.Font) ], PKPlayersListPopupItem.prototype, "loseFont", void 0);
      PKPlayersListPopupItem = __decorate([ ccclass ], PKPlayersListPopupItem);
      return PKPlayersListPopupItem;
    }(cc.Component);
    exports.default = PKPlayersListPopupItem;
    cc._RF.pop();
  }, {} ],
  PKPlayersListPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ba399n3C3hO9IzXMh+t+wsE", "PKPlayersListPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKPlayersListPopupItem_1 = require("./PKPlayersListPopupItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKPlayersListPopup = function(_super) {
      __extends(PKPlayersListPopup, _super);
      function PKPlayersListPopup() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.listItemPrefab = null;
        _this.content = null;
        _this._started = false;
        _this._data = null;
        return _this;
      }
      PKPlayersListPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
        this._started = true;
      };
      PKPlayersListPopup.prototype.addItems = function(data) {
        this._data = data;
        if (!this.node.active) return;
        this.updatePanel();
      };
      PKPlayersListPopup.prototype.updatePanel = function() {
        var _this = this;
        if (!this._data) return;
        this.content.removeAllChildren(true);
        var prefabItem = null;
        var listItem = null;
        this._data.forEach(function(item, index) {
          if (item.player) {
            prefabItem = cc.instantiate(_this.listItemPrefab);
            listItem = prefabItem.getComponent(PKPlayersListPopupItem_1.default);
            listItem.playerNameValue = item.player.name;
            listItem.numberValue = index + 1;
            listItem.winValue = +Math.random().toFixed(3) * (Math.random() >= .5 ? 1 : -1);
            _this.content.addChild(prefabItem);
          }
        });
      };
      PKPlayersListPopup.prototype.show = function() {
        this.node.active = true;
        this.updatePanel();
      };
      PKPlayersListPopup.prototype.hide = function() {
        this.node.active = false;
      };
      __decorate([ property(cc.Prefab) ], PKPlayersListPopup.prototype, "listItemPrefab", void 0);
      __decorate([ property(cc.Node) ], PKPlayersListPopup.prototype, "content", void 0);
      PKPlayersListPopup = __decorate([ ccclass ], PKPlayersListPopup);
      return PKPlayersListPopup;
    }(cc.Component);
    exports.default = PKPlayersListPopup;
    cc._RF.pop();
  }, {
    "./PKPlayersListPopupItem": "PKPlayersListPopupItem"
  } ],
  PKPool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f393Jx9a5GoLKXd/v7S0H5", "PKPool");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKPool = function() {
      function PKPool(loop, minSize) {
        void 0 === loop && (loop = false);
        void 0 === minSize && (minSize = 0);
        this._poolArray = [];
        this._index = 0;
        this._isLoop = loop;
        this._minSize = minSize;
      }
      PKPool.prototype.poolIn = function(item) {
        this._poolArray.push(item);
      };
      PKPool.prototype.poolOut = function() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) params[_i] = arguments[_i];
        this._index + 1 >= this._minSize && this._poolEmptyCallback && this._poolEmptyCallback();
        var item = this._poolArray[this._index];
        this._poolOutCallback && this._poolOutCallback.apply(this, [ item ].concat(params));
        this._index++;
        this._index == this._poolArray.length && (this._index = this._isLoop ? 0 : this._index - 1);
        return item;
      };
      PKPool.prototype.reset = function() {
        var removedItems = this._poolArray.splice(0, this._poolArray.length - this._minSize);
        this._index = 0;
        this._poolResetCallback && this._poolResetCallback(removedItems, this._poolArray);
      };
      Object.defineProperty(PKPool.prototype, "index", {
        get: function() {
          return this._index;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPool.prototype, "length", {
        get: function() {
          return this._poolArray.length;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPool.prototype, "poolOutCallback", {
        set: function(value) {
          this._poolOutCallback = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPool.prototype, "poolEmptyCallback", {
        set: function(value) {
          this._poolEmptyCallback = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPool.prototype, "poolResetCallback", {
        set: function(value) {
          this._poolResetCallback = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PKPool.prototype, "poolArray", {
        get: function() {
          return this._poolArray;
        },
        enumerable: true,
        configurable: true
      });
      return PKPool;
    }();
    exports.default = PKPool;
    cc._RF.pop();
  }, {} ],
  PKResultInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d827bfdFCJBJaKEJpR5fSjA", "PKResultInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PKRoundResult_1 = require("./PKRoundResult");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKResultInfo = function(_super) {
      __extends(PKResultInfo, _super);
      function PKResultInfo() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._bettingClosed = null;
        _this._roundResult = null;
        return _this;
      }
      PKResultInfo.prototype.start = function() {
        this._bettingClosed = this.node.getChildByName("betting-closed");
        this._roundResult = this.node.getChildByName("roundResult").getComponent(PKRoundResult_1.default);
      };
      PKResultInfo.prototype.showResult = function(data) {
        this._bettingClosed.active = false;
        this._roundResult.node.active = true;
        this._roundResult.showResult(data);
      };
      PKResultInfo.prototype.hideResult = function() {
        this._bettingClosed.active = true;
        this._roundResult.node.active = false;
      };
      PKResultInfo = __decorate([ ccclass ], PKResultInfo);
      return PKResultInfo;
    }(cc.Component);
    exports.default = PKResultInfo;
    cc._RF.pop();
  }, {
    "./PKRoundResult": "PKRoundResult"
  } ],
  PKResultsStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5acdbqmKehMMY3k2l6PKZ8p", "PKResultsStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKResultsStatistic = function(_super) {
      __extends(PKResultsStatistic, _super);
      function PKResultsStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ballAtlas = null;
        _this._data = null;
        _this._started = false;
        return _this;
      }
      PKResultsStatistic.prototype.start = function() {
        this._started = true;
      };
      PKResultsStatistic.prototype.updateStatistic = function(data) {
        this._data = data;
        if (!this._started) return;
        this.updatePanel();
      };
      PKResultsStatistic.prototype.updatePanel = function() {
        var _this = this;
        this._data.forEach(function(historyItem, historyIndex) {
          var historyNode = _this.node.getChildByName("round" + (historyIndex + 1));
          if (historyNode) {
            historyNode.active = true;
            historyItem.forEach(function(item, index) {
              historyNode.children[index].getComponent(cc.Sprite).spriteFrame = _this.ballAtlas.getSpriteFrame(item.toString());
            });
          }
        });
      };
      __decorate([ property(cc.SpriteAtlas) ], PKResultsStatistic.prototype, "ballAtlas", void 0);
      PKResultsStatistic = __decorate([ ccclass ], PKResultsStatistic);
      return PKResultsStatistic;
    }(cc.Component);
    exports.default = PKResultsStatistic;
    cc._RF.pop();
  }, {} ],
  PKRoadmapStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67833KfEDFBIJaNv/6qHXdd", "PKRoadmapStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKRoadmapStatistic = function(_super) {
      __extends(PKRoadmapStatistic, _super);
      function PKRoadmapStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bigSprite = null;
        _this.smallSprite = null;
        _this.blackGeneralSprite = null;
        _this.redGeneralSprite = null;
        _this.blackLowSizeCyclesSprite = null;
        _this.redLowSizeCyclesSprite = null;
        _this.blackLowSizeBallsSprite = null;
        _this.redLowSizeBallsSprite = null;
        _this.blackLowSizeSticksSprite = null;
        _this.redLowSizeSticksSprite = null;
        _this.blackLowSizeCyclesSpriteForecast = null;
        _this.redLowSizeCyclesSpriteForecast = null;
        _this.blackLowSizeBallsSpriteForecast = null;
        _this.redLowSizeBallsSpriteForecast = null;
        _this.blackLowSizeSticksSpriteForecast = null;
        _this.redLowSizeSticksSpriteForecast = null;
        _this._maxColumnSize = 6;
        _this._maxRowSize = 23;
        _this._data = null;
        return _this;
      }
      PKRoadmapStatistic.prototype.updateStatistic = function(data) {
        this._data = data;
        this._cleanOldData();
        this._updatePanel();
        this._updateGeneralPanel();
        this._updateLowSizePanel("lowSizeCycles");
        this._updateLowSizePanel("lowSizeBalls");
        this._updateLowSizePanel("lowSizeSticks");
        this._doForecast();
      };
      PKRoadmapStatistic.prototype._cleanOldData = function() {
        this._generalBalls = [];
        for (var index = 0; index < this.node.children.length - 1; index++) {
          var nodeName = this.node.children[index].name;
          for (var i = 0; i < this.node.getChildByName(nodeName).children.length; i++) {
            "generalBalls" === nodeName && (this._generalBalls[i] = []);
            for (var j = 0; j < this.node.getChildByName(nodeName).children[i].children.length; j++) {
              var sprite = this.node.getChildByName(nodeName).getChildByName("round" + (i + 1)).getChildByName(String(j + 1));
              sprite.getComponent("cc.Sprite").spriteFrame = null;
            }
          }
        }
        for (var j = 0; j < 3; j++) {
          var spriteBlack = this.node.getChildByName("forecast").getChildByName("black" + j);
          spriteBlack.getComponent("cc.Sprite").spriteFrame = null;
          var spriteRed = this.node.getChildByName("forecast").getChildByName("black" + j);
          spriteRed.getComponent("cc.Sprite").spriteFrame = null;
        }
      };
      PKRoadmapStatistic.prototype._updatePanel = function() {
        var rowCounter = 1;
        var columnCounter = 1;
        var data = [];
        var startShiftCounter = 0;
        for (var i = 0; i < this._data.length; i++) for (var j = 0; j < this._data[i].count; j++) data.push(this._data[i].value);
        data.length > 48 && (startShiftCounter = data.length - 48);
        for (var i = startShiftCounter; i < data.length; i++) {
          var sprite = this.node.getChildByName("bigBalls").getChildByName("round" + columnCounter).getChildByName(String(rowCounter));
          var texture = data[i] ? this.bigSprite : this.smallSprite;
          sprite.getComponent("cc.Sprite").spriteFrame = texture;
          if (6 === rowCounter) {
            rowCounter = 1;
            columnCounter++;
          } else rowCounter++;
        }
      };
      PKRoadmapStatistic.prototype._updateGeneralPanel = function(forecastSelector) {
        void 0 === forecastSelector && (forecastSelector = false);
        var sprite;
        for (var i = 0; i < this._data.length; i++) for (var j = 0; j < this._data[i].count; j++) {
          if (j >= this._maxColumnSize) {
            sprite = this.node.getChildByName("generalBalls").getChildByName("round" + (i + 1 + j - this._maxColumnSize)).getChildByName(String(this._maxColumnSize));
            this._generalBalls[i][j] = this._data[i].value;
          } else {
            sprite = this.node.getChildByName("generalBalls").getChildByName("round" + (i + 1)).getChildByName(String(j + 1));
            this._generalBalls[i][j] = this._data[i].value;
          }
          if (!forecastSelector) {
            var texture = this._data[i].value ? this.redGeneralSprite : this.blackGeneralSprite;
            sprite.getComponent("cc.Sprite").spriteFrame = texture;
          }
        }
      };
      PKRoadmapStatistic.prototype._updateLowSizePanel = function(nodeName, forecastSelector) {
        void 0 === nodeName && (nodeName = "lowSizeCycles");
        void 0 === forecastSelector && (forecastSelector = false);
        var sprite;
        var currentRow = 0;
        var currentColumn = 0;
        var currentColor = 0;
        var colorChanged = false;
        var colorInChanged = false;
        var gap = 0;
        var redSprite = null;
        var blackSprite = null;
        switch (nodeName) {
         case "lowSizeCycles":
          if (forecastSelector) {
            redSprite = this.redLowSizeCyclesSpriteForecast;
            blackSprite = this.blackLowSizeCyclesSpriteForecast;
          } else {
            redSprite = this.redLowSizeCyclesSprite;
            blackSprite = this.blackLowSizeCyclesSprite;
          }
          gap = 0;
          break;

         case "lowSizeBalls":
          if (forecastSelector) {
            redSprite = this.redLowSizeBallsSpriteForecast;
            blackSprite = this.blackLowSizeBallsSpriteForecast;
          } else {
            redSprite = this.redLowSizeBallsSprite;
            blackSprite = this.blackLowSizeBallsSprite;
          }
          gap = 1;
          break;

         case "lowSizeSticks":
          if (forecastSelector) {
            redSprite = this.redLowSizeSticksSpriteForecast;
            blackSprite = this.blackLowSizeSticksSpriteForecast;
          } else {
            redSprite = this.redLowSizeSticksSprite;
            blackSprite = this.blackLowSizeSticksSprite;
          }
          gap = 2;
        }
        for (var row = 1 + gap; row < this._maxRowSize; row++) for (var column = 0; column < this._generalBalls[row].length; column++) {
          if (row === 1 + gap && column <= 0 + gap) continue;
          if (null === this._generalBalls[row][column]) break;
          if (0 === column) {
            colorInChanged = false;
            colorChanged = false;
            if (this._generalBalls[row - 2 - gap].length === this._generalBalls[row - 1].length) {
              if (0 === currentColor) {
                currentRow++;
                currentColumn = 0;
                currentColor = 1;
              }
            } else if (1 === currentColor) {
              currentRow++;
              currentColumn = 0;
              currentColor = 0;
            }
          } else if ("undefined" === typeof this._generalBalls[row - 1 - gap][column]) if (colorChanged) if (colorChanged) {
            if (!colorInChanged) {
              currentRow++;
              currentColumn = 0;
              currentColor = 1;
              colorInChanged = true;
            }
          } else {
            currentRow++;
            currentColumn = 0;
            currentColor = 0;
          } else {
            colorChanged = true;
            if (1 === currentColor) {
              currentRow++;
              currentColumn = 0;
              currentColor = 0;
            }
          } else if (0 === currentColor) {
            currentColor = 1;
            currentRow++;
            currentColumn = 0;
          }
          currentColumn++;
          if (forecastSelector) {
            sprite = this.node.getChildByName("forecast").getChildByName(String("black" + gap));
            var texture = currentColor ? blackSprite : redSprite;
            sprite.getComponent("cc.Sprite").spriteFrame = texture;
            sprite = this.node.getChildByName("forecast").getChildByName(String("red" + gap));
            var textureRed = currentColor ? redSprite : blackSprite;
            sprite.getComponent("cc.Sprite").spriteFrame = textureRed;
          } else {
            sprite = currentColumn >= this._maxColumnSize ? this.node.getChildByName(nodeName).getChildByName("round" + (currentRow + 1 + currentColumn - this._maxColumnSize)).getChildByName(String(this._maxColumnSize)) : this.node.getChildByName(nodeName).getChildByName("round" + (currentRow + 1)).getChildByName(String(currentColumn));
            var texture = currentColor ? redSprite : blackSprite;
            sprite.getComponent("cc.Sprite").spriteFrame = texture;
          }
        }
      };
      PKRoadmapStatistic.prototype._doForecast = function() {
        0 === this._data[this._data.length - 1].value ? this._data[this._data.length - 1].count++ : this._data.push({
          count: 1,
          id: this._data.length + 1,
          value: 1
        });
        this._updateGeneralPanel(true);
        this._updateLowSizePanel("lowSizeCycles", true);
        this._updateLowSizePanel("lowSizeBalls", true);
        this._updateLowSizePanel("lowSizeSticks", true);
        this.removeForecastData();
      };
      PKRoadmapStatistic.prototype.removeForecastData = function() {
        if (1 === this._data[this._data.length - 1].length) {
          this._generalBalls[this._data.length - 1] = [];
          this._data.pop();
        } else {
          this._generalBalls[this._data.length - 1].pop();
          this._data[this._data.length - 1].count--;
        }
      };
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "bigSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "smallSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackGeneralSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redGeneralSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackLowSizeCyclesSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redLowSizeCyclesSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackLowSizeBallsSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redLowSizeBallsSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackLowSizeSticksSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redLowSizeSticksSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackLowSizeCyclesSpriteForecast", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redLowSizeCyclesSpriteForecast", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackLowSizeBallsSpriteForecast", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redLowSizeBallsSpriteForecast", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "blackLowSizeSticksSpriteForecast", void 0);
      __decorate([ property(cc.SpriteFrame) ], PKRoadmapStatistic.prototype, "redLowSizeSticksSpriteForecast", void 0);
      PKRoadmapStatistic = __decorate([ ccclass ], PKRoadmapStatistic);
      return PKRoadmapStatistic;
    }(cc.Component);
    exports.default = PKRoadmapStatistic;
    cc._RF.pop();
  }, {} ],
  PKRoundResultPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78ffepRIg1CEZG4vrQUL9MR", "PKRoundResultPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKRoundResultPopup = function(_super) {
      __extends(PKRoundResultPopup, _super);
      function PKRoundResultPopup() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.f1 = null;
        _this.f2 = null;
        return _this;
      }
      PKRoundResultPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
      };
      PKRoundResultPopup.prototype.show = function(data) {
        var font = data > 0 ? this.f1 : this.f2;
        var add = data > 0 ? "+" : "-";
        var sss = this.node.getChildByName("winValueLabel");
        var ddd = sss.getComponent(cc.Label);
        ddd.font = font;
        ddd.string = add + Math.abs(data).toString();
        this.node.active = true;
      };
      PKRoundResultPopup.prototype.hide = function() {
        this.node.active = false;
      };
      __decorate([ property(cc.Font) ], PKRoundResultPopup.prototype, "f1", void 0);
      __decorate([ property(cc.Font) ], PKRoundResultPopup.prototype, "f2", void 0);
      PKRoundResultPopup = __decorate([ ccclass ], PKRoundResultPopup);
      return PKRoundResultPopup;
    }(cc.Component);
    exports.default = PKRoundResultPopup;
    cc._RF.pop();
  }, {} ],
  PKRoundResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d373fK+sB1G9Y5e3oMyOX5s", "PKRoundResult");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKRoundResult = function(_super) {
      __extends(PKRoundResult, _super);
      function PKRoundResult() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.resultBallPrefab = null;
        _this.ballAtlas = null;
        return _this;
      }
      PKRoundResult.prototype.start = function() {};
      PKRoundResult.prototype.showResult = function(data) {
        var _this = this;
        data.forEach(function(item, index) {
          _this.node.children[index].getComponent(cc.Sprite).spriteFrame = _this.ballAtlas.getSpriteFrame(item.toString());
        });
      };
      __decorate([ property(cc.Prefab) ], PKRoundResult.prototype, "resultBallPrefab", void 0);
      __decorate([ property(cc.SpriteAtlas) ], PKRoundResult.prototype, "ballAtlas", void 0);
      PKRoundResult = __decorate([ ccclass ], PKRoundResult);
      return PKRoundResult;
    }(cc.Component);
    exports.default = PKRoundResult;
    cc._RF.pop();
  }, {} ],
  PKRoundTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db168hpesxBr6O6IL/ZLkXQ", "PKRoundTimer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKRoundTimer = function(_super) {
      __extends(PKRoundTimer, _super);
      function PKRoundTimer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timerLabel = null;
        _this._started = false;
        _this._data = null;
        return _this;
      }
      PKRoundTimer.prototype.start = function() {
        this.timerLabel = this.node.getComponent(cc.Label);
        this._started = true;
        this._data && (this.timerLabel.string = this._data.toString());
      };
      PKRoundTimer.prototype.updateValue = function(data) {
        this._data = data;
        if (!this._started) return;
        this.timerLabel.string = this._data.toString();
      };
      PKRoundTimer = __decorate([ ccclass ], PKRoundTimer);
      return PKRoundTimer;
    }(cc.Component);
    exports.default = PKRoundTimer;
    cc._RF.pop();
  }, {} ],
  PKRulesPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "186a212wN9Mx5SMqvtmYjDz", "PKRulesPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKRulesPopup = function(_super) {
      __extends(PKRulesPopup, _super);
      function PKRulesPopup() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PKRulesPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
      };
      PKRulesPopup.prototype.show = function() {
        this.node.active = true;
      };
      PKRulesPopup.prototype.hide = function() {
        this.node.active = false;
      };
      PKRulesPopup = __decorate([ ccclass ], PKRulesPopup);
      return PKRulesPopup;
    }(cc.Component);
    exports.default = PKRulesPopup;
    cc._RF.pop();
  }, {} ],
  PKServerLogicAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c35c76KABhJN4i/Loku8Dnn", "PKServerLogicAdapter");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ServerLogicAdapterBase_1 = require("../../../../common/server/ServerLogicAdapterBase");
    var Config_1 = require("../../../../common/config/Config");
    var PKAction_1 = require("./PKAction");
    var PKServerLogicAdapter = function(_super) {
      __extends(PKServerLogicAdapter, _super);
      function PKServerLogicAdapter(serverConnector, tableId) {
        var _this = _super.call(this, serverConnector, Config_1.GameCode.PK10, tableId) || this;
        _this._places = {};
        _this._currentPlayerPlace = void 0;
        return _this;
      }
      PKServerLogicAdapter.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.start.call(this) ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      PKServerLogicAdapter.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerViewActionHandler(PKAction_1.PKActionType.MAKE_BET, function(data) {
                _this.sendMessage(OpCode.MAKE_BET, {
                  placeId: _this._currentPlayerPlace.placeId,
                  fieldCellId: data.data.fieldCellId,
                  value: data.data.value
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_PLACES, function(data) {
                var places = data.places;
                var currentPlayerId = _this.getCurrentPlayerInfo().id;
                places = places.sort(function(a, b) {
                  if (null != a.player && a.player.id === currentPlayerId) return -1;
                  if (null != b.player && b.player.id === currentPlayerId) return 1;
                  return a.placeId - b.placeId;
                });
                _this.dispatchAction({
                  type: PKAction_1.PKActionType.PLACES_UPDATED,
                  data: {
                    places: places
                  }
                });
                null != places[0].player && places[0].player.id === currentPlayerId && places.forEach(function(placeInfo) {
                  var currentPlaceInfo = placeInfo.placeId in _this._places ? _this._places[placeInfo.placeId] : {
                    placeId: placeInfo.placeId
                  };
                  _this._places[currentPlaceInfo.placeId] = currentPlaceInfo;
                  if (null != currentPlaceInfo.player && null == placeInfo.player) {
                    currentPlaceInfo.player = null;
                    _this.dispatchAction({
                      type: PKAction_1.PKActionType.DROP_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId
                      }
                    });
                  } else if (null == currentPlaceInfo.player && null != placeInfo.player) {
                    currentPlaceInfo.player = placeInfo.player;
                    currentPlaceInfo.player.id === currentPlayerId && (_this._currentPlayerPlace = currentPlaceInfo);
                    _this.dispatchAction({
                      type: PKAction_1.PKActionType.REGISTER_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId,
                        playerInfo: currentPlaceInfo.player
                      }
                    });
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.PREPARE_FOR_ROUND, function(data) {});
              this.registerServerMessageHandler(OpCode.ROUND_START, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: PKAction_1.PKActionType.ROUND_STARTED,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.BETS_MAKED, function(serverData) {
                var bets = serverData.bets.filter(function(betValue) {
                  return betValue.placeId != _this._currentPlayerPlace.placeId;
                });
                _this.dispatchAction({
                  type: PKAction_1.PKActionType.BETS_MAKED,
                  data: {
                    bets: bets
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.MAKE_BET_ERROR, function(data) {});
              this.registerServerMessageHandler(OpCode.SPIN, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: PKAction_1.PKActionType.ROUND_SPIN,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.ROUND_COMPLETE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: PKAction_1.PKActionType.ROUND_COMPLETE,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_ROUND_STATE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: PKAction_1.PKActionType.ROUND_UPDATED,
                      data: data
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.GAME_OVER, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this.dispatchAction({
                      type: PKAction_1.PKActionType.GAME_OVER,
                      data: {}
                    });
                    return [ 2 ];
                  });
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      return PKServerLogicAdapter;
    }(ServerLogicAdapterBase_1.ServerLogicAdapterBase);
    exports.PKServerLogicAdapter = PKServerLogicAdapter;
    var OpCode;
    (function(OpCode) {
      OpCode[OpCode["UPDATE_PLACES"] = 1] = "UPDATE_PLACES";
      OpCode[OpCode["PREPARE_FOR_ROUND"] = 2] = "PREPARE_FOR_ROUND";
      OpCode[OpCode["ROUND_START"] = 3] = "ROUND_START";
      OpCode[OpCode["ROUND_COMPLETE"] = 4] = "ROUND_COMPLETE";
      OpCode[OpCode["UPDATE_ROUND_STATE"] = 5] = "UPDATE_ROUND_STATE";
      OpCode[OpCode["GAME_OVER"] = 6] = "GAME_OVER";
      OpCode[OpCode["READY_FOR_NEXT_ACTION"] = 7] = "READY_FOR_NEXT_ACTION";
      OpCode[OpCode["MAKE_BET"] = 11] = "MAKE_BET";
      OpCode[OpCode["MAKE_BET_ERROR"] = 12] = "MAKE_BET_ERROR";
      OpCode[OpCode["BETS_MAKED"] = 13] = "BETS_MAKED";
      OpCode[OpCode["SPIN"] = 14] = "SPIN";
    })(OpCode = exports.OpCode || (exports.OpCode = {}));
    var MakeBetErrorType;
    (function(MakeBetErrorType) {
      MakeBetErrorType[MakeBetErrorType["INVALID_FIELD_CELL_ID"] = 1] = "INVALID_FIELD_CELL_ID";
      MakeBetErrorType[MakeBetErrorType["NOT_ENOUGHT_COINS"] = 2] = "NOT_ENOUGHT_COINS";
    })(MakeBetErrorType = exports.MakeBetErrorType || (exports.MakeBetErrorType = {}));
    cc._RF.pop();
  }, {
    "../../../../common/config/Config": "Config",
    "../../../../common/server/ServerLogicAdapterBase": "ServerLogicAdapterBase",
    "./PKAction": "PKAction"
  } ],
  PKSettingsCheckbox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fd3ceF8ZBCiKdLk1qgkrZQ", "PKSettingsCheckbox");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKSettingsCheckbox = function(_super) {
      __extends(PKSettingsCheckbox, _super);
      function PKSettingsCheckbox() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.indicator = null;
        return _this;
      }
      PKSettingsCheckbox.prototype.start = function() {
        this.node.on("toggle", this.onToggle, this);
      };
      PKSettingsCheckbox.prototype.onToggle = function() {
        this.indicator.x = this.isChecked ? 60 : -60;
      };
      __decorate([ property(cc.Node) ], PKSettingsCheckbox.prototype, "indicator", void 0);
      PKSettingsCheckbox = __decorate([ ccclass ], PKSettingsCheckbox);
      return PKSettingsCheckbox;
    }(cc.Toggle);
    exports.default = PKSettingsCheckbox;
    cc._RF.pop();
  }, {} ],
  PKSettingsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8bc16mlB+tA94liliL8Dmbq", "PKSettingsPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKSettingsPanel = function(_super) {
      __extends(PKSettingsPanel, _super);
      function PKSettingsPanel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PKSettingsPanel.prototype.start = function() {};
      PKSettingsPanel.prototype.show = function() {
        this.node.active = true;
      };
      PKSettingsPanel.prototype.hide = function() {
        this.node.active = false;
      };
      PKSettingsPanel.prototype.showHide = function() {
        this.node.active = !this.node.active;
      };
      PKSettingsPanel = __decorate([ ccclass ], PKSettingsPanel);
      return PKSettingsPanel;
    }(cc.Component);
    exports.default = PKSettingsPanel;
    cc._RF.pop();
  }, {} ],
  PKSlider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f41dE1MN1I4qC80QiEUuwv", "PKSlider");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKSlider = function(_super) {
      __extends(PKSlider, _super);
      function PKSlider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressMask = null;
        return _this;
      }
      PKSlider.prototype.start = function() {
        var _this = this;
        this.slide();
        this.node.on("slide", function() {
          _this.slide();
        });
      };
      PKSlider.prototype.slide = function() {
        this.progressMask.node.width = this.handle.node.x - this.progressMask.node.x;
      };
      __decorate([ property(cc.Mask) ], PKSlider.prototype, "progressMask", void 0);
      PKSlider = __decorate([ ccclass ], PKSlider);
      return PKSlider;
    }(cc.Slider);
    exports.default = PKSlider;
    cc._RF.pop();
  }, {} ],
  PKSoundSettingsPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e396WegJJPlbDpm7g//Tsy", "PKSoundSettingsPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SoundManager_1 = require("../../../../../common/managers/sound/SoundManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKSoundSettingsPopup = function(_super) {
      __extends(PKSoundSettingsPopup, _super);
      function PKSoundSettingsPopup() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PKSoundSettingsPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
        var musicNode = this.node.getChildByName("sliderMusic");
        var soundNode = this.node.getChildByName("sliderSound");
        var checkboxNode = this.node.getChildByName("checkBox");
        musicNode.getComponent(cc.Slider).progress = SoundManager_1.SoundManager.instance.musicVolume;
        soundNode.getComponent(cc.Slider).progress = SoundManager_1.SoundManager.instance.soundVolume;
        checkboxNode.getComponent(cc.Toggle).isChecked = SoundManager_1.SoundManager.instance.muted;
        SoundManager_1.SoundManager.instance.muted || (checkboxNode.getComponent(cc.Toggle).indicator.x = -60);
      };
      PKSoundSettingsPopup.prototype.sliderEventListener = function(event) {
        "sliderMusic" === event.node.name ? SoundManager_1.SoundManager.instance.musicVolume = event.progress : SoundManager_1.SoundManager.instance.soundVolume = event.progress;
      };
      PKSoundSettingsPopup.prototype.checkboxEventListener = function(event) {
        SoundManager_1.SoundManager.instance.muted = event.isChecked;
      };
      PKSoundSettingsPopup.prototype.show = function() {
        this.node.active = true;
      };
      PKSoundSettingsPopup.prototype.hide = function() {
        this.node.active = false;
      };
      PKSoundSettingsPopup = __decorate([ ccclass ], PKSoundSettingsPopup);
      return PKSoundSettingsPopup;
    }(cc.Component);
    exports.default = PKSoundSettingsPopup;
    cc._RF.pop();
  }, {
    "../../../../../common/managers/sound/SoundManager": "SoundManager"
  } ],
  PKSounds: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b078FILfVGKbinx16JZpGk", "PKSounds");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Sounds;
    (function(Sounds) {
      var _a;
      Sounds.NUMBER_0 = "0";
      Sounds.NUMBER_1 = "1";
      Sounds.NUMBER_2 = "2";
      Sounds.NUMBER_3 = "3";
      Sounds.NUMBER_4 = "4";
      Sounds.NUMBER_5 = "5";
      Sounds.NUMBER_6 = "6";
      Sounds.NUMBER_7 = "7";
      Sounds.NUMBER_8 = "8";
      Sounds.NUMBER_9 = "9";
      Sounds.COUNT_DOWN = "count_down";
      Sounds.Config = (_a = {}, _a[Sounds.NUMBER_0] = [ {
        sourcePath: "resources/games/baccarat/Sounds/0.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_1] = [ {
        sourcePath: "resources/games/baccarat/Sounds/1.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_2] = [ {
        sourcePath: "resources/games/baccarat/Sounds/2.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_3] = [ {
        sourcePath: "resources/games/baccarat/Sounds/3.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_4] = [ {
        sourcePath: "resources/games/baccarat/Sounds/4.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_5] = [ {
        sourcePath: "resources/games/baccarat/Sounds/5.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_6] = [ {
        sourcePath: "resources/games/baccarat/Sounds/6.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_7] = [ {
        sourcePath: "resources/games/baccarat/Sounds/7.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_8] = [ {
        sourcePath: "resources/games/baccarat/Sounds/8.mp3",
        sourceVolume: 1
      } ], _a[Sounds.NUMBER_9] = [ {
        sourcePath: "resources/games/baccarat/Sounds/9.mp3",
        sourceVolume: 1
      } ], _a[Sounds.COUNT_DOWN] = [ {
        sourcePath: "resources/games/baccarat/Sounds/\u5012\u8ba1\u65f6.mp3",
        sourceVolume: 1
      } ], _a);
    })(Sounds = exports.Sounds || (exports.Sounds = {}));
    cc._RF.pop();
  }, {} ],
  PKToggleContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9dee3QJfitKZopRPFnaIZXL", "PKToggleContainer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKToggleContainer = function(_super) {
      __extends(PKToggleContainer, _super);
      function PKToggleContainer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.panels = [];
        return _this;
      }
      PKToggleContainer.prototype.start = function() {
        var _this = this;
        this.toggleItems.forEach(function(item) {
          item.node.on("toggle", _this.onItemToggle, _this);
        });
      };
      PKToggleContainer.prototype.onItemToggle = function(data) {
        var tabIndex = this.toggleItems.indexOf(data);
        this.panels.forEach(function(item, index) {
          item.node.active = index === tabIndex;
        });
      };
      __decorate([ property(cc.Sprite) ], PKToggleContainer.prototype, "panels", void 0);
      PKToggleContainer = __decorate([ ccclass ], PKToggleContainer);
      return PKToggleContainer;
    }(cc.ToggleContainer);
    exports.default = PKToggleContainer;
    cc._RF.pop();
  }, {} ],
  PKUserInfoPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "59387snRuVHpJ6YVGEWCbgs", "PKUserInfoPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PKUserInfoPanel = function(_super) {
      __extends(PKUserInfoPanel, _super);
      function PKUserInfoPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._places = [];
        return _this;
      }
      PKUserInfoPanel.prototype.start = function() {};
      PKUserInfoPanel.prototype.show = function() {
        this.node.active = true;
      };
      PKUserInfoPanel.prototype.hide = function() {
        this.node.active = false;
      };
      PKUserInfoPanel.prototype.addPlaces = function(data) {
        this._places = data;
      };
      PKUserInfoPanel.prototype.showHide = function(data) {
        this.node.active = !this.node.active;
      };
      PKUserInfoPanel.prototype._findPlayerData = function(id) {
        var places = this._places.find(function(element) {
          return element.player.id === id;
        });
        return places.player;
      };
      PKUserInfoPanel = __decorate([ ccclass ], PKUserInfoPanel);
      return PKUserInfoPanel;
    }(cc.Component);
    exports.default = PKUserInfoPanel;
    cc._RF.pop();
  }, {} ],
  PKViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b89eomqypPDr6W4jWB4h08", "PKViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ViewAdapterBase_1 = require("../../../../common/core/ViewAdapterBase");
    var PKViewAdapterBase = function(_super) {
      __extends(PKViewAdapterBase, _super);
      function PKViewAdapterBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return PKViewAdapterBase;
    }(ViewAdapterBase_1.ViewAdapterBase);
    exports.PKViewAdapterBase = PKViewAdapterBase;
    cc._RF.pop();
  }, {
    "../../../../common/core/ViewAdapterBase": "ViewAdapterBase"
  } ],
  PairCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3302bvbxf1KLpK9o5GfAUiP", "PairCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var PairCombination = function(_super) {
      __extends(PairCombination, _super);
      function PairCombination() {
        var _this = _super.call(this, PairCombination.NAME) || this;
        _this._config = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      PairCombination.NAME = "PAIR";
      return PairCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.PairCombination = PairCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  PersonalStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ec2aek4e9JCaEneQg0Qsud", "PersonalStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PersonalStatistic = function(_super) {
      __extends(PersonalStatistic, _super);
      function PersonalStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._lastShowed = null;
        _this._dailyFrequency = null;
        _this._data = null;
        _this._started = false;
        return _this;
      }
      PersonalStatistic.prototype.start = function() {
        this._lastShowed = this.node.getChildByName("lastShowed");
        this._dailyFrequency = this.node.getChildByName("dailyFrequency");
        this._started = true;
        this._data && this.updatePanel();
      };
      PersonalStatistic.prototype.updateStatistic = function(data) {
        this._data = data;
        if (!this._started) return;
        this.updatePanel();
      };
      PersonalStatistic.prototype.updatePanel = function() {
        var _this = this;
        this._data.forEach(function(item) {
          _this._lastShowed.getChildByName("value" + item.value).getComponent(cc.Label).string = item.lastShowed;
          _this._dailyFrequency.getChildByName("value" + item.value).getComponent(cc.Label).string = item.dailyFrequency;
        });
      };
      PersonalStatistic = __decorate([ ccclass ], PersonalStatistic);
      return PersonalStatistic;
    }(cc.Component);
    exports.default = PersonalStatistic;
    cc._RF.pop();
  }, {} ],
  PhoneStatusComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b97d8/yh8ZBC5TB+LYCC3Pw", "PhoneStatusComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PhoneStatus = function(_super) {
      __extends(PhoneStatus, _super);
      function PhoneStatus() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeBetweenUpdate = 10;
        _this._updateTimerChecker = 0;
        return _this;
      }
      PhoneStatus.prototype.onLoad = function() {
        this._updateTimerChecker = this.timeBetweenUpdate;
        cc.sys.isBrowser && (this.node.active = false);
        this._updatePhoneStatus();
      };
      PhoneStatus.prototype.addToParent = function(parentToAdopt) {
        this.node.parent = parentToAdopt;
      };
      PhoneStatus.prototype.setPositionOfNode = function(newPosition) {
        this.node.x = newPosition.x;
        this.node.y = newPosition.y;
      };
      PhoneStatus.prototype.start = function() {};
      PhoneStatus.prototype.update = function(dt) {
        this._updateTimerChecker -= dt;
        if (this._updateTimerChecker <= 0) {
          this._updatePhoneStatus();
          this._updateTimerChecker = this.timeBetweenUpdate;
        }
      };
      PhoneStatus.prototype._updatePhoneStatus = function() {
        var batteryStatus = cc.sys.getBatteryLevel();
        this.node.getChildByName("battery").getComponent(cc.ProgressBar).progress = batteryStatus;
        var hours;
        hours = new Date().getHours() < 10 ? "0" + new Date().getHours() : new Date().getHours();
        var minutes;
        minutes = new Date().getMinutes() < 10 ? "0" + new Date().getMinutes() : new Date().getMinutes();
        this.node.getChildByName("current_time").getComponent(cc.Label).string = hours + " : " + minutes;
      };
      __decorate([ property(cc.Integer) ], PhoneStatus.prototype, "timeBetweenUpdate", void 0);
      PhoneStatus = __decorate([ ccclass ], PhoneStatus);
      return PhoneStatus;
    }(cc.Component);
    exports.PhoneStatus = PhoneStatus;
    cc._RF.pop();
  }, {} ],
  PlayersAvatarsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76d97KD6/VCF7+y99UpnjBC", "PlayersAvatarsPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayersAvatarsPanel = function(_super) {
      __extends(PlayersAvatarsPanel, _super);
      function PlayersAvatarsPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerAvatar = null;
        _this.player1 = null;
        _this.player2 = null;
        _this.player3 = null;
        _this.player4 = null;
        _this._places = [];
        return _this;
      }
      PlayersAvatarsPanel.prototype.addPlaces = function(data) {
        this._places = data;
      };
      PlayersAvatarsPanel.prototype.updatePlayersData = function() {
        this.playerAvatar.id = this._places[0].player.id;
        this._updateData(this.player1, this._places[1]);
        this._updateData(this.player2, this._places[2]);
        this._updateData(this.player3, this._places[3]);
        this._updateData(this.player4, this._places[4]);
      };
      PlayersAvatarsPanel.prototype._updateData = function(player, data) {
        player.id = data.player.id;
        player.getChildByName("levelValueLabel").getComponent(cc.Label).string = "v" + data.player.level;
        player.getChildByName("moneyValueLabel").getComponent(cc.Label).string = data.player.balance;
        player.getChildByName("userNamelabel") && (player.getChildByName("userNamelabel").getComponent(cc.Label).string = data.player.name);
      };
      __decorate([ property(cc.Node) ], PlayersAvatarsPanel.prototype, "playerAvatar", void 0);
      __decorate([ property(cc.Node) ], PlayersAvatarsPanel.prototype, "player1", void 0);
      __decorate([ property(cc.Node) ], PlayersAvatarsPanel.prototype, "player2", void 0);
      __decorate([ property(cc.Node) ], PlayersAvatarsPanel.prototype, "player3", void 0);
      __decorate([ property(cc.Node) ], PlayersAvatarsPanel.prototype, "player4", void 0);
      PlayersAvatarsPanel = __decorate([ ccclass ], PlayersAvatarsPanel);
      return PlayersAvatarsPanel;
    }(cc.Component);
    exports.default = PlayersAvatarsPanel;
    cc._RF.pop();
  }, {} ],
  PlayersListPopupItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5dec6pjO9xBiqlv6202r5UQ", "PlayersListPopupItem");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayersListPopupItem = function(_super) {
      __extends(PlayersListPopupItem, _super);
      function PlayersListPopupItem() {
        var _this = _super.call(this) || this;
        _this.winLabel = null;
        _this.numberLabel = null;
        _this.nameLabel = null;
        _this.winFont = null;
        _this.loseFont = null;
        _this._winValue = 0;
        _this._numberValue = 0;
        _this._playerNameValue = "";
        return _this;
      }
      PlayersListPopupItem.prototype.start = function() {};
      Object.defineProperty(PlayersListPopupItem.prototype, "playerNameValue", {
        get: function() {
          return this._playerNameValue;
        },
        set: function(value) {
          this._playerNameValue = value;
          this.nameLabel.string = this.playerNameValue;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PlayersListPopupItem.prototype, "winValue", {
        get: function() {
          return this._winValue;
        },
        set: function(value) {
          this._winValue = value;
          this.winLabel.font = value > 0 ? this.winFont : this.loseFont;
          this.winLabel.string = (value > 0 ? "+" : "") + this.winValue.toString();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PlayersListPopupItem.prototype, "numberValue", {
        get: function() {
          return this._numberValue;
        },
        set: function(value) {
          this._numberValue = value;
          this.numberLabel.string = this.numberValue.toString();
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Label) ], PlayersListPopupItem.prototype, "winLabel", void 0);
      __decorate([ property(cc.Label) ], PlayersListPopupItem.prototype, "numberLabel", void 0);
      __decorate([ property(cc.Label) ], PlayersListPopupItem.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Font) ], PlayersListPopupItem.prototype, "winFont", void 0);
      __decorate([ property(cc.Font) ], PlayersListPopupItem.prototype, "loseFont", void 0);
      PlayersListPopupItem = __decorate([ ccclass ], PlayersListPopupItem);
      return PlayersListPopupItem;
    }(cc.Component);
    exports.default = PlayersListPopupItem;
    cc._RF.pop();
  }, {} ],
  PlayersListPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0981cu4kvdALafgEhMNX9zP", "PlayersListPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayersListPopupItem_1 = require("./PlayersListPopupItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayersListPopup = function(_super) {
      __extends(PlayersListPopup, _super);
      function PlayersListPopup() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.listItemPrefab = null;
        _this.content = null;
        _this._started = false;
        _this._data = null;
        return _this;
      }
      PlayersListPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
        this._started = true;
      };
      PlayersListPopup.prototype.addItems = function(data) {
        this._data = data;
        if (!this.node.active) return;
        this.updatePanel();
      };
      PlayersListPopup.prototype.updatePanel = function() {
        var _this = this;
        if (!this._data) return;
        this.content.removeAllChildren(true);
        var prefabItem = null;
        var listItem = null;
        this._data.forEach(function(item, index) {
          if (item.player) {
            prefabItem = cc.instantiate(_this.listItemPrefab);
            listItem = prefabItem.getComponent(PlayersListPopupItem_1.default);
            listItem.playerNameValue = item.player.name;
            listItem.numberValue = index + 1;
            listItem.winValue = +Math.random().toFixed(3) * (Math.random() >= .5 ? 1 : -1);
            _this.content.addChild(prefabItem);
          }
        });
      };
      PlayersListPopup.prototype.show = function() {
        this.node.active = true;
        this.updatePanel();
      };
      PlayersListPopup.prototype.hide = function() {
        this.node.active = false;
      };
      __decorate([ property(cc.Prefab) ], PlayersListPopup.prototype, "listItemPrefab", void 0);
      __decorate([ property(cc.Node) ], PlayersListPopup.prototype, "content", void 0);
      PlayersListPopup = __decorate([ ccclass ], PlayersListPopup);
      return PlayersListPopup;
    }(cc.Component);
    exports.default = PlayersListPopup;
    cc._RF.pop();
  }, {
    "./PlayersListPopupItem": "PlayersListPopupItem"
  } ],
  Pool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d5d6XqsY5KHomV1MshbJi+", "Pool");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Pool = function() {
      function Pool(loop, minSize) {
        void 0 === loop && (loop = false);
        void 0 === minSize && (minSize = 0);
        this._poolArray = [];
        this._index = 0;
        this._isLoop = loop;
        this._minSize = minSize;
      }
      Pool.prototype.poolIn = function(item) {
        this._poolArray.push(item);
      };
      Pool.prototype.poolOut = function() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) params[_i] = arguments[_i];
        this._index + 1 >= this._minSize && this._poolEmptyCallback && this._poolEmptyCallback();
        var item = this._poolArray[this._index];
        this._poolOutCallback && this._poolOutCallback.apply(this, [ item ].concat(params));
        this._index++;
        this._index == this._poolArray.length && (this._index = this._isLoop ? 0 : this._index - 1);
        return item;
      };
      Pool.prototype.reset = function() {
        var removedItems = this._poolArray.splice(0, this._poolArray.length - this._minSize);
        this._index = 0;
        this._poolResetCallback && this._poolResetCallback(removedItems, this._poolArray);
      };
      Object.defineProperty(Pool.prototype, "index", {
        get: function() {
          return this._index;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pool.prototype, "length", {
        get: function() {
          return this._poolArray.length;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pool.prototype, "poolOutCallback", {
        set: function(value) {
          this._poolOutCallback = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pool.prototype, "poolEmptyCallback", {
        set: function(value) {
          this._poolEmptyCallback = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pool.prototype, "poolResetCallback", {
        set: function(value) {
          this._poolResetCallback = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pool.prototype, "poolArray", {
        get: function() {
          return this._poolArray;
        },
        enumerable: true,
        configurable: true
      });
      return Pool;
    }();
    exports.default = Pool;
    cc._RF.pop();
  }, {} ],
  PrefabLoader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f48ecjtbhVH6644w1f8TDpu", "PrefabLoader");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PrefabLoader = function(_super) {
      __extends(PrefabLoader, _super);
      function PrefabLoader() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.prefab = null;
        _this._prefabNode = null;
        return _this;
      }
      PrefabLoader.prototype.onLoad = function() {
        null == this._prefabNode && this.createPrefab();
      };
      PrefabLoader.prototype.getContent = function(type) {
        null == this._prefabNode && this.createPrefab();
        return this._prefabNode.getComponent(type);
      };
      PrefabLoader.prototype.createPrefab = function() {
        if (null != this.prefab) {
          this._prefabNode = cc.instantiate(this.prefab);
          this._prefabNode && this.node.addChild(this._prefabNode);
        }
      };
      __decorate([ property(cc.Prefab) ], PrefabLoader.prototype, "prefab", void 0);
      PrefabLoader = __decorate([ ccclass ], PrefabLoader);
      return PrefabLoader;
    }(cc.Component);
    exports.default = PrefabLoader;
    cc._RF.pop();
  }, {} ],
  PromptComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d564bW0unRBZp8n6nRGduB5", "PromptComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseWindow_1 = require("../../../../common/core/windows/BaseWindow");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDPrompt = function(_super) {
      __extends(DDPrompt, _super);
      function DDPrompt() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.textNode = null;
        _this.acceptNode = null;
        _this.denyNode = null;
        return _this;
      }
      DDPrompt.prototype.start = function() {};
      DDPrompt.prototype.init = function() {
        if (this._params.customParams.bothClose) {
          this.acceptNode.on("touchend", _super.prototype.close.bind(this));
          this.denyNode.on("touchend", _super.prototype.close.bind(this));
        } else {
          this.acceptNode.on("touchend", this._params.customParams.acceptFunction);
          this.denyNode.on("touchend", this._params.customParams.denyFunction);
        }
        this._params.customParams.textForField && this.setText(this._params.customParams.textForField);
      };
      DDPrompt.prototype.setText = function(labelString) {
        this.textNode.string = labelString;
      };
      DDPrompt.prototype.toggleVibrationListener = function(event) {};
      DDPrompt.prototype.closeSettings = function(event) {};
      __decorate([ property(cc.Label) ], DDPrompt.prototype, "textNode", void 0);
      __decorate([ property(cc.Node) ], DDPrompt.prototype, "acceptNode", void 0);
      __decorate([ property(cc.Node) ], DDPrompt.prototype, "denyNode", void 0);
      DDPrompt = __decorate([ ccclass ], DDPrompt);
      return DDPrompt;
    }(BaseWindow_1.default);
    exports.DDPrompt = DDPrompt;
    cc._RF.pop();
  }, {
    "../../../../common/core/windows/BaseWindow": "BaseWindow"
  } ],
  QuardWithCardsCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed4dfW2YfJFn73Wx5Py3yAt", "QuardWithCardsCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../../common/core/cards/Card");
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var QuardWithCardsCombination = function(_super) {
      __extends(QuardWithCardsCombination, _super);
      function QuardWithCardsCombination() {
        var _this = _super.call(this, QuardWithCardsCombination.NAME) || this;
        _this._config = [ [ [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ], [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ], [ [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ], [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ] ], [ [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ] ], [ [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ], [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ], [ [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ], [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ] ], [ [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ], [ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ] ] ];
        _this._fastCheckConfig = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._fastCheckConfig);
        return _this;
      }
      QuardWithCardsCombination.prototype.buildResult = function(cards, patternInd) {
        return _super.prototype.buildResult.call(this, cards, patternInd, true);
      };
      QuardWithCardsCombination.NAME = "QUARD WITH CARDS";
      return QuardWithCardsCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.QuardWithCardsCombination = QuardWithCardsCombination;
    cc._RF.pop();
  }, {
    "../../../../../../common/core/cards/Card": "Card",
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  QuardWithPairsCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc40erAULNGroGE9fYdKISe", "QuardWithPairsCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var QuardWithPairsCombination = function(_super) {
      __extends(QuardWithPairsCombination, _super);
      function QuardWithPairsCombination() {
        var _this = _super.call(this, QuardWithPairsCombination.NAME) || this;
        _this._config
        _this._fastCheckConfig = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._fastCheckConfig);
        return _this;
      }
      QuardWithPairsCombination.prototype.buildResult = function(cards, patternInd) {
        return _super.prototype.buildResult.call(this, cards, patternInd, true);
      };
      QuardWithPairsCombination.NAME = "QUARD WITH PAIRS";
      return QuardWithPairsCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.QuardWithPairsCombination = QuardWithPairsCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  ReduxPureTarget: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db4b9Qx1XZBP44MvETCdE+I", "ReduxPureTarget");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReduxPureTarget = function() {
      function ReduxPureTarget() {}
      ReduxPureTarget.prototype.componentReceivedProps = function(oldProps) {};
      ReduxPureTarget.prototype.init = function() {};
      ReduxPureTarget.prototype.destroy = function() {};
      return ReduxPureTarget;
    }();
    exports.default = ReduxPureTarget;
    cc._RF.pop();
  }, {} ],
  ResultInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f047WATLJEw63IsdxwO7Gx", "ResultInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RoundResult_1 = require("./RoundResult");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ResultInfo = function(_super) {
      __extends(ResultInfo, _super);
      function ResultInfo() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._bettingClosed = null;
        _this._roundResult = null;
        return _this;
      }
      ResultInfo.prototype.start = function() {
        this._bettingClosed = this.node.getChildByName("betting-closed");
        this._roundResult = this.node.getChildByName("roundResult").getComponent(RoundResult_1.default);
      };
      ResultInfo.prototype.showResult = function(data) {
        this._bettingClosed.active = false;
        this._roundResult.node.active = true;
        this._roundResult.showResult(data);
      };
      ResultInfo.prototype.hideResult = function() {
        this._bettingClosed.active = true;
        this._roundResult.node.active = false;
      };
      ResultInfo = __decorate([ ccclass ], ResultInfo);
      return ResultInfo;
    }(cc.Component);
    exports.default = ResultInfo;
    cc._RF.pop();
  }, {
    "./RoundResult": "RoundResult"
  } ],
  ResultsStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f705sOUk9Huq+iP/1Sv5BP", "ResultsStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ResultsStatistic = function(_super) {
      __extends(ResultsStatistic, _super);
      function ResultsStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ballAtlas = null;
        _this._data = null;
        _this._started = false;
        return _this;
      }
      ResultsStatistic.prototype.start = function() {
        this._started = true;
      };
      ResultsStatistic.prototype.updateStatistic = function(data) {
        this._data = data;
        if (!this._started) return;
        this.updatePanel();
      };
      ResultsStatistic.prototype.updatePanel = function() {
        var _this = this;
        this._data.forEach(function(historyItem, historyIndex) {
          var historyNode = _this.node.getChildByName("round" + historyIndex);
          if (historyNode) {
            historyNode.active = true;
            historyItem.forEach(function(item, index) {
              historyNode.children[index].getComponent(cc.Sprite).spriteFrame = _this.ballAtlas.getSpriteFrame(item.toString());
            });
          }
        });
      };
      __decorate([ property(cc.SpriteAtlas) ], ResultsStatistic.prototype, "ballAtlas", void 0);
      ResultsStatistic = __decorate([ ccclass ], ResultsStatistic);
      return ResultsStatistic;
    }(cc.Component);
    exports.default = ResultsStatistic;
    cc._RF.pop();
  }, {} ],
  Rewards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d94f2ScmSNNeo0+4YBaYC2z", "Rewards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("./Logger");
    var commonTypes_1 = require("./../commonTypes");
    var logger = Logger_1.default.getLogger("Rewards");
    var RewardsImpl = function() {
      function RewardsImpl(source, isStorage) {
        var _this = this;
        this._isStorage = false;
        this._indexOf = function(type) {
          var size = _this._source.length;
          for (var i = 0; i < size; i++) {
            var item = _this._source[i];
            if (item.name === type) return i;
          }
          return -1;
        };
        if (null == source) this._source = []; else if (Array.isArray(source)) this._source = source; else {
          var temp = source;
          this._source = Object.entries(temp).map(function(_a) {
            var name = _a[0], value = _a[1];
            var rewardEntry = Object.entries(commonTypes_1.Reward).filter(function(value1) {
              return value1[1] === name;
            })[0];
            if (null == rewardEntry) throw new Error("Invalid reward name");
            return {
              name: commonTypes_1.Reward[rewardEntry[0]],
              value: value
            };
          });
        }
        this._isStorage = isStorage;
      }
      RewardsImpl.prototype.get = function(type) {
        var itemIndex = this._indexOf(type);
        if (-1 === itemIndex) return 0;
        return this._source[itemIndex].value;
      };
      RewardsImpl.prototype.add = function(type, value) {
        this.set(type, this.get(type) + value);
      };
      RewardsImpl.prototype.set = function(type, value) {
        if (this._isStorage && value < 0) throw new Error("Can't set reward(" + type + ") value: " + value);
        var itemIndex = this._indexOf(type);
        var item;
        if (0 === value) itemIndex >= 0 && this._source.splice(itemIndex, 1); else {
          if (-1 === itemIndex) {
            itemIndex = this._source.length;
            this._source.push({
              name: type,
              value: 0
            });
          }
          item = this._source[itemIndex];
          item.value = value;
        }
      };
      RewardsImpl.prototype.isEmpty = function() {
        return 0 === this._source.length;
      };
      RewardsImpl.prototype.merge = function(rewards) {
        var _this = this;
        var other = rewards;
        other._source.forEach(function(rewardItem) {
          _this.add(rewardItem.name, rewardItem.value);
        });
        return this;
      };
      RewardsImpl.prototype.impossibleForMerge = function(rewards) {
        var _this = this;
        if (!this._isStorage) return [];
        var other = rewards;
        return other._source.reduce(function(result, rewardItem) {
          rewardItem.value + _this.get(rewardItem.name) < 0 && result.push(rewardItem.name);
          return result;
        }, []);
      };
      return RewardsImpl;
    }();
    function Rewards(source, isStorage) {
      void 0 === isStorage && (isStorage = false);
      return new RewardsImpl(source, isStorage);
    }
    exports.default = Rewards;
    cc._RF.pop();
  }, {
    "./../commonTypes": "commonTypes",
    "./Logger": "Logger"
  } ],
  RoadmapStatistic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "730a0JnzFJAb6iysUyBhH4J", "RoadmapStatistic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoadmapStatistic = function(_super) {
      __extends(RoadmapStatistic, _super);
      function RoadmapStatistic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.firstSprite = null;
        _this.secondSprite = null;
        _this.thirdSprite = null;
        _this._data = null;
        return _this;
      }
      RoadmapStatistic.prototype.start = function() {
        this._cleanOldData();
      };
      RoadmapStatistic.prototype.updateStatistic = function(data, bigPanel) {
        void 0 === bigPanel && (bigPanel = false);
        this._data = data;
        this._cleanOldData();
        bigPanel ? this._updateBigPanel() : this._updatePanel();
      };
      RoadmapStatistic.prototype._cleanOldData = function() {
        for (var i = 0; i < this.node.children.length; i++) for (var j = 0; j < this.node.children[i].children.length; j++) {
          var sprite = this.node.getChildByName("round" + (i + 1)).getChildByName(String(j + 1));
          sprite.getComponent("cc.Sprite").spriteFrame = null;
        }
      };
      RoadmapStatistic.prototype._updatePanel = function() {
        for (var i = 0; i < this.node.childrenCount; i++) if (this._data[i]) {
          var v = this._data[i].count > 6 ? 6 : this._data[i].count;
          for (var j = 0; j < v; j++) {
            var sprite = this.node.getChildByName("round" + (i + 1)).getChildByName(String(j + 1));
            var texture = this.firstSprite;
            1 === this._data[i].value ? texture = this.secondSprite : 2 === this._data[i].value && (texture = this.thirdSprite);
            sprite.getComponent("cc.Sprite").spriteFrame = texture;
          }
        }
      };
      RoadmapStatistic.prototype._updateBigPanel = function() {
        var arrValue = [];
        for (var i = 0; i < this._data.length; i++) for (var j = 0; j < this._data[i].count; j++) arrValue.push(this._data[i].value);
        var count = 45 < arrValue.length + 3 ? arrValue.length + 3 - 48 : 0;
        for (var i = 0; i < this.node.childrenCount; i++) if (this._data[i]) for (var j = 0; j < 6; j++) {
          var sprite = this.node.getChildByName("round" + (i + 1)).getChildByName(String(j + 1));
          var texture = this.firstSprite;
          1 === arrValue[count] ? texture = this.secondSprite : 2 === arrValue[count] && (texture = this.thirdSprite);
          count < arrValue.length && (sprite.getComponent("cc.Sprite").spriteFrame = texture);
          count++;
        }
      };
      __decorate([ property(cc.SpriteFrame) ], RoadmapStatistic.prototype, "firstSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], RoadmapStatistic.prototype, "secondSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], RoadmapStatistic.prototype, "thirdSprite", void 0);
      RoadmapStatistic = __decorate([ ccclass ], RoadmapStatistic);
      return RoadmapStatistic;
    }(cc.Component);
    exports.default = RoadmapStatistic;
    cc._RF.pop();
  }, {} ],
  RocketCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9c57I2HldGJLwoujpVaemm", "RocketCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var RocketCombination = function(_super) {
      __extends(RocketCombination, _super);
      function RocketCombination() {
        var _this = _super.call(this, RocketCombination.NAME, 2) || this;
        _this._config = [ [ [ [ "*" ], [ "H", 15 ] ], [ [ "*" ], [ "H", 14 ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      RocketCombination.NAME = "ROCKET";
      return RocketCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.RocketCombination = RocketCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  RoundResultPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c1a8ii2StAdIwcNmiV5m8I", "RoundResultPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoundResultPopup = function(_super) {
      __extends(RoundResultPopup, _super);
      function RoundResultPopup() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.f1 = null;
        _this.f2 = null;
        return _this;
      }
      RoundResultPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
      };
      RoundResultPopup.prototype.show = function(data) {
        var font = data > 0 ? this.f1 : this.f2;
        var add = data > 0 ? "+" : "-";
        var sss = this.node.getChildByName("winValueLabel");
        var ddd = sss.getComponent(cc.Label);
        ddd.font = font;
        ddd.string = add + Math.abs(data).toString();
        this.node.active = true;
      };
      RoundResultPopup.prototype.hide = function() {
        this.node.active = false;
      };
      __decorate([ property(cc.Font) ], RoundResultPopup.prototype, "f1", void 0);
      __decorate([ property(cc.Font) ], RoundResultPopup.prototype, "f2", void 0);
      RoundResultPopup = __decorate([ ccclass ], RoundResultPopup);
      return RoundResultPopup;
    }(cc.Component);
    exports.default = RoundResultPopup;
    cc._RF.pop();
  }, {} ],
  RoundResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "705691tlyZOo7+ioZ0jQrwT", "RoundResult");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoundResult = function(_super) {
      __extends(RoundResult, _super);
      function RoundResult() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.resultBallPrefab = null;
        _this.ballAtlas = null;
        return _this;
      }
      RoundResult.prototype.start = function() {};
      RoundResult.prototype.showResult = function(data) {
        var _this = this;
        data.forEach(function(item, index) {
          _this.node.children[index].getComponent(cc.Sprite).spriteFrame = _this.ballAtlas.getSpriteFrame(item.toString());
        });
      };
      __decorate([ property(cc.Prefab) ], RoundResult.prototype, "resultBallPrefab", void 0);
      __decorate([ property(cc.SpriteAtlas) ], RoundResult.prototype, "ballAtlas", void 0);
      RoundResult = __decorate([ ccclass ], RoundResult);
      return RoundResult;
    }(cc.Component);
    exports.default = RoundResult;
    cc._RF.pop();
  }, {} ],
  RoundTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87106afsAZLjLUOo9NXOseZ", "RoundTimer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoundTimer = function(_super) {
      __extends(RoundTimer, _super);
      function RoundTimer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timerLabel = null;
        _this._started = false;
        _this._data = null;
        return _this;
      }
      RoundTimer.prototype.start = function() {
        this.timerLabel = this.node.getComponent(cc.Label);
        this._started = true;
        this._data && (this.timerLabel.string = this._data.toString());
      };
      RoundTimer.prototype.updateValue = function(data) {
        this._data = data;
        if (!this._started) return;
        this.timerLabel.string = this._data.toString();
      };
      RoundTimer = __decorate([ ccclass ], RoundTimer);
      return RoundTimer;
    }(cc.Component);
    exports.default = RoundTimer;
    cc._RF.pop();
  }, {} ],
  RulesPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "488f2YF4FhPLa20e0ob5WdY", "RulesPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RulesPopup = function(_super) {
      __extends(RulesPopup, _super);
      function RulesPopup() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      RulesPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
      };
      RulesPopup.prototype.show = function() {
        this.node.active = true;
      };
      RulesPopup.prototype.hide = function() {
        this.node.active = false;
      };
      RulesPopup = __decorate([ ccclass ], RulesPopup);
      return RulesPopup;
    }(cc.Component);
    exports.default = RulesPopup;
    cc._RF.pop();
  }, {} ],
  SampleSelector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dddf2xzLGNBlrD/Bgo54UJM", "SampleSelector");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SampleSelector = function() {
      function SampleSelector(n, k, predicate) {
        this.elements = [];
        this.n = n;
        this.k = k;
        n < k && (this.k = this.n);
        if (this.k === this.n) {
          this.elements.push([]);
          for (var i = 0; i < this.n; i++) this.elements[0].push(i);
        } else {
          var temp = [];
          for (var i = 0; i < this.k; i++) temp.push(0);
          this.generate(0, temp, 0, predicate);
        }
      }
      SampleSelector.prototype.generate = function(start, sample, index, predicate) {
        for (var i = start; i < this.n; i++) {
          var needSkip = false;
          for (var j = 0; j < index; j++) sample[j] === i && (needSkip = true);
          if (!needSkip) {
            sample[index] = i;
            index === this.k - 1 ? (null == predicate || predicate(sample, this.elements)) && this.elements.push(sample.slice()) : i < this.n - 1 && this.generate(i + 1, sample, index + 1, predicate);
          }
        }
      };
      SampleSelector.prototype.size = function() {
        return this.elements.length;
      };
      SampleSelector.prototype.getCombination = function(index) {
        if (index >= this.elements.length) return [];
        return this.elements[index];
      };
      SampleSelector.itemInRowPredicate = function(count) {
        return function(sample) {
          var size = sample.length - count;
          for (var i = 0; i < size; i++) {
            var found = true;
            for (var j = 1; j < count && found; j++) sample[i + j - 1] + 1 !== sample[i + j] && (found = false);
            if (found) return true;
          }
          return false;
        };
      };
      return SampleSelector;
    }();
    exports.SampleSelector = SampleSelector;
    cc._RF.pop();
  }, {} ],
  SceneController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "808faCYXppEdZQ7iYkNKcqZ", "SceneController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var connect_1 = require("./redux-connect/connect/connect");
    var ReduxPureTarget_1 = require("./redux-connect/components/ReduxPureTarget");
    var Logger_1 = require("./Logger");
    var sceneActions_1 = require("../store/sceneActions");
    var mapStateToProps = function(state) {
      return {
        name: "SceneController",
        sceneState: state.sceneState
      };
    };
    var mapDispatchToProps = __assign({}, sceneActions_1.SceneActions);
    var logger = Logger_1.default.getLogger("SceneController");
    var SceneController = function(_super) {
      __extends(SceneController, _super);
      function SceneController() {
        var _this = _super.call(this) || this;
        _this.state = {
          currentScene: cc.director.getScene().name
        };
        logger.info("New: " + _this.state.currentScene);
        return _this;
      }
      SceneController.prototype.componentReceivedProps = function(oldProps) {
        logger.info("componentReceivedProps: " + JSON.stringify(this.props.sceneState));
        if (null != this.props.sceneState.current && this.props.sceneState.current.name !== this.state.currentScene) {
          this.state.currentScene = this.props.sceneState.current.name;
          logger.info("SetScene: " + this.state.currentScene);
          cc.director.loadScene(this.state.currentScene);
        }
      };
      SceneController = __decorate([ connect_1.connectToTarget(mapStateToProps, mapDispatchToProps) ], SceneController);
      return SceneController;
    }(ReduxPureTarget_1.default);
    exports.default = SceneController;
    cc._RF.pop();
  }, {
    "../store/sceneActions": "sceneActions",
    "./Logger": "Logger",
    "./redux-connect/components/ReduxPureTarget": "ReduxPureTarget",
    "./redux-connect/connect/connect": "connect"
  } ],
  SelectTableSceneBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a4349tkpGJMdoaIBy7k3Nj3", "SelectTableSceneBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var commonTypes_1 = require("../../../../common/commonTypes");
    var Component_1 = require("../../../../common/component/Component");
    var sceneActions_1 = require("../../../../common/store/sceneActions");
    var connect_1 = require("../../../../common/core/redux-connect/connect/connect");
    var Rewards_1 = require("../../../../common/core/Rewards");
    var ccclass = cc._decorator.ccclass;
    var mapStateToProps = function(state) {
      return {
        name: "SelectTableSceneBase",
        scene: state.sceneState.current,
        playerId: state.main.sessionState.serverConnected ? state.main.modelState.playerId : "",
        playerName: state.main.sessionState.serverConnected ? state.main.modelState.playerName : "",
        playerBalance: state.main.sessionState.serverConnected ? Rewards_1.default(state.main.modelState.playerStorage).get(commonTypes_1.Reward.COINS) : 0,
        playerAvatarId: state.main.sessionState.serverConnected ? state.main.modelState.playerAvatarId : "",
        playerGender: state.main.sessionState.serverConnected ? state.main.modelState.playerGender : ""
      };
    };
    var mapDispatchToProps = __assign({}, sceneActions_1.SceneActions);
    var SelectTableSceneBase = function(_super) {
      __extends(SelectTableSceneBase, _super);
      function SelectTableSceneBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._items = [];
        return _this;
      }
      SelectTableSceneBase.prototype.start = function() {
        null != this.props.scene && null != this.props.scene.params && null != this.props.scene.params.config && (this._config = this.props.scene.params.config);
        console.log("CONFIG ", this._config);
        null != this._config && this.drawItems(this._config);
      };
      SelectTableSceneBase.prototype.playGamebtnClick = function() {
        this.playGame(this._config, this._items[0].config);
      };
      SelectTableSceneBase.prototype.playGame = function(config, tableConfig) {
        this.props.scenePush(this._config.scene, {
          config: this.props.scene.params.config,
          tableId: tableConfig.id
        });
      };
      SelectTableSceneBase.prototype.onBackButtonPress = function() {
        this.props.scenePop();
      };
      SelectTableSceneBase.prototype.backToGameMenu = function() {
        this.props.scenePopToRoot();
      };
      SelectTableSceneBase.prototype.onChooseItem = function(itemIndex) {
        this.playGame(this._config, this._items[itemIndex].config);
      };
      SelectTableSceneBase.prototype.drawItems = function(gameConfig) {};
      SelectTableSceneBase.prototype.addItem = function(betView) {
        var config = this._config.tables;
        var index = this._items.length;
        betView.setup(config[index]);
        betView.index = index;
        this._items.push(betView);
      };
      SelectTableSceneBase = __decorate([ ccclass, connect_1.connect(mapStateToProps, mapDispatchToProps) ], SelectTableSceneBase);
      return SelectTableSceneBase;
    }(Component_1.default);
    exports.default = SelectTableSceneBase;
    var BetItem = function(_super) {
      __extends(BetItem, _super);
      function BetItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.index = -1;
        _this._selected = false;
        return _this;
      }
      BetItem.prototype.setup = function(config) {
        this._config = config;
      };
      Object.defineProperty(BetItem.prototype, "config", {
        get: function() {
          return this._config;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BetItem.prototype, "selected", {
        get: function() {
          return this._selected;
        },
        set: function(value) {
          this._selected = value;
          this.updateItem();
        },
        enumerable: true,
        configurable: true
      });
      BetItem.prototype.updateItem = function() {};
      return BetItem;
    }(cc.Component);
    exports.BetItem = BetItem;
    cc._RF.pop();
  }, {
    "../../../../common/commonTypes": "commonTypes",
    "../../../../common/component/Component": "Component",
    "../../../../common/core/Rewards": "Rewards",
    "../../../../common/core/redux-connect/connect/connect": "connect",
    "../../../../common/store/sceneActions": "sceneActions"
  } ],
  SequenceCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e8c8T3X0tEHKtXVsSyuaXA", "SequenceCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../../common/core/cards/Card");
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var SequenceCombination = function(_super) {
      __extends(SequenceCombination, _super);
      function SequenceCombination(size) {
        var _this = _super.call(this, SequenceCombination.NAME) || this;
        _this._config = [];
        var item = [ [ [ "*" ], [ "R", "B", [ Card_1.CardLevel.C2, Card_1.CardLevel.RED_JOKER, Card_1.CardLevel.BLACK_JOKER ] ] ] ];
        for (var j = 1; j <= size - 1; j++) item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2, Card_1.CardLevel.RED_JOKER, Card_1.CardLevel.BLACK_JOKER ] ] ]);
        _this._config.push(item);
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      SequenceCombination.NAME = "SEQUENCE";
      return SequenceCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.SequenceCombination = SequenceCombination;
    cc._RF.pop();
  }, {
    "../../../../../../common/core/cards/Card": "Card",
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  SequenceOfPairsCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97db7Hm+6VIfrfs7qzWh84k", "SequenceOfPairsCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../../common/core/cards/Card");
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var SequenceOfPairsCombination = function(_super) {
      __extends(SequenceOfPairsCombination, _super);
      function SequenceOfPairsCombination(size) {
        var _this = _super.call(this, SequenceOfPairsCombination.NAME) || this;
        _this._config = [];
        var item = [ [ [ "*" ], [ "R", "B", [ Card_1.CardLevel.C2, Card_1.CardLevel.RED_JOKER, Card_1.CardLevel.BLACK_JOKER ] ] ], [ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2, Card_1.CardLevel.RED_JOKER, Card_1.CardLevel.BLACK_JOKER ] ] ] ];
        for (var j = 1; j <= size - 1; j++) {
          item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2, Card_1.CardLevel.RED_JOKER, Card_1.CardLevel.BLACK_JOKER ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2, Card_1.CardLevel.RED_JOKER, Card_1.CardLevel.BLACK_JOKER ] ] ]);
        }
        _this._config.push(item);
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      SequenceOfPairsCombination.NAME = "SEQUENCE OF PAIRS";
      return SequenceOfPairsCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.SequenceOfPairsCombination = SequenceOfPairsCombination;
    cc._RF.pop();
  }, {
    "../../../../../../common/core/cards/Card": "Card",
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  SequenceOfQuardsCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53d81ag6O5DR6EpbOP+syRy", "SequenceOfQuardsCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var SequenceOfQuardsCombination = function(_super) {
      __extends(SequenceOfQuardsCombination, _super);
      function SequenceOfQuardsCombination(size) {
        var _this = _super.call(this, SequenceOfQuardsCombination.NAME) || this;
        _this._config = [];
        var item = [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R", 0 ] ], [ [ "*" ], [ "R", 0 ] ], [ [ "*" ], [ "R", 0 ] ] ];
        for (var j = 1; j <= size - 1; j++) {
          item.push([ [ "*" ], [ "R", -j ] ]);
          item.push([ [ "*" ], [ "R", -j ] ]);
          item.push([ [ "*" ], [ "R", -j ] ]);
          item.push([ [ "*" ], [ "R", -j ] ]);
        }
        _this._config.push(item);
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      SequenceOfQuardsCombination.NAME = "SEQUENCE OF QUARDS";
      return SequenceOfQuardsCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.SequenceOfQuardsCombination = SequenceOfQuardsCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  SequenceOfTripletsCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e182bD7rV1BIo8gDpAwmWSp", "SequenceOfTripletsCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var SequenceOfTripletsCombination = function(_super) {
      __extends(SequenceOfTripletsCombination, _super);
      function SequenceOfTripletsCombination(size) {
        var _this = _super.call(this, SequenceOfTripletsCombination.NAME) || this;
        _this._config = [];
        var item = [ [ [ "*" ], [ "R", "B", [ 2 ] ] ], [ [ "*" ], [ "R", 0, [ 2 ] ] ], [ [ "*" ], [ "R", 0, [ 2 ] ] ] ];
        for (var j = 1; j <= size - 1; j++) {
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
        }
        _this._config.push(item);
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      SequenceOfTripletsCombination.NAME = "SEQUENCE OF TRIPLETS";
      return SequenceOfTripletsCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.SequenceOfTripletsCombination = SequenceOfTripletsCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  SequenceOfTripletsWithCardCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32b09oWqpxMCofP/FtsS9kC", "SequenceOfTripletsWithCardCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../../common/core/cards/Card");
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var SequenceOfTripletsWithCardCombination = function(_super) {
      __extends(SequenceOfTripletsWithCardCombination, _super);
      function SequenceOfTripletsWithCardCombination(size) {
        var _this = _super.call(this, SequenceOfTripletsWithCardCombination.NAME) || this;
        _this._config = [];
        _this._fastCheckConfig = [];
        var item = [];
        for (var k = 0; k <= size; k++) {
          item = [];
          for (var kk = k - size; kk < k; kk++) {
            kk < 0 && item.push([ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ]);
            if (0 === kk || kk < 0 && kk === k - 1) {
              item.push([ [ "*" ], [ "+R", "B", [ Card_1.CardLevel.C2 ] ] ]);
              item.push([ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2 ] ] ]);
              item.push([ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2 ] ] ]);
              for (var j = 1; j <= size - 1; j++) {
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
              }
            }
            kk >= 0 && item.push([ [ "*" ], [ "!*", "", [ Card_1.CardLevel.RED_JOKER ] ] ]);
          }
          _this._config.push(item);
          item = [];
          for (var kk = k - size; kk < k; kk++) {
            kk < 0 && item.push([ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ]);
            if (0 === kk || kk < 0 && kk === k - 1) {
              item.push([ [ "*" ], [ "+R", "B", [ Card_1.CardLevel.C2 ] ] ]);
              item.push([ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2 ] ] ]);
              item.push([ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2 ] ] ]);
              for (var j = 1; j <= size - 1; j++) {
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
              }
            }
            kk >= 0 && item.push([ [ "*" ], [ "!*", "", [ Card_1.CardLevel.BLACK_JOKER ] ] ]);
          }
          _this._config.push(item);
        }
        item = [ [ [ "*" ], [ "R", "B", [ 2 ] ] ], [ [ "*" ], [ "R", 0, [ 2 ] ] ], [ [ "*" ], [ "R", 0, [ 2 ] ] ] ];
        for (var j = 1; j <= size - 1; j++) {
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
        }
        _this._fastCheckConfig.push(item);
        _this.parseCombinationConfig(_this._config, _this._fastCheckConfig);
        return _this;
      }
      SequenceOfTripletsWithCardCombination.prototype.buildResult = function(cards, patternInd) {
        return _super.prototype.buildResult.call(this, cards, patternInd, true);
      };
      SequenceOfTripletsWithCardCombination.NAME = "SEQUENCE OF TRIPLETS WITH CARD";
      return SequenceOfTripletsWithCardCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.SequenceOfTripletsWithCardCombination = SequenceOfTripletsWithCardCombination;
    cc._RF.pop();
  }, {
    "../../../../../../common/core/cards/Card": "Card",
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  SequenceOfTripletsWithPairCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e71cchLgNORKDIoRVXlRv8", "SequenceOfTripletsWithPairCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../../../common/core/cards/Card");
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var SequenceOfTripletsWithPairCombination = function(_super) {
      __extends(SequenceOfTripletsWithPairCombination, _super);
      function SequenceOfTripletsWithPairCombination(size) {
        var _this = _super.call(this, SequenceOfTripletsWithPairCombination.NAME) || this;
        _this._config = [];
        _this._fastCheckConfig = [];
        var item = [];
        for (var k = 0; k <= size; k++) {
          item = [];
          for (var kk = k - size; kk < k; kk++) {
            if (kk < 0) {
              item.push([ [ "*" ], [ "R", "B" ] ]);
              item.push([ [ "*" ], [ "R" ] ]);
            }
            if (0 === kk || kk < 0 && kk === k - 1) {
              item.push([ [ "*" ], [ "+R", "B", [ Card_1.CardLevel.C2 ] ] ]);
              item.push([ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2 ] ] ]);
              item.push([ [ "*" ], [ "R", 0, [ Card_1.CardLevel.C2 ] ] ]);
              for (var j = 1; j <= size - 1; j++) {
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
                item.push([ [ "*" ], [ "R", -j, [ Card_1.CardLevel.C2 ] ] ]);
              }
            }
            if (kk >= 0) {
              item.push([ [ "*" ], [ "R", "B" ] ]);
              item.push([ [ "*" ], [ "R" ] ]);
            }
          }
          _this._config.push(item);
        }
        item = [ [ [ "*" ], [ "R", "B", [ 2 ] ] ], [ [ "*" ], [ "R", 0, [ 2 ] ] ], [ [ "*" ], [ "R", 0, [ 2 ] ] ] ];
        for (var j = 1; j <= size - 1; j++) {
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
          item.push([ [ "*" ], [ "R", -j, [ 2 ] ] ]);
        }
        _this._fastCheckConfig.push(item);
        _this.parseCombinationConfig(_this._config, _this._fastCheckConfig);
        return _this;
      }
      SequenceOfTripletsWithPairCombination.prototype.buildResult = function(cards, patternInd) {
        return _super.prototype.buildResult.call(this, cards, patternInd, true);
      };
      SequenceOfTripletsWithPairCombination.NAME = "SEQUENCE OF TRIPLETS WITH PAIR";
      return SequenceOfTripletsWithPairCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.SequenceOfTripletsWithPairCombination = SequenceOfTripletsWithPairCombination;
    cc._RF.pop();
  }, {
    "../../../../../../common/core/cards/Card": "Card",
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  ServerConnector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eaeb7SSqLNMQZQ39gmubRRc", "ServerConnector");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Config_1 = require("../config/Config");
    var Logger_1 = require("../core/Logger");
    var client_1 = require("./nakama/api/client");
    var session_1 = require("./nakama/api/session");
    var withPromiseOrder_1 = require("../core/withPromiseOrder");
    var ccclass = cc._decorator.ccclass;
    var ServerModule = function() {
      function ServerModule(context) {
        null == context.realtimeMessageListeners && (context.realtimeMessageListeners = []);
        null == context.exceptionHandlers && (context.exceptionHandlers = []);
        this._context = context;
      }
      ServerModule.prototype.processException = function(e) {
        logger.error("Process eception:", e);
        if (null != this._context && null != this._context.exceptionHandlers) for (var i = 0; i < this._context.exceptionHandlers.length; i++) {
          var handler = this._context.exceptionHandlers[i].handler;
          var result = handler(e);
          if (result) return;
        }
        throw e;
      };
      return ServerModule;
    }();
    function withExceptionHandler(target, key, descriptor) {
      void 0 === descriptor && (descriptor = Object.getOwnPropertyDescriptor(target, key));
      var originalMethod = descriptor.value;
      descriptor.value = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        return __awaiter(this, void 0, Promise, function() {
          var e_1;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              _a.trys.push([ 0, 2, , 3 ]);
              return [ 4, originalMethod.apply(this, args) ];

             case 1:
              return [ 2, _a.sent() ];

             case 2:
              e_1 = _a.sent();
              target.processException(e_1);
              return [ 3, 3 ];

             case 3:
              return [ 2, null ];
            }
          });
        });
      };
      return descriptor;
    }
    var ServerConnector = function(_super) {
      __extends(ServerConnector, _super);
      function ServerConnector() {
        var _this = _super.call(this, {
          client: new client_1.Client(Config_1.default.nakamaServer.serverKey, Config_1.default.nakamaServer.host, Config_1.default.nakamaServer.port.toString())
        }) || this;
        _this.__instanceId = -100501;
        _this._context.connector = _this;
        _this._context.client.useSSL = false;
        _this._context.client.verbose = true;
        return _this;
      }
      Object.defineProperty(ServerConnector.prototype, "rpc", {
        get: function() {
          null == this._rpc && (this._rpc = new Rpc(this._context));
          return this._rpc;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ServerConnector.prototype, "match", {
        get: function() {
          null == this._match && (this._match = new Match(this._context));
          return this._match;
        },
        enumerable: true,
        configurable: true
      });
      ServerConnector.prototype.prepareRealtimeConnection = function() {
        return __awaiter(this, void 0, Promise, function() {
          var _a;
          return __generator(this, function(_b) {
            switch (_b.label) {
             case 0:
              logger.info("prepareRealtimeConnection");
              if (null == this._context.socketConnection) {
                this._context.socketConnection = this._context.client.createSocket(false, true);
                this.setupListeners(this._context.socketConnection);
              }
              if (!(null == this._context.socketSession)) return [ 3, 3 ];
              return [ 4, this.checkSession() ];

             case 1:
              _b.sent();
              logger.info("Session info: " + JSON.stringify(this._context.session) + ", currentTime = " + new Date().getTime());
              _a = this._context;
              return [ 4, this._context.socketConnection.connect(this._context.session, true) ];

             case 2:
              _a.socketSession = _b.sent();
              _b.label = 3;

             case 3:
              logger.info("prepareRealtimeConnection complete");
              return [ 2, null != this._context.socketSession ];
            }
          });
        });
      };
      ServerConnector.prototype.destroyRealtimeConnection = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            logger.log("destroyRealtimeConnection");
            if (null != this._context.socketSession) {
              this._context.socketSession = null;
              this._context.socketConnection.disconnect(true);
            }
            return [ 2, null == this._context.socketSession ];
          });
        });
      };
      ServerConnector.prototype.registerRealtimeMessageListener = function(listener) {
        -1 === this._context.realtimeMessageListeners.indexOf(listener) && this._context.realtimeMessageListeners.push(listener);
      };
      ServerConnector.prototype.removeRealtimeMessageListener = function(listener) {
        var index = this._context.realtimeMessageListeners.indexOf(listener);
        index >= 0 && this._context.realtimeMessageListeners.splice(index, 1);
      };
      ServerConnector.prototype.registerExceptionHandler = function(handler, priority) {
        void 0 === priority && (priority = 0);
        var lastId = Math.max.apply(Math, [ 0 ].concat(this._context.exceptionHandlers.map(function(value) {
          return value.id;
        })));
        this._context.exceptionHandlers.push({
          id: lastId + 1,
          priority: priority,
          handler: handler
        });
        this._context.exceptionHandlers.sort(function(a, b) {
          if (a.priority === b.priority) return a.id - b.id;
          return b.priority - a.priority;
        });
        logger.info("ExceptionHandlers: " + JSON.stringify(this._context.exceptionHandlers));
      };
      ServerConnector.prototype.checkSession = function() {
        return __awaiter(this, void 0, Promise, function() {
          var currentTime, timeToSessionEnd;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              logger.info("Try to check session");
              cc.director.getScheduler().unscheduleAllForTarget(this);
              currentTime = Math.floor(new Date().getTime() / 1e3);
              if (!(null != this._context.session && this._context.session.isExpired(currentTime + 10))) return [ 3, 2 ];
              return [ 4, this.rpc.updateSession() ];

             case 1:
              _a.sent();
              _a.label = 2;

             case 2:
              if (null != this._context.session) {
                timeToSessionEnd = this._context.session.expires_at - currentTime - 5;
                if (timeToSessionEnd > 0) {
                  logger.info("Prepare sheduler to update session: " + timeToSessionEnd);
                  cc.director.getScheduler().schedule(this.checkSession, this, timeToSessionEnd, 0, 0);
                }
              }
              logger.info("Session checked");
              return [ 2 ];
            }
          });
        });
      };
      ServerConnector.prototype.dispatchRealtimeMessage = function(message) {
        this._context.realtimeMessageListeners.forEach(function(listener) {
          return listener(message);
        });
      };
      ServerConnector.prototype.setupListeners = function(socket) {
        var _this = this;
        socket.ondisconnect = function(event) {
          logger.info("Disconnected from the server. Event:", event);
          _this.dispatchRealtimeMessage({
            type: RealtimeMessageType.DISCONNECT
          });
        };
        socket.onnotification = function(notification) {
          logger.info("Received notification:", notification);
          _this.dispatchRealtimeMessage(__assign({
            type: RealtimeMessageType.NOTIFICATION
          }, notification));
        };
        socket.onchannelpresence = function(presence) {
          logger.info("Received presence update:", presence);
        };
        socket.onchannelmessage = function(message) {
          logger.info("Received new chat message:", message);
        };
        socket.onmatchdata = function(matchdata) {
          logger.info("Received match data: %o", matchdata);
          _this.dispatchRealtimeMessage({
            type: RealtimeMessageType.MATCH_DATA,
            matchId: matchdata.match_id,
            opCode: matchdata.op_code,
            data: matchdata.data
          });
        };
        socket.onmatchpresence = function(matchpresence) {
          logger.info("Received match presence update:", matchpresence);
          _this.dispatchRealtimeMessage({
            type: RealtimeMessageType.MATCH_PRESENCE,
            matchId: matchpresence.match_id,
            joinUsersId: (matchpresence.joins || []).map(function(value) {
              return value.user_id;
            }),
            leaveUsersId: (matchpresence.leaves || []).map(function(value) {
              return value.user_id;
            })
          });
        };
        socket.onmatchmakermatched = function(matchmakerMatched) {
          logger.info("Received matchmaker update:", matchmakerMatched);
          _this.dispatchRealtimeMessage({
            type: RealtimeMessageType.MATCHMAKER_MATCHED,
            matchId: matchmakerMatched.match_id,
            ticket: matchmakerMatched.ticket,
            token: matchmakerMatched.token
          });
        };
        socket.onstatuspresence = function(statusPresence) {
          logger.info("Received status presence update:", statusPresence);
        };
        socket.onstreampresence = function(streamPresence) {
          logger.info("Received stream presence update:", streamPresence);
        };
        socket.onstreamdata = function(streamdata) {
          logger.info("Received stream data:", streamdata);
        };
      };
      __decorate([ withExceptionHandler ], ServerConnector.prototype, "prepareRealtimeConnection", null);
      __decorate([ withPromiseOrder_1.withPromiseOrder, withExceptionHandler ], ServerConnector.prototype, "checkSession", null);
      return ServerConnector;
    }(ServerModule);
    exports.default = ServerConnector;
    var logger = Logger_1.default.getLogger(ServerConnector);
    var Rpc = function(_super) {
      __extends(Rpc, _super);
      function Rpc(context) {
        return _super.call(this, context) || this;
      }
      Rpc.prototype.login = function(data) {
        return __awaiter(this, void 0, Promise, function() {
          var response, loginResponse;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, this._context.client.rpcGet("login", null, "qq1122qq1122", data) ];

             case 1:
              response = _a.sent();
              loginResponse = response.payload;
              this._context.session = session_1.Session.restore(loginResponse.session.token);
              return [ 4, this._context.connector.checkSession() ];

             case 2:
              _a.sent();
              return [ 2, loginResponse ];
            }
          });
        });
      };
      Rpc.prototype.updateSession = function() {
        return __awaiter(this, void 0, Promise, function() {
          var response, sessionResponse, e_2;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              _a.trys.push([ 0, 2, , 3 ]);
              logger.info("Try to update session");
              return [ 4, this._context.client.rpc(this._context.session, "update_session", {}) ];

             case 1:
              response = _a.sent();
              sessionResponse = response.payload;
              logger.info("Session updated: " + JSON.stringify(sessionResponse));
              this._context.session = session_1.Session.restore(sessionResponse.session.token);
              return [ 2, true ];

             case 2:
              e_2 = _a.sent();
              this._context.session = null;
              throw e_2;

             case 3:
              return [ 2 ];
            }
          });
        });
      };
      Rpc.prototype.getConfig = function() {
        return __awaiter(this, void 0, Promise, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, this._context.client.rpc(this._context.session, "get_config", {}) ];

             case 1:
              response = _a.sent();
              return [ 2, response.payload ];
            }
          });
        });
      };
      Rpc.prototype.getOrCreateMatch = function(gameCode, tableId) {
        return __awaiter(this, void 0, Promise, function() {
          var response, _a, status, matchId;
          return __generator(this, function(_b) {
            switch (_b.label) {
             case 0:
              return [ 4, this._context.client.rpc(this._context.session, "get_or_create_match", {
                gameCode: gameCode,
                tableId: tableId
              }) ];

             case 1:
              response = _b.sent();
              _a = response.payload, status = _a.status, matchId = _a.matchId;
              logger.info("GetOrCreateMatch response: status = " + status + ", matchId = " + matchId);
              return [ 2, status ? matchId : void 0 ];
            }
          });
        });
      };
      __decorate([ withExceptionHandler ], Rpc.prototype, "login", null);
      __decorate([ withExceptionHandler ], Rpc.prototype, "updateSession", null);
      __decorate([ withExceptionHandler ], Rpc.prototype, "getConfig", null);
      __decorate([ withExceptionHandler ], Rpc.prototype, "getOrCreateMatch", null);
      return Rpc;
    }(ServerModule);
    var Match = function(_super) {
      __extends(Match, _super);
      function Match(context) {
        var _this = _super.call(this, context) || this;
        _this._listeners = [];
        _this.realtimeMessageHandler = function(message) {
          message.type !== RealtimeMessageType.MATCH_PRESENCE && message.type !== RealtimeMessageType.MATCH_DATA && message.type !== RealtimeMessageType.MATCHMAKER_MATCHED || _this.dispatchRealtimeMessage(message);
        };
        _this._context.realtimeMessageListeners.push(_this.realtimeMessageHandler);
        return _this;
      }
      Match.prototype.join = function(matchId) {
        return __awaiter(this, void 0, Promise, function() {
          var match_id;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, this._context.socketConnection.send({
                match_join: {
                  match_id: matchId
                }
              }) ];

             case 1:
              match_id = _a.sent().match_id;
              return [ 2, match_id === matchId ];
            }
          });
        });
      };
      Match.prototype.message = function(matchId, opCode, data) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              if (!(null != this._context && null != this._context.socketSession)) return [ 3, 2 ];
              return [ 4, this._context.socketConnection.send({
                match_data_send: {
                  match_id: matchId,
                  op_code: opCode,
                  data: data,
                  presence: void 0
                }
              }) ];

             case 1:
              _a.sent();
              return [ 2, true ];

             case 2:
              return [ 2, false ];
            }
          });
        });
      };
      Match.prototype.registerListener = function(matchId, listener) {
        this._listeners.find(function(item) {
          return item.matchId === matchId && item.listener === listener;
        }) || this._listeners.push({
          matchId: matchId,
          listener: listener
        });
      };
      Match.prototype.removeListener = function(matchId, listener) {
        this._listeners = this._listeners.filter(function(item) {
          return !(item.matchId === matchId && item.listener === listener);
        });
      };
      Match.prototype.dispatchRealtimeMessage = function(message) {
        this._listeners.forEach(function(config) {
          message.type === RealtimeMessageType.MATCHMAKER_MATCHED ? null == config.matchId && config.listener(message) : null != config.matchId && config.matchId === message.matchId && config.listener(message);
        });
      };
      __decorate([ withExceptionHandler ], Match.prototype, "join", null);
      __decorate([ withExceptionHandler ], Match.prototype, "message", null);
      return Match;
    }(ServerModule);
    var RealtimeMessageType;
    (function(RealtimeMessageType) {
      RealtimeMessageType[RealtimeMessageType["DISCONNECT"] = 0] = "DISCONNECT";
      RealtimeMessageType[RealtimeMessageType["NOTIFICATION"] = 1] = "NOTIFICATION";
      RealtimeMessageType[RealtimeMessageType["CHANNEL_PRESENCE"] = 2] = "CHANNEL_PRESENCE";
      RealtimeMessageType[RealtimeMessageType["CHANNEL_MESSAGE"] = 3] = "CHANNEL_MESSAGE";
      RealtimeMessageType[RealtimeMessageType["MATCH_PRESENCE"] = 4] = "MATCH_PRESENCE";
      RealtimeMessageType[RealtimeMessageType["MATCH_DATA"] = 5] = "MATCH_DATA";
      RealtimeMessageType[RealtimeMessageType["MATCHMAKER_MATCHED"] = 6] = "MATCHMAKER_MATCHED";
      RealtimeMessageType[RealtimeMessageType["STATUS_PRESENCE"] = 7] = "STATUS_PRESENCE";
      RealtimeMessageType[RealtimeMessageType["STREAM_PRESENCE"] = 8] = "STREAM_PRESENCE";
      RealtimeMessageType[RealtimeMessageType["STREAM_DATA"] = 9] = "STREAM_DATA";
    })(RealtimeMessageType = exports.RealtimeMessageType || (exports.RealtimeMessageType = {}));
    cc._RF.pop();
  }, {
    "../config/Config": "Config",
    "../core/Logger": "Logger",
    "../core/withPromiseOrder": "withPromiseOrder",
    "./nakama/api/client": "client",
    "./nakama/api/session": "session"
  } ],
  ServerController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fba9eWKiJVFE6Q706sXN2zY", "ServerController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../core/Logger");
    var Config_1 = require("../config/Config");
    var ServerConnector_1 = require("./ServerConnector");
    var store_1 = require("../store");
    var mainActions_1 = require("../../main/Script/mainActions");
    var sceneActions_1 = require("../store/sceneActions");
    var ServerController = function() {
      function ServerController() {
        var _this = this;
        this._timeToTryConnect = 1;
        this.__instanceId = -100500;
        this.onActivated = function() {
          _this.connector.checkSession();
        };
        this.exceptionHandler = function(e) {
          store_1.default.dispatch(mainActions_1.MainActions.updateServerState(false));
          store_1.default.dispatch(sceneActions_1.SceneActions.scenePopToRoot());
          cc.director.getScheduler().unscheduleAllForTarget(_this);
          cc.director.getScheduler().schedule(_this.connect, _this, _this._timeToTryConnect, 0, 0);
          _this._timeToTryConnect = Math.min(16, 2 * _this._timeToTryConnect);
          return true;
        };
        this._connector = new ServerConnector_1.default();
        this.registerExceptionHandler(this.exceptionHandler.bind(this));
        cc.game.on(cc.game.EVENT_SHOW, this.onActivated.bind(this), this);
      }
      Object.defineProperty(ServerController, "instance", {
        get: function() {
          null == ServerController.__instance && (ServerController.__instance = new ServerController());
          return ServerController.__instance;
        },
        enumerable: true,
        configurable: true
      });
      ServerController.prototype.connect = function() {
        return __awaiter(this, void 0, Promise, function() {
          var storeState, playerInfo, serverConfig;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              storeState = store_1.default.getState();
              if (!!storeState.main.sessionState.serverConnected) return [ 3, 4 ];
              logger.info("Try to server connect");
              return [ 4, this.login(storeState.main.applicationState.uuid, storeState.main.applicationState.username, storeState.main.applicationState.avatarId, storeState.main.applicationState.gender) ];

             case 1:
              playerInfo = _a.sent();
              if (!(null != playerInfo)) return [ 3, 3 ];
              store_1.default.dispatch(mainActions_1.MainActions.updatePlayer(playerInfo));
              return [ 4, this.connector.rpc.getConfig() ];

             case 2:
              serverConfig = _a.sent();
              store_1.default.dispatch(mainActions_1.MainActions.setupGamesConfig(serverConfig.gamesOnField, Config_1.default.games, serverConfig.games));
              store_1.default.dispatch(mainActions_1.MainActions.updateServerState(true));
              this._timeToTryConnect = 1;
              _a.label = 3;

             case 3:
              logger.log("PlayerInfo: " + JSON.stringify(playerInfo));
              _a.label = 4;

             case 4:
              return [ 2 ];
            }
          });
        });
      };
      ServerController.prototype.registerExceptionHandler = function(handler, priority) {
        void 0 === priority && (priority = 0);
        this.connector.registerExceptionHandler(handler, priority);
      };
      ServerController.prototype.login = function(customUserId, username, avatarId, gender) {
        return __awaiter(this, void 0, Promise, function() {
          var loginResponse, e_1;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              logger.log("Logining...");
              _a.label = 1;

             case 1:
              _a.trys.push([ 1, 3, , 4 ]);
              return [ 4, this.connector.rpc.login({
                uuid: customUserId,
                name: username,
                avatar_id: avatarId,
                gender: gender
              }) ];

             case 2:
              loginResponse = _a.sent();
              return [ 2, {
                userId: loginResponse.account.user.id,
                userName: loginResponse.account.user.username,
                avatarId: loginResponse.profile.avatarId,
                gender: loginResponse.profile.gender,
                wallet: loginResponse.account.wallet || {}
              } ];

             case 3:
              e_1 = _a.sent();
              logger.log("Login error: " + (e_1.message || e_1));
              return [ 3, 4 ];

             case 4:
              return [ 2, void 0 ];
            }
          });
        });
      };
      Object.defineProperty(ServerController.prototype, "connector", {
        get: function() {
          return this._connector;
        },
        enumerable: true,
        configurable: true
      });
      return ServerController;
    }();
    exports.default = ServerController;
    var logger = Logger_1.default.getLogger(ServerController);
    cc._RF.pop();
  }, {
    "../../main/Script/mainActions": "mainActions",
    "../config/Config": "Config",
    "../core/Logger": "Logger",
    "../store": "index",
    "../store/sceneActions": "sceneActions",
    "./ServerConnector": "ServerConnector"
  } ],
  ServerLogicAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa6a4SceTpA3Kq0w9rmBjy6", "ServerLogicAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../core/Logger");
    var commonTypes_1 = require("../commonTypes");
    var ServerConnector_1 = require("./ServerConnector");
    var store_1 = require("../store");
    var Rewards_1 = require("../core/Rewards");
    var selector_1 = require("../core/selector");
    var mainActions_1 = require("../../main/Script/mainActions");
    var sceneActions_1 = require("../store/sceneActions");
    var withPromiseOrder_1 = require("../core/withPromiseOrder");
    var ServerLogicAdapterBase = function() {
      function ServerLogicAdapterBase(serverConnector, gameCode, tableId) {
        void 0 === tableId && (tableId = 1);
        var _this = this;
        this._serverMessageResolver = [];
        this._viewActionResolver = [];
        this.logger = Logger_1.default.getLogger(this);
        this.matchMessageHandler = function(message) {
          switch (message.type) {
           case ServerConnector_1.RealtimeMessageType.MATCH_DATA:
            _this.matchDataMessageHandler(message.opCode, message.data);
          }
        };
        this.generalMessageHandler = function(message) {
          switch (message.type) {
           case ServerConnector_1.RealtimeMessageType.DISCONNECT:
            store_1.default.dispatch(sceneActions_1.SceneActions.scenePopToRoot());
            _this.destroy();
            _this._serverConnector.checkSession();
          }
        };
        this._serverConnector = serverConnector;
        this._gameConfig = store_1.default.getState().main.modelState.games.find(function(value) {
          return value.config.code === gameCode;
        }).config;
        this._tableId = tableId;
      }
      ServerLogicAdapterBase.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, this._serverConnector.prepareRealtimeConnection() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      ServerLogicAdapterBase.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          var _a, status;
          return __generator(this, function(_b) {
            switch (_b.label) {
             case 0:
              _a = this;
              return [ 4, this._serverConnector.rpc.getOrCreateMatch(this._gameConfig.code, this._tableId) ];

             case 1:
              _a._matchId = _b.sent();
              this._serverConnector.match.registerListener(this._matchId, this.matchMessageHandler);
              this._serverConnector.registerRealtimeMessageListener(this.generalMessageHandler);
              return [ 4, this._serverConnector.match.join(this._matchId) ];

             case 2:
              status = _b.sent();
              return [ 2 ];
            }
          });
        });
      };
      ServerLogicAdapterBase.prototype.getCurrentPlayerInfo = function() {
        return {
          id: store_1.default.getState().main.modelState.playerId,
          name: store_1.default.getState().main.modelState.playerName,
          balance: Rewards_1.default(store_1.default.getState().main.modelState.playerStorage).get(commonTypes_1.Reward.COINS),
          avatarId: store_1.default.getState().main.modelState.playerAvatarId,
          gender: store_1.default.getState().main.modelState.playerGender,
          isGoldMember: false
        };
      };
      ServerLogicAdapterBase.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            selector_1.default(this._viewActionResolver)(action.type)(action);
            return [ 2, true ];
          });
        });
      };
      ServerLogicAdapterBase.prototype.registerActionDispatcher = function(handler) {
        this._actionDispatcher = handler;
      };
      ServerLogicAdapterBase.prototype.currentTime = function() {
        return Math.round(new Date().getTime() / 1e3);
      };
      ServerLogicAdapterBase.prototype.destroy = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              this._serverConnector.match.removeListener(this._matchId, this.matchMessageHandler);
              this._serverConnector.removeRealtimeMessageListener(this.generalMessageHandler);
              return [ 4, this._serverConnector.destroyRealtimeConnection() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      Object.defineProperty(ServerLogicAdapterBase.prototype, "tableConfig", {
        get: function() {
          var _this = this;
          return this._gameConfig.tables.find(function(value) {
            return value.id === _this._tableId;
          });
        },
        enumerable: true,
        configurable: true
      });
      ServerLogicAdapterBase.prototype.registerServerMessageHandler = function(opCode, handler) {
        this._serverMessageResolver.push([ opCode, function(code) {
          return function(data) {
            1 === handler.length ? handler(data) : handler(code, data);
          };
        } ]);
      };
      ServerLogicAdapterBase.prototype.registerViewActionHandler = function(actionType, handler) {
        this._viewActionResolver.push([ actionType, function(code) {
          return handler;
        } ]);
      };
      ServerLogicAdapterBase.prototype.dispatchAction = function(action) {
        this.logger.info("Dispatch action: " + JSON.stringify(action));
        return this._actionDispatcher(action);
      };
      ServerLogicAdapterBase.prototype.sendMessage = function(opCode, data) {
        this.logger.info("Send message to server: " + opCode + " - " + JSON.stringify(data));
        this._serverConnector.match.message(this._matchId, opCode, data);
      };
      ServerLogicAdapterBase.prototype.matchDataMessageHandler = function(opCode, data) {
        this.logger.info("Receive message from server: " + opCode + " - " + JSON.stringify(data));
        selector_1.default(this._serverMessageResolver)(opCode)(data);
      };
      ServerLogicAdapterBase.prototype.changeCurrentPlayerBalance = function(balance) {
        var _a;
        store_1.default.dispatch(mainActions_1.MainActions.updatePlayer({
          wallet: (_a = {}, _a[commonTypes_1.Reward.COINS] = balance, _a)
        }));
      };
      __decorate([ withPromiseOrder_1.withPromiseOrder ], ServerLogicAdapterBase.prototype, "dispatchAction", null);
      return ServerLogicAdapterBase;
    }();
    exports.ServerLogicAdapterBase = ServerLogicAdapterBase;
    cc._RF.pop();
  }, {
    "../../main/Script/mainActions": "mainActions",
    "../commonTypes": "commonTypes",
    "../core/Logger": "Logger",
    "../core/Rewards": "Rewards",
    "../core/selector": "selector",
    "../core/withPromiseOrder": "withPromiseOrder",
    "../store": "index",
    "../store/sceneActions": "sceneActions",
    "./ServerConnector": "ServerConnector"
  } ],
  SettingsCheckbox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c42c1Z96WtNJoFeIOJ7qetF", "SettingsCheckbox");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SettingsCheckbox = function(_super) {
      __extends(SettingsCheckbox, _super);
      function SettingsCheckbox() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.indicator = null;
        return _this;
      }
      SettingsCheckbox.prototype.start = function() {
        this.node.on("toggle", this.onToggle, this);
      };
      SettingsCheckbox.prototype.onToggle = function() {
        this.indicator.x = this.isChecked ? 60 : -60;
      };
      __decorate([ property(cc.Node) ], SettingsCheckbox.prototype, "indicator", void 0);
      SettingsCheckbox = __decorate([ ccclass ], SettingsCheckbox);
      return SettingsCheckbox;
    }(cc.Toggle);
    exports.default = SettingsCheckbox;
    cc._RF.pop();
  }, {} ],
  SettingsComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67245WzusVFiLiNHMGBZrqs", "SettingsComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseWindow_1 = require("../../../../common/core/windows/BaseWindow");
    var SoundManager_1 = require("../../../../common/managers/sound/SoundManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DDSettings = function(_super) {
      __extends(DDSettings, _super);
      function DDSettings() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DDSettings.prototype.start = function() {
        var musicNode = this.node.getChildByName("music_node");
        var soundNode = this.node.getChildByName("sound_node");
        musicNode.getChildByName("slider").getComponent(cc.Slider).progress = SoundManager_1.SoundManager.instance.musicVolume;
        musicNode.getChildByName("slider").getChildByName("progress").getComponent(cc.ProgressBar).progress = SoundManager_1.SoundManager.instance.musicVolume;
        soundNode.getChildByName("slider").getComponent(cc.Slider).progress = SoundManager_1.SoundManager.instance.soundVolume;
        soundNode.getChildByName("slider").getChildByName("progress").getComponent(cc.ProgressBar).progress = SoundManager_1.SoundManager.instance.soundVolume;
      };
      DDSettings.prototype.sliderEventListener = function(event) {
        event.node.getChildByName("progress").getComponent("cc.ProgressBar").progress = event.progress;
        "music_node" === event.node.parent.name ? SoundManager_1.SoundManager.instance.musicVolume = event.progress : SoundManager_1.SoundManager.instance.soundVolume = event.progress;
      };
      DDSettings.prototype.toggleVibrationListener = function(event) {};
      DDSettings.prototype.closeSettings = function(event) {};
      DDSettings = __decorate([ ccclass ], DDSettings);
      return DDSettings;
    }(BaseWindow_1.default);
    exports.DDSettings = DDSettings;
    cc._RF.pop();
  }, {
    "../../../../common/core/windows/BaseWindow": "BaseWindow",
    "../../../../common/managers/sound/SoundManager": "SoundManager"
  } ],
  SettingsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fd871uwQJFDMZnthgGUWQ5D", "SettingsPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SettingsPanel = function(_super) {
      __extends(SettingsPanel, _super);
      function SettingsPanel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SettingsPanel.prototype.start = function() {};
      SettingsPanel.prototype.show = function() {
        this.node.active = true;
      };
      SettingsPanel.prototype.hide = function() {
        this.node.active = false;
      };
      SettingsPanel.prototype.showHide = function() {
        this.node.active = !this.node.active;
      };
      SettingsPanel = __decorate([ ccclass ], SettingsPanel);
      return SettingsPanel;
    }(cc.Component);
    exports.default = SettingsPanel;
    cc._RF.pop();
  }, {} ],
  Slider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "657f084dWVC2r/n0Iv5M1d5", "Slider");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Slider = function(_super) {
      __extends(Slider, _super);
      function Slider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressMask = null;
        return _this;
      }
      Slider.prototype.start = function() {
        var _this = this;
        this.slide();
        this.node.on("slide", function() {
          _this.slide();
        });
      };
      Slider.prototype.slide = function() {
        this.progressMask.node.width = this.handle.node.x - this.progressMask.node.x;
      };
      __decorate([ property(cc.Mask) ], Slider.prototype, "progressMask", void 0);
      Slider = __decorate([ ccclass ], Slider);
      return Slider;
    }(cc.Slider);
    exports.default = Slider;
    cc._RF.pop();
  }, {} ],
  SolidBackground: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e482f7gT6xAWLP7bZejeIJC", "SolidBackground");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.color = new cc.Color(255, 255, 255, 255);
        return _this;
      }
      NewClass.prototype.onLoad = function() {
        this._graphics = this.node.addComponent(cc.Graphics);
        this._graphics.lineWidth = 0;
      };
      NewClass.prototype.update = function(dt) {
        this._graphics.clear();
        this._graphics.fillColor = this.color;
        this._graphics.fillRect(0, 0, this.node.width, this.node.height);
      };
      __decorate([ property(cc.Color) ], NewClass.prototype, "color", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {} ],
  SoundChannel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "762132KuVxNXZJbrmSPdVwH", "SoundChannel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SoundChannel = function(_super) {
      __extends(SoundChannel, _super);
      function SoundChannel(audioId, start, volume) {
        void 0 === start && (start = 0);
        void 0 === volume && (volume = 1);
        var _this = _super.call(this) || this;
        cc.audioEngine.setFinishCallback(audioId, _this.onCompleteHandler.bind(_this));
        cc.audioEngine.setCurrentTime(audioId, start);
        _this._audioId = audioId;
        _this._volume = volume;
        _this._isStopped = false;
        return _this;
      }
      SoundChannel.prototype.onCompleteHandler = function() {
        this._isStopped = true;
        this.emit(SoundChannel.SOUND_COMPLETE);
      };
      SoundChannel.prototype.stop = function() {
        this._isStopped || cc.audioEngine.stop(this._audioId);
      };
      Object.defineProperty(SoundChannel.prototype, "length", {
        get: function() {
          if (!this._isStopped) return cc.audioEngine.getDuration(this._audioId);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundChannel.prototype, "position", {
        get: function() {
          if (!this._isStopped) return cc.audioEngine.getCurrentTime(this._audioId);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundChannel.prototype, "volume", {
        get: function() {
          return this._volume;
        },
        set: function(value) {
          if (!this._isStopped) {
            cc.audioEngine.setVolume(this._audioId, value);
            this._volume = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      SoundChannel.SOUND_COMPLETE = "soundComplete";
      return SoundChannel;
    }(cc.EventTarget);
    exports.SoundChannel = SoundChannel;
    cc._RF.pop();
  }, {} ],
  SoundManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afccb5sUk5J15Wm2cU3+7o9", "SoundManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Sound_1 = require("./Sound");
    var SoundPack_1 = require("./SoundPack");
    var SoundPlayer_1 = require("./SoundPlayer");
    var SoundManager = function() {
      function SoundManager() {
        this._soundPacks = {};
        this._isActive = false;
        this._isMuted = false;
        this._backgroundPlayer = null;
        this._interfacePlayers = [];
        this._animationPlayers = [];
        this._activePlayers = [];
        this._soundVolume = 1;
        this._musicVolume = 1;
      }
      Object.defineProperty(SoundManager, "instance", {
        get: function() {
          if (null == SoundManager._instance) {
            SoundManager._instance = new SoundManager();
            SoundManager._instance.start();
          }
          return SoundManager._instance;
        },
        enumerable: true,
        configurable: true
      });
      SoundManager.prototype.onSystemShow = function() {
        this.muted = false;
      };
      SoundManager.prototype.onSystemHide = function() {
        this.muted = true;
      };
      SoundManager.prototype.attachActivePlayer = function(player) {
        this._activePlayers.push(player);
        switch (player.type) {
         case Sound_1.Sound.INTERFACE_SOUND:
          this._interfacePlayers.push(player);
          break;

         case Sound_1.Sound.ANIMATION_SOUND:
          this._animationPlayers.push(player);
        }
      };
      SoundManager.prototype.detachActivePlayer = function(player) {
        this._activePlayers.splice(this._activePlayers.indexOf(player), 1);
        switch (player.type) {
         case Sound_1.Sound.INTERFACE_SOUND:
          this._interfacePlayers.splice(this._interfacePlayers.indexOf(player), 1);
          break;

         case Sound_1.Sound.ANIMATION_SOUND:
          this._animationPlayers.splice(this._animationPlayers.indexOf(player), 1);
        }
      };
      SoundManager.prototype.updateActivePlayers = function() {
        this._activePlayers.forEach(function(player) {
          player.updateChannel();
        });
      };
      SoundManager.prototype.setup = function(soundPacks) {
        var _this = this;
        if (null != soundPacks) {
          var _loop_1 = function(pack) {
            this_1._soundPacks[pack] = new SoundPack_1.SoundPack(pack);
            soundPacks[pack].forEach(function(sound) {
              _this._soundPacks[pack].push(sound.sourcePath, sound.sourceVolume);
            });
          };
          var this_1 = this;
          for (var pack in soundPacks) _loop_1(pack);
        }
      };
      SoundManager.prototype.start = function() {
        cc.systemEvent.on(cc.game.EVENT_SHOW, this.onSystemShow, this);
        cc.systemEvent.on(cc.game.EVENT_HIDE, this.onSystemHide, this);
        this._isActive = true;
      };
      SoundManager.prototype.backgroundSound = function(name) {
        null != this._backgroundPlayer && this._backgroundPlayer.stop();
        this._backgroundPlayer = this.createSound(Sound_1.Sound.BACKGROUND_MUSIC, name).setLoops(-1).setVolume(this._musicVolume).play();
        return this._backgroundPlayer;
      };
      SoundManager.prototype.interfaceSound = function(name) {
        if (!this.muted) return this.createSound(Sound_1.Sound.INTERFACE_SOUND, name).play();
      };
      SoundManager.prototype.createSound = function(type, name) {
        return new SoundPlayer_1.SoundPlayer(this, type, name);
      };
      SoundManager.prototype.stopSoundsByName = function(name) {
        var length = this._activePlayers.length;
        var player;
        for (var i = 0; i < length; i++) {
          player = this._activePlayers[i];
          if (player.name === name) {
            player.stop();
            length--;
            i--;
          }
        }
      };
      SoundManager.prototype.stopSoundsByType = function(type) {
        var length = this._activePlayers.length;
        var player;
        for (var i = 0; i < length; i++) {
          player = this._activePlayers[i];
          if (player.type === type) {
            player.stop();
            length--;
            i--;
          }
        }
      };
      Object.defineProperty(SoundManager.prototype, "soundPacks", {
        get: function() {
          return this._soundPacks;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundManager.prototype, "isSoundEnabled", {
        get: function() {
          return this._soundVolume > 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundManager.prototype, "isMusicEnabled", {
        get: function() {
          return this._musicVolume > 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundManager.prototype, "soundVolume", {
        get: function() {
          return this._soundVolume;
        },
        set: function(value) {
          this._soundVolume = value;
          this.updateActivePlayers();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundManager.prototype, "musicVolume", {
        get: function() {
          return this._musicVolume;
        },
        set: function(value) {
          this._musicVolume = value;
          this.updateActivePlayers();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundManager.prototype, "isActive", {
        get: function() {
          return this._isActive;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundManager.prototype, "muted", {
        get: function() {
          return this._isMuted;
        },
        set: function(value) {
          this._isMuted = value;
          this.updateActivePlayers();
        },
        enumerable: true,
        configurable: true
      });
      return SoundManager;
    }();
    exports.SoundManager = SoundManager;
    cc._RF.pop();
  }, {
    "./Sound": "Sound",
    "./SoundPack": "SoundPack",
    "./SoundPlayer": "SoundPlayer"
  } ],
  SoundPack: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fbf1usLPVMbL73lcOVXmiz", "SoundPack");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Sound_1 = require("./Sound");
    var SoundPack = function(_super) {
      __extends(SoundPack, _super);
      function SoundPack(name) {
        var _this = _super.call(this) || this;
        _this._soundsList = [];
        _this._soundsLoaded = 0;
        _this._name = name;
        _this._isLoaded = false;
        return _this;
      }
      SoundPack.prototype.onLoadedHandler = function() {
        if (++this._soundsLoaded < this._soundsList.length) return;
        this._isLoaded = true;
        if (null != this._completeHandler) {
          this._completeHandler();
          this._completeHandler = null;
        }
        this.emit(SoundPack.SOUND_PACK_LOADED, this);
      };
      SoundPack.prototype.push = function(sourcePath, sourceVolume) {
        void 0 === sourceVolume && (sourceVolume = 1);
        this._soundsList.push(new Sound_1.Sound(sourcePath, sourceVolume));
        this._isLoaded = false;
      };
      SoundPack.prototype.load = function(completeHandler) {
        var _this = this;
        void 0 === completeHandler && (completeHandler = null);
        if (this._isLoaded) {
          null != completeHandler && completeHandler();
          return;
        }
        this._completeHandler = completeHandler;
        this._soundsLoaded = 0;
        this._soundsList.forEach(function(sound) {
          sound.load(_this.onLoadedHandler.bind(_this));
        });
      };
      Object.defineProperty(SoundPack.prototype, "isLoaded", {
        get: function() {
          return this._isLoaded;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPack.prototype, "randomSound", {
        get: function() {
          var index = Math.floor(Math.random() * this._soundsList.length);
          var sound = this._soundsList[index];
          null == sound || sound.isLoaded || this.load();
          return sound;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPack.prototype, "name", {
        get: function() {
          return this._name;
        },
        enumerable: true,
        configurable: true
      });
      SoundPack.SOUND_PACK_LOADED = "soundPackLoaded";
      return SoundPack;
    }(cc.EventTarget);
    exports.SoundPack = SoundPack;
    cc._RF.pop();
  }, {
    "./Sound": "Sound"
  } ],
  SoundPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b78f2B1pbRIV4rb1EOtiTEJ", "SoundPlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Sound_1 = require("./Sound");
    var SoundChannel_1 = require("./SoundChannel");
    var SoundPlayer = function(_super) {
      __extends(SoundPlayer, _super);
      function SoundPlayer(manager, type, name) {
        void 0 === name && (name = null);
        var _this = _super.call(this) || this;
        _this._playAfterLoad = false;
        _this._isActive = false;
        _this._isPaused = false;
        _this._name = name;
        _this._manager = manager;
        _this._type = type;
        _this._volume = 1;
        _this._loops = 0;
        return _this;
      }
      SoundPlayer.prototype.onCompleteHandler = function() {
        this.detachChannel();
        if (0 !== this._loops) {
          -1 !== this._loops && this._loops--;
          this.attachChannel();
          return;
        }
        if (null != this._completeHandler) {
          this._completeHandler();
          this._completeHandler = null;
        }
        this.emit(SoundPlayer.SOUND_COMPLETE, this);
      };
      SoundPlayer.prototype.onLoadedHandler = function() {
        this._sound.off(Sound_1.Sound.SOUND_LOADED, this.onLoadedHandler, this);
        this._playAfterLoad && this.attachChannel();
      };
      SoundPlayer.prototype.composeChannel = function(start) {
        void 0 === start && (start = 0);
        this._channel = this._sound.play(start, false, this._volume);
        if (null != this._channel) {
          this._channel.on(SoundChannel_1.SoundChannel.SOUND_COMPLETE, this.onCompleteHandler, this);
          this.updateChannel();
        }
        return this._channel;
      };
      SoundPlayer.prototype.disposeChannel = function() {
        if (null != this._channel) {
          this._channel.off(SoundChannel_1.SoundChannel.SOUND_COMPLETE, this.onCompleteHandler, this);
          this._channel.stop();
        }
        this._channel = null;
      };
      SoundPlayer.prototype.attachChannel = function() {
        if (!this._manager.isActive) return;
        if (this._isActive || null == this._sound || this._sound.isError) return;
        if (!this._sound.isLoaded) {
          this._playAfterLoad = true;
          this._sound.on(Sound_1.Sound.SOUND_LOADED, this.onLoadedHandler, this);
          return;
        }
        if (null == this.composeChannel()) return;
        this._manager.attachActivePlayer(this);
        this._isActive = true;
      };
      SoundPlayer.prototype.detachChannel = function() {
        if (!this._isActive) return;
        this.disposeChannel();
        this._manager.detachActivePlayer(this);
        this._isActive = false;
        this._isPaused = false;
      };
      SoundPlayer.prototype.updateChannel = function() {
        var channelEnabled;
        var channelVolume;
        if (null == this._channel) return;
        if (this._type === Sound_1.Sound.BACKGROUND_MUSIC) {
          channelEnabled = this._manager.isMusicEnabled;
          channelVolume = this._manager.musicVolume;
        } else {
          channelEnabled = this._manager.isSoundEnabled;
          channelVolume = this._manager.soundVolume;
        }
        channelEnabled ? null != this._sound ? this._channel.volume = this._volume * this._sound.sourceVolume * channelVolume : this._channel.volume = this._volume * channelVolume : this._channel.volume = 0;
      };
      SoundPlayer.prototype.play = function() {
        this.detachChannel();
        var pack = this._manager.soundPacks[this._name];
        this._sound = null != pack ? pack.randomSound : null;
        this.attachChannel();
        return this;
      };
      SoundPlayer.prototype.replay = function() {
        this.detachChannel();
        this.attachChannel();
        return this;
      };
      SoundPlayer.prototype.stop = function() {
        this._playAfterLoad = false;
        this.detachChannel();
        return this;
      };
      SoundPlayer.prototype.resume = function() {
        if (!this._isPaused) return this;
        if (null == this.composeChannel(this._pausedTime)) return this;
        this._isPaused = false;
        return this;
      };
      SoundPlayer.prototype.pause = function() {
        if (!this._isActive || this._isPaused) return this;
        this._pausedTime = this._channel.position;
        this._isPaused = true;
        this.detachChannel();
        return this;
      };
      SoundPlayer.prototype.setName = function(value) {
        this._name = value;
        return this;
      };
      SoundPlayer.prototype.setLoops = function(value) {
        this._loops = value;
        return this;
      };
      SoundPlayer.prototype.setCompleteHandler = function(value) {
        this._completeHandler = value;
        return this;
      };
      SoundPlayer.prototype.setVolume = function(value) {
        this.volume = value;
        return this;
      };
      Object.defineProperty(SoundPlayer.prototype, "name", {
        get: function() {
          return this._name;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "sound", {
        get: function() {
          return this._sound;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "type", {
        get: function() {
          return this._type;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "isActive", {
        get: function() {
          return this._isActive;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "isPlaying", {
        get: function() {
          return this._isActive && null != this._channel;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "isPaused", {
        get: function() {
          return this._isPaused;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "loopsLeft", {
        get: function() {
          return this._loops;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "currentTime", {
        get: function() {
          if (null != this._channel) return this._channel.position;
          return 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "totalTime", {
        get: function() {
          return 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SoundPlayer.prototype, "volume", {
        get: function() {
          return this._volume;
        },
        set: function(value) {
          this._volume = value;
        },
        enumerable: true,
        configurable: true
      });
      SoundPlayer.SOUND_COMPLETE = "soundComplete";
      return SoundPlayer;
    }(cc.EventTarget);
    exports.SoundPlayer = SoundPlayer;
    cc._RF.pop();
  }, {
    "./Sound": "Sound",
    "./SoundChannel": "SoundChannel"
  } ],
  SoundSettingsPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3760btSgbZPiYSTdQMmnJ46", "SoundSettingsPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SoundManager_1 = require("../../../../../common/managers/sound/SoundManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SoundSettingsPopup = function(_super) {
      __extends(SoundSettingsPopup, _super);
      function SoundSettingsPopup() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SoundSettingsPopup.prototype.start = function() {
        var graphics = this.node.addComponent(cc.Graphics);
        graphics.fillColor = new cc.Color(0, 0, 0, 75);
        graphics.fillRect(-320, -568 - this.node.y, 640, 1136);
        var musicNode = this.node.getChildByName("sliderMusic");
        var soundNode = this.node.getChildByName("sliderSound");
        var checkboxNode = this.node.getChildByName("checkBox");
        musicNode.getComponent(cc.Slider).progress = SoundManager_1.SoundManager.instance.musicVolume;
        soundNode.getComponent(cc.Slider).progress = SoundManager_1.SoundManager.instance.soundVolume;
        checkboxNode.getComponent(cc.Toggle).isChecked = SoundManager_1.SoundManager.instance.muted;
        SoundManager_1.SoundManager.instance.muted || (checkboxNode.getComponent(cc.Toggle).indicator.x = -60);
      };
      SoundSettingsPopup.prototype.sliderEventListener = function(event) {
        "sliderMusic" === event.node.name ? SoundManager_1.SoundManager.instance.musicVolume = event.progress : SoundManager_1.SoundManager.instance.soundVolume = event.progress;
      };
      SoundSettingsPopup.prototype.checkboxEventListener = function(event) {
        SoundManager_1.SoundManager.instance.muted = event.isChecked;
      };
      SoundSettingsPopup.prototype.show = function() {
        this.node.active = true;
      };
      SoundSettingsPopup.prototype.hide = function() {
        this.node.active = false;
      };
      SoundSettingsPopup = __decorate([ ccclass ], SoundSettingsPopup);
      return SoundSettingsPopup;
    }(cc.Component);
    exports.default = SoundSettingsPopup;
    cc._RF.pop();
  }, {
    "../../../../../common/managers/sound/SoundManager": "SoundManager"
  } ],
  Sound: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5bb192cVQlG35uLhO5Cwsas", "Sound");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SoundChannel_1 = require("./SoundChannel");
    var Sound = function(_super) {
      __extends(Sound, _super);
      function Sound(sourcePath, sourceVolume) {
        var _this = _super.call(this) || this;
        _this._sourcePath = sourcePath;
        _this._sourceVolume = sourceVolume;
        _this._source = null;
        _this._isLoaded = false;
        return _this;
      }
      Sound.prototype.changeLoadedSource = function(source) {
        void 0 === source && (source = null);
        this._isLoaded = true;
        this._source = source;
        if (null != this._completeHandler) {
          this._completeHandler();
          this._completeHandler = null;
        }
        this.emit(Sound.SOUND_LOADED, source);
      };
      Sound.prototype.play = function(start, loops, volume) {
        void 0 === start && (start = 0);
        void 0 === loops && (loops = false);
        void 0 === volume && (volume = 1);
        if (null != this._source) {
          var audioId = cc.audioEngine.play(this._source, loops, volume);
          return new SoundChannel_1.SoundChannel(audioId, start, volume);
        }
        return null;
      };
      Sound.prototype.load = function(completeHandler) {
        var _this = this;
        void 0 === completeHandler && (completeHandler = null);
        if (this._isLoaded) {
          null != completeHandler && completeHandler();
          return;
        }
        this._completeHandler = completeHandler;
        this._source = null;
        cc.loader.load(cc.url.raw(this._sourcePath), function(error, source) {
          null == error ? _this.changeLoadedSource(source) : _this.changeLoadedSource();
        });
      };
      Object.defineProperty(Sound.prototype, "isLoaded", {
        get: function() {
          return this._isLoaded;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sound.prototype, "isError", {
        get: function() {
          return this._isLoaded && null == this._source;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sound.prototype, "sourcePath", {
        get: function() {
          return this._sourcePath;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sound.prototype, "sourceVolume", {
        get: function() {
          return this._sourceVolume;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sound.prototype, "source", {
        get: function() {
          return this._source;
        },
        enumerable: true,
        configurable: true
      });
      Sound.SOUND_LOADED = "soundLoaded";
      Sound.BACKGROUND_MUSIC = 0;
      Sound.INTERFACE_SOUND = 1;
      Sound.ANIMATION_SOUND = 2;
      return Sound;
    }(cc.EventTarget);
    exports.Sound = Sound;
    cc._RF.pop();
  }, {
    "./SoundChannel": "SoundChannel"
  } ],
  StoreController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "51e53+P0TtObYpuAcmU/3El", "StoreController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var redux_1 = require("redux");
    var BjStoreInterface_1 = require("../BjStoreInterface");
    var Constant = require("../BjConstant");
    var BjPlayer_1 = require("../BjPlayer");
    var Actions = require("./BjActions");
    var StoreController = function() {
      function StoreController() {
        var _this = this;
        this._bjPlayer = new BjPlayer_1.default();
        this._actionsCallbacks = [];
        this._chainCompleteCallbacks = [];
        this._inCall = 0;
        this._outCall = 0;
        this.tracker = function(store) {
          return function(next) {
            return function(action) {
              _this._inCall++;
              var result = next(action);
              _this._outCall++;
              _this._inCall == _this._outCall && _this._chainCompleteCallbacks.forEach(function(callback) {
                1 == callback.length ? callback(action) : 2 == callback.length ? callback(action, result) : callback();
              });
              return result;
            };
          };
        };
        this.logger = function(store) {
          return function(next) {
            return function(action) {
              console.info("dispatching", JSON.stringify(action));
              var result = next(action);
              console.log("next state", store.getState());
              return result;
            };
          };
        };
        this.actions = function(store) {
          return function(next) {
            return function(action) {
              var result = next(action);
              _this._actionsCallbacks.forEach(function(callback) {
                1 == callback.length ? callback(action) : 2 == callback.length && callback(action, result);
              });
              return result;
            };
          };
        };
      }
      StoreController.prototype.init = function(bjConfig, middlewares) {
        void 0 === middlewares && (middlewares = []);
        var initData = new BjStoreInterface_1.RootStore();
        bjConfig.hasStartMoney && (initData.money = bjConfig.startMoney);
        this._store = redux_1.createStore(this.mainReducer.bind(this), initData, redux_1.applyMiddleware.apply(null, [ this.tracker ].concat(middlewares, [ this.logger, this.actions ])));
      };
      StoreController.prototype.dispatch = function(params) {
        this.store.dispatch(params);
      };
      StoreController.prototype.subscribe = function(callback) {
        this.store.subscribe(callback);
      };
      StoreController.prototype.addActionListener = function(callback) {
        callback && -1 == this._actionsCallbacks.indexOf(callback) && this._actionsCallbacks.push(callback);
      };
      StoreController.prototype.removeActionListener = function(callback) {
        if (callback) {
          var index = this._actionsCallbacks.indexOf(callback);
          -1 != index && this._actionsCallbacks.splice(index, 1);
        }
      };
      StoreController.prototype.addChainCompleteCallbacks = function(callback) {
        callback && -1 == this._chainCompleteCallbacks.indexOf(callback) && this._chainCompleteCallbacks.push(callback);
      };
      StoreController.prototype.removeChainCompleteCallbacks = function(callback) {
        if (callback) {
          var index = this._chainCompleteCallbacks.indexOf(callback);
          -1 != index && this._chainCompleteCallbacks.splice(index, 1);
        }
      };
      StoreController.prototype.mainReducer = function(state, action) {
        var actionWithType = action;
        var players;
        var player;
        var card;
        var index;
        var playerIndex;
        var handIndex;
        var bet;
        var result;
        var key;
        switch (actionWithType.type) {
         case Actions.SET_ACTIVE_PLAYER_INDEX:
          playerIndex = action["index"];
          var insures_1 = state.insure_state;
          if (BjStoreInterface_1.StoreHelper.isInsureOnFirstHandDealer(state)) {
            insures_1 = [];
            state.players.forEach(function(player, index) {
              index == insures_1.length && insures_1.push();
              insures_1[index] = player.dealer ? Constant.INSURE_STATE.unused : Constant.INSURE_STATE.request;
            });
          }
          return __assign({}, state, {
            active_player_index: playerIndex,
            insure_state: insures_1
          });

         case Actions.SET_ACTIVE_HAND_INDEX:
          return BjStoreInterface_1.StoreHelper.immutablePlayer(state, BjStoreInterface_1.StoreHelper.activePlayerIndex(state), function(player) {
            return __assign({}, player, {
              active_hands_index: action["index"]
            });
          });

         case Actions.SET_ROUND:
          return __assign({}, state, {
            round: action["round"]
          });

         case Actions.RESTART:
          return __assign({}, state, {
            canRestart: false,
            round: 1,
            active_player_index: 0,
            wait_view_sync: [],
            players: [ __assign({}, new BjStoreInterface_1.PlayerData(), {
              dealer: false
            }), __assign({}, new BjStoreInterface_1.PlayerData(), {
              dealer: true
            }) ],
            insure_state: [ Constant.INSURE_STATE.unused, Constant.INSURE_STATE.unused ],
            game_state: Constant.GAME_STATE.game,
            win_money: 0,
            win_by_hand: []
          });

         case Actions.HIT_AI:
         case Actions.HIT:
          card = action["data"];
          playerIndex = action["index"];
          handIndex = action["hand_index"] ? action["hand_index"] : BjStoreInterface_1.StoreHelper.activePlayerHandIndex(state);
          return BjStoreInterface_1.StoreHelper.immutableHand(state, playerIndex, handIndex, function(hand) {
            return __assign({}, hand, {
              cards: hand.cards.concat([ card ])
            });
          });

         case Actions.STAND:
          playerIndex = BjStoreInterface_1.StoreHelper.activePlayerIndex(state);
          handIndex = BjStoreInterface_1.StoreHelper.activePlayerHandIndex(state);
          return BjStoreInterface_1.StoreHelper.immutableHand(state, playerIndex, handIndex, function(hand) {
            return __assign({}, hand, {
              finished: true
            });
          });

         case Actions.SPLIT:
          playerIndex = state.active_player_index;
          handIndex = state.players[playerIndex].active_hands_index;
          bet = action["bet"];
          var cardIndex = action["card_index"];
          var handData = state.players[playerIndex].hands[handIndex];
          var modifiedCards_1 = handData.cards.concat([]);
          var newCards = modifiedCards_1.splice(cardIndex, 1);
          result = BjStoreInterface_1.StoreHelper.immutableHand(state, playerIndex, handIndex, function(hand) {
            return __assign({}, hand, {
              cards: modifiedCards_1
            });
          });
          result.money = state.money - bet;
          result.players[playerIndex].hands.push(__assign({}, handData, {
            cards: newCards,
            current_bet: bet,
            bj_insurance: 0,
            finished: false,
            bj_even_money: false
          }));
          return result;

         case Actions.WAIT_FOR_VIEW_SYNC:
          key = action["key"];
          return __assign({}, state, {
            wait_view_sync: state.wait_view_sync.concat([ key ])
          });

         case Actions.WAIT_FOR_VIEW_SYNC_END:
          key = action["key"];
          return __assign({}, state, {
            wait_view_sync: state.wait_view_sync.filter(function(tKey) {
              return tKey != key;
            })
          });

         case Actions.SHOW_BUTTONS:
          return __assign({}, state, {
            show_buttons: true
          });

         case Actions.HIDE_BUTTONS:
          return __assign({}, state, {
            show_buttons: false
          });

         case Actions.FINISH_GAME:
          return __assign({}, state, {
            game_state: Constant.GAME_STATE.game_end
          });

         case Actions.CHANGE_MONEY:
          return __assign({}, state, {
            money: state.money + action["income"]
          });

         case Actions.WINNING_CHANGE_MONEY:
          var money = state.money + action["income"];
          return __assign({}, state, {
            money: money,
            win_money: action["income"],
            initial_bet: Math.min(state.initial_bet, money)
          });

         case Actions.SET_BET:
          bet = action["bet"];
          index = action["index"];
          result = BjStoreInterface_1.StoreHelper.immutableHand(state, BjStoreInterface_1.StoreHelper.getMeIndex(state), index, function(hand) {
            return __assign({}, hand, {
              current_bet: bet
            });
          });
          result.money = state.money - bet;
          return result;

         case Actions.SAVE_HISTORY:
          this._bjPlayer.setDataRound(BjStoreInterface_1.StoreHelper.getMe(state), state.round);
          var myScore = this._bjPlayer.score();
          this._bjPlayer.setDataRound(BjStoreInterface_1.StoreHelper.getDealerPlayer(state), state.round);
          var dealerScore = this._bjPlayer.score();
          return __assign({}, state, {
            history: state.history.concat([ {
              player: myScore,
              dealer: dealerScore
            } ])
          });

         case Actions.DOUBLE:
          card = action["data"];
          playerIndex = action["index"];
          bet = action["bet"];
          handIndex = BjStoreInterface_1.StoreHelper.activePlayerHandIndex(state);
          result = BjStoreInterface_1.StoreHelper.immutableHand(state, playerIndex, handIndex, function(hand) {
            return __assign({}, hand, {
              cards: hand.cards.concat([ card ]),
              current_bet: hand.current_bet + bet,
              double: true,
              finished: true
            });
          });
          result.money -= bet;
          return result;

         case Actions.INSURANCE_ACCEPT:
          playerIndex = action["index"];
          handIndex = BjStoreInterface_1.StoreHelper.activePlayerHandIndex(state);
          bet = action["bet"];
          result = BjStoreInterface_1.StoreHelper.immutableHand(state, playerIndex, handIndex, function(hand) {
            return __assign({}, hand, {
              bj_insurance: bet
            });
          });
          result.money -= bet;
          result.insure_state = state.insure_state.map(function(insureState, currentIndex) {
            if (currentIndex == playerIndex) return Constant.INSURE_STATE.accepted;
            return insureState;
          });
          return result;

         case Actions.INSURANCE_REJECT:
          playerIndex = action["index"];
          return __assign({}, state, {
            insure_state: state.insure_state.map(function(insureState, currentIndex) {
              if (currentIndex == playerIndex) return Constant.INSURE_STATE.rejected;
              return insureState;
            })
          });

         case Actions.INSURANCE_CLEAR:
          playerIndex = action["index"];
          result = BjStoreInterface_1.StoreHelper.immutablePlayer(state, playerIndex, function(player) {
            return __assign({}, player, {
              bj_insurance: 0
            });
          });
          result.insure_state[playerIndex] = Constant.INSURE_STATE.cleared;
          return result;

         case Actions.PLAY_WITH_INITIAL_BET:
         case Actions.SET_INITIAL_BET:
          bet = action["bet"];
          if (bet <= state.money) return __assign({}, state, {
            initial_bet: bet
          });
          return state;

         case Actions.SELECT_BET_STATE:
          return __assign({}, state, {
            game_state: Constant.GAME_STATE.select_bet
          });

         case Actions.SET_GAME_STATE:
          return __assign({}, state, {
            game_state: action["game_state"]
          });

         case Actions.SET_WIN_INFO_BY_HAND:
          return __assign({}, state, {
            win_by_hand: action["payload"]
          });

         case Actions.SELECT_BET_INCREMENT:
          return __assign({}, state, {
            select_bet_increment: action["payload"]
          });
        }
        return state;
      };
      Object.defineProperty(StoreController.prototype, "store", {
        get: function() {
          return this._store;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(StoreController.prototype, "getRootState", {
        get: function() {
          return this.store.getState();
        },
        enumerable: true,
        configurable: true
      });
      return StoreController;
    }();
    exports.default = StoreController;
    cc._RF.pop();
  }, {
    "../BjConstant": "BjConstant",
    "../BjPlayer": "BjPlayer",
    "../BjStoreInterface": "BjStoreInterface",
    "./BjActions": "BjActions",
    redux: 133
  } ],
  Subscription: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cc50uQttdCrKaEQFq/M7Nq", "Subscription");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CLEARED = null;
    var nullSubscriptionHandler = function() {};
    var nullListenerCollection = {
      clear: function() {},
      notify: function() {},
      subscribe: function(_) {
        return nullSubscriptionHandler;
      }
    };
    var createListenerCollection = function() {
      var current = [];
      var next = [];
      return {
        clear: function() {
          next = CLEARED;
          current = CLEARED;
        },
        notify: function() {
          var listeners = current = next;
          for (var i = 0; i < listeners.length; i++) listeners[i]();
        },
        subscribe: function(listener) {
          var isSubscribed = true;
          next === current && (next = current.slice());
          next.push(listener);
          return function() {
            if (!isSubscribed || null === current) return;
            isSubscribed = false;
            next === current && (next = current.slice());
            next.splice(next.indexOf(listener), 1);
          };
        }
      };
    };
    var Subscription = function() {
      function Subscription(store, parentSub, onStateChange) {
        this.store = store;
        this.parentSub = parentSub;
        this.onStateChange = onStateChange;
        this.unsubscribe = null;
        this.listeners = nullListenerCollection;
      }
      Subscription.prototype.addNestedSub = function(listener) {
        this.trySubscribe();
        return this.listeners.subscribe(listener);
      };
      Subscription.prototype.notifyNestedSubs = function() {
        this.listeners.notify();
      };
      Subscription.prototype.isSubscribed = function() {
        return Boolean(this.unsubscribe);
      };
      Subscription.prototype.trySubscribe = function() {
        if (!this.unsubscribe) {
          this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
          this.listeners = createListenerCollection();
        }
      };
      Subscription.prototype.tryUnsubscribe = function() {
        if (this.unsubscribe) {
          this.unsubscribe();
          this.unsubscribe = null;
          this.listeners.clear();
          this.listeners = nullListenerCollection;
        }
      };
      return Subscription;
    }();
    exports.Subscription = Subscription;
    cc._RF.pop();
  }, {} ],
  TDBotButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "194aeH/ZvVO7IfGK4X69kZ0", "TDBotButton");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDConfig_1 = require("./TDConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TDBotButton = function(_super) {
      __extends(TDBotButton, _super);
      function TDBotButton() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TDBotButton.prototype.onAddBotClick = function() {
        console.log("adding new bot");
        var adapter = TDConfig_1.TDConfig.gameAdapter;
        adapter.registerNewBot();
      };
      TDBotButton = __decorate([ ccclass ], TDBotButton);
      return TDBotButton;
    }(cc.Component);
    exports.TDBotButton = TDBotButton;
    cc._RF.pop();
  }, {
    "./TDConfig": "TDConfig"
  } ],
  TDBotLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "faed6yWFoBCGZ+zkf+M+PgB", "TDBotLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDGamePlayerData_1 = require("./TDGamePlayerData");
    var TDPlayersActions_1 = require("./TDPlayersActions");
    var ccclass = cc._decorator.ccclass;
    var TDBotLogic = function(_super) {
      __extends(TDBotLogic, _super);
      function TDBotLogic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._bots = {};
        _this._botsIds = [];
        return _this;
      }
      TDBotLogic.prototype.init = function() {};
      TDBotLogic.prototype.onLoad = function() {};
      TDBotLogic.prototype.registerLogicAdapter = function(adapter) {
        this._logicAdapter = adapter;
      };
      Object.defineProperty(TDBotLogic.prototype, "leftPlayers", {
        set: function(value) {
          this._leftPlayers = value;
        },
        enumerable: true,
        configurable: true
      });
      TDBotLogic.prototype.applyLogicAction = function(action, place) {
        void 0 === place && (place = -1);
        switch (action.type) {
         case TDPlayersActions_1.TDActionType.REGISTER_PLACE:
          if (this._botsIds.indexOf(action.data.playerInfo.id) > -1) {
            this._bots[action.data.placeId] = new TDGamePlayerData_1.TDGamePlayerData();
            this._bots[action.data.placeId].playerInfo = {
              id: action.data.playerInfo.id,
              balance: action.data.playerInfo.balance,
              isGoldMember: action.data.playerInfo.isGoldMember,
              name: action.data.playerInfo.name,
              userImage: action.data.playerInfo.userImage
            };
            this._bots[action.data.placeId].placeId = action.data.placeId;
            this._bots[action.data.placeId].state = TDGamePlayerData_1.PlaceState.PLAYING;
          }
          break;

         case TDPlayersActions_1.TDActionType.MAKE_BET:
         case TDPlayersActions_1.TDActionType.UPDATE_PLAYER_ACTION:
         case TDPlayersActions_1.TDActionType.APPLY_PREVIOUS_BET:
         case TDPlayersActions_1.TDActionType.DIS_ENL_BUTTONS:
         case TDPlayersActions_1.TDActionType.START_TIMER:
         case TDPlayersActions_1.TDActionType.PREPARE_SPIN:
         case TDPlayersActions_1.TDActionType.SPIN:
         case TDPlayersActions_1.TDActionType.CALCULATE_BETS:
         case TDPlayersActions_1.TDActionType.PREPARE_FOR_ROUND:
         case TDPlayersActions_1.TDActionType.UPDATE_BANK:
        }
      };
      TDBotLogic.prototype.readyForNext = function() {
        this.makeAction({
          type: TDPlayersActions_1.TDActionType.READY_FOR_NEXT_ACTION,
          data: {
            ready: true
          }
        });
      };
      TDBotLogic.prototype.timerEndCallBack = function() {};
      TDBotLogic.prototype.makeAction = function(action) {
        this._logicAdapter.applyAction(action);
      };
      TDBotLogic.prototype.getUserData = function(place) {
        var result = {
          id: "bot_" + place,
          name: "bot_" + place,
          balance: 1e6,
          isGoldMember: false
        };
        this._botsIds.push(result.id);
        return result;
      };
      TDBotLogic.prototype.startMakingBets = function() {
        var _this = this;
        this.betsNode = cc.find("Canvas/content/game/table/bets");
        this.chipsNode = cc.find("Canvas/content/game/table/chips_panel");
        setInterval(function() {
          console.log("making bot action");
          _this.makeAction({
            type: TDPlayersActions_1.TDActionType.MAKE_BET,
            data: {
              bet: _this.betsNode.children[Math.floor(Math.random() * _this.betsNode.children.length)],
              betSize: _this.chipsNode.children[Math.floor(Math.random() * _this.chipsNode.children.length)].name.split("_")[1],
              playerInfo: {
                id: "bot_2",
                name: "bot_2",
                balance: 1e6,
                isGoldMember: false
              }
            }
          });
        }, 3e3);
      };
      TDBotLogic = __decorate([ ccclass ], TDBotLogic);
      return TDBotLogic;
    }(cc.Component);
    exports.TDBotLogic = TDBotLogic;
    cc._RF.pop();
  }, {
    "./TDGamePlayerData": "TDGamePlayerData",
    "./TDPlayersActions": "TDPlayersActions"
  } ],
  TDCellStats: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9e78o1LCVDMqjhPDOdoz4L", "TDCellStats");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellStats = function(_super) {
      __extends(CellStats, _super);
      function CellStats() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cellRevealed = false;
        _this.cellPosition = 0;
        _this.cellWinType = -1;
        _this.tieCounter = 0;
        return _this;
      }
      CellStats.prototype.start = function() {};
      CellStats = __decorate([ ccclass ], CellStats);
      return CellStats;
    }(cc.Component);
    exports.default = CellStats;
    cc._RF.pop();
  }, {} ],
  TDConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de9eaH0G2BEKqTkUadIgteR", "TDConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDGameCore_1 = require("./TDGameCore");
    var TDLocalLogic_1 = require("./TDLocalLogic");
    var TDConfig = function() {
      function TDConfig() {}
      TDConfig.initControllers = function(viewAdapter) {
        TDConfig.tdGameCore.init(TDConfig.gameAdapter, viewAdapter);
      };
      TDConfig.addViewController = function(viewAdapter) {
        TDConfig.tdGameCore.addViewAdapter(viewAdapter);
      };
      TDConfig.initLocalGame = function() {
        TDConfig.gameAdapter = new TDLocalLogic_1.TDLocalLogic();
      };
      TDConfig.initRemoteGame = function() {};
      TDConfig.tdGameCore = new TDGameCore_1.TDCore();
      TDConfig.user = {
        id: "-G-2444",
        name: "YOU",
        balance: 1e7,
        userImage: "https://image.freepik.com/free-photo/nature-design-with-bokeh-effect_1048-1882.jpg",
        isGoldMember: true
      };
      return TDConfig;
    }();
    exports.TDConfig = TDConfig;
    cc._RF.pop();
  }, {
    "./TDGameCore": "TDGameCore",
    "./TDLocalLogic": "TDLocalLogic"
  } ],
  TDGameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35c66zKSHpJKKA0odMsJdDY", "TDGameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCore_1 = require("../../../../common/core/GameCore");
    var TDCore = function(_super) {
      __extends(TDCore, _super);
      function TDCore() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TDCore.prototype.init = function(logicAdapter, viewAdapter) {
        _super.prototype.init.call(this, logicAdapter, viewAdapter);
      };
      TDCore.prototype.addViewAdapter = function(viewAdapter) {
        _super.prototype.addViewAdapter.call(this, viewAdapter);
      };
      return TDCore;
    }(GameCore_1.GameCoreBase);
    exports.TDCore = TDCore;
    cc._RF.pop();
  }, {
    "../../../../common/core/GameCore": "GameCore"
  } ],
  TDGamePlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1879p80D5GJYEG7jdjLElQ", "TDGamePlayerData");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDGamePlayerData = function() {
      function TDGamePlayerData() {
        this.state = PlaceState.EMPTY;
        this.currentBets = [];
        this.coinsWin = 0;
        this.coinsLose = 0;
      }
      TDGamePlayerData.prototype.resetPlayer = function() {
        this.playerInfo = null;
        this.currentBets = [];
        this.state = PlaceState.EMPTY;
        this.coinsWin = 0;
        this.coinsLose = 0;
      };
      TDGamePlayerData.prototype.clearForNewRound = function() {
        this.state = PlaceState.PLAYING;
        this.currentBets = [];
        this.coinsWin = 0;
        this.coinsLose = 0;
      };
      return TDGamePlayerData;
    }();
    exports.TDGamePlayerData = TDGamePlayerData;
    var PlaceState;
    (function(PlaceState) {
      PlaceState[PlaceState["EMPTY"] = 1] = "EMPTY";
      PlaceState[PlaceState["PLAYING"] = 2] = "PLAYING";
      PlaceState[PlaceState["WATCHING"] = 3] = "WATCHING";
      PlaceState[PlaceState["WAITING_FOR_REWARD"] = 4] = "WAITING_FOR_REWARD";
      PlaceState[PlaceState["READY_FOR_NEXT_ROUND"] = 5] = "READY_FOR_NEXT_ROUND";
    })(PlaceState = exports.PlaceState || (exports.PlaceState = {}));
    cc._RF.pop();
  }, {} ],
  TDLocalLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32d94b/LktIvYYJoi/dTeZx", "TDLocalLogic");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDLogicAdapterBase_1 = require("./TDLogicAdapterBase");
    var TDPlayersActions_1 = require("./TDPlayersActions");
    var TDGamePlayerData_1 = require("./TDGamePlayerData");
    var TDBotLogic_1 = require("./TDBotLogic");
    var Logger_1 = require("../../../../common/core/Logger");
    var TDConfig_1 = require("./TDConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TDLocalLogic = function(_super) {
      __extends(TDLocalLogic, _super);
      function TDLocalLogic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._botLogic = new TDBotLogic_1.TDBotLogic();
        _this._playerByPlaceId = [];
        _this._loger = Logger_1.default.getLogger(_this);
        _this.ratesLength = 28;
        return _this;
      }
      TDLocalLogic_1 = TDLocalLogic;
      TDLocalLogic.prototype.start = function() {
        this._currentState = TDPlayersActions_1.TDGameState.BET_MAKING_TIME;
        this.prepareTablePlaces();
        this.updateGameState();
        this.applyAction({
          type: TDPlayersActions_1.TDActionType.REGISTER_PLACE,
          data: {
            placeId: 0,
            playerInfo: this.getCurrentPlayerInfo()
          }
        });
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.UPDATE_PLAYER_ACTION,
          data: {
            playerInfo: this.getCurrentPlayerInfo()
          }
        });
      };
      TDLocalLogic.prototype.registerNewBot = function() {
        var freePlaces = this.getPlayersByState(TDGamePlayerData_1.PlaceState.EMPTY);
        freePlaces.length > 0 && this.applyAction({
          type: TDPlayersActions_1.TDActionType.REGISTER_PLACE,
          data: {
            placeId: this.getFirstFreePlace(),
            playerInfo: this._botLogic.getUserData(freePlaces.shift())
          }
        });
        this._botLogic.startMakingBets();
      };
      TDLocalLogic.prototype.prepareTablePlaces = function() {
        for (var i = 0; i < TDLogicAdapterBase_1.TDLogicAdapterBase.MAX_PLAYERS_ON_TABLE; i++) {
          this._playerByPlaceId[i] = new TDGamePlayerData_1.TDGamePlayerData();
          this._playerByPlaceId[i].state = TDGamePlayerData_1.PlaceState.EMPTY;
          this._playerByPlaceId[i].placeId = i;
        }
      };
      TDLocalLogic.prototype.updateGameState = function() {
        switch (this._currentState) {
         case TDPlayersActions_1.TDGameState.BET_MAKING_TIME:
          this.cleanBetsData();
          this._enableDisableBetsAndRates(true);
          this.prepareCardsData();
          setTimeout(this.betTimeEnded.bind(this), 12e3);
          this.sendActionToClients({
            type: TDPlayersActions_1.TDActionType.START_TIMER,
            data: {
              time: 11
            }
          });
          this.setIntervalX(1e3, 9);
          break;

         case TDPlayersActions_1.TDGameState.BET_MAKING_ENDED:
          this.calculateBetsResults();
        }
      };
      TDLocalLogic.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          var placeId, playingPlayers, i, waitingPlayers, i;
          return __generator(this, function(_a) {
            switch (action.type) {
             case TDPlayersActions_1.TDActionType.REGISTER_PLACE:
              placeId = this.getFirstFreePlace();
              this._playerByPlaceId[placeId].playerInfo = action.data.playerInfo;
              this.sendActionToClients({
                type: action.type,
                data: {
                  placeId: placeId,
                  playerInfo: {
                    id: action.data.playerInfo.id,
                    balance: action.data.playerInfo.balance,
                    isGoldMember: action.data.playerInfo.isGoldMember,
                    name: action.data.playerInfo.name,
                    userImage: action.data.playerInfo.userImage
                  }
                }
              });
              this.sendGameData();
              switch (this._currentState) {
               case TDPlayersActions_1.TDGameState.BET_MAKING_TIME:
                this._playerByPlaceId[placeId].state = TDGamePlayerData_1.PlaceState.PLAYING;
                this._enableDisableBetsAndRates(true);
                break;

               default:
                this._playerByPlaceId[placeId].state = TDGamePlayerData_1.PlaceState.READY_FOR_NEXT_ROUND;
                this._enableDisableBetsAndRates(false);
              }
              break;

             case TDPlayersActions_1.TDActionType.MAKE_BET:
              playingPlayers = this.getPlayersByState(TDGamePlayerData_1.PlaceState.PLAYING);
              for (i = 0; i < playingPlayers.length; i++) if (this._playerByPlaceId[playingPlayers[i]].playerInfo.id === action.data.player.id) if (this._playerByPlaceId[playingPlayers[i]].playerInfo.balance >= action.data.betSize) {
                this._playerByPlaceId[playingPlayers[i]].playerInfo.balance -= action.data.betSize;
                this._playerByPlaceId[playingPlayers[i]].currentBets.push({
                  bet: action.data.bet,
                  betSize: action.data.betSize
                });
                TDLogicAdapterBase_1.TDLogicAdapterBase.BetsState[action.data.bet.getName()].betSize += action.data.betSize;
                this.sendActionToClients({
                  type: TDPlayersActions_1.TDActionType.CONFIRM_BET,
                  data: {
                    confirmed: true,
                    bet: action.data.bet,
                    betSize: action.data.betSize,
                    player: action.data.player
                  }
                });
              } else this.sendActionToClients({
                type: TDPlayersActions_1.TDActionType.CONFIRM_BET,
                data: {
                  confirmed: false,
                  bet: action.data.bet,
                  betSize: action.data.betSize,
                  player: action.data.player
                }
              });
              this.sendActionToClients({
                type: action.type,
                data: action.data
              });
              break;

             case TDPlayersActions_1.TDActionType.READY_FOR_NEXT_ROUND:
              waitingPlayers = this.getPlayersByState(TDGamePlayerData_1.PlaceState.WAITING_FOR_REWARD);
              for (i = 0; i < waitingPlayers.length; i++) if (this._playerByPlaceId[waitingPlayers[i]].playerInfo.id === action.data.player.id) {
                this._playerByPlaceId[waitingPlayers[i]].state = TDGamePlayerData_1.PlaceState.READY_FOR_NEXT_ROUND;
                this.checkIfReadyForNextRound() && this.runNextRound();
              }
            }
            return [ 2, true ];
          });
        });
      };
      TDLocalLogic.prototype.checkIfReadyForNextRound = function() {
        for (var i = 0; i < this._playerByPlaceId.length; i++) if (this._playerByPlaceId[i].state !== TDGamePlayerData_1.PlaceState.EMPTY && this._playerByPlaceId[i].state !== TDGamePlayerData_1.PlaceState.READY_FOR_NEXT_ROUND) return false;
        for (var i = 0; i < this._playerByPlaceId.length; i++) this._playerByPlaceId[i].state === TDGamePlayerData_1.PlaceState.READY_FOR_NEXT_ROUND && (this._playerByPlaceId[i].state = TDGamePlayerData_1.PlaceState.PLAYING);
        return true;
      };
      TDLocalLogic.prototype.runNextRound = function() {
        TDLogicAdapterBase_1.TDLogicAdapterBase.HistoryArray.unshift(TDLogicAdapterBase_1.TDLogicAdapterBase.winBet);
        this.updateAllTabels(TDLogicAdapterBase_1.TDLogicAdapterBase.winBet);
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.PREPARE_FOR_ROUND,
          data: {
            history: TDLogicAdapterBase_1.TDLogicAdapterBase.HistoryArray,
            betRoad: TDLocalLogic_1.BetArray,
            bigRoadHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray,
            bigEyeBoyHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray,
            smallRoadHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray,
            cockroachHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray,
            prediction: TDLogicAdapterBase_1.TDLogicAdapterBase.PredictionObject
          }
        });
        TDLogicAdapterBase_1.TDLogicAdapterBase.PredictionObject = {
          table_bet: [],
          table_big_road: [],
          table_big_eye_boy: [],
          table_small_road: [],
          table_cockroach: []
        };
        this._currentState = TDPlayersActions_1.TDGameState.BET_MAKING_TIME;
        this.updateGameState();
      };
      TDLocalLogic.prototype.getPlayersByState = function(state) {
        var waitingPlayers = [];
        for (var i = 0; i < TDLogicAdapterBase_1.TDLogicAdapterBase.MAX_PLAYERS_ON_TABLE; i++) this._playerByPlaceId[i].state === state && waitingPlayers.push(i);
        return waitingPlayers;
      };
      TDLocalLogic.prototype.getCurrentPlayerInfo = function() {
        return TDConfig_1.TDConfig.user;
      };
      TDLocalLogic.prototype._enableDisableBetsAndRates = function(flag) {
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.DIS_ENL_BUTTONS,
          data: {
            enable: flag
          }
        });
      };
      TDLocalLogic.prototype.getFirstFreePlace = function() {
        for (var i = 0; i < TDLogicAdapterBase_1.TDLogicAdapterBase.MAX_PLAYERS_ON_TABLE; i++) if (this._playerByPlaceId[i].state === TDGamePlayerData_1.PlaceState.EMPTY) return i;
        return -1;
      };
      TDLocalLogic.prototype.sendActionToClients = function(action) {
        this.actionDispatcher(action);
      };
      TDLocalLogic.prototype.betTimeEnded = function() {
        this._currentState = TDPlayersActions_1.TDGameState.BET_MAKING_ENDED;
        for (var i = 0; i < TDLogicAdapterBase_1.TDLogicAdapterBase.MAX_PLAYERS_ON_TABLE; i++) this._playerByPlaceId[i].state !== TDGamePlayerData_1.PlaceState.EMPTY && this._playerByPlaceId[i].state !== TDGamePlayerData_1.PlaceState.READY_FOR_NEXT_ROUND && (this._playerByPlaceId[i].state = TDGamePlayerData_1.PlaceState.WAITING_FOR_REWARD);
        this.updateGameState();
      };
      TDLocalLogic.prototype.prepareCardsData = function() {
        var dragon = Math.floor(13 * Math.random());
        var tiger = Math.floor(13 * Math.random());
        0 === TDLogicAdapterBase_1.TDLogicAdapterBase.HistoryArray.length && dragon === tiger || this.lastFiveGames(dragon, tiger) ? this.prepareCardsData() : this.sendCardsData(dragon, tiger);
      };
      TDLocalLogic.prototype.lastFiveGames = function(dragon, tiger) {
        if (TDLogicAdapterBase_1.TDLogicAdapterBase.HistoryArray.length > 3) {
          var lastFiveGames = TDLogicAdapterBase_1.TDLogicAdapterBase.HistoryArray.slice(0, 4);
          dragon > tiger ? lastFiveGames.unshift(0) : dragon < tiger ? lastFiveGames.unshift(1) : lastFiveGames.unshift(2);
          var sameGames = 0;
          for (var i = 0; i < lastFiveGames.length; i++) {
            0 === lastFiveGames[i] && sameGames--;
            1 === lastFiveGames[i] && sameGames++;
          }
          return Math.abs(sameGames) > 4;
        }
        return false;
      };
      TDLocalLogic.prototype.sendCardsData = function(dragon, tiger) {
        TDLogicAdapterBase_1.TDLogicAdapterBase.winBet = dragon > tiger ? 0 : dragon < tiger ? 1 : 2;
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.SEND_CARDS,
          data: {
            dragon: dragon,
            tiger: tiger
          }
        });
      };
      TDLocalLogic.prototype.sendGameData = function() {
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.PREPARE_FOR_ROUND,
          data: {
            history: TDLogicAdapterBase_1.TDLogicAdapterBase.HistoryArray,
            betRoad: TDLocalLogic_1.BetArray,
            bigRoadHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray,
            bigEyeBoyHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray,
            smallRoadHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray,
            cockroachHistory: TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray,
            prediction: TDLogicAdapterBase_1.TDLogicAdapterBase.PredictionObject
          }
        });
      };
      TDLocalLogic.prototype.calculateBetsResults = function() {
        var currentBets = [];
        var player;
        var rewardPlayers = this.getPlayersByState(TDGamePlayerData_1.PlaceState.WAITING_FOR_REWARD);
        for (var i = 0; i < rewardPlayers.length; i++) if (this._playerByPlaceId[rewardPlayers[i]].playerInfo.id === this.getCurrentPlayerInfo().id) {
          currentBets = Array.from(this._playerByPlaceId[rewardPlayers[i]].currentBets);
          this._playerByPlaceId[rewardPlayers[i]].currentBets.length = 0;
          player = this._playerByPlaceId[rewardPlayers[i]];
          break;
        }
        var coinsWin = 0;
        var winBet = TDLogicAdapterBase_1.TDLogicAdapterBase.winBet;
        for (var i = 0; i < currentBets.length; i++) 2 !== winBet ? (0 === winBet && "dragon" === currentBets[i].bet.name || 1 === winBet && "tiger" === currentBets[i].bet.name) && (coinsWin += 2 * currentBets[i].betSize) : "draw" === currentBets[i].bet.name ? coinsWin += 8 * currentBets[i].betSize : coinsWin += currentBets[i].betSize;
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.CALCULATE_BETS,
          data: {
            coinsWin: coinsWin,
            player: player.playerInfo
          }
        });
      };
      TDLocalLogic.prototype.cleanBetsData = function() {
        TDLogicAdapterBase_1.TDLogicAdapterBase.BetsState["dragon"].betSize = 0;
        TDLogicAdapterBase_1.TDLogicAdapterBase.BetsState["tiger"].betSize = 0;
        TDLogicAdapterBase_1.TDLogicAdapterBase.BetsState["draw"].betSize = 0;
      };
      TDLocalLogic.prototype.setIntervalX = function(delay, repetitions) {
        var _this = this;
        var x = 0;
        var intervalID = setInterval(function() {
          _this.callUpdateBets();
          ++x === repetitions && clearInterval(intervalID);
        }, delay);
      };
      TDLocalLogic.prototype.callUpdateBets = function() {
        this.sendActionToClients({
          type: TDPlayersActions_1.TDActionType.UPDATE_BETS,
          data: {
            betsState: TDLogicAdapterBase_1.TDLogicAdapterBase.BetsState
          }
        });
      };
      TDLocalLogic.prototype.getLastRevealedCell = function(arr, type) {
        for (var i = arr.length - 1; i >= 0; i--) if (-1 !== arr[i][0].winType) for (var j = arr[i].length - 1; j >= 0; j--) if (-1 !== arr[i][j].winType) {
          if (!type) return arr[i][j];
          if ("index" === type) return {
            i: i,
            j: j
          };
        }
        if (type) return {
          i: 0,
          j: 0
        };
        return null;
      };
      TDLocalLogic.prototype.getLastUnrevealedCell = function(arr) {
        for (var i = arr.length - 1; i >= 0; i--) if (-1 !== arr[i][0].winType) for (var j = arr[i].length - 1; j >= 0; j--) if (-1 !== arr[i][j].winType) return j + 1 < 6 ? arr[i][j + 1] : arr[i + 1][0];
        return arr[0][0];
      };
      TDLocalLogic.prototype.getNCell = function(indx, arr) {
        var column = Math.floor(indx / 6);
        var item = indx - 6 * column;
        return arr[column][item];
      };
      TDLocalLogic.prototype.getNColumnDepth = function(indx, nodeToCompare) {
        var specColumn;
        var depth = 0;
        for (var i = TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray.length - 1; i >= 0; i--) if (nodeToCompare) {
          if (TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[i][0] === nodeToCompare) {
            specColumn = TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[i - indx];
            break;
          }
        } else if (-1 !== TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[i][0].winType) {
          specColumn = TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[i - indx];
          break;
        }
        for (var i = 0; i < specColumn.length; i++) {
          if (-1 === specColumn[i].winType) break;
          depth++;
        }
        return depth;
      };
      TDLocalLogic.prototype.updateAllTabels = function(winBet) {
        var betCell = this.getLastUnrevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BetArray);
        betCell.winType = winBet;
        var newIndx;
        var bigRoadLastRevealedCell = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray);
        var indx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray, "index");
        if (null == bigRoadLastRevealedCell) {
          TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[0][0].winType = winBet;
          newIndx = {
            i: 0,
            j: 0
          };
        } else if (bigRoadLastRevealedCell.winType === winBet) {
          var bigRoadCell = this.getLastUnrevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray);
          bigRoadCell.winType = winBet;
          newIndx = {
            i: indx.i,
            j: indx.j + 1
          };
        } else if (bigRoadLastRevealedCell.winType !== winBet && 2 !== winBet) {
          TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[indx.i + 1][0].winType = winBet;
          newIndx = {
            i: indx.i + 1,
            j: 0
          };
        } else 2 === winBet && (null == bigRoadLastRevealedCell.tieCounter || "undefined" === typeof bigRoadLastRevealedCell.tieCounter ? bigRoadLastRevealedCell.tieCounter = 1 : bigRoadLastRevealedCell.tieCounter++);
        if (2 !== winBet) {
          if (newIndx.j + 6 * newIndx.i >= 7) {
            var bebCellIndx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray, "index");
            var nextCol = void 0;
            nextCol = 0 === newIndx.j ? this.getNColumnDepth(1, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i][0]) === this.getNColumnDepth(2, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i][0]) ? 1 : 0 : TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i - 1][newIndx.j].winType === TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i - 1][newIndx.j - 1].winType ? 1 : 0;
            0 === bebCellIndx.i && 0 === bebCellIndx.j && -1 === TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray[bebCellIndx.i][bebCellIndx.j].winType ? TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray[bebCellIndx.i][bebCellIndx.j].winType = nextCol : TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray[bebCellIndx.i][bebCellIndx.j].winType === nextCol && bebCellIndx.j + 1 < 6 ? TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray[bebCellIndx.i][bebCellIndx.j + 1].winType = nextCol : TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray[bebCellIndx.i + 1][0].winType = nextCol;
          }
          if (newIndx.j + 6 * newIndx.i >= 13) {
            var srCellIndx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray, "index");
            var nextCol = void 0;
            nextCol = 0 === newIndx.j ? this.getNColumnDepth(1, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i][0]) === this.getNColumnDepth(3, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i][0]) ? 1 : 0 : TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i - 2][newIndx.j].winType === TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i - 2][newIndx.j - 1].winType ? 1 : 0;
            0 === srCellIndx.i && 0 === srCellIndx.j && -1 === TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j].winType ? TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j].winType = nextCol : TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j].winType === nextCol && srCellIndx.j + 1 < 6 ? TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j + 1].winType = nextCol : TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i + 1][0].winType = nextCol;
          }
          if (newIndx.j + 6 * newIndx.i >= 19) {
            var cpCellIndx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray, "index");
            var nextCol = void 0;
            nextCol = 0 === newIndx.j ? this.getNColumnDepth(1, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i][0]) === this.getNColumnDepth(4, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i][0]) ? 1 : 0 : TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i - 3][newIndx.j].winType === TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[newIndx.i - 3][newIndx.j - 1].winType ? 1 : 0;
            0 === cpCellIndx.i && 0 === cpCellIndx.j && -1 === TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray[cpCellIndx.i][cpCellIndx.j].winType ? TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray[cpCellIndx.i][cpCellIndx.j].winType = nextCol : TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray[cpCellIndx.i][cpCellIndx.j].winType === nextCol && cpCellIndx.j + 1 < 6 ? TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray[cpCellIndx.i][cpCellIndx.j + 1].winType = nextCol : TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray[cpCellIndx.i + 1][0].winType = nextCol;
          }
          this.makePredictionForNextRound(true);
        }
      };
      TDLocalLogic.prototype.makePredictionForNextRound = function(firstTime) {
        var predObj = TDLogicAdapterBase_1.TDLogicAdapterBase.PredictionObject;
        var nexInd;
        var winType = 0;
        var bet;
        var brInd = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray, "index");
        nexInd = TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[brInd.i][brInd.j].winType === winType ? {
          i: brInd.i,
          j: brInd.j + 1
        } : {
          i: brInd.i + 1,
          j: 0
        };
        if (nexInd.j + 6 * nexInd.i >= 7) {
          var bebCellIndx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.BigEyeBoyArray, "index");
          var nextCol = void 0;
          nextCol = 0 === nexInd.j ? this.getNColumnDepth(1, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i][0]) === this.getNColumnDepth(2, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i][0]) ? 1 : 0 : TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i - 1][nexInd.j].winType === TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i - 1][nexInd.j - 1].winType ? 1 : 0;
          if (TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i][bebCellIndx.j].winType === nextCol) {
            bebCellIndx.j + 1 < 6 ? predObj.table_big_eye_boy.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i][bebCellIndx.j + 1]
            }) : predObj.table_big_eye_boy.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i + 1][0]
            });
            predObj.table_big_eye_boy.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i + 1][0]
            });
          } else {
            predObj.table_big_eye_boy.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i + 1][0]
            });
            bebCellIndx.j + 1 < 6 ? predObj.table_big_eye_boy.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i][bebCellIndx.j + 1]
            }) : predObj.table_big_eye_boy.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[bebCellIndx.i + 1][0]
            });
          }
        }
        if (nexInd.j + 6 * nexInd.i >= 13) {
          var srCellIndx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray, "index");
          var nextCol = void 0;
          nextCol = 0 === nexInd.j ? this.getNColumnDepth(1, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i][0]) === this.getNColumnDepth(3, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i][0]) ? 1 : 0 : TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i - 2][nexInd.j].winType === TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i - 2][nexInd.j - 1].winType ? 1 : 0;
          if (TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j].winType === nextCol) {
            srCellIndx.j + 1 < 6 ? predObj.table_small_road.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j + 1]
            }) : predObj.table_small_road.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i + 1][0]
            });
            predObj.table_small_road.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i + 1][0]
            });
          } else {
            predObj.table_small_road.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i + 1][0]
            });
            srCellIndx.j + 1 < 6 ? predObj.table_small_road.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i][srCellIndx.j + 1]
            }) : predObj.table_small_road.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[srCellIndx.i + 1][0]
            });
          }
        }
        if (nexInd.j + 6 * nexInd.i >= 19) {
          var cpCellIndx = this.getLastRevealedCell(TDLogicAdapterBase_1.TDLogicAdapterBase.CockroachPigArray, "index");
          var nextCol = void 0;
          nextCol = 0 === nexInd.j ? this.getNColumnDepth(1, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i][0]) === this.getNColumnDepth(4, TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i][0]) ? 1 : 0 : TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i - 3][nexInd.j].winType === TDLogicAdapterBase_1.TDLogicAdapterBase.BigRoadArray[nexInd.i - 3][nexInd.j - 1].winType ? 1 : 0;
          if (TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i][cpCellIndx.j].winType === nextCol) {
            cpCellIndx.j + 1 < 6 ? predObj.table_cockroach.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i][cpCellIndx.j + 1]
            }) : predObj.table_cockroach.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i + 1][0]
            });
            predObj.table_cockroach.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i + 1][0]
            });
          } else {
            predObj.table_cockroach.push({
              winType: nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i + 1][0]
            });
            cpCellIndx.j + 1 < 6 ? predObj.table_cockroach.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i][cpCellIndx.j + 1]
            }) : predObj.table_cockroach.push({
              winType: 1 - nextCol,
              bet: TDLogicAdapterBase_1.TDLogicAdapterBase.SmallRoadArray[cpCellIndx.i + 1][0]
            });
          }
        }
      };
      var TDLocalLogic_1;
      TDLocalLogic = TDLocalLogic_1 = __decorate([ ccclass ], TDLocalLogic);
      return TDLocalLogic;
    }(TDLogicAdapterBase_1.TDLogicAdapterBase);
    exports.TDLocalLogic = TDLocalLogic;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "./TDBotLogic": "TDBotLogic",
    "./TDConfig": "TDConfig",
    "./TDGamePlayerData": "TDGamePlayerData",
    "./TDLogicAdapterBase": "TDLogicAdapterBase",
    "./TDPlayersActions": "TDPlayersActions"
  } ],
  TDLogicAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b749e14FsBIyKgjhvSVPBM7", "TDLogicAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDLogicAdapterBase = function() {
      function TDLogicAdapterBase() {}
      TDLogicAdapterBase.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            this.prepareStatisticArrays(TDLogicAdapterBase.BetArray, 10);
            this.prepareStatisticArrays(TDLogicAdapterBase.BigRoadArray, 60);
            this.prepareStatisticArrays(TDLogicAdapterBase.BigEyeBoyArray, 60);
            this.prepareStatisticArrays(TDLogicAdapterBase.SmallRoadArray, 60);
            this.prepareStatisticArrays(TDLogicAdapterBase.CockroachPigArray, 60);
            return [ 2 ];
          });
        });
      };
      TDLogicAdapterBase.prototype.start = function() {};
      TDLogicAdapterBase.prototype.getCurrentPlayerInfo = function() {
        return {
          id: "-G-2444",
          name: "YOU",
          balance: 1e7,
          userImage: "https://image.freepik.com/free-photo/nature-design-with-bokeh-effect_1048-1882.jpg",
          isGoldMember: true
        };
      };
      TDLogicAdapterBase.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2, true ];
          });
        });
      };
      TDLogicAdapterBase.prototype.registerActionDispatcher = function(handler) {
        this.actionDispatcher = handler;
      };
      TDLogicAdapterBase.prototype.currentTime = function() {
        return Math.round(new Date().getTime() / 1e3);
      };
      TDLogicAdapterBase.prototype.destroy = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2 ];
          });
        });
      };
      TDLogicAdapterBase.prototype.prepareStatisticArrays = function(arr, times) {
        for (var i = 0; i < times; i++) arr.push([ {
          winType: -1,
          tieCounter: 0
        }, {
          winType: -1,
          tieCounter: 0
        }, {
          winType: -1,
          tieCounter: 0
        }, {
          winType: -1,
          tieCounter: 0
        }, {
          winType: -1,
          tieCounter: 0
        }, {
          winType: -1,
          tieCounter: 0
        } ]);
      };
      TDLogicAdapterBase.MAX_PLAYERS_ON_TABLE = 20;
      TDLogicAdapterBase.MIN_PLAYERS_FOR_GAME = 1;
      TDLogicAdapterBase.BetsState = {
        dragon: {
          betSize: 0
        },
        tiger: {
          betSize: 0
        },
        draw: {
          betSize: 0
        }
      };
      TDLogicAdapterBase.HistoryArray = [];
      TDLogicAdapterBase.BetArray = [];
      TDLogicAdapterBase.BigRoadArray = [];
      TDLogicAdapterBase.BigEyeBoyArray = [];
      TDLogicAdapterBase.SmallRoadArray = [];
      TDLogicAdapterBase.CockroachPigArray = [];
      TDLogicAdapterBase.PredictionObject = {
        table_bet: [],
        table_big_road: [],
        table_big_eye_boy: [],
        table_small_road: [],
        table_cockroach: []
      };
      TDLogicAdapterBase.winBet = -1;
      return TDLogicAdapterBase;
    }();
    exports.TDLogicAdapterBase = TDLogicAdapterBase;
    cc._RF.pop();
  }, {} ],
  TDPlayersActions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e2a2uPzMRLTIYr8vTEGZbh", "TDPlayersActions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDPlayerAction = function(_super) {
      __extends(TDPlayerAction, _super);
      function TDPlayerAction() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bet = -1;
        return _this;
      }
      Object.defineProperty(TDPlayerAction.prototype, "playerUid", {
        get: function() {
          return this._playerUid;
        },
        enumerable: true,
        configurable: true
      });
      return TDPlayerAction;
    }(cc.Component);
    exports.TDPlayerAction = TDPlayerAction;
    var ChatMessage = function() {
      function ChatMessage() {}
      return ChatMessage;
    }();
    exports.ChatMessage = ChatMessage;
    var TDGameState;
    (function(TDGameState) {
      TDGameState[TDGameState["BET_MAKING_TIME"] = 0] = "BET_MAKING_TIME";
      TDGameState[TDGameState["BET_MAKING_ENDED"] = 1] = "BET_MAKING_ENDED";
      TDGameState[TDGameState["CARDS_REVEALING"] = 2] = "CARDS_REVEALING";
      TDGameState[TDGameState["WAITING_FOR_NEXT_ROUND"] = 3] = "WAITING_FOR_NEXT_ROUND";
    })(TDGameState = exports.TDGameState || (exports.TDGameState = {}));
    var TDActionType;
    (function(TDActionType) {
      TDActionType[TDActionType["REGISTER_PLACE"] = 0] = "REGISTER_PLACE";
      TDActionType[TDActionType["UPDATE_PLAYER_ACTION"] = 1] = "UPDATE_PLAYER_ACTION";
      TDActionType[TDActionType["PREPARE_FOR_ROUND"] = 2] = "PREPARE_FOR_ROUND";
      TDActionType[TDActionType["START_TIMER"] = 3] = "START_TIMER";
      TDActionType[TDActionType["DIS_ENL_BUTTONS"] = 4] = "DIS_ENL_BUTTONS";
      TDActionType[TDActionType["MAKE_BET"] = 5] = "MAKE_BET";
      TDActionType[TDActionType["CONFIRM_BET"] = 6] = "CONFIRM_BET";
      TDActionType[TDActionType["SEND_CARDS"] = 7] = "SEND_CARDS";
      TDActionType[TDActionType["UPDATE_BETS"] = 8] = "UPDATE_BETS";
      TDActionType[TDActionType["CALCULATE_BETS"] = 9] = "CALCULATE_BETS";
      TDActionType[TDActionType["CLEAR_DATA"] = 10] = "CLEAR_DATA";
      TDActionType[TDActionType["READY_FOR_NEXT_ROUND"] = 11] = "READY_FOR_NEXT_ROUND";
    })(TDActionType = exports.TDActionType || (exports.TDActionType = {}));
    cc._RF.pop();
  }, {} ],
  TDSidesGameControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ffe42VWK7JJC4vNCXIPqUu2", "TDSidesGameControl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDConfig_1 = require("./server/TDConfig");
    var TDViewAdapterBase_1 = require("./server/TDViewAdapterBase");
    var TDPlayersActions_1 = require("./server/TDPlayersActions");
    var TDGamePlayerData_1 = require("./server/TDGamePlayerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TDStats = require("./TDStats");
    var Logger_1 = require("../../../common/core/Logger");
    var SidesTableControl = function(_super) {
      __extends(SidesTableControl, _super);
      function SidesTableControl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.animationNode = null;
        _this.clockLabel = null;
        _this.historyFramesArray = [];
        _this.historyPanel = null;
        _this.tex = null;
        _this.dragonCard = null;
        _this.tigerCard = null;
        _this.coinsBalance = null;
        _this._playerByPlace = {};
        _this._playerViewByPlace = {};
        _this.players = [];
        _this.curRate = null;
        _this.betsArray = [];
        _this.clockTime = 0;
        _this.gameStarted = true;
        _this.gamePreStart = true;
        _this.setDragonCard = true;
        _this.firstDeal = true;
        _this.gamesCounter = {
          counter: 0,
          results: []
        };
        _this.chipPanelNode = null;
        return _this;
      }
      SidesTableControl_1 = SidesTableControl;
      SidesTableControl.prototype.onLoad = function() {
        TDConfig_1.TDConfig.initLocalGame();
        TDConfig_1.TDConfig.initControllers(this);
        this.chipPanelNode = cc.find("Canvas/content/game/chips_panel");
        this._resetCards();
        this.prepareBackButton();
      };
      SidesTableControl.prototype.start = function() {
        TDConfig_1.TDConfig.tdGameCore.start();
      };
      SidesTableControl.prototype.onDestroy = function() {
        TDConfig_1.TDConfig.gameAdapter.destroy();
      };
      SidesTableControl.prototype.onBack = function() {
        var canvas = cc.find("Canvas");
        canvas && canvas.getComponent("GameScene").onBackButtonPress();
      };
      SidesTableControl.prototype._showStartAnim = function() {
        var _this = this;
        if (this.gamePreStart) {
          var animNode_1 = this.animationNode.getChildByName("b_dt_node");
          animNode_1.getComponent("cc.Animation").play("duel_enter");
          animNode_1.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
            _this.gamePreStart = false;
            animNode_1.getComponent("cc.Animation").play("duel_exit");
          })));
        }
      };
      SidesTableControl.prototype._resetCards = function() {
        if (this.setDragonCard) {
          this.dragonCard.getComponent("cc.Sprite").spriteFrame = this._getSuit(4, 0);
          this.setDragonCard = false;
          this.dragonCard.width = 50;
          this.dragonCard.height = 70;
          this._resetCards();
        } else {
          this.tigerCard.getComponent("cc.Sprite").spriteFrame = this._getSuit(4, 1);
          this.setDragonCard = true;
          this.tigerCard.width = 50;
          this.tigerCard.height = 70;
        }
      };
      SidesTableControl.prototype._getSuit = function(row, column) {
        var width = SidesTableControl_1.xOffset[column];
        var height = SidesTableControl_1.yOffset[row];
        width = Math.min(SidesTableControl_1.maxWithTex - SidesTableControl_1.withCard, width);
        height = Math.min(SidesTableControl_1.maxHeightTex - SidesTableControl_1.heightCard, height);
        return new cc.SpriteFrame(this.tex, cc.rect(width, height, SidesTableControl_1.withCard, SidesTableControl_1.heightCard));
      };
      SidesTableControl.prototype.rateTouchEvent = function(event) {
        this.curRate = event.target;
      };
      SidesTableControl.prototype.betTouchEvent = function(event) {
        null != this.curRate && TDStats.PlData.balance >= parseInt(this.curRate.getName().split("_")[1], 10) && this.actionDispatcher({
          type: TDPlayersActions_1.TDActionType.MAKE_BET,
          data: {
            bet: event.target,
            betSize: parseInt(this.curRate.getName().split("_")[1], 10),
            player: this.player
          }
        });
      };
      SidesTableControl.prototype.update = function(dt) {
        if (!this.gameStarted && !this.gamePreStart) if (this.clockTime > 1) {
          this.clockTime -= dt;
          this.clockLabel.getComponent("cc.Label").string = "Time: " + Math.floor(this.clockTime);
        } else {
          this.gameStarted = true;
          this._showStopAnim();
        }
      };
      SidesTableControl.prototype._showStopAnim = function() {
        var _this = this;
        var animNode = this.animationNode.getChildByName("stop_bet_node");
        animNode.getComponent("cc.Animation").play("stop_bets_enter");
        animNode.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
          _this._showCards();
          animNode.getComponent("cc.Animation").play("stop_bets_exit");
        })));
      };
      SidesTableControl.prototype._showCards = function() {
        var _this = this;
        this.setDragonCard ? this.dragonCard.runAction(cc.sequence(cc.scaleTo(.02, 1.7), cc.scaleTo(.2, 0, 1.7), cc.callFunc(function() {
          _this.dragonCard.getComponent("cc.Sprite").spriteFrame = _this.dragonCard.nextFrame;
          _this.dragonCard.width = 50;
          _this.dragonCard.height = 70;
        }), cc.scaleTo(.2, 1.7), cc.scaleTo(.02, 1.5), cc.delayTime(.25), cc.callFunc(function() {
          _this.setDragonCard = false;
          _this._showCards();
        }))) : this.tigerCard.runAction(cc.sequence(cc.scaleTo(.02, 1.7), cc.scaleTo(.2, 0, 1.7), cc.callFunc(function() {
          _this.tigerCard.getComponent("cc.Sprite").spriteFrame = _this.tigerCard.nextFrame;
          _this.tigerCard.width = 50;
          _this.tigerCard.height = 70;
        }), cc.scaleTo(.2, 1.7), cc.scaleTo(.02, 1.5), cc.callFunc(function() {
          _this.setDragonCard = true;
          _this._compareCards();
        })));
      };
      SidesTableControl.prototype._compareCards = function() {
        var ind = 0;
        logger.info(this.dragonCard.rank + " " + this.tigerCard.rank);
        if (this.dragonCard.rank > this.tigerCard.rank) {
          logger.info("DRAGON WINS");
          this.gamesCounter.results.push(ind);
        }
        if (this.dragonCard.rank < this.tigerCard.rank) {
          logger.info("TIGER WINS");
          ind = 1;
          this.gamesCounter.results.push(ind);
        }
        if (this.dragonCard.rank === this.tigerCard.rank) {
          logger.info("DRAW");
          ind = 2;
        }
        this._calcCoins(ind);
        this._highlightWinBet(ind);
      };
      SidesTableControl.prototype._updateHistory = function(spriteInd) {
        for (var i = this.historyPanel.children.length - 1; i >= 0; i--) {
          this.historyPanel.children[i].getComponent("cc.Sprite").spriteFrame = 0 !== i ? this.historyPanel.children[i - 1].getComponent("cc.Sprite").spriteFrame : this.historyFramesArray[spriteInd];
          this.historyPanel.children[i].width = this.historyPanel.children[i].height = 37;
        }
      };
      SidesTableControl.prototype._calcCoins = function(winBet) {
        var wb;
        switch (winBet) {
         case 0:
          wb = "dragon";
          break;

         case 1:
          wb = "tiger";
          break;

         default:
          wb = "draw";
        }
        for (var i = 0; i < this.betsArray.length; i++) this.betsArray[i].curBet.getName() === wb && "draw" !== wb ? TDStats.PlData.balance += 2 * parseInt(this.betsArray[i].curRate.getName().split("_")[1], 10) : this.betsArray[i].curBet.getName() === wb && "draw" === wb ? TDStats.PlData.balance += 8 * parseInt(this.betsArray[i].curRate.getName().split("_")[1], 10) : "draw" === wb && this.betsArray[i].curBet.getName() !== wb && (TDStats.PlData.balance += parseInt(this.betsArray[i].curRate.getName().split("_")[1], 10));
        this.coinsBalance.getComponent("cc.Label").string = TDStats.PlData.balance;
      };
      SidesTableControl.prototype._highlightWinBet = function(ind) {
        var _this = this;
        var animNode = this.animationNode.getChildByName("highlighter_node").children[ind];
        animNode.runAction(cc.sequence(cc.fadeTo(.5, 255), cc.fadeTo(.5, 0), cc.fadeTo(.5, 255), cc.fadeTo(.5, 0), cc.fadeTo(.5, 255), cc.fadeTo(.5, 0), cc.callFunc(function() {
          _this._resetGame();
        })));
      };
      SidesTableControl.prototype._resetGame = function() {
        this.actionDispatcher({
          type: TDPlayersActions_1.TDActionType.READY_FOR_NEXT_ROUND,
          data: {
            player: this.player
          }
        });
        if (this.gamesCounter.counter > 59) {
          this.firstDeal = true;
          this.gamesCounter.counter = 0;
          this.gamesCounter.results = [];
        }
        this._removeChips();
        this._resetCards();
        this.gamePreStart = true;
        this._showStartAnim();
      };
      SidesTableControl.prototype._removeChips = function() {
        for (var i = 0; i < this.betsArray.length; i++) this.betsArray[i].curRate.parent = null;
        this.betsArray = [];
      };
      SidesTableControl.prototype._randomNum = function(endValue, startValue) {
        return startValue ? Math.floor(Math.random() * (endValue - startValue) + startValue) : Math.floor(Math.random() * endValue);
      };
      SidesTableControl.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          var playerData, userDataNode, newCoin, userDataNode_1, table, chipsPanel, i, i, tableBets, i;
          return __generator(this, function(_a) {
            switch (action.type) {
             case TDPlayersActions_1.TDActionType.REGISTER_PLACE:
              if (null == this.player || "undefined" === typeof this.player) {
                playerData = {
                  id: action.data.playerInfo.id,
                  balance: action.data.playerInfo.balance,
                  isGoldMember: action.data.playerInfo.isGoldMember,
                  name: action.data.playerInfo.name,
                  userImage: action.data.playerInfo.userImage
                };
                playerData.id === TDConfig_1.TDConfig.tdGameCore.getCurrentPlayerInfo().id && this.initViewStatredFromMain(action.data.placeId, action.data.playerInfo.id);
                this.player = action.data.playerInfo;
              }
              break;

             case TDPlayersActions_1.TDActionType.UPDATE_PLAYER_ACTION:
              userDataNode = this.node.getChildByName("user_data_ui").getChildByName("acc_state");
              TDStats.PlData.balance = action.data.playerInfo.balance;
              userDataNode.getChildByName("balance").getComponent("cc.Label").string = TDStats.PlData.balance;
              break;

             case TDPlayersActions_1.TDActionType.START_TIMER:
              this._showStartAnim();
              this.clockTime = action.data.time;
              this.gameStarted = false;
              break;

             case TDPlayersActions_1.TDActionType.SEND_CARDS:
              this.dragonCard.rank = action.data.dragon;
              this.dragonCard.nextFrame = this._getSuit(this._randomNum(4), action.data.dragon);
              this.tigerCard.rank = action.data.tiger;
              this.tigerCard.nextFrame = this._getSuit(this._randomNum(4), action.data.tiger);
              break;

             case TDPlayersActions_1.TDActionType.CONFIRM_BET:
              if (action.data.confirmed) {
                newCoin = cc.instantiate(this.chipPanelNode.getChildByName("chip_" + action.data.betSize));
                newCoin.removeComponent("cc.Button");
                newCoin.scale = .3;
                newCoin.parent = this.node.getChildByName("placed_chips");
                newCoin.runAction(cc.moveTo(.2, cc.p(action.data.bet.x + this._randomNum(action.data.bet.width / 2.2, -action.data.bet.width / 2.2), action.data.bet.y + this._randomNum(action.data.bet.height / 2.5, -action.data.bet.height / 2.5))));
                TDStats.PlData.balance -= action.data.betSize;
                userDataNode_1 = this.node.getChildByName("user_data_ui").getChildByName("acc_state");
                userDataNode_1.getChildByName("balance").getComponent("cc.Label").string = TDStats.PlData.balance;
                this.betsArray.push({
                  curBet: action.data.bet,
                  curRate: newCoin
                });
              }
              break;

             case TDPlayersActions_1.TDActionType.DIS_ENL_BUTTONS:
              table = cc.find("/Canvas/content/game/table");
              chipsPanel = cc.find("/Canvas/content/game/chips_panel");
              for (i = 0; i < table.children.length; i++) table.children[i].getComponent("cc.Button").interactable = action.data.enable;
              for (i = 0; i < chipsPanel.children.length; i++) chipsPanel.children[i].getComponent("cc.Button").interactable = action.data.enable;
              break;

             case TDPlayersActions_1.TDActionType.UPDATE_BETS:
              tableBets = this.node.getChildByName("table").children;
              for (i = 0; i < tableBets.length; i++) tableBets[i].getChildByName("coins").getComponent("cc.Label").string = action.data.betsState[tableBets[i].name].betSize;
              break;

             case TDPlayersActions_1.TDActionType.CALCULATE_BETS:
              if (action.data.player.id === TDStats.PlData.id) {
                TDStats.PlData.balance += action.data.coinsWin;
                this.coinsBalance.getComponent("cc.Label").string = TDStats.PlData.balance;
              }
            }
            return [ 2, true ];
          });
        });
      };
      SidesTableControl.prototype.initFreePlaces = function() {
        for (var i = 0; i < this.players.length + 1; i++) {
          var playerData = new TDGamePlayerData_1.TDGamePlayerData();
          playerData.placeId = i;
          this._playerByPlace[i] = playerData;
        }
      };
      SidesTableControl.prototype.initViewStatredFromMain = function(placeId, id) {
        TDStats.PlData.ownPlace = placeId;
        TDStats.PlData.id = id;
      };
      SidesTableControl.prototype.prepareBackButton = function() {
        var backButton = this.node.getChildByName("top_ui").getChildByName("back_button");
        backButton.on("click", function() {
          cc.find("Canvas").getComponent("GameScene").onBackButtonPress();
        }, this);
      };
      var SidesTableControl_1;
      SidesTableControl.xOffset = [ 0, 158, 315, 473, 630, 787, 944, 1102, 1260, 1417, 1575, 1733, 1891 ];
      SidesTableControl.yOffset = [ 0, 221, 442, 663, 882 ];
      SidesTableControl.withCard = 157;
      SidesTableControl.heightCard = 220;
      SidesTableControl.maxWithTex = 2048;
      SidesTableControl.maxHeightTex = 1102;
      __decorate([ property(cc.Node) ], SidesTableControl.prototype, "animationNode", void 0);
      __decorate([ property(cc.Label) ], SidesTableControl.prototype, "clockLabel", void 0);
      __decorate([ property(cc.SpriteFrame) ], SidesTableControl.prototype, "historyFramesArray", void 0);
      __decorate([ property(cc.Node) ], SidesTableControl.prototype, "historyPanel", void 0);
      __decorate([ property({
        type: cc.Texture2D
      }) ], SidesTableControl.prototype, "tex", void 0);
      __decorate([ property(cc.Node) ], SidesTableControl.prototype, "dragonCard", void 0);
      __decorate([ property(cc.Node) ], SidesTableControl.prototype, "tigerCard", void 0);
      __decorate([ property(cc.Label) ], SidesTableControl.prototype, "coinsBalance", void 0);
      SidesTableControl = SidesTableControl_1 = __decorate([ ccclass ], SidesTableControl);
      return SidesTableControl;
    }(TDViewAdapterBase_1.TDViewAdapterBase);
    exports.default = SidesTableControl;
    var logger = Logger_1.default.getLogger("SidesTableControl");
    cc._RF.pop();
  }, {
    "../../../common/core/Logger": "Logger",
    "./TDStats": "TDStats",
    "./server/TDConfig": "TDConfig",
    "./server/TDGamePlayerData": "TDGamePlayerData",
    "./server/TDPlayersActions": "TDPlayersActions",
    "./server/TDViewAdapterBase": "TDViewAdapterBase"
  } ],
  TDStatisticControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a236SKwedLdq760aTyXeAS", "TDStatisticControl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TDConfig_1 = require("./server/TDConfig");
    var TDViewAdapterBase_1 = require("./server/TDViewAdapterBase");
    var TDPlayersActions_1 = require("./server/TDPlayersActions");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TDStats = require("./TDStats");
    var Logger_1 = require("../../../common/core/Logger");
    var StatisticClass = function(_super) {
      __extends(StatisticClass, _super);
      function StatisticClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cellInstance = null;
        _this.betPlate = null;
        _this.bigRoad = null;
        _this.bigEyeBoy = null;
        _this.smallRoad = null;
        _this.cockroachPig = null;
        _this.prediction = null;
        _this.historyPanel = null;
        return _this;
      }
      StatisticClass.prototype.onLoad = function() {
        this._cleanOldData();
        this._prepareStatData(this.betPlate, true, true, TDStats.betArray, TDStats.firstPosArr[0]);
        this._prepareStatData(this.bigRoad, true, false, TDStats.bigRoadArray, TDStats.firstPosArr[1]);
        this._prepareStatData(this.bigEyeBoy, true, false, TDStats.bigEyeBoyArray, TDStats.firstPosArr[2]);
        this._prepareStatData(this.smallRoad, true, false, TDStats.smallRoadArray, TDStats.firstPosArr[2]);
        this._prepareStatData(this.cockroachPig, true, false, TDStats.cockroachArray, TDStats.firstPosArr[2]);
        TDConfig_1.TDConfig.addViewController(this);
      };
      StatisticClass.prototype.start = function() {};
      StatisticClass.prototype.onDestroy = function() {};
      StatisticClass.prototype._cleanOldData = function() {
        TDStats.betArray.length = 0;
        TDStats.bigRoadArray.length = 0;
        TDStats.bigEyeBoyArray.length = 0;
        TDStats.smallRoadArray.length = 0;
        TDStats.cockroachArray.length = 0;
        TDStats.TableStates.lastWinBet = void 0;
      };
      StatisticClass.prototype.showChildren = function(node) {
        logger.info("node - " + node.getName() + " has " + node.children.length + " children");
        if (node.children.length > 0) for (var i = 0; i < node.children.length; i++) this.showChildren(node.children[i]);
      };
      StatisticClass.prototype._prepareStatData = function(node, firstTime, bigPlate, plateArray, posArr) {
        if (firstTime) {
          var width = void 0;
          width = bigPlate ? TDStats.bigPlateWidth : TDStats.smallPlatesWidth;
          for (var i = 0; i < width; i++) {
            var tmpArray = [];
            for (var j = 0; j < TDStats.lineHeight; j++) {
              var newCell = cc.instantiate(this.cellInstance);
              newCell.parent = node;
              newCell.width = newCell.height = posArr[0];
              newCell.x = posArr[1] + posArr[3] * i;
              newCell.y = posArr[2] - posArr[3] * j;
              newCell.getComponent("TDCellStats").cellPosition = j + TDStats.lineHeight * i;
              tmpArray.push(newCell);
            }
            plateArray.push(tmpArray);
          }
        } else for (var i = 0; i < node.children.length; i++) {
          node.children[i].getComponent("cc.Sprite").spriteFrame = null;
          node.children[i].getChildByName("label").getComponent("cc.Label").string = "";
          var childComp = node.children[i].getComponent("TDCellStats");
          childComp.cellRevealed = false;
          childComp.cellWinType = -1;
          childComp.tieCounter = 0;
        }
      };
      StatisticClass.prototype.update = function(dt) {
        if (TDStats.TableStates.cleanTables) {
          logger.info("GAME IS RESTARTED");
          TDStats.TableStates.cleanTables = false;
          this._prepareStatData(this.betPlate, false);
          this._prepareStatData(this.bigRoad, false);
          this._prepareStatData(this.bigEyeBoy, false);
          this._prepareStatData(this.smallRoad, false);
          this._prepareStatData(this.cockroachPig, false);
        }
      };
      StatisticClass.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          var i, i, j, childComp, i, j, childComp, i, j, childComp, i, j, childComp, i, j, childComp;
          return __generator(this, function(_a) {
            switch (action.type) {
             case TDPlayersActions_1.TDActionType.PREPARE_FOR_ROUND:
              for (i = 0; i < this.historyPanel.children.length; i++) {
                this.historyPanel.children[i].getComponent("cc.Sprite").spriteFrame = this.historyPanel.getComponent("TDTableImagesHolder").frames[action.data.history[i]];
                this.historyPanel.children[i].width = this.historyPanel.children[i].height = 37;
              }
              for (i = 0; i < action.data.betRoad.length; i++) for (j = 0; j < action.data.betRoad[i].length; j++) if (-1 !== action.data.betRoad[i][j].winType) {
                this.betPlate.children[j + 6 * i].getComponent("cc.Sprite").spriteFrame = this.betPlate.getComponent("TDTableImagesHolder").frames[action.data.betRoad[i][j].winType];
                childComp = this.betPlate.children[j + 6 * i].getComponent("TDCellStats");
                childComp.cellRevealed = true;
                childComp.cellWinType = action.data.betRoad[i][j].winType;
              }
              for (i = 0; i < action.data.bigRoadHistory.length; i++) for (j = 0; j < action.data.bigRoadHistory[i].length; j++) if (-1 !== action.data.bigRoadHistory[i][j].winType) {
                this.bigRoad.children[j + 6 * i].getComponent("cc.Sprite").spriteFrame = this.bigRoad.getComponent("TDTableImagesHolder").frames[action.data.bigRoadHistory[i][j].winType];
                childComp = this.bigRoad.children[j + 6 * i].getComponent("TDCellStats");
                childComp.cellRevealed = true;
                childComp.cellWinType = action.data.bigRoadHistory[i][j].winType;
                if (action.data.bigRoadHistory[i][j].tieCounter > 0) {
                  childComp.tieCounter = action.data.bigRoadHistory[i][j].tieCounter;
                  this.bigRoad.children[j + 6 * i].getChildByName("label").getComponent("cc.Label").string = action.data.bigRoadHistory[i][j].tieCounter;
                }
              }
              for (i = 0; i < action.data.bigEyeBoyHistory.length; i++) for (j = 0; j < action.data.bigEyeBoyHistory[i].length; j++) if (-1 !== action.data.bigEyeBoyHistory[i][j].winType) {
                this.bigEyeBoy.children[j + 6 * i].getComponent("cc.Sprite").spriteFrame = this.bigEyeBoy.getComponent("TDTableImagesHolder").frames[action.data.bigEyeBoyHistory[i][j].winType];
                childComp = this.bigEyeBoy.children[j + 6 * i].getComponent("TDCellStats");
                childComp.cellRevealed = true;
                childComp.cellWinType = action.data.bigEyeBoyHistory[i][j];
              }
              for (i = 0; i < action.data.smallRoadHistory.length; i++) for (j = 0; j < action.data.smallRoadHistory[i].length; j++) if (-1 !== action.data.smallRoadHistory[i][j].winType) {
                this.smallRoad.children[j + 6 * i].getComponent("cc.Sprite").spriteFrame = this.smallRoad.getComponent("TDTableImagesHolder").frames[action.data.smallRoadHistory[i][j].winType];
                childComp = this.smallRoad.children[j + 6 * i].getComponent("TDCellStats");
                childComp.cellRevealed = true;
                childComp.cellWinType = action.data.smallRoadHistory[i][j];
              }
              for (i = 0; i < action.data.cockroachHistory.length; i++) for (j = 0; j < action.data.cockroachHistory[i].length; j++) if (-1 !== action.data.cockroachHistory[i][j].winType) {
                this.cockroachPig.children[j + 6 * i].getComponent("cc.Sprite").spriteFrame = this.cockroachPig.getComponent("TDTableImagesHolder").frames[action.data.cockroachHistory[i][j].winType];
                childComp = this.cockroachPig.children[j + 6 * i].getComponent("TDCellStats");
                childComp.cellRevealed = true;
                childComp.cellWinType = action.data.cockroachHistory[i][j];
              }
              this.prediction.getChildByName("game_number").getComponent("cc.Label").string = action.data.history.length + 1;
              if (action.data.prediction.table_big_eye_boy.length > 0) {
                this.prediction.getChildByName("p_b_y_b").getChildByName("d").getComponent("cc.Sprite").spriteFrame = this.prediction.getChildByName("p_b_y_b").getComponent("TDTableImagesHolder").frames[action.data.prediction.table_big_eye_boy[0].winType];
                this.prediction.getChildByName("p_b_y_b").getChildByName("t").getComponent("cc.Sprite").spriteFrame = this.prediction.getChildByName("p_b_y_b").getComponent("TDTableImagesHolder").frames[action.data.prediction.table_big_eye_boy[1].winType];
              }
              if (action.data.prediction.table_small_road.length > 0) {
                this.prediction.getChildByName("p_s_r").getChildByName("d").getComponent("cc.Sprite").spriteFrame = this.prediction.getChildByName("p_s_r").getComponent("TDTableImagesHolder").frames[action.data.prediction.table_small_road[0].winType];
                this.prediction.getChildByName("p_s_r").getChildByName("t").getComponent("cc.Sprite").spriteFrame = this.prediction.getChildByName("p_s_r").getComponent("TDTableImagesHolder").frames[action.data.prediction.table_small_road[1].winType];
              }
              if (action.data.prediction.table_cockroach.length > 0) {
                this.prediction.getChildByName("p_c_p").getChildByName("d").getComponent("cc.Sprite").spriteFrame = this.prediction.getChildByName("p_c_p").getComponent("TDTableImagesHolder").frames[action.data.prediction.table_cockroach[0].winType];
                this.prediction.getChildByName("p_c_p").getChildByName("t").getComponent("cc.Sprite").spriteFrame = this.prediction.getChildByName("p_c_p").getComponent("TDTableImagesHolder").frames[action.data.prediction.table_cockroach[1].winType];
              }
              break;

             case TDPlayersActions_1.TDActionType.CLEAR_DATA:
              this.prediction.getChildByName("game_number").getComponent("cc.Label").string = 1;
              this._prepareStatData(this.betPlate, false);
              this._prepareStatData(this.bigRoad, false);
              this._prepareStatData(this.bigEyeBoy, false);
              this._prepareStatData(this.smallRoad, false);
              this._prepareStatData(this.cockroachPig, false);
            }
            return [ 2, true ];
          });
        });
      };
      __decorate([ property(cc.Prefab) ], StatisticClass.prototype, "cellInstance", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "betPlate", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "bigRoad", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "bigEyeBoy", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "smallRoad", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "cockroachPig", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "prediction", void 0);
      __decorate([ property(cc.Node) ], StatisticClass.prototype, "historyPanel", void 0);
      StatisticClass = __decorate([ ccclass ], StatisticClass);
      return StatisticClass;
    }(TDViewAdapterBase_1.TDViewAdapterBase);
    exports.default = StatisticClass;
    var logger = Logger_1.default.getLogger("TDStatisticControl");
    cc._RF.pop();
  }, {
    "../../../common/core/Logger": "Logger",
    "./TDStats": "TDStats",
    "./server/TDConfig": "TDConfig",
    "./server/TDPlayersActions": "TDPlayersActions",
    "./server/TDViewAdapterBase": "TDViewAdapterBase"
  } ],
  TDStats: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8d98NSpPxG0JCj8AXRwwUF", "TDStats");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.lineHeight = 6;
    exports.bigPlateWidth = 10;
    exports.smallPlatesWidth = 60;
    exports.betArray = [];
    exports.bigRoadArray = [];
    exports.bigEyeBoyArray = [];
    exports.smallRoadArray = [];
    exports.cockroachArray = [];
    var TableStates = function() {
      function TableStates() {}
      TableStates.preCleanTables = false;
      TableStates.cleanTables = false;
      return TableStates;
    }();
    exports.TableStates = TableStates;
    var PlData = function() {
      function PlData() {}
      PlData.ownPlace = 0;
      PlData.balance = 0;
      return PlData;
    }();
    exports.PlData = PlData;
    exports.firstPosArr = [ [ 20, 13, 65, 26 ], [ 17, 10, 49, 20 ], [ 7, 5, 26, 10 ] ];
    cc._RF.pop();
  }, {} ],
  TDTableImagesHolder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7162cVCe3xOioeuuxVLjbnQ", "TDTableImagesHolder");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TableImagesHolder = function(_super) {
      __extends(TableImagesHolder, _super);
      function TableImagesHolder() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.frames = [];
        return _this;
      }
      TableImagesHolder.prototype.start = function() {};
      __decorate([ property(cc.SpriteFrame) ], TableImagesHolder.prototype, "frames", void 0);
      TableImagesHolder = __decorate([ ccclass ], TableImagesHolder);
      return TableImagesHolder;
    }(cc.Component);
    exports.default = TableImagesHolder;
    cc._RF.pop();
  }, {} ],
  TDViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02045guDeFKnpIj7Oczrv1B", "TDViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TDViewAdapterBase = function(_super) {
      __extends(TDViewAdapterBase, _super);
      function TDViewAdapterBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TDViewAdapterBase.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2 ];
          });
        });
      };
      TDViewAdapterBase.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2, true ];
          });
        });
      };
      TDViewAdapterBase.prototype.registerActionDispatcher = function(handler) {
        this.actionDispatcher = handler;
      };
      TDViewAdapterBase = __decorate([ ccclass ], TDViewAdapterBase);
      return TDViewAdapterBase;
    }(cc.Component);
    exports.TDViewAdapterBase = TDViewAdapterBase;
    cc._RF.pop();
  }, {} ],
  THAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "55fed0cyQpMkoxHJOp6PueL", "THAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THActionType;
    (function(THActionType) {
      THActionType[THActionType["PREPARE_FOR_ROUND"] = 0] = "PREPARE_FOR_ROUND";
      THActionType[THActionType["TABLE_CONFIG_UPDATE"] = 1] = "TABLE_CONFIG_UPDATE";
      THActionType[THActionType["TABLE_STATUS"] = 2] = "TABLE_STATUS";
      THActionType[THActionType["REGISTER_PLACE"] = 3] = "REGISTER_PLACE";
      THActionType[THActionType["DROP_PLACE"] = 4] = "DROP_PLACE";
      THActionType[THActionType["ROUND_COMPLETE"] = 5] = "ROUND_COMPLETE";
      THActionType[THActionType["COLLECT_ANTE"] = 6] = "COLLECT_ANTE";
      THActionType[THActionType["COLLECT_BLINDS"] = 7] = "COLLECT_BLINDS";
      THActionType[THActionType["DEAL_PLAYER_CARDS"] = 8] = "DEAL_PLAYER_CARDS";
      THActionType[THActionType["DEAL_TABLE_CARDS"] = 9] = "DEAL_TABLE_CARDS";
      THActionType[THActionType["WAITING_BET"] = 10] = "WAITING_BET";
      THActionType[THActionType["MAKE_BET"] = 11] = "MAKE_BET";
      THActionType[THActionType["FOLD"] = 12] = "FOLD";
      THActionType[THActionType["CHECK"] = 13] = "CHECK";
      THActionType[THActionType["GAME_OVER"] = 14] = "GAME_OVER";
      THActionType[THActionType["SIT_DOWN"] = 15] = "SIT_DOWN";
      THActionType[THActionType["STAND_UP"] = 16] = "STAND_UP";
    })(THActionType = exports.THActionType || (exports.THActionType = {}));
    cc._RF.pop();
  }, {} ],
  THAltSetting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79a00kEiPxI0L/hqaNXN4h2", "THAltSetting");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THAltSetting = function(_super) {
      __extends(THAltSetting, _super);
      function THAltSetting() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._config = null;
        return _this;
      }
      THAltSetting.prototype.initWithConfig = function(config, texts, closeCallback) {
        this._config = config;
        var parent = this.node;
        var layoutMain = this.draw(parent, texts);
        var buttonNode = this.drawCloseButton(parent, this._config.closeRadiusButton, closeCallback);
        this.drawBack(parent, layoutMain.node.width + this._config.mainBorderWidth, layoutMain.node.height + this._config.mainBorderHeight);
        parent.width = layoutMain.node.width;
        parent.height = layoutMain.node.height;
        parent.x += parent.width / 2;
        parent.y -= parent.height / 2;
        buttonNode.x = parent.width / 2;
        buttonNode.y = parent.height / 2;
      };
      THAltSetting.prototype.start = function() {};
      THAltSetting.prototype.draw = function(parent, texts) {
        var _this = this;
        parent.addChild(this.createLayotVertical());
        var layoutMain = parent.getComponentInChildren(cc.Layout);
        texts.forEach(function(params) {
          var textNode = _this.createText(params.text);
          textNode.on(cc.Node.EventType.TOUCH_END, params.callback);
          layoutMain.node.addChild(textNode);
        });
        layoutMain.updateLayout();
        var mWidth = this.findMaxWidth(layoutMain.node, true).width;
        layoutMain.node.width = mWidth;
        return layoutMain;
      };
      THAltSetting.prototype.drawCloseButton = function(parent, radius, closeCallback) {
        var node = new cc.Node("Close");
        parent.addChild(node);
        var ctx = node.addComponent(cc.Graphics);
        ctx.clear();
        ctx.circle(0, 0, radius);
        ctx.fillColor = this._config.closeBackColor;
        ctx.fill();
        var vec = new cc.Vec2(radius - 5, 0);
        vec.rotateSelf(Math.PI / 180 * 45);
        for (var index = 0; index < 4; index++) {
          vec.rotateSelf(Math.PI / 180 * 90 * index);
          ctx.moveTo(0, 0);
          ctx.lineTo(vec.x, vec.y);
        }
        ctx.lineWidth = this._config.backLineWidth;
        ctx.strokeColor = this._config.closeLineColor;
        ctx.stroke();
        node.width = 2 * radius;
        node.height = 2 * radius;
        node.on(cc.Node.EventType.TOUCH_END, closeCallback);
        return node;
      };
      THAltSetting.prototype.drawBack = function(parent, width, height) {
        var ctx = parent.addComponent(cc.Graphics);
        ctx.clear();
        var x = -width / 2;
        var y = -height / 2;
        ctx.roundRect(x, y, width, height, this._config.backRound);
        ctx.fillColor = this._config.backColor;
        ctx.fill();
        ctx.roundRect(x, y, width, height, this._config.backRound);
        ctx.lineWidth = this._config.backLineWidth;
        ctx.strokeColor = this._config.backLineColor;
        ctx.stroke();
      };
      THAltSetting.prototype.createLayotVertical = function() {
        var node = new cc.Node("LayotVertical");
        node.addComponent(cc.Layout);
        var layout = node.getComponent(cc.Layout);
        layout.type = cc.Layout.Type.VERTICAL;
        layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
        layout.paddingTop = 0;
        layout.paddingBottom = 0;
        layout.spacingY = 10;
        layout.verticalDirection = cc.Layout.VerticalDirection.TOP_TO_BOTTOM;
        return node;
      };
      THAltSetting.prototype.createText = function(text) {
        var node = new cc.Node("text_" + text);
        var textNode = new cc.Node("textNode_text_" + text);
        var backNode = new cc.Node("backNode_text_" + text);
        node.addChild(backNode);
        node.addChild(textNode);
        var label = textNode.addComponent(cc.Label);
        label.string = text;
        var updateRenderData = label["_updateRenderData"].bind(label);
        var updateAssembler = label["_updateAssembler"];
        updateRenderData && null != updateAssembler && void 0 !== updateAssembler && updateRenderData(true);
        var width = label.node.width + this._config.itemBorderWidth;
        var height = label.node.height + this._config.itemBorderHeight;
        var x = -width / 2;
        var y = -height / 2;
        var round = this._config.itemBackRound;
        var ctx = backNode.addComponent(cc.Graphics);
        ctx.clear();
        ctx.roundRect(x, y, width, height, round);
        ctx.fillColor = this._config.itemBackColor;
        ctx.fill();
        node.width = width;
        node.height = height;
        return node;
      };
      THAltSetting.prototype.findMaxWidth = function(node, ignoreParent) {
        var _this = this;
        void 0 === ignoreParent && (ignoreParent = false);
        var width = ignoreParent ? 0 : node.width;
        var height = ignoreParent ? 0 : node.height;
        node.childrenCount > 0 && node.children.forEach(function(nodeChild) {
          var childrenSize = _this.findMaxWidth(nodeChild);
          width = Math.max(childrenSize.width, width);
          height = Math.max(childrenSize.height, height);
        });
        return new cc.Size(width, width);
      };
      THAltSetting = __decorate([ ccclass ], THAltSetting);
      return THAltSetting;
    }(cc.Component);
    exports.default = THAltSetting;
    cc._RF.pop();
  }, {} ],
  THBetItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79497kfkQhF5Y6+N5zrMUhn", "THBetItem");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SelectTableSceneBase_1 = require("../../../../main/Script/scene/base/SelectTableSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THBetItem = function(_super) {
      __extends(THBetItem, _super);
      function THBetItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.iconNode = null;
        _this.textLabel = null;
        _this.button = null;
        _this.buttonFrame = [];
        _this.buttonPressFrame = [];
        return _this;
      }
      THBetItem.prototype.setup = function(config) {
        _super.prototype.setup.call(this, config);
        this.setupText(config.ballance.limits.minToJoin.toString());
      };
      THBetItem.prototype.setupIcon = function(index) {
        index = Math.max(index, 0);
        var select = index % this.buttonFrame.length;
        this.button.normalSprite = this.buttonFrame[select];
        this.button.hoverSprite = this.buttonFrame[select];
        select = index % this.buttonPressFrame.length;
        this.button.pressedSprite = this.buttonPressFrame[select];
        this.button.node.getComponent(cc.Sprite).spriteFrame = this.button.normalSprite;
        this.button.node.width = this.buttonFrame[select].getRect().width;
        this.button.node.height = this.buttonFrame[select].getRect().height;
      };
      THBetItem.prototype.setupText = function(value) {
        this.textLabel.string = value;
      };
      THBetItem.prototype.updateItem = function() {
        this.node.getComponent(cc.Button).enabled = !this.selected;
      };
      THBetItem.prototype.onButtonClick = function() {
        this._callBack && this._callBack.call(this._target, this.index);
      };
      THBetItem.prototype.onSelected = function(value, target) {
        this._callBack = value;
        this._target = target;
      };
      __decorate([ property(cc.Node) ], THBetItem.prototype, "iconNode", void 0);
      __decorate([ property(cc.Label) ], THBetItem.prototype, "textLabel", void 0);
      __decorate([ property(cc.Button) ], THBetItem.prototype, "button", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], THBetItem.prototype, "buttonFrame", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], THBetItem.prototype, "buttonPressFrame", void 0);
      THBetItem = __decorate([ ccclass ], THBetItem);
      return THBetItem;
    }(SelectTableSceneBase_1.BetItem);
    exports.THBetItem = THBetItem;
    cc._RF.pop();
  }, {
    "../../../../main/Script/scene/base/SelectTableSceneBase": "SelectTableSceneBase"
  } ],
  THBetTables: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5331ApbdNIQa0/cQj1Zj1o", "THBetTables");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SelectTableSceneBase_1 = require("../../../../main/Script/scene/base/SelectTableSceneBase");
    var THBetItem_1 = require("./THBetItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THBetTables = function(_super) {
      __extends(THBetTables, _super);
      function THBetTables() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemsPrefab = null;
        _this.backNode = null;
        return _this;
      }
      THBetTables.prototype.drawItems = function(gameConfig) {
        var config = gameConfig.tables;
        var verticalNode = this.createLayotVertical();
        this.backNode.addChild(verticalNode);
        var maxLength = config.length;
        if (null != this.itemsPrefab) {
          for (var a = 0; a < maxLength; a += 2) {
            var node = this.createLayotHorizontal();
            verticalNode.addChild(node);
            var max = Math.min(a + 2, maxLength);
            for (var i = a; i < max; i++) {
              var betViewNode = cc.instantiate(this.itemsPrefab);
              node.addChild(betViewNode);
              node.height = betViewNode.height;
              var betView = betViewNode.getComponent(THBetItem_1.THBetItem);
              betView.setupIcon(i);
              betView.onSelected(this.onChooseItem, this);
              this.addItem(betView);
            }
          }
          this.updateButtons();
        }
      };
      THBetTables.prototype.componentReceivedProps = function(oldProps) {
        this.updateButtons();
      };
      THBetTables.prototype.updateButtons = function() {
        var _this = this;
        this._items.length > 0 && this._items.forEach(function(item) {
          var result = item.config.ballance.limits.minToJoin < _this.props.playerBalance;
          item.button.enabled = result;
          item.button.interactable = result;
          item.button.node.getComponent(cc.Sprite).spriteFrame = result ? item.button.normalSprite : item.button.disabledSprite;
        });
      };
      THBetTables.prototype.createLayotHorizontal = function() {
        var node = new cc.Node();
        node.addComponent(cc.Layout);
        var layout = node.getComponent(cc.Layout);
        layout.type = cc.Layout.Type.HORIZONTAL;
        layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
        layout.paddingLeft = -9;
        layout.paddingRight = 0;
        layout.spacingX = 15;
        layout.horizontalDirection = cc.Layout.HorizontalDirection.LEFT_TO_RIGHT;
        return node;
      };
      THBetTables.prototype.createLayotVertical = function() {
        var node = new cc.Node();
        node.addComponent(cc.Layout);
        var layout = node.getComponent(cc.Layout);
        layout.type = cc.Layout.Type.VERTICAL;
        layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
        layout.paddingTop = 0;
        layout.paddingBottom = 0;
        layout.spacingY = 0;
        layout.verticalDirection = cc.Layout.VerticalDirection.TOP_TO_BOTTOM;
        return node;
      };
      __decorate([ property(cc.Prefab) ], THBetTables.prototype, "itemsPrefab", void 0);
      __decorate([ property(cc.Node) ], THBetTables.prototype, "backNode", void 0);
      THBetTables = __decorate([ ccclass ], THBetTables);
      return THBetTables;
    }(SelectTableSceneBase_1.default);
    exports.default = THBetTables;
    cc._RF.pop();
  }, {
    "../../../../main/Script/scene/base/SelectTableSceneBase": "SelectTableSceneBase",
    "./THBetItem": "THBetItem"
  } ],
  THButtonsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75f5duZ1VlD0q3/z2lPDnuW", "THButtonsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TextHelper_1 = require("../../../../common/helpers/TextHelper");
    var THButtonsController = function() {
      function THButtonsController() {
        this._confirm = false;
      }
      THButtonsController.prototype.init = function(commonData, buttons) {
        this._buttons = buttons;
        this._commonData = commonData;
      };
      THButtonsController.prototype.destroy = function() {
        this.resetCallbacks();
      };
      THButtonsController.prototype.hide = function() {
        this._confirm = false;
        this.resetCallbacks();
        this._buttons.reset();
        this.update({
          visible: false
        });
      };
      THButtonsController.prototype.activate = function(step, highestBetOrigin, minBet, endCallback) {
        var _this = this;
        this._confirm = false;
        var pd = this._commonData.playerDataController;
        var myBet = pd.me.totalRoundBet;
        var myBalance = pd.moneyByPlayerIndex(pd.myPlayerIndex()) + myBet;
        var highestBet = Math.min(myBalance, highestBetOrigin);
        var nextBet = highestBet;
        var allIn = nextBet >= myBalance;
        var viewBet = 0;
        var nextRaiseBet = highestBet;
        var allInRaise = false;
        nextRaiseBet = highestBet <= 0 ? minBet : Math.max(minBet, highestBet) + step;
        var minSlider = nextRaiseBet;
        var maxSlider = myBalance;
        viewBet = allIn ? myBalance - myBet : nextBet > 0 ? nextBet - myBet : 0;
        this.update({
          callVisible: true,
          foldVisible: true,
          raiseVisible: myBalance >= nextBet && !allIn,
          visible: true,
          sliderVisible: false,
          bet: viewBet,
          allIn: allIn,
          raiseText: 0 === viewBet ? "bet" : "raise"
        });
        this._buttons.slider.progress = 0;
        this.setCallbacks(function() {
          _this.hide();
          endCallback(-1);
        }, function() {
          _this.hide();
          endCallback(nextBet);
        }, function() {
          if (_this._confirm) {
            _this.hide();
            endCallback(nextRaiseBet);
            return;
          }
          _this.update({
            betRaiseText: allInRaise ? _this.getText("all_in") : TextHelper_1.default.coinsShortcut(nextRaiseBet, 1),
            sliderVisible: true,
            raiseText: "confirm"
          });
          _this._confirm = true;
        }, function() {}, function(progress) {
          var result = 0;
          if (progress < .95) {
            allInRaise = false;
            nextRaiseBet = _this.calc(progress, maxSlider, minSlider, step);
            result = _this.calc2(nextRaiseBet, maxSlider, minSlider);
          } else {
            allInRaise = true;
            nextRaiseBet = maxSlider;
            result = 1;
          }
          _this.update({
            betRaiseText: allInRaise ? _this.getText("all_in") : TextHelper_1.default.coinsShortcut(nextRaiseBet, 1)
          });
          return result;
        });
      };
      THButtonsController.prototype.setCallbacks = function(fold, call, raise, sliderOk, progress) {
        this._buttons.foldCallback = fold;
        this._buttons.callCallback = call;
        this._buttons.raiseCallback = raise;
        this._buttons.sliderOkClick = sliderOk;
        this._buttons.progressCallback = progress;
      };
      THButtonsController.prototype.resetCallbacks = function() {
        this._buttons.foldCallback = null;
        this._buttons.callCallback = null;
        this._buttons.raiseCallback = null;
        this._buttons.sliderOkClick = null;
        this._buttons.progressCallback = null;
      };
      THButtonsController.prototype.update = function(data) {
        return __awaiter(this, void 0, Promise, function() {
          var callText, callUpText, allIn;
          return __generator(this, function(_a) {
            void 0 !== data.visible && null !== data.visible && (this._buttons.node.active = data.visible);
            if (void 0 !== data.foldVisible && null !== data.foldVisible) {
              this._buttons.foldUpText.string = this.getText("fold");
              this._buttons.fold.node.active = data.foldVisible;
            }
            void 0 !== data.callVisible && null !== data.callVisible && (this._buttons.call.node.active = data.callVisible);
            void 0 !== data.raiseText && null !== data.raiseText && (this._buttons.raiseText.string = this.getText(data.raiseText));
            void 0 !== data.raiseVisible && null !== data.raiseVisible && (this._buttons.raise.node.active = data.raiseVisible);
            if (void 0 !== data.bet && null !== data.bet) {
              this._buttons.callText.string = "";
              this._buttons.callUpText.string = "";
              callText = "";
              callUpText = "";
              allIn = void 0 !== data.allIn && null !== data.allIn && data.allIn;
              if (data.bet > 0) {
                callUpText = allIn ? this.getText("all_in") : this.getText("call");
                callText = TextHelper_1.default.coinsShortcut(data.bet, 1);
              } else callText = allIn ? this.getText("all_in") : this.getText("check");
              this._buttons.callText.string = callText;
              this._buttons.callUpText.string = callUpText;
            }
            void 0 !== data.betRaiseText && null !== data.betRaiseText && (this._buttons.sliderText.string = data.betRaiseText);
            void 0 !== data.sliderVisible && null !== data.sliderVisible && this._buttons.showSliderForce(data.sliderVisible);
            if (void 0 !== data.sliderAnimate && null !== data.sliderAnimate) return [ 2, this._buttons.showSlider(data.sliderAnimate) ];
            return [ 2 ];
          });
        });
      };
      THButtonsController.prototype.getText = function(key) {
        return this._commonData.texts.getText(key);
      };
      THButtonsController.prototype.calc = function(progress, maxSlider, minSlider, step) {
        var diff = maxSlider - minSlider;
        var betOrigin = Math.floor(diff * progress + minSlider);
        var betWithStep = Math.floor(betOrigin / step) * step;
        return betWithStep;
      };
      THButtonsController.prototype.calc2 = function(betWithStep, maxSlider, minSlider) {
        return (betWithStep - minSlider) / (maxSlider - minSlider);
      };
      return THButtonsController;
    }();
    exports.default = THButtonsController;
    cc._RF.pop();
  }, {
    "../../../../common/helpers/TextHelper": "TextHelper"
  } ],
  THButtons: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84ef9XFqr1Ds5dtuAJNUIiI", "THButtons");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THButtons = function(_super) {
      __extends(THButtons, _super);
      function THButtons() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.fold = null;
        _this.call = null;
        _this.raise = null;
        _this.callText = null;
        _this.callUpText = null;
        _this.foldUpText = null;
        _this.raiseText = null;
        _this.sliderOk = null;
        _this.slider = null;
        _this.sliderText = null;
        _this.sliderParent = null;
        _this._sliderPostion = null;
        _this._foldCallback = null;
        _this._callCallback = null;
        _this._raiseCallback = null;
        _this._sliderOkCallback = null;
        _this._progressCallback = null;
        return _this;
      }
      THButtons.prototype.onFold = function() {
        console.log("onFold");
        null !== this._foldCallback && this._foldCallback();
      };
      THButtons.prototype.onCall = function() {
        console.log("onCall");
        null !== this._callCallback && this._callCallback();
      };
      THButtons.prototype.onRaise = function() {
        console.log("onRaise");
        null !== this._raiseCallback && this._raiseCallback();
      };
      THButtons.prototype.onSlide = function(slider) {
        null !== this._progressCallback && (slider.progress = this._progressCallback(slider.progress));
      };
      THButtons.prototype.onSlideOk = function() {
        console.log("onSlideOk");
        null !== this._sliderOkCallback && this._sliderOkCallback();
      };
      Object.defineProperty(THButtons.prototype, "foldCallback", {
        set: function(callback) {
          this._foldCallback = callback;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THButtons.prototype, "callCallback", {
        set: function(callback) {
          this._callCallback = callback;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THButtons.prototype, "raiseCallback", {
        set: function(callback) {
          this._raiseCallback = callback;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THButtons.prototype, "sliderOkClick", {
        set: function(callback) {
          this._sliderOkCallback = callback;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THButtons.prototype, "progressCallback", {
        set: function(callback) {
          this._progressCallback = callback;
        },
        enumerable: true,
        configurable: true
      });
      THButtons.prototype.onLoad = function() {
        this._sliderPostion = new cc.Vec2(this.sliderParent.x, this.sliderParent.y);
      };
      THButtons.prototype.start = function() {};
      THButtons.prototype.showSliderForce = function(show) {
        this.sliderParent.active = show;
        if (show) this.sliderParent.setPosition(this._sliderPostion); else {
          this.sliderParent.setPosition(this._sliderPostion);
          this.sliderParent.x += this.sliderParent.width;
        }
      };
      THButtons.prototype.showSlider = function(show) {
        var _this = this;
        this.sliderParent.active = true;
        var to = new cc.Vec2();
        if (show) {
          this.sliderParent.setPosition(this._sliderPostion);
          this.sliderParent.x += this.sliderParent.width;
          to = this._sliderPostion;
        } else {
          this.sliderParent.setPosition(this._sliderPostion);
          to = this._sliderPostion.clone();
          to.x += this.sliderParent.width;
        }
        this.sliderParent.stopAllActions();
        return new Promise(function(resolve) {
          var speed = .25;
          _this.sliderParent.runAction(cc.sequence(cc.moveTo(speed, to), cc.callFunc(function() {
            _this.sliderParent.active = show;
            resolve();
          }, _this)));
        });
      };
      THButtons.prototype.reset = function() {
        this.sliderParent.stopAllActions();
      };
      __decorate([ property(cc.Button) ], THButtons.prototype, "fold", void 0);
      __decorate([ property(cc.Button) ], THButtons.prototype, "call", void 0);
      __decorate([ property(cc.Button) ], THButtons.prototype, "raise", void 0);
      __decorate([ property(cc.Label) ], THButtons.prototype, "callText", void 0);
      __decorate([ property(cc.Label) ], THButtons.prototype, "callUpText", void 0);
      __decorate([ property(cc.Label) ], THButtons.prototype, "foldUpText", void 0);
      __decorate([ property(cc.Label) ], THButtons.prototype, "raiseText", void 0);
      __decorate([ property(cc.Button) ], THButtons.prototype, "sliderOk", void 0);
      __decorate([ property(cc.Slider) ], THButtons.prototype, "slider", void 0);
      __decorate([ property(cc.Label) ], THButtons.prototype, "sliderText", void 0);
      __decorate([ property(cc.Node) ], THButtons.prototype, "sliderParent", void 0);
      THButtons = __decorate([ ccclass ], THButtons);
      return THButtons;
    }(cc.Component);
    exports.default = THButtons;
    cc._RF.pop();
  }, {} ],
  THCardsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a3552ELRdLQp29raknxwwp", "THCardsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THCards_1 = require("../ui/THCards");
    var Logger_1 = require("../../../../common/core/Logger");
    var logger = Logger_1.default.getLogger("THCardsController");
    var THCardsController = function() {
      function THCardsController() {
        this._viewParams = [];
        this._cardContainers = [];
        this._maxCard = 2;
      }
      THCardsController.prototype.init = function(commonData, viewParams, parent, prefab) {
        this._viewParams = viewParams;
        this._parent = parent;
        this._prefab = prefab;
        this._commonData = commonData;
        for (var index = 0; index < this._commonData.maxPlayer; index++) {
          var thCards = this.getOrCreate(index);
          this._cardContainers[index] = thCards;
          this.dropUser(index);
        }
      };
      THCardsController.prototype.update = function(data) {
        logger.log("update: " + JSON.stringify(data));
        this.forEachCardContainers(function(thCards, index) {
          if (void 0 === data[index] || null === data[index]) return;
          thCards.updateCardsSync(data[index]);
        }, data.length);
      };
      THCardsController.prototype.destroy = function() {
        this._viewParams.length = 0;
        this._cardContainers.length = 0;
      };
      THCardsController.prototype.reset = function() {
        this.updateForAllCard({
          reset: true
        });
      };
      THCardsController.prototype.dropUser = function(playerIndex) {
        var cardContainer = this.getByIndex(playerIndex);
        cardContainer && void 0 !== cardContainer.node && null !== cardContainer.node && cardContainer.updateCardsSync(this.updateForAllCardContainer({
          reset: true
        }));
      };
      THCardsController.prototype.updateForAllCard = function(data) {
        var _this = this;
        var allCards = [];
        this.forEachCardContainers(function() {
          allCards.push(_this.updateForAllCardContainer(data));
        });
        this.update(allCards);
      };
      THCardsController.prototype.updateForAllCardContainer = function(data) {
        var playerCards = [];
        for (var index = 0; index < this._maxCard; index++) playerCards.push(__assign({}, data));
        return playerCards;
      };
      THCardsController.prototype.getOrCreate = function(index) {
        if (void 0 === this._cardContainers[index] || null === this._cardContainers[index]) {
          var thCards = cc.instantiate(this._prefab).getComponent(THCards_1.default);
          thCards.maxCard = this._maxCard;
          this._cardContainers[index] = thCards;
          this._parent.addChild(thCards.node);
          if (this._viewParams.length > index && this._viewParams[index]) {
            var viewParams = this._viewParams[index];
            thCards.node.setPosition(viewParams.position);
            viewParams.size && thCards.updateScale(viewParams.size);
          }
        }
        return this._cardContainers[index];
      };
      THCardsController.prototype.getByIndex = function(index) {
        if (void 0 === this._cardContainers[index] || null === this._cardContainers[index]) return null;
        return this._cardContainers[index];
      };
      THCardsController.prototype.forEachCardContainers = function(callback, maxLength, skipNull) {
        void 0 === maxLength && (maxLength = -1);
        void 0 === skipNull && (skipNull = true);
        var length = maxLength > 0 ? Math.min(this._cardContainers.length, maxLength) : this._cardContainers.length;
        for (var index = 0; index < length; index++) {
          var thCards = this.getByIndex(index);
          !thCards && skipNull || callback(thCards, index);
        }
      };
      return THCardsController;
    }();
    exports.default = THCardsController;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "../ui/THCards": "THCards"
  } ],
  THCards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eb280mFtHdOfbkDx/y61ndd", "THCards");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THCard_1 = require("./THCard");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WaitType;
    (function(WaitType) {
      WaitType[WaitType["ASYNC"] = 0] = "ASYNC";
      WaitType[WaitType["SYNC"] = 1] = "SYNC";
      WaitType[WaitType["TOGETHER"] = 2] = "TOGETHER";
    })(WaitType || (WaitType = {}));
    var THCards = function(_super) {
      __extends(THCards, _super);
      function THCards() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.card = null;
        _this.place = null;
        _this.text = null;
        _this._maxCard = 0;
        _this._startSize = null;
        return _this;
      }
      THCards.prototype.start = function() {
        this.text.string = "";
      };
      THCards.prototype.updateCombinationName = function(text) {
        this.text.string = text;
      };
      THCards.prototype.updateCardsSync = function(cards) {
        this.processCards(cards, WaitType.SYNC);
      };
      THCards.prototype.updateCardsAsync = function(cards) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2, this.processCards(cards, WaitType.ASYNC) ];
          });
        });
      };
      THCards.prototype.updateCardsAsyncTogether = function(cards) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2, this.processCards(cards, WaitType.TOGETHER) ];
          });
        });
      };
      THCards.prototype.updateScale = function(size) {
        this.node.scale = Math.min(size.width / this.node.width, size.height / this.node.height);
      };
      THCards.prototype.updateSize = function(size) {
        this._startSize = size;
        this.resetSize();
      };
      THCards.prototype.resetSize = function() {
        if (null !== this._startSize) {
          this.place.width = this.node.width = this._startSize.width;
          this.place.height = this.node.height = this._startSize.height;
        }
        this.node.x = 0;
        this.node.y = 0;
      };
      THCards.prototype.resetCards = function() {
        this.resetSize();
        this.updateForAllCards({
          outline: true,
          reset: true
        });
        this.updateCombinationName("");
      };
      THCards.prototype.updateForAllCards = function(data) {
        var cards = [];
        for (var index = 0; index < this._maxCard; index++) cards.push(__assign({}, data));
        this.updateCardsSync(cards);
      };
      THCards.prototype.processCards = function(cards, wait) {
        return __awaiter(this, void 0, Promise, function() {
          var layout, length, _loop_1, this_1, index, state_1;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              if (void 0 === cards || null === cards || 0 === cards.length) return [ 2 ];
              layout = this.place.getComponent(cc.Layout);
              length = Math.min(this._maxCard, cards.length);
              _loop_1 = function(index) {
                var data, thCard, execute;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                   case 0:
                    data = cards[index];
                    if (void 0 === data || null === data) return [ 2, "continue" ];
                    thCard = this_1.getOrCreate(layout.node, index);
                    void 0 !== data.reset && null !== data.reset && data.reset && thCard.resetCard();
                    this_1.updateSyncParams(data, thCard);
                    execute = null;
                    void 0 !== data.open && null !== data.open ? execute = function() {
                      return thCard.open(data.open);
                    } : void 0 !== data.close && null !== data.close && (execute = function() {
                      return thCard.close();
                    });
                    if (!(null !== execute)) return [ 3, 3 ];
                    if (!(wait === WaitType.ASYNC)) return [ 3, 2 ];
                    return [ 4, execute() ];

                   case 1:
                    _a.sent();
                    return [ 3, 3 ];

                   case 2:
                    if (wait === WaitType.TOGETHER && length - 1 === index) return [ 2, {
                      value: execute()
                    } ];
                    execute();
                    _a.label = 3;

                   case 3:
                    return [ 2 ];
                  }
                });
              };
              this_1 = this;
              index = 0;
              _a.label = 1;

             case 1:
              if (!(index < length)) return [ 3, 4 ];
              return [ 5, _loop_1(index) ];

             case 2:
              state_1 = _a.sent();
              if ("object" === typeof state_1) return [ 2, state_1.value ];
              _a.label = 3;

             case 3:
              index++;
              return [ 3, 1 ];

             case 4:
              return [ 2 ];
            }
          });
        });
      };
      THCards.prototype.updateSyncParams = function(data, thCard) {
        void 0 !== data.scale && null !== data.scale && (thCard.scaleHighlight = data.scale);
        void 0 !== data.outlineHighlight && null !== data.outlineHighlight && (thCard.outlineHighlight = data.outlineHighlight);
        void 0 !== data.blackout && null !== data.blackout && (thCard.blackout = data.blackout);
        void 0 !== data.outline && null !== data.outline && (thCard.outline = data.outline);
        void 0 !== data.shadow && null !== data.shadow && (thCard.shadow = data.shadow);
      };
      THCards.prototype.getOrCreate = function(node, index) {
        node.childrenCount <= index && node.addChild(cc.instantiate(this.card));
        return node.children[index].getComponent(THCard_1.default);
      };
      Object.defineProperty(THCards.prototype, "maxCard", {
        set: function(value) {
          this._maxCard = value;
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Prefab) ], THCards.prototype, "card", void 0);
      __decorate([ property(cc.Node) ], THCards.prototype, "place", void 0);
      __decorate([ property(cc.Label) ], THCards.prototype, "text", void 0);
      THCards = __decorate([ ccclass ], THCards);
      return THCards;
    }(cc.Component);
    exports.default = THCards;
    cc._RF.pop();
  }, {
    "./THCard": "THCard"
  } ],
  THCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57666hO6URN37zwHDw6iDVz", "THCard");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../common/core/cards/Card");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THCard = function(_super) {
      __extends(THCard, _super);
      function THCard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.shadowNode = null;
        _this.place = null;
        _this.outlineNode = null;
        _this.outlineHighlightNode = null;
        _this.outlineHighlightColor = null;
        _this.blackoutNode = null;
        _this.allNode = null;
        _this.back = null;
        _this.cardAtlas = null;
        _this.spades = "";
        _this.clubs = "";
        _this.diamonds = "";
        _this.hearts = "";
        _this.j = "";
        _this.q = "";
        _this.k = "";
        _this.a = "";
        _this._originalRect = new cc.Size(0, 0);
        _this._outlineHighlightAdd = 7;
        return _this;
      }
      THCard.prototype.onLoad = function() {
        this._originalRect.width = this.node.width = this.back.getRect().width;
        this._originalRect.height = this.node.height = this.back.getRect().height;
      };
      THCard.prototype.close = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2, this.changeCard(this.back) ];
          });
        });
      };
      THCard.prototype.open = function(card) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2, this.changeCard(this.convertCardToSpriteFrame(card)) ];
          });
        });
      };
      THCard.prototype.resetCard = function() {
        this.allNode.stopAllActions();
        this.blackout = false;
        this.outline = false;
        this.shadow = false;
        this.outlineHighlight = false;
        this.scaleHighlight = 1;
        this.changeCard(null);
      };
      Object.defineProperty(THCard.prototype, "shadow", {
        set: function(value) {
          if (value) this.makeShadow(); else {
            var ctx = this.shadowNode.getComponent(cc.Graphics);
            ctx && ctx.clear();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THCard.prototype, "outline", {
        set: function(value) {
          if (value) this.makeOutline(); else {
            var ctx = this.outlineNode.getComponent(cc.Graphics);
            ctx && ctx.clear();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THCard.prototype, "blackout", {
        set: function(value) {
          if (value) this.makeBlackout(); else {
            var ctx = this.blackoutNode.getComponent(cc.Graphics);
            ctx && ctx.clear();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THCard.prototype, "scaleHighlight", {
        set: function(value) {
          this.place.node.scale = value;
          var add = value >= .999 && value <= 1.001 ? 0 : this._outlineHighlightAdd;
          this.node.width = this._originalRect.width * value + add;
          this.node.height = this._originalRect.height * value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THCard.prototype, "outlineHighlight", {
        set: function(value) {
          if (value) this.makeOutlineHighlight(); else {
            var ctx = this.outlineHighlightNode.getComponent(cc.Graphics);
            ctx && ctx.clear();
          }
        },
        enumerable: true,
        configurable: true
      });
      THCard.prototype.changeCard = function(spriteFrame) {
        var _this = this;
        this.allNode.stopAllActions();
        this.place.node.active = true;
        if (void 0 === spriteFrame || null === spriteFrame) {
          this.shadow = false;
          this.place.spriteFrame = null;
          return new Promise(function(resolve) {
            resolve();
          });
        }
        spriteFrame !== this.back && (this.place.spriteFrame = this.back);
        this.shadow = true;
        return new Promise(function(resolve) {
          var speed = .25;
          _this.allNode.runAction(cc.sequence(cc.scaleTo(speed, 0, 1), cc.callFunc(function() {
            _this.place.spriteFrame = spriteFrame;
          }, _this), cc.scaleTo(speed, 1, 1), cc.callFunc(function() {
            resolve();
          }, _this)));
        });
      };
      THCard.prototype.makeShadow = function() {
        var add = 0;
        var width = this.node.width + add;
        var height = this.node.height + add;
        this.drawRect(this.shadowNode, width, height, .6, 9, false);
      };
      THCard.prototype.makeBlackout = function() {
        var width = this.node.width;
        var height = this.node.height;
        this.drawRect(this.blackoutNode, width, height, .8, 5, false);
      };
      THCard.prototype.makeOutlineHighlight = function() {
        var add = this._outlineHighlightAdd;
        var width = this.node.width + add;
        var height = this.node.height + add;
        this.drawRect(this.outlineHighlightNode, width, height, .8, 7, false, 5, this.outlineHighlightColor);
      };
      THCard.prototype.makeOutline = function() {
        var width = this.node.width;
        var height = this.node.height;
        this.place.node.active = false;
        this.drawRect(this.outlineNode, width, height, .8, 5, true);
      };
      THCard.prototype.drawRect = function(node, width, height, alpha, radius, stroke, lineWidth, color) {
        void 0 === lineWidth && (lineWidth = 3);
        void 0 === color && (color = null);
        node.width = width;
        node.height = height;
        var ctx = node.getComponent(cc.Graphics);
        if (!ctx) {
          node.addComponent(cc.Graphics);
          ctx = node.getComponent(cc.Graphics);
        }
        ctx.clear();
        ctx.roundRect(-width / 2, -height / 2, width, height, radius);
        void 0 !== color && null !== color || (color = new cc.Color(0, 0, 0, Math.floor(255 * alpha)));
        if (stroke) {
          ctx.lineWidth = lineWidth;
          ctx.strokeColor = color;
          ctx.stroke();
        } else {
          ctx.fillColor = color;
          ctx.fill();
        }
      };
      THCard.prototype.convertCardToSpriteFrame = function(card) {
        var key = "";
        Card_1.CardSuit.CLUBS === card.suit ? key += this.clubs : Card_1.CardSuit.SPADES === card.suit ? key += this.spades : Card_1.CardSuit.DIAMONDS === card.suit ? key += this.diamonds : Card_1.CardSuit.HEARTS === card.suit && (key += this.hearts);
        key += "_";
        card.level === Card_1.CardLevel.JACK ? key += this.j : card.level === Card_1.CardLevel.QUEEN ? key += this.q : card.level === Card_1.CardLevel.KING ? key += this.k : card.level === Card_1.CardLevel.ACE ? key += this.a : key += card.level;
        return this.cardAtlas.getSpriteFrame(key);
      };
      __decorate([ property(cc.Node) ], THCard.prototype, "shadowNode", void 0);
      __decorate([ property(cc.Sprite) ], THCard.prototype, "place", void 0);
      __decorate([ property(cc.Node) ], THCard.prototype, "outlineNode", void 0);
      __decorate([ property(cc.Node) ], THCard.prototype, "outlineHighlightNode", void 0);
      __decorate([ property(cc.Color) ], THCard.prototype, "outlineHighlightColor", void 0);
      __decorate([ property(cc.Node) ], THCard.prototype, "blackoutNode", void 0);
      __decorate([ property(cc.Node) ], THCard.prototype, "allNode", void 0);
      __decorate([ property(cc.SpriteFrame) ], THCard.prototype, "back", void 0);
      __decorate([ property(cc.SpriteAtlas) ], THCard.prototype, "cardAtlas", void 0);
      __decorate([ property ], THCard.prototype, "spades", void 0);
      __decorate([ property ], THCard.prototype, "clubs", void 0);
      __decorate([ property ], THCard.prototype, "diamonds", void 0);
      __decorate([ property ], THCard.prototype, "hearts", void 0);
      __decorate([ property ], THCard.prototype, "j", void 0);
      __decorate([ property ], THCard.prototype, "q", void 0);
      __decorate([ property ], THCard.prototype, "k", void 0);
      __decorate([ property ], THCard.prototype, "a", void 0);
      THCard = __decorate([ ccclass ], THCard);
      return THCard;
    }(cc.Component);
    exports.default = THCard;
    cc._RF.pop();
  }, {
    "../../../../common/core/cards/Card": "Card"
  } ],
  THChipsContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46945CWu2FI5LIhuzzCC6ca", "THChipsContainer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THChip_1 = require("./THChip");
    var Logger_1 = require("../../../../common/core/Logger");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var logger = Logger_1.default.getLogger("THChipsContainer");
    var THChipsContainer = function(_super) {
      __extends(THChipsContainer, _super);
      function THChipsContainer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chipPrefab = null;
        _this._factory = null;
        _this._chipRecycling = null;
        return _this;
      }
      THChipsContainer.prototype.start = function() {};
      THChipsContainer.prototype.updateWithData = function(dataOrigin) {
        var data = dataOrigin.filter(function(value) {
          return void 0 !== value && null !== value;
        });
        if (void 0 === this.chipPrefab || null === this.chipPrefab || 0 === data.length) return;
        var index = 0;
        for (;index < data.length; index++) {
          index >= this.node.children.length && this.node.addChild(this._factory().node);
          var chip = this.node.children[index].getComponent(THChip_1.default);
          chip.chip = data[index];
        }
        if (index < this.node.children.length - 1) for (var index2 = this.node.children.length - 1; index2 > index; index2--) this._chipRecycling(this.node.children[index].getComponent(THChip_1.default));
      };
      THChipsContainer.prototype.unuse = function() {
        this.reset();
        logger.log("unuse");
      };
      THChipsContainer.prototype.reuse = function() {
        logger.log("reuse");
      };
      THChipsContainer.prototype.fly = function(x, y, speed) {
        var _this = this;
        return new Promise(function(resolve) {
          _this.node.stopAllActions();
          _this.node.runAction(cc.sequence(cc.moveTo(speed, x, y), cc.callFunc(resolve, _this)));
        });
      };
      THChipsContainer.prototype.reset = function() {
        var _this = this;
        this.node.stopAllActions();
        var items = this.node.getComponentsInChildren(THChip_1.default);
        items.forEach(function(item) {
          _this._chipRecycling(item);
        });
      };
      Object.defineProperty(THChipsContainer.prototype, "chipFactory", {
        set: function(value) {
          this._factory = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THChipsContainer.prototype, "chipRecycling", {
        set: function(value) {
          this._chipRecycling = value;
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Prefab) ], THChipsContainer.prototype, "chipPrefab", void 0);
      THChipsContainer = __decorate([ ccclass ], THChipsContainer);
      return THChipsContainer;
    }(cc.Component);
    exports.default = THChipsContainer;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "./THChip": "THChip"
  } ],
  THChipsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d5b4asUwJKKKG8r6W1zPeN", "THChipsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THChipsContainer_1 = require("../ui/THChipsContainer");
    var THChip_1 = require("../ui/THChip");
    var Logger_1 = require("../../../../common/core/Logger");
    var logger = Logger_1.default.getLogger("THChipsController");
    var THChipsController = function() {
      function THChipsController() {
        this._viewParams = [];
        this._chipsContainers = [];
        this._chipContainerToDestroy = [];
        this._chipsContainerPool = new cc.NodePool(THChipsContainer_1.default);
        this._chipPool = new cc.NodePool(THChip_1.default);
      }
      THChipsController.prototype.init = function(commonData, viewParams, parent, prefab, bankAreaNode) {
        this._viewParams = viewParams;
        this._parent = parent;
        this._prefab = prefab;
        this._commonData = commonData;
        this._bankAreaNode = bankAreaNode;
        for (var index = 0; index < this._commonData.maxPlayer; index++) this._chipsContainers[index] = null;
      };
      THChipsController.prototype.updateAll = function() {
        var chipsData = [];
        for (var index = 0; index < this._commonData.maxPlayer; index++) {
          var playerData = this._commonData.playerDataController.getPlayerDataByPlayerIndex(index);
          null !== playerData && null !== playerData.playerInfo ? chipsData[index] = playerData.playerInfo.balance : this.dropUser(index);
        }
        this.setChipsByPlayer(chipsData);
      };
      THChipsController.prototype.setChipsByPlayer = function(data) {
        var length = Math.min(this._chipsContainers.length, data.length);
        for (var index = 0; index < length; index++) {
          if (void 0 === data[index] || null === data[index]) continue;
          var chipsContainer = this.getOrCreate(index);
          chipsContainer.updateWithData(this.convertValueToChipsIndex(data[index], this._commonData.tableConfig.maxPlayerChips));
        }
      };
      THChipsController.prototype.flyChipsByPlayer = function(data) {
        var result = [];
        var length = Math.min(this._chipsContainers.length, data.length, this._viewParams.length);
        for (var index = 0; index < length; index++) {
          if (void 0 === data[index] || null === data[index]) continue;
          var chipsContainer = this.chipsContainerFactory();
          chipsContainer.updateWithData(this.convertValueToChipsIndex(data[index], this._commonData.tableConfig.maxThrowChips));
          this._parent.addChild(chipsContainer.node);
          var viewParams = this._viewParams[index];
          chipsContainer.node.setPosition(viewParams.position);
          this._chipContainerToDestroy.push(chipsContainer);
          var speed = .5;
          var x = 1e4 * Math.random() % this._bankAreaNode.width / 2 - this._bankAreaNode.width / 2;
          var y = 1e4 * Math.random() % this._bankAreaNode.height / 2 - this._bankAreaNode.height / 2;
          x += this._bankAreaNode.x;
          y += this._bankAreaNode.y;
          result.push(chipsContainer.fly(x, y, speed));
        }
        return result;
      };
      THChipsController.prototype.flyChipsToPlayer = function(playerIndex, value) {
        var _this = this;
        if (playerIndex >= 0 && playerIndex < this._viewParams.length) {
          var chipsContainer_1 = this.chipsContainerFactory();
          chipsContainer_1.updateWithData(this.convertValueToChipsIndex(value, this._commonData.tableConfig.maxThrowChips));
          this._parent.addChild(chipsContainer_1.node);
          this.reset();
          var speed = .5;
          var viewParams = this._viewParams[playerIndex];
          chipsContainer_1.node.x = this._bankAreaNode.x;
          chipsContainer_1.node.y = this._bankAreaNode.y;
          var x = viewParams.position.x;
          var y = viewParams.position.y;
          var promise = chipsContainer_1.fly(x, y, speed);
          promise.then(function() {
            return _this.chipsContainerRecycling(chipsContainer_1);
          });
          return promise;
        }
        return null;
      };
      THChipsController.prototype.reset = function() {
        var _this = this;
        this._chipContainerToDestroy.forEach(function(chipContainer) {
          if (!chipContainer.isValid) return;
          _this.chipsContainerRecycling(chipContainer);
        });
        this._chipContainerToDestroy.length = 0;
      };
      THChipsController.prototype.destroy = function() {
        this.reset();
        this._viewParams.length = 0;
        this._chipsContainers.length = 0;
        this._chipPool.clear();
        this._chipsContainerPool.clear();
        this._chipContainerToDestroy.length = 0;
      };
      THChipsController.prototype.dropUser = function(playerIndex) {
        if (void 0 !== this._chipsContainers[playerIndex] || null !== this._chipsContainers[playerIndex]) {
          var chipsContainer = this._chipsContainers[playerIndex];
          void 0 !== chipsContainer && null !== chipsContainer && void 0 !== chipsContainer.node && null !== chipsContainer.node && this.chipsContainerRecycling(chipsContainer);
          this._chipsContainers[playerIndex] = null;
        }
      };
      THChipsController.prototype.getOrCreate = function(index) {
        if (null === this._chipsContainers[index]) {
          var chipsContainer = this.chipsContainerFactory();
          this._chipsContainers[index] = chipsContainer;
          this._parent.addChild(chipsContainer.node);
          if (this._viewParams.length > index && this._viewParams[index]) {
            var viewParams = this._viewParams[index];
            chipsContainer.node.setPosition(viewParams.position);
            viewParams.size && (chipsContainer.node.scale = Math.min(viewParams.size.width / chipsContainer.node.width, viewParams.size.height / chipsContainer.node.height));
          }
        }
        return this._chipsContainers[index];
      };
      THChipsController.prototype.convertValueToChipsIndex = function(value, maxChips) {
        var result = [];
        var nominations = this._commonData.tableConfig.bets;
        var lastIndex = nominations.length - 1;
        var max = maxChips * nominations[lastIndex];
        if (value >= max) {
          this.addTo(result, lastIndex, maxChips);
          return result;
        }
        var localBet = value;
        var currentNomination = 0;
        for (var index = lastIndex; index >= 0; index--) {
          currentNomination = nominations[index];
          if (localBet >= currentNomination) {
            var count = Math.min(Math.floor(localBet / currentNomination), maxChips - result.length);
            this.addTo(result, index, count);
            localBet -= count * currentNomination;
          }
          if (result.length >= maxChips || localBet < nominations[0]) break;
        }
        return result;
      };
      THChipsController.prototype.addTo = function(result, value, count) {
        for (var index = 0; index < count; index++) result.push(value);
      };
      THChipsController.prototype.chipsContainerFactory = function() {
        var _this = this;
        if (this._chipsContainerPool.size() > 0) {
          logger.log("container from pool. Size " + (this._chipsContainerPool.size() - 1));
          return this._chipsContainerPool.get().getComponent(THChipsContainer_1.default);
        }
        logger.log("container create");
        var chipsContainer = cc.instantiate(this._prefab).getComponent(THChipsContainer_1.default);
        chipsContainer.chipFactory = function() {
          if (_this._chipPool.size() > 0) {
            logger.log("chip from pool. Size " + (_this._chipPool.size() - 1));
            return _this._chipPool.get().getComponent(THChip_1.default);
          }
          logger.log("chip create");
          return cc.instantiate(chipsContainer.chipPrefab).getComponent(THChip_1.default);
        };
        chipsContainer.chipRecycling = function(item) {
          _this._chipPool.put(item.node);
          logger.log("chip recycling. Size " + _this._chipPool.size());
        };
        return chipsContainer;
      };
      THChipsController.prototype.chipsContainerRecycling = function(item) {
        this._chipsContainerPool.put(item.node);
        logger.log("container recycling. Size " + this._chipsContainerPool.size());
      };
      THChipsController.COUNT = 3;
      return THChipsController;
    }();
    exports.default = THChipsController;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger",
    "../ui/THChip": "THChip",
    "../ui/THChipsContainer": "THChipsContainer"
  } ],
  THChip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80a90VY3NBBDIj799vm7Umy", "THChip");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THChip = function(_super) {
      __extends(THChip, _super);
      function THChip() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.list = [];
        _this.target = null;
        return _this;
      }
      THChip.prototype.start = function() {};
      Object.defineProperty(THChip.prototype, "chip", {
        set: function(value) {
          void 0 !== this.list && null !== this.list && this.list.length > 0 && (this.list.length > value && value >= 0 ? this.target.spriteFrame = this.list[value] : this.target.spriteFrame = this.list[0]);
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property([ cc.SpriteFrame ]) ], THChip.prototype, "list", void 0);
      __decorate([ property(cc.Sprite) ], THChip.prototype, "target", void 0);
      THChip = __decorate([ ccclass ], THChip);
      return THChip;
    }(cc.Component);
    exports.default = THChip;
    cc._RF.pop();
  }, {} ],
  THCommonTypes: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "28ce1qwQNpIzYzqiAnNqGVn", "THCommonTypes");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerAction;
    (function(PlayerAction) {
      PlayerAction[PlayerAction["FOLD"] = 0] = "FOLD";
      PlayerAction[PlayerAction["CHECK"] = 1] = "CHECK";
      PlayerAction[PlayerAction["CALL"] = 2] = "CALL";
      PlayerAction[PlayerAction["RAISE"] = 3] = "RAISE";
      PlayerAction[PlayerAction["ALL_IN"] = 4] = "ALL_IN";
      PlayerAction[PlayerAction["NONE"] = 5] = "NONE";
    })(PlayerAction = exports.PlayerAction || (exports.PlayerAction = {}));
    var GameState;
    (function(GameState) {
      GameState[GameState["BEFORE"] = 0] = "BEFORE";
      GameState[GameState["INIT"] = 1] = "INIT";
      GameState[GameState["BEFORE_IN_GAME"] = 2] = "BEFORE_IN_GAME";
      GameState[GameState["IN_GAME"] = 3] = "IN_GAME";
      GameState[GameState["BEFORE_END_GAME"] = 4] = "BEFORE_END_GAME";
      GameState[GameState["END_GAME"] = 5] = "END_GAME";
    })(GameState = exports.GameState || (exports.GameState = {}));
    var SitStatus;
    (function(SitStatus) {
      SitStatus[SitStatus["UNKNOWN"] = 0] = "UNKNOWN";
      SitStatus[SitStatus["UP"] = 1] = "UP";
      SitStatus[SitStatus["DOWN"] = 2] = "DOWN";
      SitStatus[SitStatus["UP_REQUEST"] = 3] = "UP_REQUEST";
      SitStatus[SitStatus["DOWN_REQUEST"] = 4] = "DOWN_REQUEST";
    })(SitStatus = exports.SitStatus || (exports.SitStatus = {}));
    cc._RF.pop();
  }, {} ],
  THGameCore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cba2eC9txOxqPng5DR+8QW", "THGameCore");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCore_1 = require("../../../../common/core/GameCore");
    var THCore = function(_super) {
      __extends(THCore, _super);
      function THCore() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      THCore.prototype.init = function(logicAdapter, viewAdapter) {
        _super.prototype.init.call(this, logicAdapter, viewAdapter);
      };
      return THCore;
    }(GameCore_1.GameCoreBase);
    exports.THCore = THCore;
    cc._RF.pop();
  }, {
    "../../../../common/core/GameCore": "GameCore"
  } ],
  THGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "08edcwSTxlNhL0JvgZYuhKH", "THGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THViewAdapterBase_1 = require("./core/THViewAdapterBase");
    var THGameCore_1 = require("./core/THGameCore");
    var THServerLogicAdapter_1 = require("./core/THServerLogicAdapter");
    var store_1 = require("../../../common/store");
    var ServerController_1 = require("../../../common/server/ServerController");
    var THPlayerController_1 = require("./controllers/THPlayerController");
    var THAction_1 = require("./core/THAction");
    var THPlayerDataController_1 = require("./controllers/THPlayerDataController");
    var THCommonTypes_1 = require("./types/THCommonTypes");
    var THCardsController_1 = require("./controllers/THCardsController");
    var THCards_1 = require("./ui/THCards");
    var THButtons_1 = require("./ui/THButtons");
    var THButtonsController_1 = require("./controllers/THButtonsController");
    var Logger_1 = require("../../../common/core/Logger");
    var THTableConfig_1 = require("./types/THTableConfig");
    var THChipsController_1 = require("./controllers/THChipsController");
    var TextHelper_1 = require("../../../common/helpers/TextHelper");
    var THInterval_1 = require("./common/THInterval");
    var WaitingPlayersComponent_1 = require("../../../main/Script/component/WaitingPlayersComponent");
    var THAltSetting_1 = require("./ui/THAltSetting");
    var THGetText_1 = require("./lang/THGetText");
    var THTexts_1 = require("./lang/THTexts");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var logger = Logger_1.default.getLogger("THGame");
    var THGame = function(_super) {
      __extends(THGame, _super);
      function THGame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerView = null;
        _this.cardsPrefab = null;
        _this.chipsContainer = null;
        _this.buttons = null;
        _this.bankText = null;
        _this.bankAreaNode = null;
        _this.deskCardsLayer = null;
        _this.cardsLayer = null;
        _this.cardsDummy = null;
        _this.chipsLayer = null;
        _this.chipsDummy = null;
        _this.playerLayer = null;
        _this.playerDummy = null;
        _this.waitingNode = null;
        _this.altSetting = null;
        _this._interval = new THInterval_1.default();
        _this._isGameActive = true;
        _this._minBet = 0;
        _this._bankMoney = 0;
        _this._exited = false;
        _this._loadingScreen = false;
        _this._versionCheck = "version check: ";
        _this._gameState = THCommonTypes_1.GameState.BEFORE;
        _this._lastRoundType = THServerLogicAdapter_1.RoundType.UNKNOWN;
        _this._tableCards = [];
        _this._mySitStatus = THCommonTypes_1.SitStatus.UNKNOWN;
        _this.onEndRoundComplete = function(resolve) {
          return function() {
            _this.logger.log("ROUND_COMPLETE", "end", _this._isGameActive);
            _this._deskCards.resetCards();
            _this._playerDataController.forEachPlayerData(function(playerData) {
              playerData.totalRoundBet = 0;
              playerData.highestBet = 0;
            });
            _this._playerController.updateAll();
            _this.setBankMoney(0);
            _this._cardsController.reset();
            var countActivePlayer = _this._commonData.playerDataController.isMeIn ? 2 : 1;
            _this.logger.log("activePlayerCount: " + _this._playerDataController.activePlayerCount + ", countActivePlayer: " + countActivePlayer);
            _this._playerDataController.activePlayerCount < countActivePlayer && _this.showLoadingScreen(true);
            _this._gameState = THCommonTypes_1.GameState.END_GAME;
            resolve();
          };
        };
        _this.onActivated = function() {
          logger.log("onActivated");
          _this._isGameActive = true;
          _this._playerController.updateGameCoreTime(THGame_1.gameCore.currentTime);
        };
        _this.onDeactivated = function() {
          logger.log("onDeactivated");
          _this._isGameActive = false;
        };
        return _this;
      }
      THGame_1 = THGame;
      THGame.prototype.onLoad = function() {
        logger.log("onLoad");
        THGame_1.gameCore.init(new THServerLogicAdapter_1.THServerLogicAdapter(ServerController_1.default.instance.connector, store_1.default.getState().sceneState.current.params.tableId || 1), this);
        this._gameState = THCommonTypes_1.GameState.INIT;
      };
      THGame.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          var versionDate;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              versionDate = new Date();
              versionDate.setTime(1536752089e3);
              this._versionCheck += versionDate.toString();
              logger.log(this._versionCheck);
              logger.log("start");
              this._exited = false;
              this.waitingNode.enableWaitingNode();
              cc.game["on"](cc.game.EVENT_SHOW, this.onActivated, this);
              cc.game["on"](cc.game.EVENT_HIDE, this.onDeactivated, this);
              logger.log("common init start");
              this.initTexts();
              this._commonData = {
                playerDataController: new THPlayerDataController_1.default(),
                tableConfig: new THTableConfig_1.THTableConfig(),
                maxPlayer: THGame_1.MAX_PLAYER,
                texts: this._texts,
                waiting: this._loadingScreen
              };
              this._commonData.playerDataController.init(THGame_1.MAX_PLAYER);
              this._playerDataController = this._commonData.playerDataController;
              logger.log("common init end");
              logger.log("init start");
              this.initPlayers();
              this.initPlayerCards();
              this.initDeskCards();
              this.initButtons();
              this.initChips();
              this.initBank();
              this.initSettings();
              logger.log("init end");
              this.showLoadingScreen(true);
              return [ 4, THGame_1.gameCore.start() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      THGame.prototype.onDestroy = function() {
        this._interval.destroy();
        this._playerController.destroy();
        this._cardsController.destroy();
        this._buttonsController.destroy();
        this._chipsController.destroy();
        this._playerDataController.destroy();
        cc.game["off"](cc.game.EVENT_SHOW, this.onActivated, this);
        cc.game["off"](cc.game.EVENT_HIDE, this.onDeactivated, this);
        THGame_1.gameCore.destroy();
      };
      THGame.prototype.prepare = function() {
        return __awaiter(this, void 0, void 0, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              logger.log("prepare start");
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerInputActionHandler(THAction_1.THActionType.PREPARE_FOR_ROUND, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    this._gameState = THCommonTypes_1.GameState.BEFORE_IN_GAME;
                    logger.log("PREPARE_FOR_ROUND", JSON.stringify(action), this._isGameActive);
                    logger.log(this._versionCheck);
                    this._interval.destroy();
                    this._minBet = 0;
                    this.setBankMoney(0);
                    this._playerDataController.reset();
                    this._playerDataController.forEachPlayerData(function(playerData) {
                      playerData.active = -1 !== action.data.placesId.indexOf(playerData.placeId);
                    });
                    this._playerDataController.dealer = this._playerDataController.getPlayerIndexByPlaceId(action.data.dealerPlaceId);
                    this._deskCards.resetCards();
                    this._buttonsController.hide();
                    this._cardsController.reset();
                    this._playerController.reset();
                    this._chipsController.reset();
                    this.showLoadingScreen(false);
                    this._gameState = THCommonTypes_1.GameState.IN_GAME;
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.REGISTER_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var isMe;
                  var _this = this;
                  return __generator(this, function(_a) {
                    logger.log("REGISTER_PLACE", JSON.stringify(action), this._isGameActive);
                    isMe = action.data.playerInfo.id === THGame_1.gameCore.getCurrentPlayerInfo().id;
                    this._playerDataController.add({
                      playerInfo: action.data.playerInfo,
                      placeId: action.data.placeId,
                      me: isMe,
                      callback: function(me, placeId) {
                        if (me) {
                          logger.log("My place id: " + placeId);
                          _this._mySitStatus = THCommonTypes_1.SitStatus.DOWN;
                        }
                        _this._playerController.updateAll();
                        _this._chipsController.updateAll();
                      }
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.TABLE_CONFIG_UPDATE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    logger.log("TABLE_CONFIG_UPDATE", JSON.stringify(action), this._isGameActive);
                    this._commonData.tableConfig.bets = action.data.bets;
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.DEAL_TABLE_CARDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var totalBet, data, updateCards;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      logger.log("DEAL_TABLE_CARDS", JSON.stringify(action), this._isGameActive);
                      this._lastRoundType = action.data.roundType;
                      totalBet = 0;
                      data = [];
                      this._playerDataController.forEachPlayerData(function(playerData, playerIndex) {
                        var bet = playerData.totalRoundBet;
                        data[playerIndex] = bet;
                        totalBet += bet;
                        playerData.totalRoundBet = 0;
                        playerData.roundAction = THCommonTypes_1.PlayerAction.NONE;
                      });
                      this._playerController.updateAll();
                      this.incrementBankMoney(totalBet);
                      this._chipsController.flyChipsByPlayer(data);
                      updateCards = [];
                      if (1 === action.data.roundType) {
                        updateCards = action.data.cards.map(function(card) {
                          return {
                            open: card,
                            outline: false
                          };
                        });
                        this._tableCards = action.data.cards.concat();
                      } else if (2 === action.data.roundType) {
                        updateCards[3] = {
                          open: action.data.cards[0],
                          outline: false
                        };
                        this._tableCards[3] = action.data.cards[0];
                      } else if (3 === action.data.roundType) {
                        updateCards[4] = {
                          open: action.data.cards[0],
                          outline: false
                        };
                        this._tableCards[4] = action.data.cards[0];
                      }
                      if (!this._isGameActive) return [ 3, 2 ];
                      return [ 4, this._deskCards.updateCardsAsync(updateCards) ];

                     case 1:
                      _a.sent();
                      return [ 3, 3 ];

                     case 2:
                      this._deskCards.updateCardsSync(updateCards);
                      _a.label = 3;

                     case 3:
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.DEAL_PLAYER_CARDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var update;
                  return __generator(this, function(_a) {
                    logger.log("DEAL_PLAYER_CARDS", JSON.stringify(action), this._isGameActive);
                    update = [];
                    update[this._commonData.maxPlayer - 1] = action.data.cards.map(function(card) {
                      return {
                        open: card,
                        outline: false
                      };
                    });
                    this._cardsController.update(update);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.COLLECT_BLINDS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var length, index, playerIndex, blind;
                  return __generator(this, function(_a) {
                    logger.log("COLLECT_BLINDS", JSON.stringify(action), this._isGameActive);
                    this._lastRoundType = THServerLogicAdapter_1.RoundType.PRE_FLOP;
                    length = Math.min(action.data.places.length, action.data.blinds.length);
                    for (index = 0; index < length; index++) {
                      playerIndex = this._playerDataController.getPlayerIndexByPlaceId(action.data.places[index]);
                      if (playerIndex >= 0) {
                        blind = action.data.blinds[index];
                        this._playerDataController.getPlayerDataByPlayerIndex(playerIndex).totalRoundBet = blind;
                        this._minBet = Math.max(this._minBet, blind);
                      }
                    }
                    this._playerController.updateAll();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.COLLECT_ANTE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var data;
                  var _this = this;
                  return __generator(this, function(_a) {
                    logger.log("COLLECT_ANTE", JSON.stringify(action), this._isGameActive);
                    data = [];
                    this._playerDataController.forEachPlayerIndex(function(playerIndex) {
                      _this.incrementBankMoney(action.data.ante);
                      data[playerIndex] = action.data.ante;
                    });
                    this._chipsController.flyChipsByPlayer(data);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.DROP_PLACE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerIndex, countActivePlayer;
                  return __generator(this, function(_a) {
                    logger.log("DROP_PLACE", JSON.stringify(action), this._isGameActive);
                    playerIndex = this._playerDataController.getPlayerIndexByPlaceId(action.data.placeId);
                    this.removePlayerByPlayerIndex(playerIndex);
                    if (this._gameState === THCommonTypes_1.GameState.END_GAME) {
                      countActivePlayer = this._commonData.playerDataController.isMeIn ? 2 : 1;
                      this.logger.log("activePlayerCount: " + this._playerDataController.activePlayerCount + ", countActivePlayer: " + countActivePlayer);
                      this._playerDataController.activePlayerCount < countActivePlayer && this.showLoadingScreen(true);
                    }
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.WAITING_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerIndex, playerData;
                  var _this = this;
                  return __generator(this, function(_a) {
                    logger.log("WAITING_BET", JSON.stringify(action), this._isGameActive);
                    playerIndex = this._playerDataController.getPlayerIndexByPlaceId(action.data.activePlaceId);
                    if (playerIndex < 0) return [ 2 ];
                    playerData = this._playerDataController.getPlayerDataByPlayerIndex(playerIndex);
                    if (void 0 !== playerData && null !== playerData) {
                      playerData.highestBet = action.data.highestBet;
                      playerData.roundAction = THCommonTypes_1.PlayerAction.NONE;
                    }
                    this._playerController.updateByPlayerIndex(playerIndex);
                    this._playerController.resetAllTimers();
                    this._playerController.updateTimeByPlayerIndex(playerIndex, action.data.time, THGame_1.gameCore.currentTime);
                    logger.log("isMyPlayerIndex", this._playerDataController.isMyPlayerIndex(playerIndex));
                    if (!this._playerDataController.isMyPlayerIndex(playerIndex)) return [ 2 ];
                    this._buttonsController.activate(action.data.betStep, action.data.highestBet, this._minBet, function(nextBet) {
                      nextBet < 0 ? _this.dispatchAction({
                        type: THAction_1.THActionType.FOLD,
                        data: {}
                      }) : 0 === nextBet ? _this.dispatchAction({
                        type: THAction_1.THActionType.CHECK,
                        data: {}
                      }) : _this.dispatchAction({
                        type: THAction_1.THActionType.MAKE_BET,
                        data: {
                          totalBet: nextBet
                        }
                      });
                    });
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.MAKE_BET, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerIndex, playerData, highestBet, totalRoundBet;
                  return __generator(this, function(_a) {
                    logger.log("MAKE_BET", JSON.stringify(action), this._isGameActive);
                    playerIndex = this._playerDataController.getPlayerIndexByPlaceId(action.data.placeId);
                    if (playerIndex < 0) return [ 2 ];
                    playerData = this._playerDataController.getPlayerDataByPlayerIndex(playerIndex);
                    if (null === playerData) return [ 2 ];
                    if (action.data.totalBet > 0) {
                      playerData.totalRoundBet = action.data.totalBet;
                      playerData.allIn = void 0 !== action.data.isPlayingAllIn && null !== action.data.isPlayingAllIn && action.data.isPlayingAllIn;
                      this._playerController.updateByPlayerIndex(playerIndex);
                      playerData.betByRoundType.set(this._lastRoundType, action.data.totalBet);
                    }
                    highestBet = playerData.highestBet;
                    totalRoundBet = playerData.totalRoundBet;
                    highestBet < totalRoundBet ? this.confirmBet(action.data.placeId, THCommonTypes_1.PlayerAction.RAISE) : this.confirmBet(action.data.placeId, THCommonTypes_1.PlayerAction.CALL);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.FOLD, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    logger.log("FOLD", JSON.stringify(action), this._isGameActive);
                    this.confirmBet(action.data.placeId, THCommonTypes_1.PlayerAction.FOLD);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.CHECK, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    logger.log("CHECK", JSON.stringify(action), this._isGameActive);
                    this.confirmBet(action.data.placeId, THCommonTypes_1.PlayerAction.CHECK);
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.TABLE_STATUS, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var playerIndex, coreTime, cardsUpdate;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this._gameState = THCommonTypes_1.GameState.BEFORE_IN_GAME;
                      logger.log("TABLE_STATUS", JSON.stringify(action), this._isGameActive);
                      this._interval.destroy();
                      this.setBankMoney(action.data.tableBank);
                      this._playerDataController.dealer = this._playerDataController.getPlayerIndexByPlaceId(action.data.dealerPlaceId);
                      this._playerDataController.forEachPlayerData(function(playerData) {
                        var index = action.data.playingPlaceIds.indexOf(playerData.placeId);
                        playerData.active = -1 !== index;
                        -1 !== index && void 0 !== action.data.circlePlaceBets[playerData.placeId] && null !== action.data.circlePlaceBets[playerData.placeId] && action.data.circlePlaceBets[playerData.placeId] >= 0 && (playerData.totalRoundBet = action.data.circlePlaceBets[playerData.placeId]);
                      });
                      this._playerController.resetAllTimers();
                      if (action.data.time > 0) {
                        playerIndex = this._playerDataController.getPlayerIndexByPlaceId(action.data.activePlaceId);
                        coreTime = THGame_1.gameCore.currentTime;
                        this._playerController.updateTimeByPlayerIndex(playerIndex, action.data.time, coreTime - action.data.time + action.data.timeLeft);
                        this._playerController.updateGameCoreTime(coreTime);
                      }
                      this._playerController.updateAll();
                      this.showLoadingScreen(false);
                      cardsUpdate = [];
                      cardsUpdate = action.data.tableCards.map(function(card) {
                        return {
                          open: card,
                          shadow: true
                        };
                      });
                      if (!this._isGameActive) return [ 3, 2 ];
                      return [ 4, this._deskCards.updateCardsAsyncTogether(cardsUpdate) ];

                     case 1:
                      _a.sent();
                      return [ 3, 3 ];

                     case 2:
                      this._deskCards.updateCardsSync(cardsUpdate);
                      _a.label = 3;

                     case 3:
                      this._gameState = THCommonTypes_1.GameState.IN_GAME;
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.ROUND_COMPLETE, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  var rewards, updateCardsData, coinsToPlayer, combinationName, isRoundCompleteByEnd, winRewardInfo, deskCards, index, delay, startTime, flyAll, index, wait;
                  var _this = this;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this._gameState = THCommonTypes_1.GameState.BEFORE_END_GAME;
                      logger.log("ROUND_COMPLETE", JSON.stringify(action), this._isGameActive);
                      logger.log(this._versionCheck);
                      this._interval.destroy();
                      rewards = action.data.rewards;
                      updateCardsData = [];
                      coinsToPlayer = [];
                      combinationName = "";
                      isRoundCompleteByEnd = false;
                      winRewardInfo = null;
                      try {
                        this.debugRoundComplete(rewards);
                      } catch (error) {
                        logger.log("Problem with debug info");
                      }
                      rewards.forEach(function(rewardData) {
                        var updatePlayerCardsData = [];
                        var playerIndex = _this._playerDataController.getPlayerIndexByPlaceId(rewardData.placeId);
                        isRoundCompleteByEnd = void 0 !== rewardData.cards && null !== rewardData.cards && rewardData.cards.length > 0;
                        isRoundCompleteByEnd && rewardData.cards.forEach(function(card, indexCard) {
                          updatePlayerCardsData[indexCard] = {};
                          _this._playerDataController.isMyPlayerIndex(playerIndex) || (updatePlayerCardsData[indexCard] = {
                            open: card
                          });
                          if (void 0 !== rewardData.usedCards && null !== rewardData.usedCards && Array.isArray(rewardData.usedCards) && rewardData.usedCards.length > 0) {
                            updatePlayerCardsData[indexCard].blackout = rewardData.coins <= 0 || -1 === rewardData.usedCards.indexOf(indexCard);
                            if (!updatePlayerCardsData[indexCard].blackout) {
                              updatePlayerCardsData[indexCard].scale = 1.2;
                              updatePlayerCardsData[indexCard].outlineHighlight = true;
                            }
                          }
                        });
                        updateCardsData[playerIndex] = updatePlayerCardsData;
                        if (rewardData.coins > 0) {
                          winRewardInfo = __assign({}, rewardData);
                          coinsToPlayer.push({
                            playerIndex: playerIndex,
                            coins: rewardData.coins
                          });
                        }
                      });
                      deskCards = [];
                      if (null !== winRewardInfo) {
                        void 0 !== winRewardInfo.combinationName && null !== winRewardInfo.combinationName && (combinationName = winRewardInfo.combinationName);
                        if (void 0 !== winRewardInfo.usedCards && null !== winRewardInfo.usedCards && Array.isArray(winRewardInfo.usedCards) && winRewardInfo.usedCards.length > 0) for (index = 0; index < THGame_1.MAX_DESK_CARD; index++) -1 === winRewardInfo.usedCards.indexOf(index + 2) ? deskCards[index] = {
                          blackout: true
                        } : deskCards[index] = {
                          blackout: false,
                          scale: 1.2,
                          outlineHighlight: true,
                          outline: false
                        };
                      }
                      this._playerDataController.forEachPlayerData(function(playerData) {
                        playerData.allIn = false;
                        playerData.roundAction = THCommonTypes_1.PlayerAction.NONE;
                        if (!isRoundCompleteByEnd) {
                          playerData.totalRoundBet = 0;
                          playerData.highestBet = 0;
                        }
                      });
                      if (isRoundCompleteByEnd) {
                        this._cardsController.update(updateCardsData);
                        this._deskCards.updateCombinationName(combinationName);
                        this._deskCards.updateCardsSync(deskCards);
                      } else {
                        this._deskCards.resetCards();
                        this._cardsController.reset();
                      }
                      this._playerController.updateAll();
                      logger.log("resetAllTimers");
                      this._playerController.resetAllTimers();
                      logger.log("buttonsController.hide");
                      this._buttonsController.hide();
                      delay = isRoundCompleteByEnd ? 3e3 : 300;
                      startTime = new Date().valueOf();
                      logger.log("delay: " + delay + ". startTime: " + startTime);
                      if (!this._isGameActive) return [ 3, 2 ];
                      flyAll = [];
                      for (index = 0; index < coinsToPlayer.length; index++) flyAll.push(this._chipsController.flyChipsToPlayer(coinsToPlayer[index].playerIndex, coinsToPlayer[index].coins));
                      return [ 4, Promise.all(flyAll) ];

                     case 1:
                      _a.sent();
                      return [ 3, 3 ];

                     case 2:
                      this._chipsController.reset();
                      this.setBankMoney(0);
                      _a.label = 3;

                     case 3:
                      if (this._gameState === THCommonTypes_1.GameState.BEFORE_END_GAME) {
                        wait = new Promise(function(resolve) {
                          var deltaTime = new Date().valueOf() - startTime;
                          logger.log("delay: " + delay + ". deltaTime: " + deltaTime);
                          deltaTime < delay ? _this._interval.setTimeout(_this.onEndRoundComplete(resolve), delay) : _this.onEndRoundComplete(resolve)();
                        });
                        return [ 2, wait ];
                      }
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.GAME_OVER, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    logger.log("GAME_OVER", JSON.stringify(action), this._isGameActive);
                    this.exitGame();
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.SIT_DOWN, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    logger.log("SIT_DOWN", JSON.stringify(action), this._isGameActive);
                    this._mySitStatus = THCommonTypes_1.SitStatus.DOWN;
                    return [ 2 ];
                  });
                });
              });
              this.registerInputActionHandler(THAction_1.THActionType.STAND_UP, function(action) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    logger.log("STAND_UP", JSON.stringify(action), this._isGameActive);
                    this._interval.destroy();
                    this.removePlayerByPlayerIndex(this._playerDataController.myPlayerIndex());
                    this._mySitStatus = THCommonTypes_1.SitStatus.UP;
                    return [ 2 ];
                  });
                });
              });
              logger.log("prepare end");
              return [ 2 ];
            }
          });
        });
      };
      THGame.prototype.onSettingClick = function() {
        this.altSetting.node.active = !this.altSetting.node.active;
      };
      THGame.prototype.exitGame = function() {
        if (this._exited) return;
        this._exited = true;
        this._interval.destroy();
        var canvas = cc.find("Canvas");
        if (canvas) {
          var gameScene = canvas.getComponent("GameScene");
          gameScene.onBackButtonPress();
        }
      };
      THGame.prototype.removePlayerByPlayerIndex = function(playerIndex) {
        this._playerController.resetTimer(playerIndex);
        this._playerDataController.isMyPlayerIndex(playerIndex) && this._buttonsController.hide();
        this._playerDataController.removeByPlayerIndex(playerIndex);
        this._playerController.updateAll();
        this._cardsController.dropUser(playerIndex);
        this._chipsController.dropUser(playerIndex);
      };
      THGame.prototype.initTexts = function() {
        this._texts = new THGetText_1.default();
        this._texts.init(THTexts_1.THTexts, "en");
      };
      THGame.prototype.initPlayers = function() {
        var _this = this;
        logger.log("initPlayers");
        this._playerController = new THPlayerController_1.default();
        var playerLayer = this.playerLayer;
        this._playerController.init(this._commonData, this.fillViewData(this.playerDummy, false), playerLayer, this.playerView, function(playerIndex) {
          if (_this._mySitStatus !== THCommonTypes_1.SitStatus.DOWN_REQUEST) {
            _this._mySitStatus = THCommonTypes_1.SitStatus.DOWN_REQUEST;
            _this.dispatchAction({
              type: THAction_1.THActionType.SIT_DOWN,
              data: {}
            });
          }
          _this._playerController.updateAll();
        });
        this._playerController.setSitDownInteractable(function() {
          return _this._mySitStatus === THCommonTypes_1.SitStatus.UP;
        });
      };
      THGame.prototype.initChips = function() {
        logger.log("initChips");
        this._chipsController = new THChipsController_1.default();
        this._chipsController.init(this._commonData, this.fillViewData(this.chipsDummy, false), this.chipsLayer, this.chipsContainer, this.bankAreaNode);
      };
      THGame.prototype.initPlayerCards = function() {
        logger.log("initPlayerCards");
        this._cardsController = new THCardsController_1.default();
        this._cardsController.init(this._commonData, this.fillViewData(this.cardsDummy), this.cardsLayer, this.cardsPrefab);
      };
      THGame.prototype.initButtons = function() {
        logger.log("initButtons");
        this._buttonsController = new THButtonsController_1.default();
        this._buttonsController.init(this._commonData, this.buttons);
        this._buttonsController.hide();
      };
      THGame.prototype.initDeskCards = function() {
        logger.log("initDeskCards");
        var parent = this.deskCardsLayer;
        this._deskCards = cc.instantiate(this.cardsPrefab).getComponent(THCards_1.default);
        this._deskCards.maxCard = THGame_1.MAX_DESK_CARD;
        parent.addChild(this._deskCards.node);
        this._deskCards.updateSize(new cc.Size(parent.width, parent.height));
        this._deskCards.updateForAllCards({
          outline: true
        });
      };
      THGame.prototype.initSettings = function() {
        var _this = this;
        this.altSetting.initWithConfig({
          mainBorderWidth: 20,
          mainBorderHeight: 20,
          itemBorderWidth: 20,
          itemBorderHeight: 20,
          backColor: new cc.Color(255, 0, 0, Math.floor(102)),
          backLineColor: new cc.Color(0, 0, 0, Math.floor(204)),
          backLineWidth: 3,
          backRound: 10,
          itemBackColor: new cc.Color(255, 255, 0, Math.floor(102)),
          itemBackRound: 10,
          closeRadiusButton: 20,
          closeBackColor: new cc.Color(255, 255, 0, Math.floor(204)),
          closeLineColor: new cc.Color(0, 0, 0, Math.floor(204))
        }, [ {
          text: this._texts.getText("exit_to_lobby"),
          callback: function() {
            _this.exitGame();
          }
        }, {
          text: this._texts.getText("stand_up"),
          callback: function() {
            _this.altSetting.node.active = false;
            if (_this._mySitStatus !== THCommonTypes_1.SitStatus.UP_REQUEST) {
              _this._mySitStatus = THCommonTypes_1.SitStatus.UP_REQUEST;
              _this.dispatchAction({
                type: THAction_1.THActionType.STAND_UP,
                data: {}
              });
            }
            _this._playerController.updateAll();
          }
        }, {
          text: this._texts.getText("help"),
          callback: function() {
            _this.altSetting.node.active = false;
          }
        } ], function() {
          _this.altSetting.node.active = false;
        });
        this.altSetting.node.active = false;
      };
      THGame.prototype.initBank = function() {
        this.bankText.string = "";
      };
      THGame.prototype.confirmBet = function(placeId, action) {
        var playerIndex = this._playerDataController.getPlayerIndexByPlaceId(placeId);
        var playerData = this._playerDataController.getPlayerDataByPlayerIndex(playerIndex);
        if (playerData) {
          action === THCommonTypes_1.PlayerAction.FOLD && (playerData.folded = true);
          playerData.roundAction = action;
        }
        this._playerController.resetTimer(playerIndex);
        this._playerController.updateByPlayerIndex(playerIndex);
        this._playerDataController.isMyPlayerIndex(playerIndex) && this._buttonsController.hide();
      };
      THGame.prototype.fillViewData = function(dummy, size) {
        void 0 === size && (size = true);
        var viewParams = [];
        for (var index = 0; index < dummy.children.length; index++) {
          var data = {
            position: new cc.Vec2(dummy.children[index].x, dummy.children[index].y)
          };
          size && (data.size = new cc.Size(dummy.children[index].width, dummy.children[index].height));
          viewParams.push(data);
        }
        dummy.destroy();
        return viewParams;
      };
      THGame.prototype.incrementBankMoney = function(value) {
        this._bankMoney += value;
        this.setBankMoney(this._bankMoney);
      };
      THGame.prototype.setBankMoney = function(value) {
        this._bankMoney = value;
        this.bankText.string = TextHelper_1.default.coinsShortcut(this._bankMoney, 1);
      };
      THGame.prototype.showLoadingScreen = function(value) {
        this._loadingScreen = value;
        this._commonData.waiting = this._loadingScreen;
        logger.log("showLoadingScreen: ", value.toString());
        this._loadingScreen ? this.waitingNode.enableWaitingNode() : this.waitingNode.disableWaitingNode();
      };
      THGame.prototype.debugRoundComplete = function(rewards) {
        var _this = this;
        if (void 0 === rewards || null === rewards || 0 === rewards.length) return;
        logger.log("===== Debug win information =====");
        rewards.forEach(function(rewardData) {
          var data = {};
          var playerName = "";
          var textCard = [];
          var userTextCard = [];
          var playerData = _this._playerDataController.getPlayerDataByPlaceId(rewardData.placeId);
          if (void 0 !== playerData && null !== playerData) {
            playerName = playerData.playerInfo.name;
            playerData.betByRoundType.forEach(function(value, key) {
              data[key] = value;
            });
          }
          if (void 0 !== rewardData.usedCards && null !== rewardData.usedCards) {
            userTextCard = rewardData.usedCards.filter(function(value) {
              return value <= 1;
            }).map(function(index) {
              return rewardData.cards[index].toString();
            });
            textCard = rewardData.usedCards.filter(function(value) {
              return value > 1;
            }).map(function(index) {
              return _this._tableCards[index - 2].toString();
            });
          }
          logger.log(playerName + " combination: " + rewardData.combinationName + " reward: " + rewardData.coins + " bets: " + JSON.stringify(data) + " userCards: " + userTextCard + " deskCards: " + textCard);
        });
        logger.log("=================================");
      };
      var THGame_1;
      THGame.MAX_PLAYER = 9;
      THGame.MAX_DESK_CARD = 5;
      THGame.USER_CARD = 2;
      THGame.gameCore = new THGameCore_1.THCore();
      __decorate([ property(cc.Prefab) ], THGame.prototype, "playerView", void 0);
      __decorate([ property(cc.Prefab) ], THGame.prototype, "cardsPrefab", void 0);
      __decorate([ property(cc.Prefab) ], THGame.prototype, "chipsContainer", void 0);
      __decorate([ property(THButtons_1.default) ], THGame.prototype, "buttons", void 0);
      __decorate([ property(cc.Label) ], THGame.prototype, "bankText", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "bankAreaNode", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "deskCardsLayer", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "cardsLayer", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "cardsDummy", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "chipsLayer", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "chipsDummy", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "playerLayer", void 0);
      __decorate([ property(cc.Node) ], THGame.prototype, "playerDummy", void 0);
      __decorate([ property(WaitingPlayersComponent_1.WaitingPlayer) ], THGame.prototype, "waitingNode", void 0);
      __decorate([ property(THAltSetting_1.default) ], THGame.prototype, "altSetting", void 0);
      THGame = THGame_1 = __decorate([ ccclass ], THGame);
      return THGame;
    }(THViewAdapterBase_1.THViewAdapterBase);
    exports.default = THGame;
    cc._RF.pop();
  }, {
    "../../../common/core/Logger": "Logger",
    "../../../common/helpers/TextHelper": "TextHelper",
    "../../../common/server/ServerController": "ServerController",
    "../../../common/store": "index",
    "../../../main/Script/component/WaitingPlayersComponent": "WaitingPlayersComponent",
    "./common/THInterval": "THInterval",
    "./controllers/THButtonsController": "THButtonsController",
    "./controllers/THCardsController": "THCardsController",
    "./controllers/THChipsController": "THChipsController",
    "./controllers/THPlayerController": "THPlayerController",
    "./controllers/THPlayerDataController": "THPlayerDataController",
    "./core/THAction": "THAction",
    "./core/THGameCore": "THGameCore",
    "./core/THServerLogicAdapter": "THServerLogicAdapter",
    "./core/THViewAdapterBase": "THViewAdapterBase",
    "./lang/THGetText": "THGetText",
    "./lang/THTexts": "THTexts",
    "./types/THCommonTypes": "THCommonTypes",
    "./types/THTableConfig": "THTableConfig",
    "./ui/THAltSetting": "THAltSetting",
    "./ui/THButtons": "THButtons",
    "./ui/THCards": "THCards"
  } ],
  THGetText: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f45bdrlVNAW6Z1ikmIBYuG", "THGetText");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THGetText = function(_super) {
      __extends(THGetText, _super);
      function THGetText() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      THGetText.prototype.init = function(texts, lang) {
        this._texts = texts;
        this._lang = lang;
      };
      THGetText.prototype.getText = function(key) {
        if (void 0 !== this._texts && null !== this._texts && void 0 !== this._texts[key] && null !== this._texts[key] && void 0 !== this._texts[key][this._lang] && null !== this._texts[key][this._lang]) return this._texts[key][this._lang];
        return key;
      };
      return THGetText;
    }(cc.Component);
    exports.default = THGetText;
    cc._RF.pop();
  }, {} ],
  THInterval: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf1ecGSFyJF9Z421b0/OBxa", "THInterval");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../../../../common/core/Logger");
    var logger = Logger_1.default.getLogger("THInterval");
    var THInterval = function() {
      function THInterval() {
        this._timerIds = [];
      }
      THInterval.prototype.setTimeout = function(callback, time) {
        var _this = this;
        var timerId = setTimeout(function() {
          logger.log("action", time, "timerId", timerId);
          _this.remove(timerId);
          callback();
        }, time);
        this._timerIds.push(timerId);
        logger.log("setTimeout", time, "timerId", timerId);
        return timerId;
      };
      THInterval.prototype.remove = function(timerId) {
        logger.log("remove", timerId);
        clearTimeout(timerId);
        var index = this._timerIds.indexOf(timerId);
        index >= 0 && this._timerIds.splice(index, 1);
      };
      THInterval.prototype.destroy = function() {
        logger.log("destroy");
        this._timerIds.forEach(function(timerId) {
          clearTimeout(timerId);
        });
        this._timerIds.length = 0;
      };
      return THInterval;
    }();
    exports.default = THInterval;
    cc._RF.pop();
  }, {
    "../../../../common/core/Logger": "Logger"
  } ],
  THPlayerController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74477N/xRlALaglSb0pwBg7", "THPlayerController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THPlayerView_1 = require("../ui/THPlayerView");
    var THCommonTypes_1 = require("../types/THCommonTypes");
    var THPlayerController = function() {
      function THPlayerController() {
        this._players = [];
        this._viewParams = [];
        this._sitDownRequestCallback = null;
        this._sitDownInteractable = null;
      }
      THPlayerController.prototype.init = function(commonData, viewParams, parent, prefab, sitDownRequestCallback) {
        var _a;
        this._viewParams = viewParams;
        this._parent = parent;
        this._prefab = prefab;
        this._commonData = commonData;
        this._texts = (_a = {}, _a[THCommonTypes_1.PlayerAction.FOLD] = this._commonData.texts.getText("fold"), 
        _a[THCommonTypes_1.PlayerAction.CHECK] = this._commonData.texts.getText("check"), 
        _a[THCommonTypes_1.PlayerAction.CALL] = this._commonData.texts.getText("call"), 
        _a[THCommonTypes_1.PlayerAction.RAISE] = this._commonData.texts.getText("raise"), 
        _a[THCommonTypes_1.PlayerAction.ALL_IN] = this._commonData.texts.getText("all_in"), 
        _a[THCommonTypes_1.PlayerAction.NONE] = "", _a);
        for (var index = 0; index < this._commonData.maxPlayer; index++) this._players[index] = this.getOrCreate(index, this._commonData.maxPlayer);
        this.updateAll();
        this._sitDownRequestCallback = sitDownRequestCallback;
      };
      THPlayerController.prototype.setSitDownInteractable = function(callback) {
        this._sitDownInteractable = callback;
      };
      THPlayerController.prototype.updateByPlayerIndex = function(playerIndex) {
        console.log("updatePlayer", "playerIndex", playerIndex);
        var playerData = this._commonData.playerDataController.getPlayerDataByPlayerIndex(playerIndex);
        var playerView = this.getByPlayerIndex(playerIndex);
        playerView && this.updatePlayer(playerData, playerView);
      };
      THPlayerController.prototype.updateAll = function() {
        var _this = this;
        this._players.forEach(function(playerView, playerIndex) {
          _this.updateByPlayerIndex(playerIndex);
        });
      };
      THPlayerController.prototype.updateTimeByPlayerIndex = function(playerIndex, time, gameCoreTime) {
        var playerView = this.getByPlayerIndex(playerIndex);
        if (playerView) {
          console.log("updateTimeByPlayerIndex playerIndex: " + playerIndex);
          playerView.startTimer(time + gameCoreTime, gameCoreTime, time);
        }
      };
      THPlayerController.prototype.updateGameCoreTime = function(gameCoreTime) {
        for (var index = 0; index < this._players.length; index++) {
          var playerView = this.getByPlayerIndex(index);
          if (playerView) {
            console.log("updateGameCoreTime playerIndex: " + index);
            if (playerView.timerActive) {
              playerView.serverTimeUpdate(gameCoreTime);
              this.updateByPlayerIndex(index);
            } else playerView.resetTimer();
          }
        }
      };
      THPlayerController.prototype.destroy = function() {
        this._viewParams.length = 0;
        this._players.length = 0;
      };
      THPlayerController.prototype.reset = function() {
        for (var index = 0; index < this._players.length; index++) {
          var playerView = this.getByPlayerIndex(index);
          if (playerView) {
            console.log("reset resetTimer playerIndex: " + index);
            playerView.resetTimer();
            this.updateByPlayerIndex(index);
          }
        }
      };
      THPlayerController.prototype.resetAllTimers = function() {
        for (var index = 0; index < this._players.length; index++) {
          var playerView = this.getByPlayerIndex(index);
          if (playerView) {
            console.log("resetAllTimers resetTimer playerIndex: " + index);
            playerView.resetTimer();
          }
        }
      };
      THPlayerController.prototype.resetTimer = function(playerIndex) {
        var playerView = this.getByPlayerIndex(playerIndex);
        if (playerView) {
          console.log("resetTimer resetTimer playerIndex: " + playerIndex);
          playerView.resetTimer();
        }
      };
      THPlayerController.prototype.getByPlayerIndex = function(playerIndex) {
        if (this.checkIndex(playerIndex)) return this._players[playerIndex];
        return null;
      };
      THPlayerController.prototype.checkIndex = function(playerIndex) {
        return playerIndex >= 0 && playerIndex < this._players.length;
      };
      THPlayerController.prototype.getOrCreate = function(playerIndex, maxIndex) {
        var _this = this;
        void 0 === maxIndex && (maxIndex = -1);
        if (maxIndex < 0 && !this.checkIndex(playerIndex)) return null;
        if (playerIndex < 0 || playerIndex > maxIndex) return null;
        if (void 0 === this._players[playerIndex] || null === this._players[playerIndex]) {
          var playerView = cc.instantiate(this._prefab).getComponent(THPlayerView_1.default);
          playerView.sitDownRequestCallback = function() {
            void 0 !== _this._sitDownRequestCallback && null !== _this._sitDownRequestCallback && _this._sitDownRequestCallback(playerIndex);
          };
          this._players[playerIndex] = playerView;
          var position = this._viewParams[playerIndex].position;
          this._parent.addChild(playerView.node);
          playerView.node.setPosition(position.x, position.y);
        }
        return this._players[playerIndex];
      };
      THPlayerController.prototype.updatePlayer = function(playerData, playerView) {
        console.log("updatePlayer", JSON.stringify(playerData));
        var playerIndex = this._players.indexOf(playerView);
        if (void 0 !== playerData && null !== playerData) {
          var playerInfo = playerData.playerInfo;
          playerView.avatarByAvatarId = playerInfo.avatarId;
          playerView.name = playerData.playerInfo.name;
          playerView.money = playerInfo.balance;
          playerView.populate(true);
          playerView.setBet(playerData.totalRoundBet, playerIndex >= 4, playerIndex === this._players.length - 1);
          var actionText = playerData.allIn ? this._texts[THCommonTypes_1.PlayerAction.ALL_IN] : this._texts[playerData.roundAction];
          playerView.updateActionStatus(playerData.roundAction, playerData.active && !playerData.folded, actionText);
          playerView.dealer = this._commonData.playerDataController.dealer === playerIndex;
        } else {
          playerView.populate(false);
          playerView.avatarByAvatarId = null;
        }
        playerView.sitDown.interactable = void 0 !== this._sitDownInteractable && null !== this._sitDownInteractable && this._sitDownInteractable();
      };
      return THPlayerController;
    }();
    exports.default = THPlayerController;
    cc._RF.pop();
  }, {
    "../types/THCommonTypes": "THCommonTypes",
    "../ui/THPlayerView": "THPlayerView"
  } ],
  THPlayerDataController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da264i6Fy5FyL9kwBiaUCcd", "THPlayerDataController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THCommonTypes_1 = require("../types/THCommonTypes");
    var THPlayerDataController = function() {
      function THPlayerDataController() {
        this._inited = false;
        this._myPlayerIndex = 0;
        this._myPlaceId = 0;
        this._myData = null;
        this._maxPlayer = null;
        this._playerIndexDealer = -1;
        this._players = [];
        this._placeIdToPlayerData = new Map();
      }
      THPlayerDataController.prototype.init = function(maxPlayer) {
        this._maxPlayer = maxPlayer;
        for (var index = 0; index < this._maxPlayer; index++) this._players[index] = null;
        this._inited = true;
      };
      THPlayerDataController.prototype.add = function(data) {
        if (!this._inited) return -1;
        var playerInfo = data.playerInfo;
        var placeId = data.placeId;
        var me = data.me;
        if (placeId < 0 && placeId >= this._maxPlayer) return -1;
        if (me) {
          this._myPlayerIndex = this.myMarkPlace();
          this._myPlaceId = placeId;
          this.reArrangeIndex();
        }
        var playerData = this.resetPlayerData(null);
        playerData.placeId = placeId;
        playerData.playerInfo = playerInfo;
        playerData.playerInfoId = playerInfo.id;
        var index = this.findFreeIndex(me, placeId);
        this._players[index] = playerData;
        this._placeIdToPlayerData.set(placeId, playerData);
        me && (this._myData = playerData);
        data.callback(me, placeId);
        return index;
      };
      THPlayerDataController.prototype.removeByPlaceId = function(placeId) {
        this.removeByPlayerData(this._placeIdToPlayerData.get(placeId));
      };
      THPlayerDataController.prototype.removeByPlayerIndex = function(playerIndex) {
        this.removeByPlayerData(this.getPlayerDataByPlayerIndex(playerIndex));
      };
      THPlayerDataController.prototype.destroy = function() {
        this._placeIdToPlayerData.clear();
        this._myData = null;
        this._maxPlayer = 0;
        this._players.length = 0;
      };
      THPlayerDataController.prototype.reset = function() {
        var _this = this;
        this.forEachPlayerData(function(playerData) {
          _this.resetPlayerData(playerData);
        });
      };
      THPlayerDataController.prototype.resetPlayerData = function(playerData) {
        if (void 0 === playerData || null === playerData) {
          playerData = {
            placeId: null,
            playerInfo: null,
            playerInfoId: null,
            active: false,
            totalRoundBet: 0,
            highestBet: 0,
            allIn: false,
            roundAction: THCommonTypes_1.PlayerAction.NONE,
            folded: false,
            betByRoundType: new Map()
          };
          return playerData;
        }
        playerData.active = false;
        playerData.totalRoundBet = 0;
        playerData.highestBet = 0;
        playerData.allIn = false;
        playerData.roundAction = THCommonTypes_1.PlayerAction.NONE;
        playerData.folded = false;
        playerData.betByRoundType.clear();
        return playerData;
      };
      THPlayerDataController.prototype.getPlayerDataByPlayerIndex = function(playerIndex) {
        if (playerIndex >= 0 && playerIndex < this._players.length && void 0 !== this._players[playerIndex]) return this._players[playerIndex];
        return null;
      };
      THPlayerDataController.prototype.getPlayerIndexByPlaceId = function(placeId) {
        var playerData = this.getPlayerDataByPlaceId(placeId);
        if (null === playerData) return -1;
        return this._players.indexOf(playerData);
      };
      THPlayerDataController.prototype.getPlayerDataByPlaceId = function(placeId) {
        var playerData = this._placeIdToPlayerData.get(placeId);
        if (void 0 === playerData || null === playerData) return null;
        return playerData;
      };
      THPlayerDataController.prototype.forEachPlayerIndex = function(callback, withEmpty) {
        var _this = this;
        void 0 === withEmpty && (withEmpty = false);
        if (void 0 !== callback && null !== callback) {
          var playerIndexes = this.getAllPlayerIndex();
          playerIndexes.forEach(function(playerIndex) {
            var playerData = _this.getPlayerDataByPlayerIndex(playerIndex);
            (withEmpty || void 0 !== playerData && null !== playerData) && callback(playerIndex);
          });
        }
      };
      THPlayerDataController.prototype.forEachPlayerData = function(callback, withEmpty) {
        var _this = this;
        void 0 === withEmpty && (withEmpty = false);
        if (void 0 !== callback && null !== callback) {
          var playerIndexes = this.getAllPlayerIndex();
          playerIndexes.forEach(function(playerIndex) {
            var playerData = _this.getPlayerDataByPlayerIndex(playerIndex);
            (withEmpty || void 0 !== playerData && null !== playerData) && callback(playerData, playerIndex);
          });
        }
      };
      THPlayerDataController.prototype.isMyPlayerIndex = function(playerIndex) {
        return this._players.indexOf(this.me) === playerIndex;
      };
      THPlayerDataController.prototype.myPlayerIndex = function() {
        return this._players.indexOf(this.me);
      };
      THPlayerDataController.prototype.getAllPlayerIndex = function() {
        var result = [];
        for (var index = 0; index < this._players.length; index++) void 0 !== this._players[index] && null !== this._players[index] && result.push(index);
        return result;
      };
      THPlayerDataController.prototype.moneyByPlayerIndex = function(playerIndex) {
        var playerInfo = this.getPlayerDataByPlayerIndex(playerIndex).playerInfo;
        return playerInfo.balance;
      };
      Object.defineProperty(THPlayerDataController.prototype, "me", {
        get: function() {
          return this._myData;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerDataController.prototype, "isMeIn", {
        get: function() {
          return void 0 !== this._myData && null !== this._myData;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerDataController.prototype, "dealer", {
        get: function() {
          return this._playerIndexDealer;
        },
        set: function(value) {
          this._playerIndexDealer = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerDataController.prototype, "activePlayerCount", {
        get: function() {
          var count = 0;
          this.forEachPlayerData(function(playerData) {
            count++;
          });
          return count;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerDataController.prototype, "hasAnyWithAllIn", {
        get: function() {
          var result = false;
          for (var index = 0; index < this._players.length; index++) void 0 !== this._players[index] && null !== this._players[index] && (result = result || this._players[index].allIn);
          return result;
        },
        enumerable: true,
        configurable: true
      });
      THPlayerDataController.prototype.removeByPlayerData = function(playerData) {
        if (playerData) {
          this._placeIdToPlayerData.delete(playerData.placeId);
          playerData === this._myData && (this._myData = null);
          var index = this._players.indexOf(playerData);
          index >= 0 && index < this._maxPlayer && (this._players[index] = null);
        }
      };
      THPlayerDataController.prototype.findFreeIndex = function(me, placeId) {
        if (me) return this.myMarkPlace();
        return this.calculateIndex(placeId);
      };
      THPlayerDataController.prototype.calculateIndex = function(placeId) {
        return (this._myPlayerIndex - (this._myPlaceId - placeId)) % this._maxPlayer;
      };
      THPlayerDataController.prototype.reArrangeIndex = function() {
        var _this = this;
        var dealerPlaceId = -1;
        var playerData = this.getPlayerDataByPlayerIndex(this._playerIndexDealer);
        playerData && (dealerPlaceId = playerData.placeId);
        this.init(this._maxPlayer);
        var placeIdToPlayerData = this._placeIdToPlayerData;
        this._placeIdToPlayerData = new Map();
        placeIdToPlayerData.forEach(function(playerData, placeId) {
          var playerIndex = _this.calculateIndex(placeId);
          _this._players[playerIndex] = playerData;
          _this._placeIdToPlayerData.set(placeId, playerData);
        });
        -1 !== dealerPlaceId && (this._playerIndexDealer = this.getPlayerIndexByPlaceId(dealerPlaceId));
      };
      THPlayerDataController.prototype.myMarkPlace = function() {
        return this._maxPlayer - 1;
      };
      return THPlayerDataController;
    }();
    exports.default = THPlayerDataController;
    cc._RF.pop();
  }, {
    "../types/THCommonTypes": "THCommonTypes"
  } ],
  THPlayerView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c18cbD//9tCgqZAwbCvS/fL", "THPlayerView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THRadialShadow_1 = require("./THRadialShadow");
    var TextHelper_1 = require("../../../../common/helpers/TextHelper");
    var THCommonTypes_1 = require("../types/THCommonTypes");
    var PrefabLoader_1 = require("../../../../main/Script/component/PrefabLoader");
    var BaseAvatarComponent_1 = require("../../../../main/Script/component/BaseAvatarComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THPlayerView = function(_super) {
      __extends(THPlayerView, _super);
      function THPlayerView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.underPlace = null;
        _this.frameOffNoAlpha = null;
        _this.frameOff = null;
        _this.frameFold = null;
        _this.frameCall = null;
        _this.frameRaise = null;
        _this.border = null;
        _this.arrowSprite = null;
        _this.off = null;
        _this.nameLabel = null;
        _this.moneyLabel = null;
        _this.betTextRight = null;
        _this.betTextLeft = null;
        _this.betTextMy = null;
        _this.place = null;
        _this.timer = null;
        _this.dealerNode = null;
        _this.sitDown = null;
        _this.info = null;
        _this.infoBack = null;
        _this.infoBackColor = null;
        _this.infoBackSize = null;
        _this._processEnd = 0;
        _this._timeLeft = 0;
        _this._totalTime = 0;
        _this._timerActive = false;
        _this._sitDownRequestCallback = null;
        return _this;
      }
      THPlayerView.prototype.start = function() {
        this.dealer = false;
        this.arrow = false;
        if (void 0 !== this.infoBackSize && null !== this.infoBackSize) {
          this.infoBack.clear();
          var width = this.infoBackSize.width;
          var height = this.infoBackSize.height;
          this.infoBack.roundRect(-width / 2, -height / 2, width, height, 10);
          this.infoBack.fillColor = this.infoBackColor;
          this.infoBack.fill();
        }
      };
      THPlayerView.prototype.update = function(dt) {
        if (this._timerActive) {
          this._timeLeft -= dt;
          this.timerUpdate();
        }
      };
      THPlayerView.prototype.serverTimeUpdate = function(currentServerTime) {
        console.log("serverTimeUpdate timeLeft: " + this._timeLeft + " processEnd: " + this._processEnd + " currentServerTime: " + currentServerTime + " after: " + (this._processEnd - currentServerTime));
        this._timeLeft = this._processEnd - currentServerTime;
      };
      THPlayerView.prototype.startTimer = function(processEnd, currentServerTime, totalTime) {
        this._timerActive = true;
        this._totalTime = totalTime;
        this._processEnd = processEnd;
        this.serverTimeUpdate(currentServerTime);
      };
      THPlayerView.prototype.resetTimer = function() {
        this._timerActive = false;
        this._totalTime = 1;
        this._processEnd = 1;
        this.serverTimeUpdate(1);
        this.timerUpdate();
      };
      THPlayerView.prototype.stopTimer = function() {
        this._timerActive = false;
      };
      THPlayerView.prototype.updateActionStatus = function(status, active, text) {
        void 0 === text && (text = "");
        var border = false;
        var underPlace = false;
        var offSprite = false;
        var info = "";
        if (active && status !== THCommonTypes_1.PlayerAction.FOLD) status !== THCommonTypes_1.PlayerAction.NONE ? border = true : status === THCommonTypes_1.PlayerAction.NONE && (underPlace = true); else {
          offSprite = true;
          status === THCommonTypes_1.PlayerAction.FOLD && (border = true);
        }
        if (this.border) {
          info = text;
          if (border) {
            this.border.node.active = true;
            status === THCommonTypes_1.PlayerAction.CALL ? this.border.spriteFrame = this.frameCall : status === THCommonTypes_1.PlayerAction.CHECK ? this.border.spriteFrame = this.frameCall : status === THCommonTypes_1.PlayerAction.FOLD ? this.border.spriteFrame = this.frameFold : status === THCommonTypes_1.PlayerAction.RAISE && (this.border.spriteFrame = this.frameRaise);
          } else this.border.node.active = false;
        }
        this.underPlace && (this.underPlace.node.active = underPlace);
        this.off && (this.off.node.active = offSprite);
        this.info && (this.info.string = info);
        void 0 !== this.infoBack && null !== this.infoBack && (this.infoBack.node.active = void 0 !== text && null !== text && "" !== text);
      };
      THPlayerView.prototype.setBet = function(value, left, my) {
        var result = value > 0 ? TextHelper_1.default.coinsShortcut(value, 1) : "";
        if (this.betTextLeft) {
          this.betTextLeft.string = result;
          this.betTextLeft.node.active = left && !my;
        }
        if (this.betTextRight) {
          this.betTextRight.string = result;
          this.betTextRight.node.active = !left && !my;
        }
        if (this.betTextMy) {
          this.betTextMy.string = result;
          this.betTextMy.node.active = my;
        }
      };
      THPlayerView.prototype.populate = function(value) {
        this.updateActionStatus(THCommonTypes_1.PlayerAction.NONE, value);
        this.nameLabel.node.active = value;
        this.moneyLabel.node.active = value;
        this.betTextRight.node.active = value;
        this.betTextLeft.node.active = value;
        this.betTextMy.node.active = value;
        this.place.node.active = value;
        this.dealerNode.active = value;
        this.underPlace.node.active = value;
        this.border.node.active = value;
        this.arrow = !value;
        this.sitDown.interactable = false;
      };
      THPlayerView.prototype.onSitDownRequest = function() {
        void 0 !== this._sitDownRequestCallback && null !== this._sitDownRequestCallback && this._sitDownRequestCallback();
      };
      Object.defineProperty(THPlayerView.prototype, "sitDownRequestCallback", {
        set: function(callback) {
          this._sitDownRequestCallback = callback;
        },
        enumerable: true,
        configurable: true
      });
      THPlayerView.prototype.timerUpdate = function() {
        this._timeLeft <= 0 && this.stopTimer();
        var percent = this._timeLeft / this._totalTime;
        percent = Math.max(0, percent);
        percent = Math.min(1, percent);
        this.timer.percent = 1 - percent;
      };
      Object.defineProperty(THPlayerView.prototype, "avatarByAvatarId", {
        set: function(avatarId) {
          void 0 != avatarId && null != avatarId && this.place.getContent(BaseAvatarComponent_1.default).setup({
            size: this.place.node.width,
            useRect: false,
            avatarId: avatarId,
            useClickOnAvatar: false,
            useRoundCorner: true
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerView.prototype, "name", {
        set: function(value) {
          this.nameLabel && (this.nameLabel.string = TextHelper_1.default.textShorterer(value, 10));
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerView.prototype, "money", {
        set: function(value) {
          this.moneyLabel && (this.moneyLabel.string = TextHelper_1.default.coinsShortcut(value, 1));
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerView.prototype, "arrow", {
        set: function(value) {
          this.arrowSprite && (this.arrowSprite.node.active = value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerView.prototype, "dealer", {
        set: function(value) {
          if (value) {
            var ctx = this.dealerNode.getComponent(cc.Graphics);
            if (!ctx) {
              this.dealerNode.addComponent(cc.Graphics);
              ctx = this.dealerNode.getComponent(cc.Graphics);
            }
            var radius = this.dealerNode.width / 2;
            ctx.clear();
            ctx.circle(0, 0, radius);
            ctx.fillColor = new cc.Color(42, 42, 42, 255);
            ctx.fill();
          } else {
            var ctx = this.dealerNode.getComponent(cc.Graphics);
            ctx && ctx.clear();
          }
          this.dealerNode.active = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THPlayerView.prototype, "timerActive", {
        get: function() {
          return this._timerActive;
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Sprite) ], THPlayerView.prototype, "underPlace", void 0);
      __decorate([ property(cc.SpriteFrame) ], THPlayerView.prototype, "frameOffNoAlpha", void 0);
      __decorate([ property(cc.SpriteFrame) ], THPlayerView.prototype, "frameOff", void 0);
      __decorate([ property(cc.SpriteFrame) ], THPlayerView.prototype, "frameFold", void 0);
      __decorate([ property(cc.SpriteFrame) ], THPlayerView.prototype, "frameCall", void 0);
      __decorate([ property(cc.SpriteFrame) ], THPlayerView.prototype, "frameRaise", void 0);
      __decorate([ property(cc.Sprite) ], THPlayerView.prototype, "border", void 0);
      __decorate([ property(cc.Sprite) ], THPlayerView.prototype, "arrowSprite", void 0);
      __decorate([ property(cc.Sprite) ], THPlayerView.prototype, "off", void 0);
      __decorate([ property(cc.Label) ], THPlayerView.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Label) ], THPlayerView.prototype, "moneyLabel", void 0);
      __decorate([ property(cc.Label) ], THPlayerView.prototype, "betTextRight", void 0);
      __decorate([ property(cc.Label) ], THPlayerView.prototype, "betTextLeft", void 0);
      __decorate([ property(cc.Label) ], THPlayerView.prototype, "betTextMy", void 0);
      __decorate([ property(PrefabLoader_1.default) ], THPlayerView.prototype, "place", void 0);
      __decorate([ property(THRadialShadow_1.default) ], THPlayerView.prototype, "timer", void 0);
      __decorate([ property(cc.Node) ], THPlayerView.prototype, "dealerNode", void 0);
      __decorate([ property(cc.Button) ], THPlayerView.prototype, "sitDown", void 0);
      __decorate([ property(cc.Label) ], THPlayerView.prototype, "info", void 0);
      __decorate([ property(cc.Graphics) ], THPlayerView.prototype, "infoBack", void 0);
      __decorate([ property(cc.Color) ], THPlayerView.prototype, "infoBackColor", void 0);
      __decorate([ property(cc.Size) ], THPlayerView.prototype, "infoBackSize", void 0);
      THPlayerView = __decorate([ ccclass ], THPlayerView);
      return THPlayerView;
    }(cc.Component);
    exports.default = THPlayerView;
    cc._RF.pop();
  }, {
    "../../../../common/helpers/TextHelper": "TextHelper",
    "../../../../main/Script/component/BaseAvatarComponent": "BaseAvatarComponent",
    "../../../../main/Script/component/PrefabLoader": "PrefabLoader",
    "../types/THCommonTypes": "THCommonTypes",
    "./THRadialShadow": "THRadialShadow"
  } ],
  THRadialShadow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f33aeLAnUFDrrEPbxsz4grC", "THRadialShadow");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var THRadialShadow = function(_super) {
      __extends(THRadialShadow, _super);
      function THRadialShadow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.place = null;
        _this.radius = 100;
        _this.color = new cc.Color(0, 0, 0, Math.floor(127.5));
        _this._color = null;
        _this._percent = -1;
        _this.reDraw = function(angleDegree) {
          if (null == _this._color) return;
          var place = _this.place;
          var ctx = place.getComponent(cc.Graphics);
          if (angleDegree >= 360) {
            ctx && ctx.clear();
            return;
          }
          angleDegree %= 360;
          ctx || place.addComponent(cc.Graphics);
          ctx = place.getComponent(cc.Graphics);
          var radius = _this.radius;
          ctx.clear();
          ctx.moveTo(0, 0);
          var v = new cc.Vec2(0, radius);
          v.rotateSelf(Math.PI / 180 * -angleDegree);
          ctx.lineTo(v.x, v.y);
          angleDegree < 45 && ctx.lineTo(radius, radius);
          angleDegree < 135 && ctx.lineTo(radius, -radius);
          angleDegree < 225 && ctx.lineTo(-radius, -radius);
          angleDegree < 315 && ctx.lineTo(-radius, radius);
          angleDegree < 360 && ctx.lineTo(0, radius);
          ctx.lineTo(0, 0);
          ctx.fillColor = _this._color;
          ctx.fill();
        };
        return _this;
      }
      THRadialShadow.prototype.init = function() {};
      THRadialShadow.prototype.start = function() {
        this.node.width = this.radius;
        this.node.height = this.radius;
        this._color = this.color;
        this._percent > 0 && (this.percent = this._percent);
      };
      THRadialShadow.prototype.setColor = function(color) {
        this._color = color;
        this.percent = this._percent;
      };
      Object.defineProperty(THRadialShadow.prototype, "percent", {
        set: function(value) {
          this._percent = value;
          value = Math.max(value, 0);
          value = Math.min(value, 1);
          this.reDraw(360 * value);
        },
        enumerable: true,
        configurable: true
      });
      __decorate([ property(cc.Node) ], THRadialShadow.prototype, "place", void 0);
      __decorate([ property ], THRadialShadow.prototype, "radius", void 0);
      __decorate([ property ], THRadialShadow.prototype, "color", void 0);
      THRadialShadow = __decorate([ ccclass ], THRadialShadow);
      return THRadialShadow;
    }(cc.Component);
    exports.default = THRadialShadow;
    cc._RF.pop();
  }, {} ],
  THServerLogicAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0325ctD41lOs4YSDa0sdkya", "THServerLogicAdapter");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Card_1 = require("../../../../common/core/cards/Card");
    var ServerLogicAdapterBase_1 = require("../../../../common/server/ServerLogicAdapterBase");
    var THAction_1 = require("./THAction");
    var Config_1 = require("../../../../common/config/Config");
    var THServerLogicAdapter = function(_super) {
      __extends(THServerLogicAdapter, _super);
      function THServerLogicAdapter(serverConnector, tableId) {
        var _this = _super.call(this, serverConnector, Config_1.GameCode.TEXAS_HOLDEM, tableId) || this;
        _this._places = {};
        _this._currentPlayerPlace = void 0;
        return _this;
      }
      THServerLogicAdapter.prototype.start = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.start.call(this) ];

             case 1:
              _a.sent();
              return [ 4, this.dispatchAction({
                type: THAction_1.THActionType.TABLE_CONFIG_UPDATE,
                data: {
                  bets: this.tableConfig.bet.values
                }
              }) ];

             case 2:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      THServerLogicAdapter.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, _super.prototype.prepare.call(this) ];

             case 1:
              _a.sent();
              this.registerViewActionHandler(THAction_1.THActionType.SIT_DOWN, function(action) {
                _this.sendMessage(OpCode.SIT_DOWN, {});
              });
              this.registerViewActionHandler(THAction_1.THActionType.STAND_UP, function(action) {
                _this.sendMessage(OpCode.STAND_UP, {});
              });
              this.registerViewActionHandler(THAction_1.THActionType.MAKE_BET, function(action) {
                _this.sendMessage(OpCode.MAKE_BET, {
                  totalBet: action.data.totalBet
                });
              });
              this.registerViewActionHandler(THAction_1.THActionType.FOLD, function(action) {
                _this.sendMessage(OpCode.FOLD, {});
              });
              this.registerViewActionHandler(THAction_1.THActionType.CHECK, function(action) {
                _this.sendMessage(OpCode.CHECK, {});
              });
              this.registerServerMessageHandler(OpCode.UPDATE_PLACES, function(data) {
                var places = data.places;
                var currentPlayerId = _this.getCurrentPlayerInfo().id;
                places = places.sort(function(a, b) {
                  if (null != a.player && a.player.id === currentPlayerId) return -1;
                  if (null != b.player && b.player.id === currentPlayerId) return 1;
                  return a.placeId - b.placeId;
                });
                places.forEach(function(placeInfo) {
                  var currentPlaceInfo = placeInfo.placeId in _this._places ? _this._places[placeInfo.placeId] : {
                    placeId: placeInfo.placeId
                  };
                  _this._places[currentPlaceInfo.placeId] = currentPlaceInfo;
                  if (null != currentPlaceInfo.player && null == placeInfo.player) {
                    currentPlaceInfo.player = null;
                    _this.dispatchAction({
                      type: THAction_1.THActionType.DROP_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId
                      }
                    });
                  } else if (null == currentPlaceInfo.player && null != placeInfo.player) {
                    currentPlaceInfo.player = placeInfo.player;
                    currentPlaceInfo.player.id === currentPlayerId && (_this._currentPlayerPlace = currentPlaceInfo);
                    _this.dispatchAction({
                      type: THAction_1.THActionType.REGISTER_PLACE,
                      data: {
                        placeId: currentPlaceInfo.placeId,
                        playerInfo: currentPlaceInfo.player
                      }
                    });
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.PREPARE_FOR_ROUND, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.PREPARE_FOR_ROUND,
                  data: {
                    placesId: data.places.map(function(value) {
                      return value.placeId;
                    }),
                    dealerPlaceId: data.dealerPlaceId
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.UPDATE_ROUND_STATE, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.TABLE_STATUS,
                  data: {
                    placesId: data.places.map(function(value) {
                      return value.placeId;
                    }),
                    dealerPlaceId: data.dealerPlaceId,
                    activePlaceId: data.activePlaceId,
                    playingPlaceIds: data.playingPlaceIds,
                    roundType: data.roundType,
                    tableCards: Array.isArray(data.tableCards) && data.tableCards.length > 0 ? data.tableCards.map(function(index) {
                      return new Card_1.Card(index);
                    }) : [],
                    tableBank: data.tableBank,
                    circlePlaceBets: data.circlePlaceBets,
                    circleBank: data.circleBank,
                    timeLeft: data.timeLeft,
                    time: data.time
                  }
                });
              });
              this.registerServerMessageHandler(OpCode.COLLECT_ANTE, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.COLLECT_ANTE,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.COLLECT_BLINDS, function(data) {
                data.places.forEach(function(placeId, index) {
                  _this.changePlayerBalance(placeId, -data.blinds[index]);
                });
                _this.dispatchAction({
                  type: THAction_1.THActionType.COLLECT_BLINDS,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.DEAL_PLAYER_CARDS, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, this.dispatchAction({
                        type: THAction_1.THActionType.DEAL_PLAYER_CARDS,
                        data: {
                          cards: data.cards.map(function(index) {
                            return new Card_1.Card(index);
                          })
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.DEAL_TABLE_CARDS, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, this.dispatchAction({
                        type: THAction_1.THActionType.DEAL_TABLE_CARDS,
                        data: {
                          cards: data.cards.map(function(index) {
                            return new Card_1.Card(index);
                          }),
                          roundType: data.roundType
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.WAITING_BET, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.WAITING_BET,
                  data: __assign({}, data, {
                    betStep: _this.tableConfig.bet.limits.step,
                    isCheckAvailable: 0 === data.highestBet
                  })
                });
              });
              this.registerServerMessageHandler(OpCode.MAKE_BET, function(data) {
                _this.changePlayerBalance(data.placeId, -data.currentBet);
                _this.dispatchAction({
                  type: THAction_1.THActionType.MAKE_BET,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.FOLD, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.FOLD,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.CHECK, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.CHECK,
                  data: data
                });
              });
              this.registerServerMessageHandler(OpCode.GAME_OVER, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, this.dispatchAction({
                        type: THAction_1.THActionType.GAME_OVER,
                        data: {}
                      }) ];

                     case 1:
                      _a.sent();
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.ROUND_COMPLETE, function(data) {
                return __awaiter(_this, void 0, void 0, function() {
                  var _this = this;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, this.dispatchAction({
                        type: THAction_1.THActionType.ROUND_COMPLETE,
                        data: {
                          rewards: data.rewards.map(function(reward) {
                            _this.changePlayerBalance(reward.placeId, reward.coins);
                            return data.rewards.length > 1 ? {
                              placeId: reward.placeId,
                              combinationName: reward.combinationName,
                              usedCards: reward.usedCards,
                              coins: reward.coins,
                              cards: reward.cards.map(function(index) {
                                return new Card_1.Card(index);
                              })
                            } : {
                              placeId: reward.placeId,
                              coins: reward.coins
                            };
                          })
                        }
                      }) ];

                     case 1:
                      _a.sent();
                      this.sendMessage(OpCode.READY_FOR_NEXT_ACTION, {});
                      return [ 2 ];
                    }
                  });
                });
              });
              this.registerServerMessageHandler(OpCode.SIT_DOWN, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.SIT_DOWN,
                  data: {}
                });
              });
              this.registerServerMessageHandler(OpCode.STAND_UP, function(data) {
                _this.dispatchAction({
                  type: THAction_1.THActionType.STAND_UP,
                  data: {}
                });
              });
              return [ 2 ];
            }
          });
        });
      };
      THServerLogicAdapter.prototype.changePlayerBalance = function(placeId, amount) {
        var placeInfo = this._places[placeId];
        placeInfo.player.balance += amount;
        placeInfo.player.id === this.getCurrentPlayerInfo().id && this.changeCurrentPlayerBalance(placeInfo.player.balance);
      };
      return THServerLogicAdapter;
    }(ServerLogicAdapterBase_1.ServerLogicAdapterBase);
    exports.THServerLogicAdapter = THServerLogicAdapter;
    var RoundType;
    (function(RoundType) {
      RoundType[RoundType["UNKNOWN"] = 100] = "UNKNOWN";
      RoundType[RoundType["PRE_FLOP"] = 0] = "PRE_FLOP";
      RoundType[RoundType["FLOP"] = 1] = "FLOP";
      RoundType[RoundType["TURN"] = 2] = "TURN";
      RoundType[RoundType["RIVER"] = 3] = "RIVER";
    })(RoundType = exports.RoundType || (exports.RoundType = {}));
    var OpCode;
    (function(OpCode) {
      OpCode[OpCode["UPDATE_PLACES"] = 1] = "UPDATE_PLACES";
      OpCode[OpCode["PREPARE_FOR_ROUND"] = 2] = "PREPARE_FOR_ROUND";
      OpCode[OpCode["ROUND_START"] = 3] = "ROUND_START";
      OpCode[OpCode["ROUND_COMPLETE"] = 4] = "ROUND_COMPLETE";
      OpCode[OpCode["UPDATE_ROUND_STATE"] = 5] = "UPDATE_ROUND_STATE";
      OpCode[OpCode["GAME_OVER"] = 6] = "GAME_OVER";
      OpCode[OpCode["READY_FOR_NEXT_ACTION"] = 7] = "READY_FOR_NEXT_ACTION";
      OpCode[OpCode["COLLECT_ANTE"] = 11] = "COLLECT_ANTE";
      OpCode[OpCode["COLLECT_BLINDS"] = 12] = "COLLECT_BLINDS";
      OpCode[OpCode["DEAL_PLAYER_CARDS"] = 13] = "DEAL_PLAYER_CARDS";
      OpCode[OpCode["DEAL_TABLE_CARDS"] = 14] = "DEAL_TABLE_CARDS";
      OpCode[OpCode["WAITING_BET"] = 15] = "WAITING_BET";
      OpCode[OpCode["MAKE_BET"] = 16] = "MAKE_BET";
      OpCode[OpCode["FOLD"] = 17] = "FOLD";
      OpCode[OpCode["CHECK"] = 18] = "CHECK";
      OpCode[OpCode["STAND_UP"] = 19] = "STAND_UP";
      OpCode[OpCode["SIT_DOWN"] = 20] = "SIT_DOWN";
    })(OpCode = exports.OpCode || (exports.OpCode = {}));
    cc._RF.pop();
  }, {
    "../../../../common/config/Config": "Config",
    "../../../../common/core/cards/Card": "Card",
    "../../../../common/server/ServerLogicAdapterBase": "ServerLogicAdapterBase",
    "./THAction": "THAction"
  } ],
  THTableConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dcb80tE3MhACJqRNNqOUBl8", "THTableConfig");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var THTableConfig = function(_super) {
      __extends(THTableConfig, _super);
      function THTableConfig() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bets = [ 1, 2, 5, 10, 25 ];
        return _this;
      }
      Object.defineProperty(THTableConfig.prototype, "maxThrowChips", {
        get: function() {
          return 5;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THTableConfig.prototype, "maxPlayerChips", {
        get: function() {
          return 3;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THTableConfig.prototype, "minTableBet", {
        get: function() {
          return this.bets[0];
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(THTableConfig.prototype, "maxTableBet", {
        get: function() {
          return this.bets[this.bets.length - 1];
        },
        enumerable: true,
        configurable: true
      });
      return THTableConfig;
    }(cc.Component);
    exports.THTableConfig = THTableConfig;
    cc._RF.pop();
  }, {} ],
  THTexts: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20ba6SbNGNLwLA9ibqtH2RG", "THTexts");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.THTexts = {
      call: {
        en: "Call"
      },
      check: {
        en: "Check"
      },
      fold: {
        en: "Fold"
      },
      raise: {
        en: "Raise"
      },
      all_in: {
        en: "All-in"
      },
      exit_to_lobby: {
        en: "EXIT TO LOBBY"
      },
      stand_up: {
        en: "STAND UP"
      },
      help: {
        en: "HELP"
      },
      confirm: {
        en: "Confirm"
      },
      bet: {
        en: "Bet"
      }
    };
    cc._RF.pop();
  }, {} ],
  THViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "504e8cvVHFHHbulkGMXgJvk", "THViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ViewAdapterBase_1 = require("../../../../common/core/ViewAdapterBase");
    var THViewAdapterBase = function(_super) {
      __extends(THViewAdapterBase, _super);
      function THViewAdapterBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return THViewAdapterBase;
    }(ViewAdapterBase_1.ViewAdapterBase);
    exports.THViewAdapterBase = THViewAdapterBase;
    cc._RF.pop();
  }, {
    "../../../../common/core/ViewAdapterBase": "ViewAdapterBase"
  } ],
  TableGameChipHolder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ed59AWqThHAJGQnIr6ixy5", "TableGameChipHolder");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../../../common/core/Logger");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TableGameChipHolder = function(_super) {
      __extends(TableGameChipHolder, _super);
      function TableGameChipHolder() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._stagedItems = [];
        _this._totalValue = 0;
        _this._loger = Logger_1.default.getLogger(_this);
        _this._actions = {};
        _this._reserved = [];
        _this._doNotAdd = [];
        _this._maxChipsView = 1;
        return _this;
      }
      TableGameChipHolder.prototype.init = function(config) {
        this._config = config;
        this.setup();
      };
      TableGameChipHolder.prototype.setup = function() {
        this._pool = new cc.NodePool();
        this._stagedItems = [];
        var count = Math.round(this._config.maxChipsCount / 3);
        for (var i = 0; i < count; i++) this._pool.put(cc.instantiate(this._config.prefab));
        var setupedChip = cc.instantiate(this._config.prefab);
        var statesFromView = setupedChip.getComponent("BaseGameChip").stateCounts();
        this._maxChipsView = this._config.chipValues.length > statesFromView ? statesFromView : this._config.chipValues.length;
      };
      TableGameChipHolder.prototype.check = function(value) {
        if (value != this._totalValue) {
          var reservedValue = 0;
          for (var i = 0; i < this._reserved.length; i++) reservedValue += this._config.chipValues[this._reserved[i].currentState()];
          this._totalValue + reservedValue != value && this._loger.log("!!!!!! set different value server: " + value + " client: " + this._totalValue + " reserved: " + reservedValue);
        }
      };
      TableGameChipHolder.prototype.add = function(value, needToSplit) {
        void 0 === needToSplit && (needToSplit = false);
        this._totalValue = this._totalValue + value;
        var bets = this._config.chipValues;
        var maxCount = Math.floor(value / bets[0]);
        var items = [];
        var third = needToSplit ? Math.floor(maxCount / 3) : 0;
        third > 0 && (items = items.concat(this.getItemsForDraw(third * bets[0])));
        maxCount -= third;
        items = items.concat(this.getItemsForDraw(maxCount * bets[0]));
        for (var i = 0; i < items.length; i++) this.addToStageContainer(items[i]);
      };
      TableGameChipHolder.prototype.addChipCopy = function(value, globalPos) {
        void 0 === globalPos && (globalPos = null);
        var index = this._reserved.indexOf(value);
        index > -1 ? this._reserved.splice(index, 1) : this._loger.log("reserved item not found");
        index = this._doNotAdd.indexOf(value);
        if (index < 0) {
          this._totalValue = this._totalValue + this._config.chipValues[value.currentState()];
          var newChip = this.getFreeChip();
          newChip.getComponent("BaseGameChip").setStateIndex(value.currentState());
          null != globalPos && newChip.setPosition(this.node.convertToNodeSpace(globalPos));
          this.addToStageContainer(newChip, null === globalPos);
        } else this._doNotAdd.splice(index, 1);
        this._loger.log(this._doNotAdd.toString() + " " + this._reserved.toString());
      };
      TableGameChipHolder.prototype.getItemsForDraw = function(value) {
        var currentValueForDraw = value;
        var items = [];
        var startIndex = 0;
        var endIndex = startIndex + this._maxChipsView - 1;
        var currentCount;
        var bets = this._config.chipValues;
        for (var i = endIndex; i >= startIndex; i--) {
          currentCount = Math.floor(currentValueForDraw / bets[i]);
          currentValueForDraw -= currentCount * bets[i];
          for (var j = 0; j < currentCount; j++) {
            var node = this.getFreeChip();
            node.getComponent("BaseGameChip").setStateIndex(i);
            items.push(node);
          }
        }
        return items;
      };
      TableGameChipHolder.prototype.arangeVisualChips = function() {
        if (this._stagedItems.length > 0) {
          var chipWidth = this._stagedItems[0].width;
          var chipOffset = .15 * this._stagedItems[0].height;
          var startPos = -Math.round(this._stagedItems.length / this._config.sizeValue) * chipWidth / 2;
          for (var i = 0; i < this._stagedItems.length; i++) {
            var x = startPos + Math.floor(i / this._config.sizeValue) * chipWidth;
            var y = i % this._config.sizeValue * chipOffset;
            this._stagedItems[i].setPosition(x, y);
          }
        }
      };
      TableGameChipHolder.prototype.getNewPositionForChip = function() {
        var x = 0;
        var y = 0;
        if (this._config.viewType === ChipHolderViewType.RANDOM) {
          x = 2 * Math.random() * this._config.sizeValue - this._config.sizeValue;
          y = 2 * Math.random() * this._config.sizeValue - this._config.sizeValue;
        }
        return this.node.convertToWorldSpace(new cc.Vec2(x, y));
      };
      TableGameChipHolder.prototype.addToStageContainer = function(value, needSetPosition) {
        void 0 === needSetPosition && (needSetPosition = true);
        this._stagedItems.push(value);
        this._stagedItems = this._stagedItems.sort(function(a, b) {
          return b.getComponent("BaseGameChip").currentState() - a.getComponent("BaseGameChip").currentState();
        });
        switch (this._config.viewType) {
         case ChipHolderViewType.COLUMN:
          this.node.addChild(value);
          for (var i = 0; i < this._stagedItems.length; i++) this._stagedItems[i].zIndex = i;
          this.arangeVisualChips();
          break;

         case ChipHolderViewType.RANDOM:
          if (needSetPosition) {
            var x = 2 * Math.random() * this._config.sizeValue - this._config.sizeValue;
            var y = 2 * Math.random() * this._config.sizeValue - this._config.sizeValue;
            value.setPosition(x, y);
          }
          this.node.addChild(value);
        }
      };
      TableGameChipHolder.prototype.removeFromStage = function(value) {
        var index = this._stagedItems.indexOf(value);
        index > -1 && this._stagedItems.splice(index, 1);
        this._pool.put(value);
      };
      TableGameChipHolder.prototype.removeByValue = function(value) {
        if (value < this._totalValue) {
          var items = this.getViewForValue(value);
          var forRemove = [];
          for (var i = 0; i < items.length; i++) {
            var index = this._stagedItems.indexOf(items[i]);
            if (index > -1) {
              this.remove(this._stagedItems[i]);
              forRemove.push(index);
            }
          }
          items = [];
          for (var i = 0; i < this._stagedItems.length; i++) forRemove.indexOf(i) < 0 && items.push(this._stagedItems[i]);
          this._stagedItems = items;
        } else while (this._stagedItems.length > 0) this.remove(this._stagedItems.shift());
      };
      TableGameChipHolder.prototype.getViewForValue = function(value) {
        var result = [];
        var left = value;
        for (var i = this._stagedItems.length - 1; i >= 0; i--) {
          var chipValue = this._config.chipValues[this._stagedItems[i].getComponent("BaseGameChip").currentState()];
          if (chipValue < left) {
            left -= chipValue;
            result.push(this._stagedItems[i]);
          }
        }
        return result;
      };
      TableGameChipHolder.prototype.remove = function(value) {
        this._stagedItems.indexOf(value) > -1 && this.removeFromStage(value);
      };
      TableGameChipHolder.prototype.getFreeChip = function() {
        var result;
        result = this._pool.get();
        if (!result) if (this._stagedItems.length < this._config.maxChipsCount) result = cc.instantiate(this._config.prefab); else {
          result = this._stagedItems.shift();
          result.parent.removeChild(result);
        }
        result.opacity = 255;
        return result;
      };
      TableGameChipHolder.prototype.clear = function() {
        this._pool.clear();
        this._stagedItems = [];
        this._reserved = [];
        this._doNotAdd = [];
      };
      TableGameChipHolder.prototype.reset = function() {
        while (this._stagedItems.length > 0) this._pool.put(this._stagedItems.shift());
        this._totalValue = 0;
      };
      TableGameChipHolder.prototype.moveToOther = function(value, target, fade) {
        var _this = this;
        void 0 === fade && (fade = ChipFadeType.NONE);
        var items = [];
        if (value < this._totalValue) {
          items = this.getViewForValue(value);
          this._totalValue = this._totalValue - value;
        } else {
          if (value > this._totalValue) {
            var calculated = value;
            var reservedIndex = 0;
            while (calculated > this._totalValue && reservedIndex < this._reserved.length) {
              calculated -= this._config.chipValues[this._reserved[reservedIndex].currentState()];
              this._doNotAdd.push(this._reserved[reservedIndex]);
              reservedIndex++;
            }
            calculated < this._totalValue && this._loger.log("move more than we have" + calculated + " " + this._totalValue);
          }
          for (var i = 0; i < this._stagedItems.length; i++) items.push(this._stagedItems[i]);
          this._totalValue = 0;
        }
        var ind = 0;
        var _loop_1 = function() {
          var node = items.shift();
          var position = target.getNewPositionForChip();
          var index = this_1._stagedItems.indexOf(node);
          index > -1 && this_1._stagedItems.splice(index, 1);
          var calBack = function() {
            node.stopAllActions();
            target.addChipCopy(node.getComponent("BaseGameChip"), position);
            _this.removeFromStage(node);
            delete _this._actions[ind];
          };
          var fadeValue = void 0;
          switch (fade) {
           case ChipFadeType.NONE:
            fadeValue = node.opacity;
            break;

           case ChipFadeType.IN:
            fadeValue = 255;
            break;

           case ChipFadeType.OUT:
            fadeValue = 0;
          }
          target.reserveValue(node.getComponent("BaseGameChip"));
          var action = node.runAction(cc.sequence(cc.delayTime(.02 * ind), cc.moveTo(.5, this_1.node.convertToNodeSpace(position)), cc.fadeTo(.3, fadeValue), cc.callFunc(calBack)));
          this_1._actions[ind] = {
            action: action,
            callFunc: calBack
          };
          ind++;
        };
        var this_1 = this;
        while (items.length > 0) _loop_1();
      };
      TableGameChipHolder.prototype.reserveValue = function(value) {
        this._reserved.push(value);
        this._loger.log("reserve " + value.name);
      };
      TableGameChipHolder.prototype.moveToPoint = function(value, globalPos, fade) {
        var _this = this;
        void 0 === fade && (fade = ChipFadeType.NONE);
        var items = [];
        if (value < this._totalValue) {
          items = this.getViewForValue(value);
          this._totalValue = this._totalValue - value;
        } else {
          if (value > this._totalValue) {
            var calculated = value;
            var reservedIndex = 0;
            while (calculated > this._totalValue && reservedIndex < this._reserved.length) {
              calculated += this._config.chipValues[this._reserved[reservedIndex].currentState()];
              this._doNotAdd.push(this._reserved[reservedIndex]);
              reservedIndex++;
            }
            calculated < this._totalValue && this._loger.log("move more than we have" + calculated + " " + this._totalValue);
          }
          for (var i = 0; i < this._stagedItems.length; i++) items.push(this._stagedItems[i]);
          this._totalValue = 0;
        }
        var ind = 0;
        var _loop_2 = function() {
          var node = items.shift();
          var position = globalPos;
          var index = this_2._stagedItems.indexOf(node);
          index > -1 && this_2._stagedItems.splice(index, 1);
          var calBack = function() {
            _this.removeFromStage(node);
            delete _this._actions[ind];
          };
          var fadeValue = void 0;
          switch (fade) {
           case ChipFadeType.NONE:
            fadeValue = node.opacity;
            break;

           case ChipFadeType.IN:
            fadeValue = 255;
            break;

           case ChipFadeType.OUT:
            fadeValue = 0;
          }
          var action = node.runAction(cc.sequence(cc.delayTime(.05 * ind), cc.moveTo(.5, this_2.node.convertToNodeSpace(position)), cc.fadeTo(.4, fadeValue), cc.callFunc(calBack)));
          this_2._actions[ind] = {
            node: node,
            action: action,
            callFunc: calBack
          };
          ind++;
        };
        var this_2 = this;
        while (items.length > 0) _loop_2();
      };
      TableGameChipHolder.prototype.stopAnimations = function() {
        var keys = Object.keys(this._actions);
        for (var i = 0; i < keys.length; i++) if (this._actions[keys[i]]["node"]) {
          this._actions[keys[i]]["node"].stopAction(this._actions[keys[i]]["action"]);
          this._actions[keys[i]]["callFunc"].call(this);
        }
        this._actions = {};
      };
      TableGameChipHolder = __decorate([ ccclass ], TableGameChipHolder);
      return TableGameChipHolder;
    }(cc.Component);
    exports.TableGameChipHolder = TableGameChipHolder;
    var ChipHolderViewType;
    (function(ChipHolderViewType) {
      ChipHolderViewType[ChipHolderViewType["RANDOM"] = 0] = "RANDOM";
      ChipHolderViewType[ChipHolderViewType["COLUMN"] = 1] = "COLUMN";
    })(ChipHolderViewType = exports.ChipHolderViewType || (exports.ChipHolderViewType = {}));
    var ChipFadeType;
    (function(ChipFadeType) {
      ChipFadeType[ChipFadeType["NONE"] = 0] = "NONE";
      ChipFadeType[ChipFadeType["IN"] = 1] = "IN";
      ChipFadeType[ChipFadeType["OUT"] = 2] = "OUT";
    })(ChipFadeType = exports.ChipFadeType || (exports.ChipFadeType = {}));
    cc._RF.pop();
  }, {
    "../../../common/core/Logger": "Logger"
  } ],
  TextHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c1364h0kz1Bt5qPgyfKmWAT", "TextHelper");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var textHelper = {
      coinsShortcut: function(n, d) {
        var rangeArr = [ 1e3, 1e6, 1e9, 1e12, 1e15, 1e18 ];
        if (n >= rangeArr[0] && n < rangeArr[1]) return (n / rangeArr[0]).toFixed(d) + " KMGTPE"[1];
        if (n >= rangeArr[1] && n < rangeArr[2]) return (n / rangeArr[1]).toFixed(d) + " KMGTPE"[2];
        if (n >= rangeArr[2] && n < rangeArr[3]) return (n / rangeArr[2]).toFixed(d) + " KMGTPE"[3];
        if (n >= rangeArr[3] && n < rangeArr[4]) return (n / rangeArr[3]).toFixed(d) + " KMGTPE"[4];
        if (n >= rangeArr[4] && n < rangeArr[5]) return (n / rangeArr[4]).toFixed(d) + " KMGTPE"[5];
        if (n >= rangeArr[5]) return (n / rangeArr[5]).toFixed(d) + " KMGTPE"[6];
        return n.toFixed(0);
      },
      coinsShortcutOptional: function(n, d) {
        var x = ("" + n).length;
        var p = Math.pow;
        d = p(10, d);
        x -= x % 3;
        return Math.round(n * d / p(10, x)) / d + " KMGTPE"[x / 3];
      },
      textShorterer: function(text, maxLength) {
        return text.substring(0, maxLength) + "...";
      }
    };
    exports.default = textHelper;
    cc._RF.pop();
  }, {} ],
  ToggleContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce66bGG1z9LAbfwIVXv1Iy6", "ToggleContainer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ToggleContainer = function(_super) {
      __extends(ToggleContainer, _super);
      function ToggleContainer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.panels = [];
        return _this;
      }
      ToggleContainer.prototype.start = function() {
        var _this = this;
        console.log(this.toggleItems);
        this.toggleItems.forEach(function(item) {
          item.node.on("toggle", _this.onItemToggle, _this);
        });
      };
      ToggleContainer.prototype.onItemToggle = function(data) {
        var tabIndex = this.toggleItems.indexOf(data);
        this.panels.forEach(function(item, index) {
          item.node.active = index == tabIndex;
        });
      };
      __decorate([ property(cc.Sprite) ], ToggleContainer.prototype, "panels", void 0);
      ToggleContainer = __decorate([ ccclass ], ToggleContainer);
      return ToggleContainer;
    }(cc.ToggleContainer);
    exports.default = ToggleContainer;
    cc._RF.pop();
  }, {} ],
  TripletCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "453c1B5RxZGoIBsTgC6Jsc5", "TripletCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var TripletCombination = function(_super) {
      __extends(TripletCombination, _super);
      function TripletCombination() {
        var _this = _super.call(this, TripletCombination.NAME) || this;
        _this._config = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._config);
        return _this;
      }
      TripletCombination.NAME = "TRIPLET";
      return TripletCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.TripletCombination = TripletCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  TripletWithCardCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f3a5qqTDNKz7K/a7tpfNSo", "TripletWithCardCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var TripletWithCardCombination = function(_super) {
      __extends(TripletWithCardCombination, _super);
      function TripletWithCardCombination() {
        var _this = _super.call(this, TripletWithCardCombination.NAME) || this;
        _this._config = [ [ [ [ "*" ], [ "!*" ] ], [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ], [ [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "!*" ] ] ] ];
        _this._fastCheckConfig = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._fastCheckConfig);
        return _this;
      }
      TripletWithCardCombination.prototype.buildResult = function(cards, patternInd) {
        return _super.prototype.buildResult.call(this, cards, patternInd, true);
      };
      TripletWithCardCombination.NAME = "TRIPLET WITH CARD";
      return TripletWithCardCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.TripletWithCardCombination = TripletWithCardCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  TripletWithPairCombination: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90b05oazktDUJsf0M8sBBMt", "TripletWithPairCombination");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DouDizhuBaseCombination_1 = require("../DouDizhuBaseCombination");
    var TripletWithPairCombination = function(_super) {
      __extends(TripletWithPairCombination, _super);
      function TripletWithPairCombination() {
        var _this = _super.call(this, TripletWithPairCombination.NAME) || this;
        _this._config = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ], [ [ [ "*" ], [ "+R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this._fastCheckConfig = [ [ [ [ "*" ], [ "R", "B" ] ], [ [ "*" ], [ "R" ] ], [ [ "*" ], [ "R" ] ] ] ];
        _this.parseCombinationConfig(_this._config, _this._fastCheckConfig);
        return _this;
      }
      TripletWithPairCombination.prototype.buildResult = function(cards, patternInd) {
        return _super.prototype.buildResult.call(this, cards, patternInd, true);
      };
      TripletWithPairCombination.NAME = "TRIPLET WITH PAIR";
      return TripletWithPairCombination;
    }(DouDizhuBaseCombination_1.DouDizhuBaseCombination);
    exports.TripletWithPairCombination = TripletWithPairCombination;
    cc._RF.pop();
  }, {
    "../DouDizhuBaseCombination": "DouDizhuBaseCombination"
  } ],
  UserInfoPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd444zy3KtLZIsfXerEhOV3", "UserInfoPanel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UserInfoPanel = function(_super) {
      __extends(UserInfoPanel, _super);
      function UserInfoPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._places = [];
        return _this;
      }
      UserInfoPanel.prototype.show = function() {
        this.node.active = true;
      };
      UserInfoPanel.prototype.hide = function() {
        this.node.active = false;
      };
      UserInfoPanel.prototype.addPlaces = function(data) {
        this._places = data;
      };
      UserInfoPanel.prototype.showHide = function(data) {
        var player = this._findPlayerData(data.currentTarget.id);
        this.node.getChildByName("Labels").getChildByName("lebelValueLabel").getComponent(cc.Label).string = "v" + player.level;
        this.node.getChildByName("Labels").getChildByName("moneyValueLabel").getComponent(cc.Label).string = player.balance;
        this.node.getChildByName("Labels").getChildByName("userNameLabel").getComponent(cc.Label).string = player.name;
        this.node.getChildByName("Labels").getChildByName("lastTotalBetLable").getComponent(cc.Label).string = player.lastTotalBetLable;
        this.node.getChildByName("Labels").getChildByName("lastWinLable").getComponent(cc.Label).string = player.lastWinLable;
        this.node.active = !this.node.active;
      };
      UserInfoPanel.prototype._findPlayerData = function(id) {
        var places = this._places.find(function(element) {
          return element.player.id === id;
        });
        return places.player;
      };
      UserInfoPanel = __decorate([ ccclass ], UserInfoPanel);
      return UserInfoPanel;
    }(cc.Component);
    exports.default = UserInfoPanel;
    cc._RF.pop();
  }, {} ],
  ViewAdapterBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "160f4rsmIpJ/Ku0TQjXPTyE", "ViewAdapterBase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("./Logger");
    var selector_1 = require("./selector");
    var ViewAdapterBase = function(_super) {
      __extends(ViewAdapterBase, _super);
      function ViewAdapterBase() {
        var _this = _super.call(this) || this;
        _this._inputActionResolver = [];
        _this.logger = Logger_1.default.getLogger(_this);
        return _this;
      }
      ViewAdapterBase.prototype.prepare = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            return [ 2 ];
          });
        });
      };
      ViewAdapterBase.prototype.applyAction = function(action) {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, selector_1.default(this._inputActionResolver)(action.type)(action) ];

             case 1:
              _a.sent();
              return [ 2, true ];
            }
          });
        });
      };
      ViewAdapterBase.prototype.registerActionDispatcher = function(handler) {
        this._actionDispatcher = handler;
      };
      ViewAdapterBase.prototype.onDestroy = function() {
        this._inputActionResolver = [];
      };
      ViewAdapterBase.prototype.registerInputActionHandler = function(actionType, handler) {
        var _this = this;
        var currentResolver = this._inputActionResolver.find(function(value) {
          return value[0] === actionType;
        });
        if (null != currentResolver) {
          var currentHandler_1 = currentResolver[1];
          currentResolver[1] = function(code) {
            return function(action) {
              return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                  switch (_a.label) {
                   case 0:
                    return [ 4, currentHandler_1(code)(action) ];

                   case 1:
                    _a.sent();
                    return [ 4, handler(action) ];

                   case 2:
                    _a.sent();
                    return [ 2 ];
                  }
                });
              });
            };
          };
        } else this._inputActionResolver.push([ actionType, function(code) {
          return handler;
        } ]);
      };
      ViewAdapterBase.prototype.dispatchAction = function(action) {
        this.logger.info("Dispatch action: " + JSON.stringify(action));
        return this._actionDispatcher(action);
      };
      return ViewAdapterBase;
    }(cc.Component);
    exports.ViewAdapterBase = ViewAdapterBase;
    cc._RF.pop();
  }, {
    "./Logger": "Logger",
    "./selector": "selector"
  } ],
  WaitingPlayersComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3071kzHrVJ9Z7SSrTr6TS8", "WaitingPlayersComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WaitingPlayer = function(_super) {
      __extends(WaitingPlayer, _super);
      function WaitingPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.waitingLabel = null;
        _this._dotCounter = 0;
        return _this;
      }
      WaitingPlayer.prototype.onLoad = function() {
        this.node.getChildByName("loader").getComponent("cc.Animation").play("waiting_circle");
      };
      WaitingPlayer.prototype.start = function() {};
      WaitingPlayer.prototype.setParent = function(parent) {
        this.node.parent = parent;
      };
      WaitingPlayer.prototype.enableWaitingNode = function() {
        this.node.active = true;
      };
      WaitingPlayer.prototype.disableWaitingNode = function() {
        this.node.active = false;
      };
      __decorate([ property(cc.Label) ], WaitingPlayer.prototype, "waitingLabel", void 0);
      WaitingPlayer = __decorate([ ccclass ], WaitingPlayer);
      return WaitingPlayer;
    }(cc.Component);
    exports.WaitingPlayer = WaitingPlayer;
    cc._RF.pop();
  }, {} ],
  WindowsManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a61db/wl+hKaYcvQ8aI/YrO", "WindowsManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WindowsTypes_1 = require("./WindowsTypes");
    var BaseWindow_1 = require("./BaseWindow");
    var Logger_1 = require("../../../common/core/Logger");
    var WindowsManager = function() {
      function WindowsManager() {
        var _this = this;
        this._queueConfigs = [];
        this._currentWindowConfig = null;
        this._logger = Logger_1.default.getLogger(this);
        this._configByWindows = new Map();
        this._blackout = null;
        this._initConfig = null;
        this._waitForDispose = false;
        this._appearanceConfig = null;
        this._positionConfig = null;
        this._waitViewSync = false;
        this._waitViewSyncQueue = [];
        this._closeAll = null;
        this._canvasWithHeight = new cc.Size(WindowsManager.DEFAULT_WIDTH, WindowsManager.DEFAULT_HEIGHT);
        this.updateResize = function() {
          if (_this._blackout) {
            _this.clickJamOff();
            _this.findCanvas(_this._initConfig.parent);
            var ctx = _this._blackout.getComponent(cc.Graphics);
            _this.drawRect(ctx, _this._canvasWithHeight, WindowsManager.BLACKOUT_OPACITY);
            _this._blackout.width = _this._canvasWithHeight.width;
            _this._blackout.height = _this._canvasWithHeight.height;
            _this.clickJamOn();
            return;
          }
        };
        this.onLoadWindow = function(config) {
          return function(err, prefab) {
            _this.onLoadWindowPrefab(config, prefab);
          };
        };
        this.onLoadWindowPrefab = function(config, prefab) {
          if (_this._currentWindowConfig !== config) {
            _this._logger.info("onLoadWindow. Load cancelled");
            return;
          }
          _this._logger.info("onLoadWindow");
          var node = cc.instantiate(prefab);
          config.windowsParams.parent.addChild(node);
          var positionConfig = config.windowsParams.positionConfig;
          var window = node.getComponent(BaseWindow_1.default);
          _this._configByWindows.set(config, window);
          window.closeCallback = function() {
            _this._logger.info("window closeCallback");
            _this.close(config);
          };
          window.windowLoaded(config.windowsParams);
          null == config.windowsParams.alignData && (window.windowAlignData ? config.windowsParams.alignData = window.windowAlignData : config.windowsParams.alignData = {
            node_rect: new cc.Rect(node.x, node.y, node.width, node.height),
            node_anchor: new cc.Vec2(node.anchorX, node.anchorY)
          });
          var windowAlignData = config.windowsParams.alignData;
          var moveTo = node.getPosition().clone();
          _this.alignVertical(moveTo, positionConfig.alignVertical, positionConfig.border, windowAlignData);
          _this.alignHorizontal(moveTo, positionConfig.alignHorizontal, positionConfig.border, windowAlignData);
          var moveFrom = moveTo.clone();
          if (config.windowsParams.appearanceConfig.directionShow !== WindowsTypes_1.WindowShowDirection.NONE) {
            _this.calculatePosition(config.windowsParams.appearanceConfig.directionShow, moveFrom, positionConfig, windowAlignData);
            node.setPosition(moveFrom);
          } else {
            node.setPosition(moveTo);
            moveTo = null;
          }
          _this._logger.info("showAnimation start");
          _this.processAnimation(true, node, config, moveTo, function() {
            var window = node.getComponent(BaseWindow_1.default);
            _this._logger.info("showAnimation ended");
            _this._waitViewSync = false;
            window.windowShowed();
            _this.viewActionEnded();
          });
        };
      }
      WindowsManager.prototype.init = function(initConfig) {
        if (this._waitForDispose) return;
        this._initConfig = initConfig;
        this.findCanvas(this._initConfig.parent);
        this._appearanceConfig = {
          speed: WindowsManager.SPEED,
          fade: true,
          directionShow: WindowsTypes_1.WindowShowDirection.LEFT,
          directionHide: WindowsTypes_1.WindowShowDirection.LEFT,
          scale: false
        };
        this._positionConfig = {
          border: new cc.Rect(-this._canvasWithHeight.width / 2, this._canvasWithHeight.height / 2, this._canvasWithHeight.width, this._canvasWithHeight.height),
          alignHorizontal: WindowsTypes_1.PositionHorizontalAlign.CENTER,
          alignVertical: WindowsTypes_1.PositionVerticalAlign.CENTER
        };
        return this;
      };
      WindowsManager.prototype.initAppearanceConfig = function(config) {
        if (this._waitForDispose) return;
        this._appearanceConfig = config;
        return this;
      };
      WindowsManager.prototype.initPositionConfig = function(config) {
        if (this._waitForDispose) return;
        this._positionConfig = config;
        return this;
      };
      WindowsManager.prototype.fillWindowParams = function(windowName) {
        if (this._waitForDispose) return;
        var result = {
          parent: this._initConfig.parent,
          appearanceConfig: this._appearanceConfig,
          positionConfig: this._positionConfig,
          alignData: null,
          path: "",
          customParams: {},
          priority: WindowsTypes_1.WindowShowPriority.USUAL,
          prefab: null
        };
        "string" === typeof windowName ? result.path = this._initConfig.path_prefix + windowName : result.prefab = windowName;
        return result;
      };
      WindowsManager.prototype.show = function(windowName, params, priority) {
        void 0 === params && (params = null);
        void 0 === priority && (priority = WindowsTypes_1.WindowShowPriority.USUAL);
        if (this._waitForDispose) return;
        var windowParams = this.fillWindowParams(windowName);
        windowParams.customParams = params;
        windowParams.priority = priority;
        this.showWithFullParams(windowParams);
      };
      WindowsManager.prototype.showWithAppearanceConfig = function(windowName, config, params) {
        if (this._waitForDispose) return;
        var windowParams = this.fillWindowParams(windowName);
        windowParams = __assign({}, windowParams, {
          appearanceConfig: __assign({}, config)
        });
        windowParams.customParams = params;
        this.showWithFullParams(windowParams);
      };
      WindowsManager.prototype.showWithAlignConfig = function(windowName, config, params) {
        if (this._waitForDispose) return null;
        var windowParams = this.fillWindowParams(windowName);
        windowParams = __assign({}, windowParams, {
          positionConfig: __assign({}, config)
        });
        windowParams.customParams = params;
        this.showWithFullParams(windowParams);
      };
      WindowsManager.prototype.showWithAlignAppearanceConfig = function(windowName, positionConfig, appearanceConfig, params) {
        if (this._waitForDispose) return null;
        var windowParams = this.fillWindowParams(windowName);
        windowParams = __assign({}, windowParams, {
          positionConfig: __assign({}, positionConfig),
          appearanceConfig: __assign({}, appearanceConfig)
        });
        windowParams.customParams = params;
        this.showWithFullParams(windowParams);
      };
      WindowsManager.prototype.showWithFullParams = function(params) {
        if (this._waitForDispose) return;
        if (this._waitViewSync) {
          this._logger.info("waitViewSync - add wait");
          this._waitViewSyncQueue.push(params);
          return;
        }
        this._logger.info("showWithFullParams", params.path);
        var config = {
          windowsParams: params
        };
        this.findCanvas(this._initConfig.parent);
        this.makeBlackout(params.parent);
        if (this._currentWindowConfig && params.priority < this._currentWindowConfig.windowsParams.priority && this._currentWindowConfig.windowsParams.priority !== WindowsTypes_1.WindowShowPriority.URGENT_CANT_CLOSE) {
          this._logger.info("replace window with high priority", params.priority, "than", this._currentWindowConfig.windowsParams.priority);
          this._queueConfigs.unshift(__assign({}, this._currentWindowConfig));
          this._queueConfigs.unshift(config);
          this.closeCurrent();
          return;
        }
        this._queueConfigs.push(config);
        this._queueConfigs.length > 0 && this._queueConfigs.sort(function(a, b) {
          return a.windowsParams.priority - b.windowsParams.priority;
        });
        this.next();
      };
      WindowsManager.prototype.dispose = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              if (this._waitForDispose) return [ 2 ];
              this._waitForDispose = true;
              return [ 4, this.closeCurrent() ];

             case 1:
              _a.sent();
              this.removeBlackout();
              this._waitViewSyncQueue = null;
              this._initConfig = null;
              this._queueConfigs = null;
              this._currentWindowConfig = null;
              this._configByWindows.clear();
              this._configByWindows = null;
              return [ 2 ];
            }
          });
        });
      };
      Object.defineProperty(WindowsManager.prototype, "onCloseAllCallback", {
        set: function(callback) {
          this._closeAll = callback;
        },
        enumerable: true,
        configurable: true
      });
      WindowsManager.prototype.closeAll = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              this._queueConfigs.length = 0;
              this._waitViewSyncQueue.length = 0;
              return [ 4, this.closeCurrent() ];

             case 1:
              _a.sent();
              return [ 2 ];
            }
          });
        });
      };
      WindowsManager.prototype.viewActionEnded = function() {
        if (!this._waitForDispose && !this._waitViewSync && this._waitViewSyncQueue.length > 0) {
          this._logger.info("viewActionEnded", this._waitViewSyncQueue.length);
          var params = this._waitViewSyncQueue.pop();
          while (this._waitViewSyncQueue.length > 0) this._queueConfigs.push({
            windowsParams: this._waitViewSyncQueue.shift()
          });
          this.showWithFullParams(params);
        }
      };
      WindowsManager.prototype.findCanvas = function(node) {
        while (node) {
          if ("Canvas" === node.name || node.getComponent(cc.Canvas)) {
            this._canvasWithHeight.width = node.width;
            this._canvasWithHeight.height = node.height;
            return;
          }
          node = node.parent;
        }
        this._logger.error("Canvas not found");
      };
      WindowsManager.prototype.onLockEvent = function(event) {
        event && event.stopImmediatePropagation && void 0 !== event.stopImmediatePropagation && event.stopImmediatePropagation();
      };
      WindowsManager.prototype.makeBlackout = function(parent) {
        if (this._blackout) return;
        var node = new cc.Node("Blackout");
        node.addComponent(cc.Graphics);
        parent.addChild(node);
        this._blackout = node;
        this.updateResize();
        cc.view.setResizeCallback(this.updateResize);
      };
      WindowsManager.prototype.drawRect = function(ctx, size, opacity) {
        ctx.clear();
        ctx.rect(-size.width / 2, -size.height / 2, size.width, size.height);
        ctx.fillColor = new cc.Color(0, 0, 0, Math.floor(255 * opacity));
        ctx.fill();
      };
      WindowsManager.prototype.clickJamOn = function() {
        var _this = this;
        WindowsManager.EVENT_JAM.forEach(function(eventName) {
          _this._blackout.on(eventName, _this.onLockEvent);
        });
      };
      WindowsManager.prototype.clickJamOff = function() {
        var _this = this;
        WindowsManager.EVENT_JAM.forEach(function(eventName) {
          _this._blackout.off(eventName, _this.onLockEvent);
        });
      };
      WindowsManager.prototype.removeBlackout = function() {
        if (!this._blackout) return;
        this.clickJamOff();
        this._blackout.destroy();
        this._blackout = null;
        cc.view.setResizeCallback(null);
      };
      WindowsManager.prototype.close = function(config) {
        return __awaiter(this, void 0, Promise, function() {
          var result, window_1;
          var _this = this;
          return __generator(this, function(_a) {
            this._logger.info("close");
            result = null;
            if (config) {
              window_1 = this._configByWindows.get(config);
              if (window_1) {
                this._waitViewSync = true;
                this._configByWindows.delete(config);
                this._currentWindowConfig === config && (this._currentWindowConfig = null);
                result = window_1.windowClose();
                result.then(function() {
                  _this.hideAnimation(window_1.node, config, function() {
                    _this._logger.info("close ended");
                    window_1.node.destroy();
                    _this._waitViewSync = false;
                    _this.next();
                  });
                });
              } else if (this._currentWindowConfig === config) {
                this._logger.info("close window before loading");
                this._currentWindowConfig = null;
                this.next();
              } else this._logger.error("closeCurrent", "window not found");
            }
            return [ 2, result ];
          });
        });
      };
      WindowsManager.prototype.closeCurrent = function() {
        return __awaiter(this, void 0, Promise, function() {
          return __generator(this, function(_a) {
            if (void 0 !== this._currentWindowConfig && null != this._currentWindowConfig) return [ 2, this.close(this._currentWindowConfig) ];
            return [ 2 ];
          });
        });
      };
      Object.defineProperty(WindowsManager.prototype, "hasActiveWindow", {
        get: function() {
          return null != this._currentWindowConfig || this._queueConfigs.length > 0;
        },
        enumerable: true,
        configurable: true
      });
      WindowsManager.prototype.next = function() {
        if (this._waitForDispose) return;
        this._logger.info("next");
        if (this._queueConfigs.length > 0 && null == this._currentWindowConfig) {
          var config = this._queueConfigs.shift();
          this._currentWindowConfig = config;
          this._waitViewSync = true;
          void 0 !== config.windowsParams.prefab && null !== config.windowsParams.prefab ? this.onLoadWindowPrefab(config, config.windowsParams.prefab) : cc.loader.loadRes(config.windowsParams.path, this.onLoadWindow(config));
        }
        this.viewActionEnded();
        if (0 === this._queueConfigs.length && null == this._currentWindowConfig) {
          this.removeBlackout();
          if (null != this._closeAll) {
            var func = this._closeAll;
            this._closeAll = null;
            func();
          }
        }
      };
      WindowsManager.prototype.processAnimation = function(isIn, newNode, config, moveTo, callbackComplete) {
        this._logger.log("processAnimation");
        var params = config.windowsParams;
        var appearanceConfig = params.appearanceConfig;
        var speed = appearanceConfig.speed;
        var actionOrActionArray = [];
        if (appearanceConfig.fade) if (isIn) {
          newNode.opacity = 0;
          actionOrActionArray.push(cc.fadeIn(speed));
        } else actionOrActionArray.push(cc.fadeOut(speed));
        if (appearanceConfig.scale) if (isIn) {
          newNode.scaleX = 0;
          newNode.scaleY = 0;
          actionOrActionArray.push(cc.scaleTo(speed, 1));
        } else {
          newNode.scaleX = 1;
          newNode.scaleY = 1;
          actionOrActionArray.push(cc.scaleTo(speed, 0));
        }
        null != moveTo && void 0 !== moveTo && actionOrActionArray.push(cc.moveTo(speed, moveTo));
        actionOrActionArray.length > 0 ? 1 === actionOrActionArray.length ? newNode.runAction(cc.sequence(actionOrActionArray[0], cc.callFunc(callbackComplete, this))) : newNode.runAction(cc.sequence(cc.spawn(actionOrActionArray), cc.callFunc(callbackComplete, this))) : callbackComplete();
      };
      WindowsManager.prototype.hideAnimation = function(node, config, onEndCallback) {
        var _this = this;
        if (node) {
          this._logger.log("hideAnimation");
          var positionConfig = config.windowsParams.positionConfig;
          var moveTo = node.getPosition().clone();
          config.windowsParams.appearanceConfig.directionHide !== WindowsTypes_1.WindowShowDirection.NONE ? this.calculatePosition(config.windowsParams.appearanceConfig.directionHide, moveTo, positionConfig, config.windowsParams.alignData, true) : moveTo = null;
          this._logger.info("hideAnimation start");
          this.processAnimation(false, node, config, moveTo, function() {
            var window = node.getComponent(BaseWindow_1.default);
            window.onClosedAnimationEnded();
            _this._logger.info("hideAnimation end");
            onEndCallback();
          });
        }
      };
      WindowsManager.prototype.alignVertical = function(point, alignVertical, border, windowAlignData) {
        alignVertical === WindowsTypes_1.PositionVerticalAlign.UP ? point.y = border.y - windowAlignData.node_rect.height * (1 - windowAlignData.node_anchor.y) : alignVertical === WindowsTypes_1.PositionVerticalAlign.BOTTOM ? point.y = border.y - border.height + windowAlignData.node_rect.height * windowAlignData.node_anchor.y : alignVertical === WindowsTypes_1.PositionVerticalAlign.CENTER && (point.y = border.y - border.height / 2 + windowAlignData.node_rect.height * (.5 - windowAlignData.node_anchor.y));
      };
      WindowsManager.prototype.alignHorizontal = function(point, alignHorizontal, border, windowAlignData) {
        alignHorizontal === WindowsTypes_1.PositionHorizontalAlign.LEFT ? point.x = border.x + windowAlignData.node_rect.width * windowAlignData.node_anchor.x : alignHorizontal === WindowsTypes_1.PositionHorizontalAlign.RIGHT ? point.x = border.x + border.width - windowAlignData.node_rect.width * (1 - windowAlignData.node_anchor.x) : alignHorizontal === WindowsTypes_1.PositionHorizontalAlign.CENTER && (point.x = border.x + border.width / 2 - windowAlignData.node_rect.width * (.5 - windowAlignData.node_anchor.x));
      };
      WindowsManager.prototype.calculatePosition = function(direction, point, positionConfig, windowAlignData, reverse) {
        void 0 === reverse && (reverse = false);
        reverse && (direction === WindowsTypes_1.WindowShowDirection.RIGHT ? direction = WindowsTypes_1.WindowShowDirection.LEFT : direction === WindowsTypes_1.WindowShowDirection.LEFT ? direction = WindowsTypes_1.WindowShowDirection.RIGHT : direction === WindowsTypes_1.WindowShowDirection.UP ? direction = WindowsTypes_1.WindowShowDirection.DOWN : direction === WindowsTypes_1.WindowShowDirection.DOWN && (direction = WindowsTypes_1.WindowShowDirection.UP));
        direction === WindowsTypes_1.WindowShowDirection.RIGHT ? point.x = positionConfig.border.x - windowAlignData.node_rect.width * (1 - windowAlignData.node_anchor.x) : direction === WindowsTypes_1.WindowShowDirection.LEFT ? point.x = positionConfig.border.x + positionConfig.border.width + windowAlignData.node_rect.width * windowAlignData.node_anchor.x : direction === WindowsTypes_1.WindowShowDirection.UP ? point.y = positionConfig.border.y - positionConfig.border.height - windowAlignData.node_rect.height * (1 - windowAlignData.node_anchor.y) : direction === WindowsTypes_1.WindowShowDirection.DOWN && (point.y = positionConfig.border.y + windowAlignData.node_rect.height * windowAlignData.node_anchor.y);
      };
      WindowsManager.EVENT_JAM = [ cc.Node.EventType.TOUCH_START, cc.Node.EventType.TOUCH_MOVE, cc.Node.EventType.TOUCH_END, cc.Node.EventType.TOUCH_CANCEL, cc.Node.EventType.MOUSE_ENTER, cc.Node.EventType.MOUSE_LEAVE, "click" ];
      WindowsManager.DEFAULT_WIDTH = 640;
      WindowsManager.DEFAULT_HEIGHT = 1136;
      WindowsManager.BLACKOUT_OPACITY = .7;
      WindowsManager.SPEED = .2;
      return WindowsManager;
    }();
    exports.default = WindowsManager;
    cc._RF.pop();
  }, {
    "../../../common/core/Logger": "Logger",
    "./BaseWindow": "BaseWindow",
    "./WindowsTypes": "WindowsTypes"
  } ],
  WindowsTypes: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "290ceevs95NE50tQdgnOvVB", "WindowsTypes");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WindowShowPriority;
    (function(WindowShowPriority) {
      WindowShowPriority[WindowShowPriority["URGENT_CANT_CLOSE"] = 0] = "URGENT_CANT_CLOSE";
      WindowShowPriority[WindowShowPriority["URGENT"] = 1] = "URGENT";
      WindowShowPriority[WindowShowPriority["USUAL"] = 2] = "USUAL";
    })(WindowShowPriority = exports.WindowShowPriority || (exports.WindowShowPriority = {}));
    var WindowShowDirection;
    (function(WindowShowDirection) {
      WindowShowDirection["UP"] = "direction_up";
      WindowShowDirection["DOWN"] = "direction_down";
      WindowShowDirection["LEFT"] = "direction_left";
      WindowShowDirection["RIGHT"] = "direction_right";
      WindowShowDirection["NONE"] = "direction_none";
    })(WindowShowDirection = exports.WindowShowDirection || (exports.WindowShowDirection = {}));
    var PositionHorizontalAlign;
    (function(PositionHorizontalAlign) {
      PositionHorizontalAlign["LEFT"] = "horizontal_left";
      PositionHorizontalAlign["RIGHT"] = "horizontal_right";
      PositionHorizontalAlign["CENTER"] = "horizontal_center";
    })(PositionHorizontalAlign = exports.PositionHorizontalAlign || (exports.PositionHorizontalAlign = {}));
    var PositionVerticalAlign;
    (function(PositionVerticalAlign) {
      PositionVerticalAlign["UP"] = "vertical_up";
      PositionVerticalAlign["CENTER"] = "vertical_center";
      PositionVerticalAlign["BOTTOM"] = "vertical_bottom";
    })(PositionVerticalAlign = exports.PositionVerticalAlign || (exports.PositionVerticalAlign = {}));
    cc._RF.pop();
  }, {} ],
  actions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ffef927cU9KUbx9Dg/8GRgR", "actions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function createAction(type, payload) {
      return null == payload ? {
        type: type
      } : {
        type: type,
        payload: payload
      };
    }
    exports.createAction = createAction;
    cc._RF.pop();
  }, {} ],
  animOnButt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bca0bhkkI9EHbt94eFnodSP", "animOnButt");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nodeToPlayIn: {
          default: null,
          type: cc.Node
        },
        enter_animation: {
          default: ""
        },
        exit_animation: {
          default: ""
        }
      },
      onLoad: function onLoad() {
        null == this.nodeToPlayIn ? this.animationComponent = this.node.getComponent("cc.Animation") : this.animationComponent = this.nodeToPlayIn.getComponent("cc.Animation");
        this.enterAnim = true;
      },
      start: function start() {},
      playAnim: function playAnim() {
        if (this.enterAnim) {
          this.enterAnim = false;
          this.animationComponent.play(this.enter_animation);
        } else {
          this.enterAnim = true;
          this.exit_animation.length > 0 ? this.animationComponent.play(this.exit_animation) : this.animationComponent.play(this.enter_animation);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  "api.gen": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "017f0I8xXdF27SNiQAyWrIH", "api.gen");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Base64_1 = require("Base64");
    var fetch_1 = require("../../../core/fetch");
    var BASE_PATH = "http://127.0.0.1:80";
    exports.NakamaApi = function(configuration) {
      void 0 === configuration && (configuration = {
        basePath: BASE_PATH,
        bearerToken: "",
        password: "",
        username: "",
        timeoutMs: 5e3
      });
      return {
        healthcheck: function(options) {
          void 0 === options && (options = {});
          var urlPath = "/healthcheck";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        getAccount: function(options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/account";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        updateAccount: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "PUT"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateCustom: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/custom";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateDevice: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/device";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateEmail: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/email";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateFacebook: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/facebook";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateGameCenter: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/gamecenter";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateGoogle: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/google";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        authenticateSteam: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/authenticate/steam";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkCustom: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/custom";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkDevice: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/device";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkEmail: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/email";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkFacebook: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/facebook";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkGameCenter: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/gamecenter";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkGoogle: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/google";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        linkSteam: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/link/steam";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkCustom: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/custom";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkDevice: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/device";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkEmail: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/email";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkFacebook: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/facebook";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkGameCenter: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/gamecenter";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkGoogle: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/google";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        unlinkSteam: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/account/unlink/steam";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listChannelMessages: function(channelId, limit, forward, cursor, options) {
          void 0 === options && (options = {});
          if (null === channelId || void 0 === channelId) throw new Error("'channelId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/channel/{channel_id}".replace("{channel_id}", encodeURIComponent(String(channelId)));
          var queryParams = {
            limit: limit,
            forward: forward,
            cursor: cursor
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        deleteFriends: function(ids, usernames, options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/friend";
          var queryParams = {
            ids: ids,
            usernames: usernames
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "DELETE"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listFriends: function(options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/friend";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        addFriends: function(options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/friend";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        blockFriends: function(options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/friend/block";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        importFacebookFriends: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/friend/facebook";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listGroups: function(name, cursor, limit, options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/group";
          var queryParams = {
            name: name,
            cursor: cursor,
            limit: limit
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        createGroup: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        deleteGroup: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "DELETE"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        updateGroup: function(groupId, body, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "PUT"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        addGroupUsers: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}/add".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        joinGroup: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}/join".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        kickGroupUsers: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}/kick".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        leaveGroup: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}/leave".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        promoteGroupUsers: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}/promote".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listGroupUsers: function(groupId, options) {
          void 0 === options && (options = {});
          if (null === groupId || void 0 === groupId) throw new Error("'groupId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/group/{group_id}/user".replace("{group_id}", encodeURIComponent(String(groupId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        deleteLeaderboardRecord: function(leaderboardId, options) {
          void 0 === options && (options = {});
          if (null === leaderboardId || void 0 === leaderboardId) throw new Error("'leaderboardId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/leaderboard/{leaderboard_id}".replace("{leaderboard_id}", encodeURIComponent(String(leaderboardId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "DELETE"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listLeaderboardRecords: function(leaderboardId, ownerIds, limit, cursor, options) {
          void 0 === options && (options = {});
          if (null === leaderboardId || void 0 === leaderboardId) throw new Error("'leaderboardId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/leaderboard/{leaderboard_id}".replace("{leaderboard_id}", encodeURIComponent(String(leaderboardId)));
          var queryParams = {
            owner_ids: ownerIds,
            limit: limit,
            cursor: cursor
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        writeLeaderboardRecord: function(leaderboardId, body, options) {
          void 0 === options && (options = {});
          if (null === leaderboardId || void 0 === leaderboardId) throw new Error("'leaderboardId' is a required parameter but is null or undefined.");
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/leaderboard/{leaderboard_id}".replace("{leaderboard_id}", encodeURIComponent(String(leaderboardId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listMatches: function(limit, authoritative, label, minSize, maxSize, options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/match";
          var queryParams = {
            limit: limit,
            authoritative: authoritative,
            label: label,
            min_size: minSize,
            max_size: maxSize
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        deleteNotifications: function(ids, options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/notification";
          var queryParams = {
            ids: ids
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "DELETE"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listNotifications: function(limit, cacheableCursor, options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/notification";
          var queryParams = {
            limit: limit,
            cacheable_cursor: cacheableCursor
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        rpcFunc2: function(id, payload, httpKey, options) {
          void 0 === options && (options = {});
          if (null === id || void 0 === id) throw new Error("'id' is a required parameter but is null or undefined.");
          var urlPath = "/v2/rpc/{id}".replace("{id}", encodeURIComponent(String(id)));
          var queryParams = {
            payload: payload,
            http_key: httpKey
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        rpcFunc: function(id, body, options) {
          void 0 === options && (options = {});
          if (null === id || void 0 === id) throw new Error("'id' is a required parameter but is null or undefined.");
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/rpc/{id}".replace("{id}", encodeURIComponent(String(id)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        readStorageObjects: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/storage";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "POST"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        writeStorageObjects: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/storage";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "PUT"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        deleteStorageObjects: function(body, options) {
          void 0 === options && (options = {});
          if (null === body || void 0 === body) throw new Error("'body' is a required parameter but is null or undefined.");
          var urlPath = "/v2/storage/delete";
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "PUT"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          fetchOptions.body = JSON.stringify(body || {});
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listStorageObjects: function(collection, userId, limit, cursor, options) {
          void 0 === options && (options = {});
          if (null === collection || void 0 === collection) throw new Error("'collection' is a required parameter but is null or undefined.");
          var urlPath = "/v2/storage/{collection}".replace("{collection}", encodeURIComponent(String(collection)));
          var queryParams = {
            user_id: userId,
            limit: limit,
            cursor: cursor
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listStorageObjects2: function(collection, userId, limit, cursor, options) {
          void 0 === options && (options = {});
          if (null === collection || void 0 === collection) throw new Error("'collection' is a required parameter but is null or undefined.");
          if (null === userId || void 0 === userId) throw new Error("'userId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/storage/{collection}/{user_id}".replace("{collection}", encodeURIComponent(String(collection))).replace("{user_id}", encodeURIComponent(String(userId)));
          var queryParams = {
            limit: limit,
            cursor: cursor
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        getUsers: function(ids, usernames, facebookIds, options) {
          void 0 === options && (options = {});
          var urlPath = "/v2/user";
          var queryParams = {
            ids: ids,
            usernames: usernames,
            facebook_ids: facebookIds
          };
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        },
        listUserGroups: function(userId, options) {
          void 0 === options && (options = {});
          if (null === userId || void 0 === userId) throw new Error("'userId' is a required parameter but is null or undefined.");
          var urlPath = "/v2/user/{user_id}/group".replace("{user_id}", encodeURIComponent(String(userId)));
          var queryParams = {};
          var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
            if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
              return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
            }, "");
            if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
          }).join("");
          var fetchOptions = __assign({
            method: "GET"
          }, options);
          var headers = {
            Accept: "application/json",
            "Content-Type": "application/json"
          };
          configuration.bearerToken ? headers["Authorization"] = "Bearer " + configuration.bearerToken : configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(configuration.username + ":" + configuration.password));
          fetchOptions.headers = __assign({}, headers, options.headers);
          return Promise.race([ fetch_1.fetch(configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
            if (response.status >= 200 && response.status < 300) return response.json();
            throw response;
          }), new Promise(function(_, reject) {
            return setTimeout(reject, configuration.timeoutMs, "Request timed out.");
          }) ]);
        }
      };
    };
    cc._RF.pop();
  }, {
    "../../../core/fetch": "fetch",
    Base64: 2
  } ],
  assetsActions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d0b6/WMFxB6omwulJHol1k", "assetsActions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var actions_1 = require("./actions");
    var AssetsActionTypes;
    (function(AssetsActionTypes) {
      AssetsActionTypes["ASSET_LOAD"] = "asset_load";
      AssetsActionTypes["ASSET_LOADING_PROGRESS"] = "asset_loading_progress";
      AssetsActionTypes["ASSET_LOADING_ERROR"] = "asset_loading_error";
      AssetsActionTypes["ASSET_LOADED"] = "asset_loaded";
    })(AssetsActionTypes = exports.AssetsActionTypes || (exports.AssetsActionTypes = {}));
    exports.AssetsActions = {
      assetLoad: function(name, type) {
        return actions_1.createAction(AssetsActionTypes.ASSET_LOAD, {
          name: name,
          type: type
        });
      },
      assetLoaded: function(name, type) {
        return actions_1.createAction(AssetsActionTypes.ASSET_LOADED, {
          name: name,
          type: type
        });
      },
      assetLoadingProgress: function(name, type, progress) {
        return actions_1.createAction(AssetsActionTypes.ASSET_LOADING_PROGRESS, {
          name: name,
          type: type,
          progress: progress
        });
      },
      assetLoadingError: function(name, type) {
        return actions_1.createAction(AssetsActionTypes.ASSET_LOADING_ERROR, {
          name: name,
          type: type
        });
      }
    };
    cc._RF.pop();
  }, {
    "./actions": "actions"
  } ],
  assets: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea20bK+DKFEaopOVcHbDdPJ", "assets");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a;
    var Logger_1 = require("../../core/Logger");
    var createReducer_1 = require("../createReducer");
    var assetsActions_1 = require("../assetsActions");
    var logger = Logger_1.default.getLogger("ModelReducer");
    var AssetType;
    (function(AssetType) {
      AssetType["SCENE"] = "scene";
    })(AssetType = exports.AssetType || (exports.AssetType = {}));
    var initialAssetsState = {};
    function getItem(name, type, state) {
      var key = type + ":" + name;
      var item = key in state ? state[key] : {
        key: key,
        name: name,
        type: type,
        loaded: false,
        loading: false,
        progress: 0
      };
      return item;
    }
    var assetsState = createReducer_1.default(initialAssetsState, (_a = {}, _a[assetsActions_1.AssetsActionTypes.ASSET_LOAD] = function(state, action) {
      var _a;
      var item = getItem(action.payload.name, action.payload.type, state);
      if (!item.loaded && !item.loading) return __assign({}, state, (_a = {}, _a[item.key] = __assign({}, item, {
        loading: true,
        progress: 0
      }), _a));
      return state;
    }, _a[assetsActions_1.AssetsActionTypes.ASSET_LOADED] = function(state, action) {
      var _a;
      var item = getItem(action.payload.name, action.payload.type, state);
      if (!item.loaded) return __assign({}, state, (_a = {}, _a[item.key] = __assign({}, item, {
        loaded: true,
        loading: false,
        progress: 1
      }), _a));
      return state;
    }, _a[assetsActions_1.AssetsActionTypes.ASSET_LOADING_PROGRESS] = function(state, action) {
      var _a;
      var item = getItem(action.payload.name, action.payload.type, state);
      if (!item.loaded) return __assign({}, state, (_a = {}, _a[item.key] = __assign({}, item, {
        loading: true,
        progress: Math.max(0, Math.min(1, action.payload.progress))
      }), _a));
      return state;
    }, _a[assetsActions_1.AssetsActionTypes.ASSET_LOADING_ERROR] = function(state, action) {
      var _a;
      var item = getItem(action.payload.name, action.payload.type, state);
      if (!item.loaded) return __assign({}, state, (_a = {}, _a[item.key] = __assign({}, item, {
        loaded: false,
        loading: false,
        progress: 0
      }), _a));
      return state;
    }, _a));
    exports.assetsReducer = {
      assets: assetsState
    };
    cc._RF.pop();
  }, {
    "../../core/Logger": "Logger",
    "../assetsActions": "assetsActions",
    "../createReducer": "createReducer"
  } ],
  betsControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "df96f7UKyhLXL8CQyq3fKbz", "betsControl");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.betsArray = [];
        this.tmpBet = null;
        this.tmpRate = null;
        this.userData = cc.find(pathBeginning + "game/table/footer/user_data");
      },
      start: function start() {},
      rateChoosen: function rateChoosen(event) {
        this.tmpRate = event.target;
      },
      betMade: function betMade(event) {
        var _this = this;
        if (null != this.tmpRate) {
          var moneyPut = this.tmpRate.getName().split("_")[1];
          if (parseInt(userBalance) >= parseInt(moneyPut)) {
            this.tmpBet = event.target;
            userBalance = parseInt(userBalance) - parseInt(moneyPut);
            var newCoins = cc.instantiate(this.tmpRate);
            newCoins.removeComponent("cc.Button");
            newCoins.parent = this.node;
            newCoins.x = this.tmpRate.x;
            newCoins.y = this.tmpRate.y - 466;
            newCoins.runAction(cc.sequence(cc.spawn(cc.moveTo(.2, this.tmpBet.x + randomNumber(35, -35), this.tmpBet.y + randomNumber(35, -35)), cc.scaleTo(.2, .2, .2)), cc.callFunc(function(target, data) {
              _this.betsArray.push({
                tmpBet: data,
                moneyPut: moneyPut
              });
              _this.addCoins(moneyPut, data);
            }, this, this.tmpBet)));
            coinsOnBetsArray.push(newCoins);
          }
        }
      },
      applyPreviousBet: function applyPreviousBet() {
        if (previousBet.length > 0) {
          for (var i = 0; i < previousBet.length; i++) if (userBalance >= previousBet[i].moneyPut) {
            var moneyString = previousBet[i].tmpBet.getChildByName("coins").getComponent("cc.Label").string;
            previousBet[i].tmpBet.getChildByName("coins").getComponent("cc.Label").string = parseInt(moneyString, 10) + parseInt(previousBet[i].moneyPut, 10);
            userBalance -= previousBet[i].moneyPut;
            this.userData.getChildByName("balance").getComponent("cc.Label").string = userBalance;
            cc.sys.localStorage.setItem("Spinc_user_balance", userBalance);
            this.betsArray.push(previousBet[i]);
            var curChip = cc.instantiate(cc.find(pathBeginning + "game/table/chips_panel").getChildByName("chip_" + previousBet[i].moneyPut));
            curChip.removeComponent("cc.Button");
            curChip.parent = this.node;
            curChip.x = cc.find(pathBeginning + "game/table/chips_panel").getChildByName("chip_" + previousBet[i].moneyPut).x;
            curChip.y = cc.find(pathBeginning + "game/table/chips_panel").getChildByName("chip_" + previousBet[i].moneyPut).y - 466;
            curChip.runAction(cc.sequence(cc.spawn(cc.moveTo(.2, previousBet[i].tmpBet.x + randomNumber(35, -35), previousBet[i].tmpBet.y + randomNumber(35, -35)), cc.scaleTo(.2, .2, .2)), cc.callFunc(function() {})));
            coinsOnBetsArray.push(curChip);
          }
          previousBet = [];
        }
      },
      addCoins: function addCoins(coins, node) {
        var curCoinsState = node.getChildByName("coins").getComponent("cc.Label").string;
        node.getChildByName("coins").getComponent("cc.Label").string = parseInt(curCoinsState, 10) + parseInt(coins, 10);
        this.userData.getChildByName("balance").getComponent("cc.Label").string = userBalance;
        cc.sys.localStorage.setItem("Spinc_user_balance", userBalance);
        this.tmpBet = null;
      },
      cleanCoins: function cleanCoins() {
        for (var i = 0; i < this.node.children.length; i++) this.node.children[i].getChildByName("coins") && (this.node.children[i].getChildByName("coins").getComponent("cc.Label").string = 0);
      }
    });
    cc._RF.pop();
  }, {} ],
  client: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00738KcOKZC/p2BCECxxSr4", "client");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var api_gen_1 = require("./api.gen");
    var Base64_1 = require("Base64");
    var fetch_1 = require("../../../core/fetch");
    var session_1 = require("./session");
    var socket_1 = require("./socket");
    var DEFAULT_HOST = "127.0.0.1";
    var DEFAULT_PORT = "7350";
    var DEFAULT_SERVER_KEY = "defaultkey";
    var DEFAULT_TIMEOUT_MS = 7e3;
    var Client = function() {
      function Client(serverkey, host, port, useSSL, timeout, verbose) {
        void 0 === serverkey && (serverkey = DEFAULT_SERVER_KEY);
        void 0 === host && (host = DEFAULT_HOST);
        void 0 === port && (port = DEFAULT_PORT);
        void 0 === useSSL && (useSSL = false);
        void 0 === timeout && (timeout = DEFAULT_TIMEOUT_MS);
        void 0 === verbose && (verbose = false);
        this.serverkey = serverkey;
        this.host = host;
        this.port = port;
        this.useSSL = useSSL;
        this.timeout = timeout;
        this.verbose = verbose;
        var scheme = useSSL ? "https://" : "http://";
        var basePath = "" + scheme + host + ":" + port;
        this.configuration = {
          basePath: basePath,
          username: serverkey,
          password: "",
          timeoutMs: timeout
        };
        this.apiClient = api_gen_1.NakamaApi(this.configuration);
      }
      Client.prototype.addGroupUsers = function(session, groupId, ids) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/group/" + groupId + "/add";
        var queryParams = {
          user_ids: ids
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.addFriends = function(session, ids, usernames) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/friend";
        var queryParams = {
          ids: ids,
          usernames: usernames
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.authenticateCustom = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/custom";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          id: request.id
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.authenticateDevice = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/device";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          id: request.id
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.authenticateEmail = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/email";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          email: request.email,
          password: request.password
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.authenticateFacebook = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/facebook";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          token: request.token
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.authenticateGoogle = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/google";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          token: request.token
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.authenticateGameCenter = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/gamecenter";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          bundle_id: request.bundle_id,
          player_id: request.player_id,
          public_key_url: request.public_key_url,
          salt: request.salt,
          signature: request.signature,
          timestamp_seconds: request.timestamp_seconds
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.authenticateSteam = function(request) {
        var _this = this;
        var urlPath = "/v2/account/authenticate/steam";
        var queryParams = {
          username: request.username,
          create: request.create
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        fetchOptions.body = JSON.stringify({
          token: request.token
        });
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(apiSession) {
          return session_1.Session.restore(apiSession.token || "");
        });
      };
      Client.prototype.blockFriends = function(session, ids, usernames) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/friend/block";
        var queryParams = {
          ids: ids,
          usernames: usernames
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.createGroup = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.createGroup(request).then(function(response) {
          return Promise.resolve({
            avatar_url: response.avatar_url,
            create_time: response.create_time,
            creator_id: response.creator_id,
            description: response.description,
            edge_count: response.edge_count,
            id: response.id,
            lang_tag: response.lang_tag,
            max_count: response.max_count,
            metadata: response.metadata ? JSON.parse(response.metadata) : null,
            name: response.name,
            open: response.open,
            update_time: response.update_time
          });
        });
      };
      Client.prototype.createSocket = function(useSSL, verbose) {
        void 0 === useSSL && (useSSL = false);
        void 0 === verbose && (verbose = false);
        return new socket_1.DefaultSocket(this.host, this.port, useSSL, verbose);
      };
      Client.prototype.deleteFriends = function(session, ids, usernames) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/friend";
        var queryParams = {
          ids: ids,
          usernames: usernames
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "DELETE"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.deleteGroup = function(session, groupId) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.deleteGroup(groupId).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.deleteNotifications = function(session, ids) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/notification";
        var queryParams = {
          ids: ids
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "DELETE"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.deleteStorageObjects = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.deleteStorageObjects(request).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.getAccount = function(session) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.getAccount();
      };
      Client.prototype.importFacebookFriends = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.importFacebookFriends(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.getUsers = function(session, ids, usernames, facebookIds) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.getUsers(ids, usernames, facebookIds).then(function(response) {
          var result = {
            users: []
          };
          if (null == response.users) return Promise.resolve(result);
          response.users.forEach(function(u) {
            result.users.push({
              avatar_url: u.avatar_url,
              create_time: u.create_time,
              display_name: u.display_name,
              edge_count: u.edge_count,
              facebook_id: u.facebook_id,
              gamecenter_id: u.gamecenter_id,
              google_id: u.google_id,
              id: u.id,
              lang_tag: u.lang_tag,
              location: u.location,
              online: u.online,
              steam_id: u.steam_id,
              timezone: u.timezone,
              update_time: u.update_time,
              username: u.username,
              metadata: u.metadata ? JSON.parse(u.metadata) : null
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.joinGroup = function(session, groupId) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.joinGroup(groupId, {}).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.kickGroupUsers = function(session, groupId, ids) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/group/" + groupId + "/kick";
        var queryParams = {
          user_ids: ids
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.leaveGroup = function(session, groupId) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.leaveGroup(groupId, {}).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.listChannelMessages = function(session, channelId, limit, forward, cursor) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listChannelMessages(channelId, limit, forward, cursor).then(function(response) {
          var result = {
            messages: [],
            next_cursor: response.next_cursor,
            prev_cursor: response.prev_cursor
          };
          if (null == response.messages) return Promise.resolve(result);
          response.messages.forEach(function(m) {
            result.messages.push({
              channel_id: m.channel_id,
              code: m.code,
              create_time: m.create_time,
              message_id: m.message_id,
              persistent: m.persistent,
              sender_id: m.sender_id,
              update_time: m.update_time,
              username: m.username,
              content: m.content ? JSON.parse(m.content) : null
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.listGroupUsers = function(session, groupId) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listGroupUsers(groupId).then(function(response) {
          var result = {
            group_users: []
          };
          if (null == response.group_users) return Promise.resolve(result);
          response.group_users.forEach(function(gu) {
            result.group_users.push({
              user: {
                avatar_url: gu.user.avatar_url,
                create_time: gu.user.create_time,
                display_name: gu.user.display_name,
                edge_count: gu.user.edge_count,
                facebook_id: gu.user.facebook_id,
                gamecenter_id: gu.user.gamecenter_id,
                google_id: gu.user.google_id,
                id: gu.user.id,
                lang_tag: gu.user.lang_tag,
                location: gu.user.location,
                online: gu.user.online,
                steam_id: gu.user.steam_id,
                timezone: gu.user.timezone,
                update_time: gu.user.update_time,
                username: gu.user.username,
                metadata: gu.user.metadata ? JSON.parse(gu.user.metadata) : null
              },
              state: gu.state
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.listUserGroups = function(session, userId) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listUserGroups(userId).then(function(response) {
          var result = {
            user_groups: []
          };
          if (null == response.user_groups) return Promise.resolve(result);
          response.user_groups.forEach(function(ug) {
            result.user_groups.push({
              group: {
                avatar_url: ug.group.avatar_url,
                create_time: ug.group.create_time,
                creator_id: ug.group.creator_id,
                description: ug.group.description,
                edge_count: ug.group.edge_count,
                id: ug.group.id,
                lang_tag: ug.group.lang_tag,
                max_count: ug.group.max_count,
                metadata: ug.group.metadata ? JSON.parse(ug.group.metadata) : null,
                name: ug.group.name,
                open: ug.group.open,
                update_time: ug.group.update_time
              },
              state: ug.state
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.listGroups = function(session, name, cursor, limit) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listGroups(name, cursor, limit).then(function(response) {
          var result = {
            groups: []
          };
          if (null == response.groups) return Promise.resolve(result);
          result.cursor = response.cursor;
          response.groups.forEach(function(ug) {
            result.groups.push({
              avatar_url: ug.avatar_url,
              create_time: ug.create_time,
              creator_id: ug.creator_id,
              description: ug.description,
              edge_count: ug.edge_count,
              id: ug.id,
              lang_tag: ug.lang_tag,
              max_count: ug.max_count,
              metadata: ug.metadata ? JSON.parse(ug.metadata) : null,
              name: ug.name,
              open: ug.open,
              update_time: ug.update_time
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.linkCustom = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkCustom(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.linkDevice = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkDevice(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.linkEmail = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkEmail(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.linkFacebook = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkFacebook(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.linkGoogle = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkGoogle(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.linkGameCenter = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkGameCenter(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.linkSteam = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.linkSteam(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.listFriends = function(session) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listFriends().then(function(response) {
          var result = {
            friends: []
          };
          if (null == response.friends) return Promise.resolve(result);
          response.friends.forEach(function(f) {
            result.friends.push({
              user: {
                avatar_url: f.user.avatar_url,
                create_time: f.user.create_time,
                display_name: f.user.display_name,
                edge_count: f.user.edge_count,
                facebook_id: f.user.facebook_id,
                gamecenter_id: f.user.gamecenter_id,
                google_id: f.user.google_id,
                id: f.user.id,
                lang_tag: f.user.lang_tag,
                location: f.user.location,
                online: f.user.online,
                steam_id: f.user.steam_id,
                timezone: f.user.timezone,
                update_time: f.user.update_time,
                username: f.user.username,
                metadata: f.user.metadata ? JSON.parse(f.user.metadata) : null
              },
              state: f.state
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.listLeaderboardRecords = function(session, leaderboardId, ownerIds, limit, cursor) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listLeaderboardRecords(leaderboardId, ownerIds, limit, cursor).then(function(response) {
          var list = {
            next_cursor: response.next_cursor,
            prev_cursor: response.prev_cursor,
            owner_records: [],
            records: []
          };
          null != response.owner_records && response.owner_records.forEach(function(o) {
            list.owner_records.push({
              expiry_time: o.expiry_time,
              leaderboard_id: o.leaderboard_id,
              metadata: o.metadata ? JSON.parse(o.metadata) : void 0,
              num_score: o.num_score,
              owner_id: o.owner_id,
              rank: Number(o.rank),
              score: Number(o.score),
              subscore: Number(o.subscore),
              update_time: o.update_time,
              username: o.username
            });
          });
          null != response.records && response.records.forEach(function(o) {
            list.records.push({
              expiry_time: o.expiry_time,
              leaderboard_id: o.leaderboard_id,
              metadata: o.metadata ? JSON.parse(o.metadata) : void 0,
              num_score: o.num_score,
              owner_id: o.owner_id,
              rank: Number(o.rank),
              score: Number(o.score),
              subscore: Number(o.subscore),
              update_time: o.update_time,
              username: o.username
            });
          });
          return Promise.resolve(list);
        });
      };
      Client.prototype.listMatches = function(session, limit, authoritative, label, minSize, maxSize) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listMatches(limit, authoritative, label, minSize, maxSize);
      };
      Client.prototype.listNotifications = function(session, limit, cacheableCursor) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listNotifications(limit, cacheableCursor).then(function(response) {
          var result = {
            cacheable_cursor: response.cacheable_cursor,
            notifications: []
          };
          if (null == response.notifications) return Promise.resolve(result);
          response.notifications.forEach(function(n) {
            result.notifications.push({
              code: n.code,
              create_time: n.create_time,
              id: n.id,
              persistent: n.persistent,
              sender_id: n.sender_id,
              subject: n.subject,
              content: n.content ? JSON.parse(n.content) : void 0
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.listStorageObjects = function(session, collection, userId, limit, cursor) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.listStorageObjects(collection, userId, limit, cursor).then(function(response) {
          var result = {
            objects: [],
            cursor: response.cursor
          };
          if (null == response.objects) return Promise.resolve(result);
          response.objects.forEach(function(o) {
            result.objects.push({
              collection: o.collection,
              key: o.key,
              permission_read: o.permission_read,
              permission_write: o.permission_write,
              value: o.value ? JSON.parse(o.value) : null,
              version: o.version,
              user_id: o.user_id,
              create_time: o.create_time,
              update_time: o.update_time
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.promoteGroupUsers = function(session, groupId, ids) {
        var _this = this;
        this.configuration.bearerToken = session && session.token;
        var urlPath = "/v2/group/" + groupId + "/promote";
        var queryParams = {
          user_ids: ids
        };
        var urlQuery = "?" + Object.keys(queryParams).map(function(k) {
          if (queryParams[k] instanceof Array) return queryParams[k].reduce(function(prev, curr) {
            return prev + encodeURIComponent(k) + "=" + encodeURIComponent(curr) + "&";
          }, "");
          if (null != queryParams[k]) return encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k]) + "&";
        }).join("");
        var fetchOptions = __assign({
          method: "POST"
        });
        var headers = {
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        this.configuration.bearerToken ? headers["Authorization"] = "Bearer " + this.configuration.bearerToken : this.configuration.username && (headers["Authorization"] = "Basic " + Base64_1.btoa(this.configuration.username + ":" + this.configuration.password));
        fetchOptions.headers = __assign({}, headers);
        return Promise.race([ fetch_1.fetch(this.configuration.basePath + urlPath + urlQuery, fetchOptions).then(function(response) {
          if (response.status >= 200 && response.status < 300) return response.json();
          throw response;
        }), new Promise(function(_, reject) {
          return setTimeout(reject, _this.configuration.timeoutMs, "Request timed out.");
        }) ]).then(function(response) {
          return Promise.resolve(void 0 !== response);
        });
      };
      Client.prototype.readStorageObjects = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.readStorageObjects(request).then(function(response) {
          var result = {
            objects: []
          };
          if (null == response.objects) return Promise.resolve(result);
          response.objects.forEach(function(o) {
            result.objects.push({
              collection: o.collection,
              key: o.key,
              permission_read: o.permission_read,
              permission_write: o.permission_write,
              value: o.value ? JSON.parse(o.value) : null,
              version: o.version,
              user_id: o.user_id,
              create_time: o.create_time,
              update_time: o.update_time
            });
          });
          return Promise.resolve(result);
        });
      };
      Client.prototype.rpc = function(session, id, input) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.rpcFunc(id, JSON.stringify(input)).then(function(response) {
          return Promise.resolve({
            id: response.id,
            payload: response.payload ? JSON.parse(response.payload) : null
          });
        });
      };
      Client.prototype.rpcGet = function(id, session, httpKey, input) {
        var _this = this;
        if (httpKey && "" !== httpKey) {
          this.configuration.username = void 0;
          this.configuration.bearerToken = void 0;
        } else this.configuration.bearerToken = session && session.token;
        return this.apiClient.rpcFunc2(id, input && JSON.stringify(input) || "", httpKey).then(function(response) {
          _this.configuration.username = _this.serverkey;
          return Promise.resolve({
            id: response.id,
            payload: response.payload ? JSON.parse(response.payload) : null
          });
        }).catch(function(err) {
          _this.configuration.username = _this.serverkey;
          throw err;
        });
      };
      Client.prototype.unlinkCustom = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkCustom(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.unlinkDevice = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkDevice(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.unlinkEmail = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkEmail(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.unlinkFacebook = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkFacebook(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.unlinkGoogle = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkGoogle(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.unlinkGameCenter = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkGameCenter(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.unlinkSteam = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.unlinkSteam(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.updateAccount = function(session, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.updateAccount(request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.updateGroup = function(session, groupId, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.updateGroup(groupId, request).then(function(response) {
          return void 0 !== response;
        });
      };
      Client.prototype.writeLeaderboardRecord = function(session, leaderboardId, request) {
        this.configuration.bearerToken = session && session.token;
        return this.apiClient.writeLeaderboardRecord(leaderboardId, {
          metadata: request.metadata ? JSON.stringify(request.metadata) : void 0,
          score: request.score,
          subscore: request.subscore
        }).then(function(response) {
          return Promise.resolve({
            expiry_time: response.expiry_time,
            leaderboard_id: response.leaderboard_id,
            metadata: response.metadata ? JSON.parse(response.metadata) : void 0,
            num_score: response.num_score,
            owner_id: response.owner_id,
            score: Number(response.score),
            subscore: Number(response.subscore),
            update_time: response.update_time,
            username: response.username
          });
        });
      };
      Client.prototype.writeStorageObjects = function(session, objects) {
        this.configuration.bearerToken = session && session.token;
        var request = {
          objects: []
        };
        objects.forEach(function(o) {
          request.objects.push({
            collection: o.collection,
            key: o.key,
            permission_read: o.permission_read,
            permission_write: o.permission_write,
            value: JSON.stringify(o.value),
            version: o.version
          });
        });
        return this.apiClient.writeStorageObjects(request);
      };
      return Client;
    }();
    exports.Client = Client;
    cc._RF.pop();
  }, {
    "../../../core/fetch": "fetch",
    "./api.gen": "api.gen",
    "./session": "session",
    "./socket": "socket",
    Base64: 2
  } ],
  commonReducers: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24027VtB1dOTZTBDNekaRwX", "commonReducers");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var mainReducers_1 = require("../../main/Script/mainReducers");
    var assets_1 = require("./reducers/assets");
    var scene_1 = require("./reducers/scene");
    var redux_1 = require("redux");
    var mergedReducer = redux_1.combineReducers(__assign({
      main: mainReducers_1.default
    }, assets_1.assetsReducer, scene_1.sceneReducer));
    exports.default = mergedReducer;
    cc._RF.pop();
  }, {
    "../../main/Script/mainReducers": "mainReducers",
    "./reducers/assets": "assets",
    "./reducers/scene": "scene",
    redux: 133
  } ],
  commonTypes: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2579beXfRBrrXrxQ5vcCG3", "commonTypes");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Reward;
    (function(Reward) {
      Reward["COINS"] = "coins";
    })(Reward = exports.Reward || (exports.Reward = {}));
    var Gender;
    (function(Gender) {
      Gender[Gender["FEMALE"] = 0] = "FEMALE";
      Gender[Gender["MALE"] = 1] = "MALE";
    })(Gender = exports.Gender || (exports.Gender = {}));
    cc._RF.pop();
  }, {} ],
  connectAdvanced: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1555dBT/qhOZr2Msi5OpL5H", "connectAdvanced");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Subscription_1 = require("../utils/Subscription");
    var hotReloadingVersion = 0;
    var dummyState = {};
    var noop = function() {};
    var makeSelectorStateful = function(sourceSelector, store) {
      var selector = {
        error: null,
        props: {},
        run: function runComponentSelector(props) {
          try {
            var nextProps = sourceSelector(store.getState(), props);
            if (nextProps !== selector.props || selector.error) {
              selector.shouldComponentUpdate = true;
              selector.props = nextProps;
              selector.error = null;
            }
          } catch (e) {
            selector.shouldComponentUpdate = true;
            selector.error = e;
          }
        },
        shouldComponentUpdate: false
      };
      return selector;
    };
    var invariant = function(test, error) {
      if (!test) throw new Error(error);
    };
    function getDefaultName(name) {
      return "ConnectAdvanced(" + name + ")";
    }
    function connectAdvanced(store, selectorFactory, _a) {
      var _b = _a.getDisplayName, getDisplayName = void 0 === _b ? getDefaultName : _b, _c = _a.methodName, methodName = void 0 === _c ? "connectAdvanced" : _c, _d = _a.shouldHandleStateChanges, shouldHandleStateChanges = void 0 === _d || _d, _e = _a.storeKey, storeKey = void 0 === _e ? "store" : _e, connectOptions = __rest(_a, [ "getDisplayName", "methodName", "shouldHandleStateChanges", "storeKey" ]);
      var subscriptionKey = storeKey + "Subscription";
      var version = hotReloadingVersion++;
      var wrapWithConnect = function(WrappedComponent) {
        var _a;
        invariant("function" === typeof WrappedComponent, "You must pass a component to the function returned by connect. Instead received " + WrappedComponent);
        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        var displayName = getDisplayName(wrappedComponentName);
        var selectorFactoryOptions = __assign({}, connectOptions, {
          WrappedComponent: WrappedComponent,
          displayName: displayName,
          getDisplayName: getDisplayName,
          methodName: methodName,
          shouldHandleStateChanges: shouldHandleStateChanges,
          storeKey: storeKey,
          wrappedComponentName: wrappedComponentName
        });
        return _a = function(_super) {
          __extends(class_1, _super);
          function class_1() {
            return null !== _super && _super.apply(this, arguments) || this;
          }
          class_1.prototype.onLoad = function() {
            this.version = version;
            this.renderCount = 0;
            this.store = store();
            this.props = {};
            invariant(!!this.store, 'Could not find "' + storeKey + '" in either the context or props of "' + displayName + '". Either wrap the root component in a <Provider>, or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".');
            this.initSelector();
            this.initSubscription();
            _super.prototype.onLoad.call(this);
          };
          class_1.prototype.start = function() {
            if (shouldHandleStateChanges) {
              this.subscription.trySubscribe();
              this.selector.run(this.props);
              if (this.selector.shouldComponentUpdate) {
                var oldProps = this.props;
                this.props = this.selector.props;
                this.componentReceivedProps(oldProps);
                this.selector.shouldComponentUpdate = false;
              }
            }
            _super.prototype.start.call(this);
          };
          class_1.prototype.onDestroy = function() {
            _super.prototype.onDestroy.call(this);
            this.subscription && this.subscription.tryUnsubscribe();
            this.subscription = null;
            this.store = null;
            this.props = null;
            this.selector.run = noop;
            this.selector.shouldComponentUpdate = false;
          };
          class_1.prototype.initSelector = function() {
            var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
            this.selector = makeSelectorStateful(sourceSelector, this.store);
            this.selector.run(this.props);
            this.props = this.selector.props;
          };
          class_1.prototype.initSubscription = function() {
            if (!shouldHandleStateChanges) return;
            this.subscription = new Subscription_1.Subscription(this.store, null, this.onStateChange.bind(this));
          };
          class_1.prototype.onStateChange = function() {
            this.selector.run(this.props);
            if (this.selector.error) throw this.selector.error;
            if (this.selector.shouldComponentUpdate) {
              var oldProps = this.props;
              this.props = this.selector.props;
              this.componentReceivedProps(oldProps);
              this.selector.shouldComponentUpdate = false;
            }
          };
          class_1.prototype.isSubscribed = function() {
            return Boolean(this.subscription && this.subscription.isSubscribed());
          };
          return class_1;
        }(WrappedComponent), _a.displayName = displayName, _a.WrappedComponent = WrappedComponent, 
        _a;
      };
      return wrapWithConnect;
    }
    exports.connectAdvanced = connectAdvanced;
    cc._RF.pop();
  }, {
    "../utils/Subscription": "Subscription"
  } ],
  connectToPureTarget: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c42e6fIijpFcrLdZ7K+V53a", "connectToPureTarget");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Subscription_1 = require("../utils/Subscription");
    var Logger_1 = require("../../Logger");
    var hotReloadingVersion = 0;
    var dummyState = {};
    var noop = function() {};
    var makeSelectorStateful = function(sourceSelector, store) {
      var selector = {
        error: null,
        props: {},
        run: function runComponentSelector(props) {
          try {
            var nextProps = sourceSelector(store.getState(), props);
            if (nextProps !== selector.props || selector.error) {
              selector.shouldComponentUpdate = true;
              selector.props = nextProps;
              selector.error = null;
            }
          } catch (e) {
            selector.shouldComponentUpdate = true;
            selector.error = e;
          }
        },
        shouldComponentUpdate: false
      };
      return selector;
    };
    var invariant = function(test, error) {
      if (!test) throw new Error(error);
    };
    function getDefaultName(name) {
      return "ConnectToPureTarget(" + name + ")";
    }
    function connectToPureTarget(store, selectorFactory, _a) {
      var _b = _a.getDisplayName, getDisplayName = void 0 === _b ? getDefaultName : _b, _c = _a.methodName, methodName = void 0 === _c ? "connectAdvanced" : _c, _d = _a.shouldHandleStateChanges, shouldHandleStateChanges = void 0 === _d || _d, _e = _a.storeKey, storeKey = void 0 === _e ? "store" : _e, connectOptions = __rest(_a, [ "getDisplayName", "methodName", "shouldHandleStateChanges", "storeKey" ]);
      var subscriptionKey = storeKey + "Subscription";
      var version = hotReloadingVersion++;
      var wrapWithConnect = function(WrappedComponent) {
        var _a;
        invariant("function" === typeof WrappedComponent, "You must pass a component to the function returned by connect. Instead received " + WrappedComponent);
        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        var displayName = getDisplayName(wrappedComponentName);
        var selectorFactoryOptions = __assign({}, connectOptions, {
          WrappedComponent: WrappedComponent,
          displayName: displayName,
          getDisplayName: getDisplayName,
          methodName: methodName,
          shouldHandleStateChanges: shouldHandleStateChanges,
          storeKey: storeKey,
          wrappedComponentName: wrappedComponentName
        });
        var logger = Logger_1.default.getLogger(displayName);
        return _a = function(_super) {
          __extends(class_1, _super);
          function class_1() {
            return null !== _super && _super.apply(this, arguments) || this;
          }
          class_1.prototype.init = function() {
            logger.log("init");
            this.version = version;
            this.renderCount = 0;
            this.store = store();
            this.props = {};
            invariant(!!this.store, 'Could not find "' + storeKey + '" in either the context or props of "' + displayName + '". Either wrap the root component in a <Provider>, or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".');
            this.initSelector();
            this.initSubscription();
            if (shouldHandleStateChanges) {
              this.subscription.trySubscribe();
              this.selector.run(this.props);
              if (this.selector.shouldComponentUpdate) {
                var oldProps = this.props;
                this.props = this.selector.props;
                this.componentReceivedProps(oldProps);
                this.selector.shouldComponentUpdate = false;
              }
            }
            _super.prototype.init.call(this);
          };
          class_1.prototype.destroy = function() {
            _super.prototype.destroy.call(this);
            this.subscription && this.subscription.tryUnsubscribe();
            this.subscription = null;
            this.store = null;
            this.props = null;
            this.selector.run = noop;
            this.selector.shouldComponentUpdate = false;
          };
          class_1.prototype.initSelector = function() {
            var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
            this.selector = makeSelectorStateful(sourceSelector, this.store);
            this.selector.run(this.props);
            this.props = this.selector.props;
          };
          class_1.prototype.initSubscription = function() {
            if (!shouldHandleStateChanges) return;
            this.subscription = new Subscription_1.Subscription(this.store, null, this.onStateChange.bind(this));
          };
          class_1.prototype.onStateChange = function() {
            this.selector.run(this.props);
            if (this.selector.error) throw this.selector.error;
            if (this.selector.shouldComponentUpdate) {
              var oldProps = this.props;
              this.props = this.selector.props;
              this.componentReceivedProps(oldProps);
              this.selector.shouldComponentUpdate = false;
            }
          };
          class_1.prototype.isSubscribed = function() {
            return Boolean(this.subscription && this.subscription.isSubscribed());
          };
          return class_1;
        }(WrappedComponent), _a.displayName = displayName, _a.WrappedComponent = WrappedComponent, 
        _a;
      };
      return wrapWithConnect;
    }
    exports.connectToPureTarget = connectToPureTarget;
    cc._RF.pop();
  }, {
    "../../Logger": "Logger",
    "../utils/Subscription": "Subscription"
  } ],
  connect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9c0052z2IlPN5eSGvprkA0A", "connect");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var connectAdvanced_1 = require("../components/connectAdvanced");
    var connectToPureTarget_1 = require("../components/connectToPureTarget");
    var shallowEqual_1 = require("../utils/shallowEqual");
    var mapDispatchToProps_1 = require("./mapDispatchToProps");
    var mapStateToProps_1 = require("./mapStateToProps");
    var mergeProps_1 = require("./mergeProps");
    var selectorFactory_1 = require("./selectorFactory");
    var store_1 = require("../../../store");
    var match = function(arg, factories, name) {
      for (var i = factories.length - 1; i >= 0; i--) {
        var result = factories[i](arg);
        if (result) return result;
      }
      return function(dispatch, options) {
        throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
      };
    };
    var strictEqual = function(a, b) {
      return a === b;
    };
    exports.createConnect = function(store, _a) {
      var _b = void 0 === _a ? {} : _a, _c = _b.connectHOC, connectHOC = void 0 === _c ? connectAdvanced_1.connectAdvanced : _c, _d = _b.mapStateToPropsFactories, mapStateToPropsFactories = void 0 === _d ? mapStateToProps_1.defaultMapStateToPropsFactories : _d, _e = _b.mapDispatchToPropsFactories, mapDispatchToPropsFactories = void 0 === _e ? mapDispatchToProps_1.defaultMapDispatchToPropsFactories : _e, _f = _b.mergePropsFactories, mergePropsFactories = void 0 === _f ? mergeProps_1.defaultMergePropsFactories : _f, _g = _b.selectorFactory, selectorFactory = void 0 === _g ? selectorFactory_1.defaultSelectorFactory : _g;
      return function(mapStateToProps, mapDispatchToProps, mergeProps, _a) {
        void 0 === _a && (_a = {});
        var _b = _a.pure, pure = void 0 === _b || _b, _c = _a.areStatesEqual, areStatesEqual = void 0 === _c ? strictEqual : _c, _d = _a.areOwnPropsEqual, areOwnPropsEqual = void 0 === _d ? shallowEqual_1.shallowEqual : _d, _e = _a.areStatePropsEqual, areStatePropsEqual = void 0 === _e ? shallowEqual_1.shallowEqual : _e, _f = _a.areMergedPropsEqual, areMergedPropsEqual = void 0 === _f ? shallowEqual_1.shallowEqual : _f, extraOptions = __rest(_a, [ "pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual" ]);
        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
        var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
        return connectHOC(store, selectorFactory, __assign({
          methodName: "connect",
          getDisplayName: function(name) {
            return "Connect(" + name + ")";
          },
          shouldHandleStateChanges: !!mapStateToProps,
          areMergedPropsEqual: areMergedPropsEqual,
          areOwnPropsEqual: areOwnPropsEqual,
          areStatePropsEqual: areStatePropsEqual,
          areStatesEqual: areStatesEqual,
          initMapDispatchToProps: initMapDispatchToProps,
          initMapStateToProps: initMapStateToProps,
          initMergeProps: initMergeProps,
          pure: pure
        }, extraOptions));
      };
    };
    exports.createConnectToTarget = function(store, _a) {
      var _b = void 0 === _a ? {} : _a, _c = _b.connectHOC, connectHOC = void 0 === _c ? connectToPureTarget_1.connectToPureTarget : _c, _d = _b.mapStateToPropsFactories, mapStateToPropsFactories = void 0 === _d ? mapStateToProps_1.defaultMapStateToPropsFactories : _d, _e = _b.mapDispatchToPropsFactories, mapDispatchToPropsFactories = void 0 === _e ? mapDispatchToProps_1.defaultMapDispatchToPropsFactories : _e, _f = _b.mergePropsFactories, mergePropsFactories = void 0 === _f ? mergeProps_1.defaultMergePropsFactories : _f, _g = _b.selectorFactory, selectorFactory = void 0 === _g ? selectorFactory_1.defaultSelectorFactory : _g;
      return function(mapStateToProps, mapDispatchToProps, mergeProps, _a) {
        void 0 === _a && (_a = {});
        var _b = _a.pure, pure = void 0 === _b || _b, _c = _a.areStatesEqual, areStatesEqual = void 0 === _c ? strictEqual : _c, _d = _a.areOwnPropsEqual, areOwnPropsEqual = void 0 === _d ? shallowEqual_1.shallowEqual : _d, _e = _a.areStatePropsEqual, areStatePropsEqual = void 0 === _e ? shallowEqual_1.shallowEqual : _e, _f = _a.areMergedPropsEqual, areMergedPropsEqual = void 0 === _f ? shallowEqual_1.shallowEqual : _f, extraOptions = __rest(_a, [ "pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual" ]);
        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
        var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
        return connectHOC(store, selectorFactory, __assign({
          methodName: "connect",
          getDisplayName: function(name) {
            return "Connect(" + name + ")";
          },
          shouldHandleStateChanges: !!mapStateToProps,
          areMergedPropsEqual: areMergedPropsEqual,
          areOwnPropsEqual: areOwnPropsEqual,
          areStatePropsEqual: areStatePropsEqual,
          areStatesEqual: areStatesEqual,
          initMapDispatchToProps: initMapDispatchToProps,
          initMapStateToProps: initMapStateToProps,
          initMergeProps: initMergeProps,
          pure: pure
        }, extraOptions));
      };
    };
    exports.connect = exports.createConnect(store_1.default.getStore);
    exports.connectToTarget = exports.createConnectToTarget(store_1.default.getStore);
    cc._RF.pop();
  }, {
    "../../../store": "index",
    "../components/connectAdvanced": "connectAdvanced",
    "../components/connectToPureTarget": "connectToPureTarget",
    "../utils/shallowEqual": "shallowEqual",
    "./mapDispatchToProps": "mapDispatchToProps",
    "./mapStateToProps": "mapStateToProps",
    "./mergeProps": "mergeProps",
    "./selectorFactory": "selectorFactory"
  } ],
  createReducer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b415hZ5v5Na7g6PYgQw5pg", "createReducer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function createReducer(initialState, handlers) {
      return function reducer(state, action) {
        void 0 === state && (state = initialState);
        return handlers.hasOwnProperty(action.type) ? handlers[action.type](state, action) : state;
      };
    }
    exports.default = createReducer;
    cc._RF.pop();
  }, {} ],
  fetch: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c2a5CJf9RKYI0lgd23xPtj", "fetch");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    var support = {
      searchParams: "URLSearchParams" in window,
      iterable: "Symbol" in window && "iterator" in Symbol,
      blob: "FileReader" in window && "Blob" in window && function() {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: "FormData" in window,
      arrayBuffer: "ArrayBuffer" in window
    };
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
      var viewClasses = [ "[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]" ];
      var isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    function normalizeName(name) {
      "string" !== typeof name && (name = String(name));
      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) throw new TypeError("Invalid character in header field name");
      return name.toLowerCase();
    }
    function normalizeValue(value) {
      "string" !== typeof value && (value = String(value));
      return value;
    }
    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: void 0 === value,
            value: value
          };
        }
      };
      support.iterable && (iterator[Symbol.iterator] = function() {
        return iterator;
      });
      return iterator;
    }
    function Headers(headers) {
      this.map = {};
      headers instanceof Headers ? headers.forEach(function(value, name) {
        this.append(name, value);
      }, this) : Array.isArray(headers) ? headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this) : headers && Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ", " + value : value;
    };
    Headers.prototype["delete"] = function(name) {
      delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) this.map.hasOwnProperty(name) && callback.call(thisArg, this.map[name], name, this);
    };
    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([ name, value ]);
      });
      return iteratorFor(items);
    };
    support.iterable && (Headers.prototype[Symbol.iterator] = Headers.prototype.entries);
    function consumed(body) {
      if (body.bodyUsed) return Promise.reject(new TypeError("Already read"));
      body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.onerror = function() {
          reject(reader.error);
        };
      });
    }
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
      for (var i = 0; i < view.length; i++) chars[i] = String.fromCharCode(view[i]);
      return chars.join("");
    }
    function bufferClone(buf) {
      if (buf.slice) return buf.slice(0);
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
    function Body() {
      this.bodyUsed = false;
      this._initBody = function(body) {
        this._bodyInit = body;
        if (body) if ("string" === typeof body) this._bodyText = body; else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body; else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body; else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString(); else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([ this._bodyArrayBuffer ]);
        } else {
          if (!support.arrayBuffer || !ArrayBuffer.prototype.isPrototypeOf(body) && !isArrayBufferView(body)) throw new Error("unsupported BodyInit type");
          this._bodyArrayBuffer = bufferClone(body);
        } else this._bodyText = "";
        this.headers.get("content-type") || ("string" === typeof body ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : support.searchParams && URLSearchParams.prototype.isPrototypeOf(body) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
      };
      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this);
          if (rejected) return rejected;
          if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
          if (this._bodyArrayBuffer) return Promise.resolve(new Blob([ this._bodyArrayBuffer ]));
          if (this._bodyFormData) throw new Error("could not read FormData body as blob");
          return Promise.resolve(new Blob([ this._bodyText ]));
        };
        this.arrayBuffer = function() {
          return this._bodyArrayBuffer ? consumed(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(readBlobAsArrayBuffer);
        };
      }
      this.text = function() {
        var rejected = consumed(this);
        if (rejected) return rejected;
        if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
        if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        if (this._bodyFormData) throw new Error("could not read FormData body as text");
        return Promise.resolve(this._bodyText);
      };
      support.formData && (this.formData = function() {
        return this.text().then(decode);
      });
      this.json = function() {
        return this.text().then(JSON.parse);
      };
      return this;
    }
    var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
      options = options || {};
      var body = options.body;
      if (input instanceof Request) {
        if (input.bodyUsed) throw new TypeError("Already read");
        this.url = input.url;
        this.credentials = input.credentials;
        options.headers || (this.headers = new Headers(input.headers));
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && null != input._bodyInit) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else this.url = String(input);
      this.credentials = options.credentials || this.credentials || "same-origin";
      !options.headers && this.headers || (this.headers = new Headers(options.headers));
      this.method = normalizeMethod(options.method || this.method || "GET");
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;
      if (("GET" === this.method || "HEAD" === this.method) && body) throw new TypeError("Body not allowed for GET or HEAD requests");
      this._initBody(body);
    }
    Request.prototype.clone = function() {
      return new Request(this, {
        body: this._bodyInit
      });
    };
    function decode(body) {
      var form = new FormData();
      body.trim().split("&").forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split("=");
          var name = split.shift().replace(/\+/g, " ");
          var value = split.join("=").replace(/\+/g, " ");
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
      preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
        var parts = line.split(":");
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(":").trim();
          headers.append(key, value);
        }
      });
      return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
      options || (options = {});
      this.type = "default";
      this.status = void 0 === options.status ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = "statusText" in options ? options.statusText : "OK";
      this.headers = new Headers(options.headers);
      this.url = options.url || "";
      this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };
    Response.error = function() {
      var response = new Response(null, {
        status: 0,
        statusText: ""
      });
      response.type = "error";
      return response;
    };
    var redirectStatuses = [ 301, 302, 303, 307, 308 ];
    Response.redirect = function(url, status) {
      if (-1 === redirectStatuses.indexOf(status)) throw new RangeError("Invalid status code");
      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };
    var DOMException = exports.DOMException = window.DOMException;
    try {
      new DOMException();
    } catch (err) {
      exports.DOMException = DOMException = function DOMException(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      DOMException.prototype = Object.create(Error.prototype);
      DOMException.prototype.constructor = DOMException;
    }
    function fetch(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init);
        if (request.signal && request.signal.aborted) return reject(new DOMException("Aborted", "AbortError"));
        var xhr = new XMLHttpRequest();
        function abortXhr() {
          xhr.abort();
        }
        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || "")
          };
          options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
          var body = "response" in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };
        xhr.onerror = function() {
          reject(new TypeError("Network request failed"));
        };
        xhr.ontimeout = function() {
          reject(new TypeError("Network request failed"));
        };
        xhr.onabort = function() {
          reject(new DOMException("Aborted", "AbortError"));
        };
        xhr.open(request.method, request.url, true);
        "include" === request.credentials ? xhr.withCredentials = true : "omit" === request.credentials && (xhr.withCredentials = false);
        "responseType" in xhr && support.blob && (xhr.responseType = "blob");
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
        if (request.signal) {
          request.signal.addEventListener("abort", abortXhr);
          xhr.onreadystatechange = function() {
            4 === xhr.readyState && request.signal.removeEventListener("abort", abortXhr);
          };
        }
        xhr.send("undefined" === typeof request._bodyInit ? null : request._bodyInit);
      });
    }
    fetch.polyfill = true;
    if (!window.fetch) {
      window.fetch = fetch;
      window.Headers = Headers;
      window.Request = Request;
      window.Response = Response;
    }
    cc._RF.pop();
  }, {} ],
  gameControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9927eZCQIhKEbU4rzCwl90l", "gameControl");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        localGame: {
          default: true
        }
      },
      onLoad: function onLoad() {
        this.localGame || (pathBeginning = "/Canvas/content/");
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  general: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bf66eLuPwFEd4sYD7hqbzSu", "general");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a, _b;
    var commonTypes_1 = require("../../../common/commonTypes");
    var createReducer_1 = require("../../../common/store/createReducer");
    var Logger_1 = require("../../../common/core/Logger");
    var mainActions_1 = require("../mainActions");
    var logger = Logger_1.default.getLogger("GeneralReducer");
    var initialSessionState = {
      loading: false,
      loaded: false,
      serverConnected: false,
      firstStart: false
    };
    var sessionState = createReducer_1.default(initialSessionState, (_a = {}, _a[mainActions_1.MainActionTypes.APPLICATION_INITIALIZING] = function(state, action) {
      return __assign({}, state, {
        loading: true,
        loaded: false,
        firstStart: false
      });
    }, _a[mainActions_1.MainActionTypes.APPLICATION_STARTED] = function(state, action) {
      return __assign({}, state, {
        loading: false,
        loaded: true
      });
    }, _a[mainActions_1.MainActionTypes.CREATE_PLAYER] = function(state, action) {
      return __assign({}, state, {
        firstStart: true
      });
    }, _a[mainActions_1.MainActionTypes.UPDATE_SERVER_STATE] = function(state, action) {
      return __assign({}, state, {
        serverConnected: action.payload.connected
      });
    }, _a));
    var initialApplicationState = {
      uuid: "",
      username: "",
      avatarId: "",
      gender: commonTypes_1.Gender.MALE,
      sessionId: 0
    };
    var applicationState = createReducer_1.default(initialApplicationState, (_b = {}, 
    _b[mainActions_1.MainActionTypes.UPDATE_SESSION] = function(state, action) {
      return __assign({}, state, {
        sessionId: state.sessionId + 1
      });
    }, _b[mainActions_1.MainActionTypes.CREATE_PLAYER] = function(state, action) {
      return __assign({}, state, {
        uuid: action.payload.uuid,
        username: action.payload.username,
        avatarId: action.payload.avatarId,
        gender: action.payload.gender
      });
    }, _b[mainActions_1.MainActionTypes.UPDATE_PLAYER] = function(state, action) {
      return __assign({}, state, {
        username: action.payload.userName || state.username,
        avatarId: action.payload.avatarId || state.avatarId,
        gender: action.payload.gender || state.gender
      });
    }, _b));
    exports.generalReducer = {
      applicationState: applicationState,
      sessionState: sessionState
    };
    cc._RF.pop();
  }, {
    "../../../common/commonTypes": "commonTypes",
    "../../../common/core/Logger": "Logger",
    "../../../common/store/createReducer": "createReducer",
    "../mainActions": "mainActions"
  } ],
  historyControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "718ecgoRHtOtqFYZLUZ6mrh", "historyControl");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      start: function start() {},
      historyUpdate: function historyUpdate(node) {
        for (var i = 6; i > 0; i--) this.node.getChildByName("node_" + i).getComponent("cc.Sprite").spriteFrame = 1 !== i ? this.node.getChildByName("node_" + (i - 1)).getComponent("cc.Sprite").spriteFrame : node.getComponent("cc.Sprite").spriteFrame;
      }
    });
    cc._RF.pop();
  }, {} ],
  index: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0319f7otA9GE5mcQeyWUt0R", "index");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var redux_1 = require("redux");
    var commonReducers_1 = require("./commonReducers");
    var redux_persist_1 = require("redux-persist");
    var localState = {
      inited: false,
      loaded: false
    };
    var store;
    var persistor;
    function init() {
      store = redux_1.createStore(commonReducers_1.default);
      persistor = redux_persist_1.persistStore(store, {}, function() {
        localState.loaded = true;
      });
      localState.inited = true;
    }
    function getStore() {
      localState.inited || init();
      return store;
    }
    function getPersistor() {
      localState.inited || init();
      return persistor;
    }
    function loadStore() {
      return __awaiter(this, void 0, Promise, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
           case 0:
            if (localState.loaded) return [ 2, true ];
            return [ 4, new Promise(function(resolve) {
              var unsubscribe = getPersistor().subscribe(function() {
                unsubscribe();
                resolve();
              });
            }) ];

           case 1:
            _a.sent();
            localState.loaded = true;
            return [ 2, true ];
          }
        });
      });
    }
    function getState() {
      return getStore().getState();
    }
    function dispatch(action) {
      return getStore().dispatch(action);
    }
    exports.default = {
      loadStore: loadStore,
      getState: getState,
      getStore: getStore,
      dispatch: dispatch
    };
    cc._RF.pop();
  }, {
    "./commonReducers": "commonReducers",
    redux: 133,
    "redux-persist": 126
  } ],
  mainActions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "be0bdvkGeFIzbbAvbM/EhuS", "mainActions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var actions_1 = require("../../common/store/actions");
    var MainActionTypes;
    (function(MainActionTypes) {
      MainActionTypes["APPLICATION_INITIALIZING"] = "application_initializing";
      MainActionTypes["APPLICATION_STARTED"] = "application_started";
      MainActionTypes["UPDATE_SESSION"] = "update_session";
      MainActionTypes["CREATE_PLAYER"] = "create_player";
      MainActionTypes["UPDATE_PLAYER"] = "update_player";
      MainActionTypes["UPDATE_SERVER_STATE"] = "update_server_state";
      MainActionTypes["SETUP_GAMES_CONFIG"] = "setup_games_config";
      MainActionTypes["UPDATE_GAME_STATE"] = "update_game_state";
    })(MainActionTypes = exports.MainActionTypes || (exports.MainActionTypes = {}));
    exports.MainActions = {
      applicationInitializing: function() {
        return actions_1.createAction(MainActionTypes.APPLICATION_INITIALIZING);
      },
      applicationStarted: function() {
        return actions_1.createAction(MainActionTypes.APPLICATION_STARTED);
      },
      updateSession: function() {
        return actions_1.createAction(MainActionTypes.UPDATE_SESSION);
      },
      createPlayer: function(uuid, username, avatarId, gender) {
        return actions_1.createAction(MainActionTypes.CREATE_PLAYER, {
          uuid: uuid,
          username: username,
          avatarId: avatarId,
          gender: gender
        });
      },
      updatePlayer: function(_a) {
        var userId = _a.userId, userName = _a.userName, avatarId = _a.avatarId, gender = _a.gender, wallet = _a.wallet;
        return actions_1.createAction(MainActionTypes.UPDATE_PLAYER, {
          userId: userId,
          userName: userName,
          avatarId: avatarId,
          gender: gender,
          wallet: wallet
        });
      },
      updateServerState: function(connected) {
        return actions_1.createAction(MainActionTypes.UPDATE_SERVER_STATE, {
          connected: connected
        });
      },
      setupGamesConfig: function(gamesOnField, clientGamesConfig, serverGamesConfig) {
        return actions_1.createAction(MainActionTypes.SETUP_GAMES_CONFIG, {
          gamesOnField: gamesOnField,
          clientGamesConfig: clientGamesConfig,
          serverGamesConfig: serverGamesConfig
        });
      },
      updateGameState: function(code, state) {
        return actions_1.createAction(MainActionTypes.UPDATE_GAME_STATE, {
          code: code,
          state: state
        });
      }
    };
    cc._RF.pop();
  }, {
    "../../common/store/actions": "actions"
  } ],
  mainReducers: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7426ebdGTBDQpzEnhPC5cSA", "mainReducers");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var general_1 = require("./reducers/general");
    var model_1 = require("./reducers/model");
    var redux_1 = require("redux");
    var redux_persist_1 = require("redux-persist");
    var redux_persist_transform_compress_1 = require("redux-persist-transform-compress");
    var CocosStorage_1 = require("../../common/store/CocosStorage");
    var rootPersistReducer = redux_persist_1.persistReducer({
      key: "root",
      storage: CocosStorage_1.default,
      version: 1,
      blacklist: [ "sessionState", "modelState" ],
      transforms: [ redux_persist_transform_compress_1.default() ]
    }, redux_1.combineReducers(__assign({}, general_1.generalReducer, model_1.modelReducer)));
    exports.default = rootPersistReducer;
    cc._RF.pop();
  }, {
    "../../common/store/CocosStorage": "CocosStorage",
    "./reducers/general": "general",
    "./reducers/model": "model",
    redux: 133,
    "redux-persist": 126,
    "redux-persist-transform-compress": 120
  } ],
  mapDispatchToProps: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce521fjIrRIS6iRMpMiKPEU", "mapDispatchToProps");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var wrapMapToProps_1 = require("./wrapMapToProps");
    var redux_1 = require("redux");
    exports.whenMapDispatchToPropsIsFunction = function(mapDispatchToProps) {
      return "function" === typeof mapDispatchToProps ? wrapMapToProps_1.wrapMapToPropsFunc(mapDispatchToProps, "mapDispatchToProps") : void 0;
    };
    exports.whenMapDispatchToPropsIsMissing = function(mapDispatchToProps) {
      return mapDispatchToProps ? void 0 : wrapMapToProps_1.wrapMapToPropsConstant(function(dispatch) {
        return {
          dispatch: dispatch
        };
      });
    };
    exports.whenMapDispatchToPropsIsObject = function(mapDispatchToProps) {
      return mapDispatchToProps && "object" === typeof mapDispatchToProps ? wrapMapToProps_1.wrapMapToPropsConstant(function(dispatch) {
        return redux_1.bindActionCreators(mapDispatchToProps, dispatch);
      }) : void 0;
    };
    exports.defaultMapDispatchToPropsFactories = [ exports.whenMapDispatchToPropsIsFunction, exports.whenMapDispatchToPropsIsMissing, exports.whenMapDispatchToPropsIsObject ];
    cc._RF.pop();
  }, {
    "./wrapMapToProps": "wrapMapToProps",
    redux: 133
  } ],
  mapStateToProps: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b77dg5rYhBBrzobtsXQIK4", "mapStateToProps");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var wrapMapToProps_1 = require("./wrapMapToProps");
    exports.whenMapStateToPropsIsFunction = function(mapStateToProps) {
      return "function" === typeof mapStateToProps ? wrapMapToProps_1.wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
    };
    exports.whenMapStateToPropsIsMissing = function(mapStateToProps) {
      return mapStateToProps ? void 0 : wrapMapToProps_1.wrapMapToPropsConstant(function() {
        return {};
      });
    };
    exports.defaultMapStateToPropsFactories = [ exports.whenMapStateToPropsIsFunction, exports.whenMapStateToPropsIsMissing ];
    cc._RF.pop();
  }, {
    "./wrapMapToProps": "wrapMapToProps"
  } ],
  mergeProps: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9a1fS2htdDvK9q42VTLEwN", "mergeProps");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultMergeProps = function(stateProps, dispatchProps, ownProps) {
      return __assign({}, ownProps, stateProps, dispatchProps);
    };
    exports.wrapMergePropsFunc = function(mergeProps) {
      return function(dispatch, _a) {
        var displayName = _a.displayName, pure = _a.pure, areMergedPropsEqual = _a.areMergedPropsEqual;
        var hasRunOnce = false;
        var mergedProps;
        return function(stateProps, dispatchProps, ownProps) {
          var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          if (hasRunOnce) pure && areMergedPropsEqual(nextMergedProps, mergedProps) || (mergedProps = nextMergedProps); else {
            hasRunOnce = true;
            mergedProps = nextMergedProps;
          }
          return mergedProps;
        };
      };
    };
    exports.whenMergePropsIsFunction = function(mergeProps) {
      return "function" === typeof mergeProps ? exports.wrapMergePropsFunc(mergeProps) : void 0;
    };
    exports.whenMergePropsIsOmitted = function(mergeProps) {
      return mergeProps ? void 0 : function() {
        return exports.defaultMergeProps;
      };
    };
    exports.defaultMergePropsFactories = [ exports.whenMergePropsIsFunction, exports.whenMergePropsIsOmitted ];
    cc._RF.pop();
  }, {} ],
  model: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2465kaw2lLc5NExZ9N1wdU", "model");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a;
    var createReducer_1 = require("../../../common/store/createReducer");
    var Logger_1 = require("../../../common/core/Logger");
    var mainActions_1 = require("../mainActions");
    var commonTypes_1 = require("../../../common/commonTypes");
    var logger = Logger_1.default.getLogger("ModelReducer");
    var initialModelState = {
      playerId: "",
      playerName: "",
      playerAvatarId: "",
      playerGender: commonTypes_1.Gender.MALE,
      playerStorage: {},
      games: []
    };
    var modelState = createReducer_1.default(initialModelState, (_a = {}, _a[mainActions_1.MainActionTypes.UPDATE_PLAYER] = function(state, action) {
      return null != action.payload ? __assign({}, state, {
        playerId: action.payload.userId || state.playerId,
        playerName: action.payload.userName || state.playerName,
        playerAvatarId: action.payload.avatarId || state.playerAvatarId,
        playerGender: action.payload.gender || state.playerGender,
        playerStorage: __assign({}, state.playerStorage, action.payload.wallet || {})
      }) : state;
    }, _a[mainActions_1.MainActionTypes.SETUP_GAMES_CONFIG] = function(state, action) {
      if (null != action.payload) return __assign({}, state, {
        games: action.payload.gamesOnField.map(function(gameOnFieldCode) {
          var current = (state.games || []).find(function(value) {
            return value.config.code === gameOnFieldCode;
          });
          var clientConfig = action.payload.clientGamesConfig.find(function(value) {
            return value.code === gameOnFieldCode;
          });
          var serverConfig = action.payload.serverGamesConfig.find(function(value) {
            return value.code === gameOnFieldCode;
          });
          if (null == clientConfig || null == serverConfig) return null;
          var result = {
            config: __assign({}, serverConfig, clientConfig),
            loaded: null != current && current.loaded
          };
          return result;
        }).filter(function(value) {
          return null != value;
        })
      });
      return state;
    }, _a[mainActions_1.MainActionTypes.UPDATE_GAME_STATE] = function(state, action) {
      return __assign({}, state, {
        games: state.games.map(function(value) {
          if (value.config.code === action.payload.code) return __assign({}, value, {
            loaded: action.payload.state.loaded
          });
          return value;
        })
      });
    }, _a));
    exports.modelReducer = {
      modelState: modelState
    };
    cc._RF.pop();
  }, {
    "../../../common/commonTypes": "commonTypes",
    "../../../common/core/Logger": "Logger",
    "../../../common/store/createReducer": "createReducer",
    "../mainActions": "mainActions"
  } ],
  ratesControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb611vjgppAKLA2Wfpvz10G", "ratesControl");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        frame: {
          default: null,
          type: cc.Node
        },
        clock: {
          default: null,
          type: cc.Node
        },
        clockTime: {
          default: 20
        }
      },
      onLoad: function onLoad() {
        this.ratesToRunArray = [];
        null != this.clock && (this.clockLabel = this.clock.getComponent("cc.Label"));
        this.gameStarted = false;
        this.randomStartPosition();
        this.fillRatesArray();
        this.historyNode = cc.find(pathBeginning + "game/table/header/history");
        this.coinsLost = 0;
        this.coinsWon = 0;
      },
      start: function start() {},
      randomStartPosition: function randomStartPosition() {
        var rand = randomNumber(this.node.children.length);
        var randRate = this.node.children[rand];
        this.frame.startPos = rand;
        this.frame.position = randRate.position;
        this.frame.getComponent("cc.MotionStreak").fadeTime = .001;
        this.frame.active = false;
      },
      fillRatesArray: function fillRatesArray() {
        var rand = randomNumber(70, 40);
        var multiplayer = 0;
        var startPos = this.frame.startPos;
        for (var i = 1; i < rand; i++) {
          var curIndex = startPos + i - multiplayer * this.node.children.length;
          if (curIndex >= this.node.children.length) {
            multiplayer++;
            curIndex -= this.node.children.length;
          }
          this.ratesToRunArray.push(this.node.children[curIndex]);
        }
      },
      update: function update(dt) {
        if (null != this.clock && !this.gameStarted) if (this.clockTime > 1) {
          this.clockTime -= dt;
          this.clockLabel.string = Math.floor(this.clockTime);
        } else {
          this.gameStarted = true;
          this.clockTime = 0;
          this.clockTime = 0;
          this.clockLabel.string = Math.floor(this.clockTime);
          var tmpBetArray = cc.find(pathBeginning + "game/table/bets").getComponent("betsControl").betsArray;
          tmpBetArray.length > 0 && (previousBet = tmpBetArray);
          this.runSelector();
        }
      },
      runSelector: function runSelector() {
        var _this = this;
        disableEnableChildenButtonsInNode(false, cc.find(pathBeginning + "game/table/bets").children);
        disableEnableChildenButtonsInNode(false, cc.find(pathBeginning + "game/table/chips_panel").children);
        cc.find(pathBeginning + "game/table/footer/apply_bet_button").getComponent("cc.Button").interactable = false;
        this.frame.active = true;
        var actionsArray = [];
        for (var i = 0; i < this.ratesToRunArray.length; i++) {
          actionsArray.push(cc.moveTo(.05, this.ratesToRunArray[i].x, this.ratesToRunArray[i].y));
          0 === i && actionsArray.push(cc.callFunc(function() {
            _this.frame.getComponent("cc.MotionStreak").fadeTime = .2;
          }));
          i < this.ratesToRunArray.length / 2 || actionsArray.push(cc.delayTime(.1 + .01 * (i - this.ratesToRunArray.length / 2)));
        }
        actionsArray.push(cc.callFunc(this.checkResults, this));
        var seq = new cc.Sequence(actionsArray);
        this.frame.runAction(seq);
      },
      checkResults: function checkResults() {
        var _this2 = this;
        var resultRate = this.ratesToRunArray[this.ratesToRunArray.length - 1];
        var resultName = resultRate.getName().split("_");
        if (resultName[2]) {
          this.highlightWinBets(cc.find(pathBeginning + "game/table/bets/" + resultName[0] + "/highlighter"));
          this.highlightWinBets(cc.find(pathBeginning + "game/table/bets/" + resultName[2] + "/highlighter"));
          var animNode = cc.find(pathBeginning + "game/" + resultRate.getName().split("_")[0]);
          animNode.active = true;
          var anim = animNode.getComponent(cc.Animation);
          var animState = anim.getAnimationState(animNode.getName());
          anim.on("finished", function(event) {
            if (event.currentTarget === animState) {
              animNode.active = false;
              _this2.showGameOver();
            }
          });
          anim.play(animNode.getName());
        } else if ("shark" === resultName[0]) {
          resultName = resultName.join("_");
          var _animNode = cc.find(pathBeginning + "game/" + resultName);
          _animNode.active = true;
          var _anim = _animNode.getComponent(cc.Animation);
          var _animState = _anim.getAnimationState(_animNode.getName());
          _anim.on("finished", function(event) {
            if (event.currentTarget === _animState) {
              _animNode.active = false;
              _this2.showGameOver();
            }
          });
          _anim.play(_animNode.getName());
        } else this.showGameOver();
        this.historyNode.getComponent("historyControl").historyUpdate(resultRate);
        "shark" === resultRate.getName().split("_")[0] ? this.calculateWin(null, resultRate.getName().split("_")[0] + "_" + resultRate.getName().split("_")[1]) : this.calculateWin(resultRate.getName().split("_")[2], resultRate.getName().split("_")[0]);
        this.cleanData();
      },
      calculateWin: function calculateWin() {
        var animalType = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        var winningBet = arguments[1];
        var betsArray = cc.find(pathBeginning + "game/table/bets").getComponent("betsControl").betsArray;
        if ("bank" === winningBet && betsArray.length > 0 || "compensation" === winningBet && betsArray.length > 0) if ("compensation" === winningBet) for (var i = 0; i < betsArray.length; i++) userBalance += parseInt(betsArray[i].moneyPut, 10); else userBalance += 1e4; else for (var _i = 0; _i < betsArray.length; _i++) if (betsArray[_i].tmpBet.getName() === winningBet && "shark" !== betsArray[_i].tmpBet.getName()) {
          userBalance += betsArray[_i].moneyPut * betsMultiplayer[winningBet];
          this.coinsWon = parseInt(this.coinsWon, 10) + betsArray[_i].moneyPut * betsMultiplayer[winningBet];
          this.coinsLost = parseInt(this.coinsLost, 10) + parseInt(betsArray[_i].moneyPut, 10);
        } else if ("shark" === betsArray[_i].tmpBet.getName()) if ("shark_silver" === winningBet || "shark_gold" === winningBet) {
          userBalance += betsArray[_i].moneyPut * betsMultiplayer[winningBet];
          this.coinsWon = parseInt(this.coinsWon, 10) + betsArray[_i].moneyPut * betsMultiplayer[winningBet];
        } else this.coinsLost = parseInt(this.coinsLost, 10) + parseInt(betsArray[_i].moneyPut, 10); else if (betsArray[_i].tmpBet.getName() === animalType) {
          userBalance += 2 * betsArray[_i].moneyPut;
          this.coinsWon = parseInt(this.coinsWon, 10) + 2 * betsArray[_i].moneyPut;
          this.coinsLost = parseInt(this.coinsLost, 10) + parseInt(betsArray[_i].moneyPut, 10);
        } else this.coinsLost = parseInt(this.coinsLost, 10) + parseInt(betsArray[_i].moneyPut, 10);
        cc.find(pathBeginning + "game/table/bets").getComponent("betsControl").betsArray = [];
        cc.sys.localStorage.setItem("Spinc_user_balance", userBalance);
        cc.find(pathBeginning + "game/table/footer/user_data").getChildByName("balance").getComponent("cc.Label").string = userBalance;
      },
      showGameOver: function showGameOver() {
        var _this3 = this;
        var animNode = cc.find(pathBeginning + "game/resultBoard");
        animNode.getChildByName("you_win").getChildByName("text").getComponent("cc.Label").string = "You won " + this.coinsWon + "!";
        animNode.getChildByName("you_lose").getChildByName("text").getComponent("cc.Label").string = "You lost " + this.coinsLost + "!";
        animNode.runAction(cc.sequence(cc.callFunc(function() {
          animNode.getComponent("cc.Animation").play("results_enter");
        }, this), cc.delayTime(2), cc.callFunc(function() {
          var anim = animNode.getComponent(cc.Animation);
          var animState = anim.getAnimationState("results_exit");
          anim.on("finished", function(event) {
            if (event.currentTarget === animState) {
              _this3.enableButtons();
              _this3.resetGame();
            }
          });
          anim.play("results_exit");
        }, this, animNode)));
        for (var i = 0; i < coinsOnBetsArray.length; i++) coinsOnBetsArray[i].parent = null;
        coinsOnBetsArray = [];
      },
      enableButtons: function enableButtons() {
        disableEnableChildenButtonsInNode(true, cc.find(pathBeginning + "game/table/bets").children);
        disableEnableChildenButtonsInNode(true, cc.find(pathBeginning + "game/table/chips_panel").children);
        cc.find(pathBeginning + "game/table/footer/apply_bet_button").getComponent("cc.Button").interactable = true;
      },
      highlightWinBets: function highlightWinBets(node) {
        var curNode = node;
        curNode.active = true;
        curNode.runAction(cc.sequence(cc.fadeTo(.1, 0), cc.delayTime(.1), cc.fadeTo(.3, 255), cc.delayTime(.1), cc.fadeTo(.1, 0), cc.delayTime(.1), cc.fadeTo(.3, 255), cc.delayTime(.1), cc.fadeTo(.1, 0), cc.delayTime(.1), cc.fadeTo(.3, 255), cc.delayTime(.1), cc.callFunc(function(target, data) {
          var curData = data;
          curData.active = false;
        }, this, curNode)));
      },
      cleanData: function cleanData() {
        this.ratesToRunArray = [];
        this.frame.active = false;
        cc.find(pathBeginning + "game/table/bets").getComponent("betsControl").cleanCoins();
        this.randomStartPosition();
        this.fillRatesArray();
      },
      resetGame: function resetGame() {
        this.gameStarted = false;
        this.clockTime = 21;
        this.coinsLost = 0;
        this.coinsWon = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  reduxTypes: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3f1eYFhFlBW5NsjZgSdLQa", "reduxTypes");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  sceneActions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e37b3Mfq1xEWZDLB+oLsbPW", "sceneActions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var actions_1 = require("./actions");
    var SceneActionTypes;
    (function(SceneActionTypes) {
      SceneActionTypes["SCENE_PUSH"] = "scene_push";
      SceneActionTypes["SCENE_POP"] = "scene_pop";
      SceneActionTypes["SCENE_POP_TO_ROOT"] = "scene_pop_to_root";
      SceneActionTypes["SCENE_RESET_TO"] = "scene_reset_to";
    })(SceneActionTypes = exports.SceneActionTypes || (exports.SceneActionTypes = {}));
    exports.SceneActions = {
      scenePush: function(name, params) {
        return actions_1.createAction(SceneActionTypes.SCENE_PUSH, {
          name: name,
          params: params
        });
      },
      scenePop: function() {
        return actions_1.createAction(SceneActionTypes.SCENE_POP);
      },
      scenePopToRoot: function() {
        return actions_1.createAction(SceneActionTypes.SCENE_POP_TO_ROOT);
      },
      sceneResetTo: function(name, params) {
        return actions_1.createAction(SceneActionTypes.SCENE_RESET_TO, {
          name: name,
          params: params
        });
      }
    };
    cc._RF.pop();
  }, {
    "./actions": "actions"
  } ],
  scene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3d03YF8SpEE5xzy18/TBAS", "scene");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a;
    var Logger_1 = require("../../core/Logger");
    var createReducer_1 = require("../createReducer");
    var sceneActions_1 = require("../sceneActions");
    var logger = Logger_1.default.getLogger("ModelReducer");
    var initialSceneState = {
      nextId: 1,
      history: []
    };
    var sceneState = createReducer_1.default(initialSceneState, (_a = {}, _a[sceneActions_1.SceneActionTypes.SCENE_PUSH] = function(state, action) {
      var sceneInfo = {
        id: state.nextId,
        name: action.payload.name,
        params: action.payload.params
      };
      return {
        nextId: state.nextId + 1,
        current: sceneInfo,
        history: state.history.concat([ sceneInfo ])
      };
    }, _a[sceneActions_1.SceneActionTypes.SCENE_POP] = function(state, action) {
      if (state.history.length > 1) {
        var newHistory = state.history.slice();
        newHistory.pop();
        return __assign({}, state, {
          current: newHistory[newHistory.length - 1],
          history: newHistory
        });
      }
      return state;
    }, _a[sceneActions_1.SceneActionTypes.SCENE_POP_TO_ROOT] = function(state, action) {
      if (state.history.length > 0) return __assign({}, state, {
        current: state.history[0],
        history: [ state.history[0] ]
      });
      return state;
    }, _a[sceneActions_1.SceneActionTypes.SCENE_RESET_TO] = function(state, action) {
      var sceneInfo = {
        id: state.nextId,
        name: action.payload.name,
        params: action.payload.params
      };
      return {
        nextId: state.nextId + 1,
        current: sceneInfo,
        history: [ sceneInfo ]
      };
    }, _a));
    exports.sceneReducer = {
      sceneState: sceneState
    };
    cc._RF.pop();
  }, {
    "../../core/Logger": "Logger",
    "../createReducer": "createReducer",
    "../sceneActions": "sceneActions"
  } ],
  selectorFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36859o/h65HXbiCFQl+giDh", "selectorFactory");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.impureFinalPropsSelectorFactory = function(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
      return function(state, ownProps) {
        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
      };
    };
    exports.pureFinalPropsSelectorFactory = function(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _a) {
      var areStatesEqual = _a.areStatesEqual, areOwnPropsEqual = _a.areOwnPropsEqual, areStatePropsEqual = _a.areStatePropsEqual;
      var hasRunAtLeastOnce = false;
      var state;
      var ownProps;
      var stateProps;
      var dispatchProps;
      var mergedProps;
      var handleFirstCall = function(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
      };
      var handleNewPropsAndNewState = function() {
        stateProps = mapStateToProps(state, ownProps);
        mapDispatchToProps.dependsOnOwnProps && (dispatchProps = mapDispatchToProps(dispatch, ownProps));
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      };
      var handleNewProps = function() {
        mapStateToProps.dependsOnOwnProps && (stateProps = mapStateToProps(state, ownProps));
        mapDispatchToProps.dependsOnOwnProps && (dispatchProps = mapDispatchToProps(dispatch, ownProps));
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      };
      var handleNewState = function() {
        var nextStateProps = mapStateToProps(state, ownProps);
        var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        statePropsChanged && (mergedProps = mergeProps(stateProps, dispatchProps, ownProps));
        return mergedProps;
      };
      var handleSubsequentCalls = function(nextState, nextOwnProps) {
        var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        var stateChanged = !areStatesEqual(nextState, state);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged) return handleNewPropsAndNewState();
        if (propsChanged) return handleNewProps();
        if (stateChanged) return handleNewState();
        return mergedProps;
      };
      var pureFinalPropsSelector = function(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
      };
      return pureFinalPropsSelector;
    };
    exports.defaultSelectorFactory = function(dispatch, _a) {
      var initMapStateToProps = _a.initMapStateToProps, initMapDispatchToProps = _a.initMapDispatchToProps, initMergeProps = _a.initMergeProps, opts = __rest(_a, [ "initMapStateToProps", "initMapDispatchToProps", "initMergeProps" ]);
      var options = opts;
      var mapStateToProps = initMapStateToProps(dispatch, options);
      var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
      var mergeProps = initMergeProps(dispatch, options);
      var selectorFactory = options.pure ? exports.pureFinalPropsSelectorFactory : exports.impureFinalPropsSelectorFactory;
      return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
    };
    cc._RF.pop();
  }, {} ],
  selector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0163+EkodHPr5Tf2tiqlJM", "selector");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var selector = function(selectors, defaultResult) {
      return function(value) {
        return selectors.reduce(function(result, selector) {
          if (Array.isArray(selector[0])) {
            if (selector[0].some(function(temp) {
              return temp === value;
            })) return selector[1](value);
          } else if (selector[0] === value) return selector[1](value);
          return result;
        }, null != defaultResult ? defaultResult(value) : void 0);
      };
    };
    exports.default = selector;
    cc._RF.pop();
  }, {} ],
  session: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35ebb3mJdJPVrArX9F7FUiB", "session");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Session = function() {
      function Session(token, created_at, expires_at, username, user_id) {
        this.token = token;
        this.created_at = created_at;
        this.expires_at = expires_at;
        this.username = username;
        this.user_id = user_id;
      }
      Session.prototype.isExpired = function(currentTime) {
        return this.expires_at - currentTime < 0;
      };
      Session.restore = function(jwt) {
        var createdAt = Math.floor(new Date().getTime() / 1e3);
        var parts = jwt.split(".");
        if (3 !== parts.length) throw new Error("jwt is not valid.");
        var decoded = JSON.parse(atob(parts[1]));
        var expiresAt = Math.floor(parseInt(decoded["exp"]));
        return new Session(jwt, createdAt, expiresAt, decoded["usn"], decoded["uid"]);
      };
      return Session;
    }();
    exports.Session = Session;
    cc._RF.pop();
  }, {} ],
  shallowEqual: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22dd5l6JwdEMaA7ISzC3c6T", "shallowEqual");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var hasOwn = Object.prototype.hasOwnProperty;
    exports.shallowEqual = function(a, b) {
      if (a === b) return true;
      var countA = 0;
      var countB = 0;
      for (var key in a) {
        if (hasOwn.call(a, key) && a[key] !== b[key]) return false;
        countA++;
      }
      for (var key in b) hasOwn.call(b, key) && countB++;
      return countA === countB;
    };
    cc._RF.pop();
  }, {} ],
  socket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec3bfLgVB5KEpHxcFulb9gg", "socket");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Base64_1 = require("Base64");
    var DefaultSocket = function() {
      function DefaultSocket(host, port, useSSL, verbose) {
        void 0 === useSSL && (useSSL = false);
        void 0 === verbose && (verbose = false);
        this.host = host;
        this.port = port;
        this.useSSL = useSSL;
        this.verbose = verbose;
        this.cIds = {};
      }
      DefaultSocket.prototype.generatecid = function() {
        return new Array(30).fill(0).slice().map(function() {
          return Math.random().toString(36)[3];
        }).join("");
      };
      DefaultSocket.prototype.connect = function(session, createStatus) {
        var _this = this;
        void 0 === createStatus && (createStatus = false);
        if (void 0 !== this.socket) return Promise.resolve(session);
        var scheme = this.useSSL ? "wss://" : "ws://";
        var url = "" + scheme + this.host + ":" + this.port + "/ws?lang=en&status=" + encodeURIComponent(createStatus.toString()) + "&token=" + encodeURIComponent(session.token);
        var socket = new WebSocket(url);
        this.socket = socket;
        socket.onclose = function(evt) {
          _this.ondisconnect(evt);
          _this.socket = void 0;
        };
        socket.onerror = function(evt) {
          _this.onerror(evt);
        };
        socket.onmessage = function(evt) {
          var message = JSON.parse(evt.data);
          _this.verbose && window && window.console && console.log("Response: %o", message);
          if (void 0 === message.cid) if (message.notifications) message.notifications.notifications.forEach(function(n) {
            var notification = {
              code: n.code,
              create_time: n.create_time,
              id: n.id,
              persistent: n.persistent,
              sender_id: n.sender_id,
              subject: n.subject,
              content: n.content ? JSON.parse(n.content) : void 0
            };
            _this.onnotification(notification);
          }); else if (message.match_data) {
            message.match_data.data = null != message.match_data.data ? JSON.parse(Base64_1.atob(message.match_data.data)) : null;
            message.match_data.op_code = parseInt(message.match_data.op_code);
            _this.onmatchdata(message.match_data);
          } else if (message.match_presence_event) _this.onmatchpresence(message.match_presence_event); else if (message.matchmaker_matched) _this.onmatchmakermatched(message.matchmaker_matched); else if (message.status_presence_event) _this.onstatuspresence(message.status_presence_event); else if (message.stream_presence_event) _this.onstreampresence(message.stream_presence_event); else if (message.stream_data) _this.onstreamdata(message.stream_data); else if (message.channel_message) {
            message.channel_message.content = JSON.parse(message.channel_message.content);
            _this.onchannelmessage(message.channel_message);
          } else message.channel_presence_event ? _this.onchannelpresence(message.channel_presence_event) : _this.verbose && window && window.console && console.log("Unrecognized message received: %o", message); else {
            var executor = _this.cIds[message.cid];
            if (!executor) {
              _this.verbose && window && window.console && console.error("No promise executor for message: %o", message);
              return;
            }
            delete _this.cIds[message.cid];
            message.error ? executor.reject(message.error) : executor.resolve(message);
          }
        };
        return new Promise(function(resolve, reject) {
          socket.onopen = function(evt) {
            _this.verbose && window && window.console && console.log(evt);
            resolve(session);
          };
          socket.onerror = function(evt) {
            reject(evt);
            socket.close();
            _this.socket = void 0;
          };
        });
      };
      DefaultSocket.prototype.disconnect = function(fireDisconnectEvent) {
        void 0 === fireDisconnectEvent && (fireDisconnectEvent = true);
        void 0 !== this.socket && this.socket.close();
        fireDisconnectEvent && this.ondisconnect({});
      };
      DefaultSocket.prototype.ondisconnect = function(evt) {
        this.verbose && window && window.console && console.log(evt);
      };
      DefaultSocket.prototype.onerror = function(evt) {
        this.verbose && window && window.console && console.log(evt);
      };
      DefaultSocket.prototype.onchannelmessage = function(channelMessage) {
        this.verbose && window && window.console && console.log(channelMessage);
      };
      DefaultSocket.prototype.onchannelpresence = function(channelPresence) {
        this.verbose && window && window.console && console.log(channelPresence);
      };
      DefaultSocket.prototype.onnotification = function(notification) {
        this.verbose && window && window.console && console.log(notification);
      };
      DefaultSocket.prototype.onmatchdata = function(matchData) {
        this.verbose && window && window.console && console.log(matchData);
      };
      DefaultSocket.prototype.onmatchpresence = function(matchPresence) {
        this.verbose && window && window.console && console.log(matchPresence);
      };
      DefaultSocket.prototype.onmatchmakermatched = function(matchmakerMatched) {
        this.verbose && window && window.console && console.log(matchmakerMatched);
      };
      DefaultSocket.prototype.onstatuspresence = function(statusPresence) {
        this.verbose && window && window.console && console.log(statusPresence);
      };
      DefaultSocket.prototype.onstreampresence = function(streamPresence) {
        this.verbose && window && window.console && console.log(streamPresence);
      };
      DefaultSocket.prototype.onstreamdata = function(streamData) {
        this.verbose && window && window.console && console.log(streamData);
      };
      DefaultSocket.prototype.send = function(message) {
        var _this = this;
        var m = message;
        return new Promise(function(resolve, reject) {
          if (void 0 === _this.socket) reject("Socket connection has not been established yet."); else if (m.match_data_send) {
            m.match_data_send.data = Base64_1.btoa(JSON.stringify(m.match_data_send.data));
            m.match_data_send.op_code = m.match_data_send.op_code.toString();
            _this.socket.send(JSON.stringify(m));
            resolve();
          } else {
            m.channel_message_send ? m.channel_message_send.content = JSON.stringify(m.channel_message_send.content) : m.channel_message_update && (m.channel_message_update.content = JSON.stringify(m.channel_message_update.content));
            var cid = _this.generatecid();
            _this.cIds[cid] = {
              resolve: resolve,
              reject: reject
            };
            m.cid = cid;
            _this.socket.send(JSON.stringify(m));
          }
          _this.verbose && window && window.console && console.log("Sent message: %o", m);
        });
      };
      return DefaultSocket;
    }();
    exports.DefaultSocket = DefaultSocket;
    cc._RF.pop();
  }, {
    Base64: 2
  } ],
  spinCGlobalScript: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23778lJET5N+Y9HWhOLecjx", "spinCGlobalScript");
    "use strict";
    window.randomNumber = function(end) {
      var start = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
      return Math.floor(Math.random() * (end - start) + start);
    };
    window.disableEnableChildenButtonsInNode = function(enable, children) {
      for (var i = 0; i < children.length; i++) {
        var curChild = children[i];
        curChild.getComponent("cc.Button") && (curChild.getComponent("cc.Button").interactable = enable);
      }
    };
    window.pathBeginning = "/Canvas/";
    window.userId = "";
    window.userBalance = 0;
    window.previousBet = [];
    window.coinsOnBetsArray = [];
    window.betsMultiplayer = {
      pigeon: 8,
      animal: 2,
      bird: 2,
      monkey: 8,
      peacock: 8,
      shark_silver: 24,
      shark_gold: 100,
      panda: 8,
      swallow: 6,
      eagle: 12,
      lion: 12,
      rabbit: 6
    };
    cc._RF.pop();
  }, {} ],
  userControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d003Ocm4RBF6UIXXj5hxLp", "userControl");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        userId = cc.sys.localStorage.getItem("Spinc_user_id");
        if (null == userId) {
          userId = "Player" + Math.floor(99999999 * Math.random());
          cc.sys.localStorage.setItem("Spinc_user_id", userId);
        }
        this.node.getChildByName("nickname").getComponent("cc.Label").string = userId;
        userBalance = cc.sys.localStorage.getItem("Spinc_user_balance");
        if (null == userBalance || userBalance <= 0) {
          userBalance = 1e5;
          cc.sys.localStorage.setItem("Spinc_user_balance", userBalance);
        }
        this.node.getChildByName("balance").getComponent("cc.Label").string = userBalance;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  verifyPlainObject: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9908PwIXlDdYuq66z7saUk", "verifyPlainObject");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var warning_1 = require("./warning");
    function isPlainObject(value) {
      if ("object" !== typeof value || value + "" !== "[object Object]") return false;
      if (null === Object.getPrototypeOf(value)) return true;
      var proto = value;
      while (null !== Object.getPrototypeOf(proto)) proto = Object.getPrototypeOf(proto);
      return Object.getPrototypeOf(value) === proto;
    }
    exports.verifyPlainObject = function(value, displayName, methodName) {
      isPlainObject(value) || warning_1.warning(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
    };
    cc._RF.pop();
  }, {
    "./warning": "warning"
  } ],
  verifySubselectors: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f7adl5GcFISboCDd8vZz3Q", "verifySubselectors");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var warning_1 = require("../utils/warning");
    exports.verify = function(selector, methodName, displayName) {
      if (!selector) throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
      "mapStateToProps" !== methodName && "mapDispatchToProps" !== methodName || selector.hasOwnProperty("dependsOnOwnProps") || warning_1.warning("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    };
    exports.verifySubselectors = function(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
      exports.verify(mapStateToProps, "mapStateToProps", displayName);
      exports.verify(mapDispatchToProps, "mapDispatchToProps", displayName);
      exports.verify(mergeProps, "mergeProps", displayName);
    };
    cc._RF.pop();
  }, {
    "../utils/warning": "warning"
  } ],
  warning: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0318eBZ/kxC8rxd9vjG7g3I", "warning");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.warning = function(message) {
      "undefined" !== typeof console && "function" === typeof console.error && console.error(message);
      try {
        throw new Error(message);
      } catch (e) {}
    };
    cc._RF.pop();
  }, {} ],
  withPromiseOrder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "185fcU543hIhKXNh1yoElh1", "withPromiseOrder");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var orderByKey = {};
    function withPromiseOrder(target, key, descriptor) {
      void 0 === descriptor && (descriptor = Object.getOwnPropertyDescriptor(target, key));
      key in orderByKey === false && (orderByKey[key] = Promise.resolve());
      var originalMethod = descriptor.value;
      descriptor.value = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        return __awaiter(this, void 0, Promise, function() {
          var currentMethod, newMethod;
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              currentMethod = orderByKey[key];
              newMethod = function() {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, originalMethod.apply(this, args) ];

                     case 1:
                      return [ 2, _a.sent() ];
                    }
                  });
                });
              };
              orderByKey[key] = function() {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      return [ 4, currentMethod ];

                     case 1:
                      _a.sent();
                      return [ 4, newMethod() ];

                     case 2:
                      return [ 2, _a.sent() ];
                    }
                  });
                });
              }();
              return [ 4, orderByKey[key] ];

             case 1:
              return [ 2, _a.sent() ];
            }
          });
        });
      };
      return descriptor;
    }
    exports.withPromiseOrder = withPromiseOrder;
    cc._RF.pop();
  }, {} ],
  wrapActionCreators: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8333dM+IA5JNb6TYBRmJtib", "wrapActionCreators");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var redux_1 = require("redux");
    function wrapActionCreators(actionCreators) {
      return function(dispatch) {
        return redux_1.bindActionCreators(actionCreators, dispatch);
      };
    }
    exports.wrapActionCreators = wrapActionCreators;
    cc._RF.pop();
  }, {
    redux: 133
  } ],
  wrapMapToProps: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38b33mxT7RFOKMSy7iz0B1e", "wrapMapToProps");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.wrapMapToPropsConstant = function(getConstant) {
      return function(dispatch, options) {
        var constant = getConstant(dispatch, options);
        var constantSelector = function() {
          return constant;
        };
        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
      };
    };
    exports.getDependsOnOwnProps = function(mapToProps) {
      return null !== mapToProps.dependsOnOwnProps && void 0 !== mapToProps.dependsOnOwnProps ? !!mapToProps.dependsOnOwnProps : 1 !== mapToProps.length;
    };
    exports.wrapMapToPropsFunc = function(mapToProps, methodName) {
      return function(dispatch, _a) {
        var displayName = _a.displayName;
        var proxy = function(stateOrDispatch, ownProps) {
          return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
        };
        proxy.dependsOnOwnProps = exports.getDependsOnOwnProps(mapToProps);
        proxy.mapToProps = function(stateOrDispatch, ownProps) {
          proxy.mapToProps = mapToProps;
          var props = proxy(stateOrDispatch, ownProps);
          if ("function" === typeof props) {
            proxy.mapToProps = props;
            proxy.dependsOnOwnProps = exports.getDependsOnOwnProps(props);
            props = proxy(stateOrDispatch, ownProps);
          }
          return props;
        };
        return proxy;
      };
    };
    cc._RF.pop();
  }, {} ]
}, {}, [ "Main", "commonTypes", "AvatarIcon", "Component", "Config", "AssetsController", "GameCore", "Logger", "Rewards", "SceneController", "ViewAdapterBase", "Card", "SampleSelector", "BaseCombination", "BaseRules", "CombinationResult", "fetch", "ReduxPureTarget", "connectAdvanced", "connectToPureTarget", "reduxTypes", "connect", "mapDispatchToProps", "mapStateToProps", "mergeProps", "selectorFactory", "verifySubselectors", "wrapMapToProps", "Subscription", "shallowEqual", "verifyPlainObject", "warning", "wrapActionCreators", "selector", "BaseWindow", "DialogWindow", "ExampleWindowManager", "LoadingWindow", "WindowsManager", "WindowsTypes", "withPromiseOrder", "CustomHitTestHelper", "DebugHelpers", "LabelHelper", "TextHelper", "ISoundManager", "ISoundPlayer", "Sound", "SoundChannel", "SoundManager", "SoundPack", "SoundPlayer", "ServerConnector", "ServerController", "ServerLogicAdapterBase", "api.gen", "client", "session", "socket", "CocosStorage", "actions", "assetsActions", "commonReducers", "createReducer", "index", "assets", "scene", "sceneActions", "BKGame", "BKSounds", "GameController", "GameModel", "GameTimer", "BKAction", "BKGameCore", "BKServerLogicAdapter", "BKViewAdapterBase", "Pool", "ChipView", "ChipsView", "RoundTimer", "HostsPanel", "PlayersAvatarsPanel", "SettingsPanel", "UserInfoPanel", "PlayersListPopup", "PlayersListPopupItem", "RoundResultPopup", "RulesPopup", "SoundSettingsPopup", "ResultInfo", "RoundResult", "GameStatistic", "PersonalStatistic", "ResultsStatistic", "RoadmapStatistic", "SettingsCheckbox", "Slider", "ToggleContainer", "BjCardDeck", "BjChipSelectController", "BjChipsContainerUpdater", "BjChipsController", "BjCommonInterfaces", "BjConfig", "BjConstant", "BjGame", "BjGameFieldController", "BjHandAnimationController", "BjHistoryController", "BjInsureMessageController", "BjMatchController", "BjPlayButtonController", "BjPlayer", "BjScoreHintController", "BjSelectBetController", "BjStoreInterface", "BjSynchronizerController", "BjWaitController", "BjWinMessageController", "BjGameConfig", "BjSyncActionConfig", "BjLanguage", "BjTextLang", "BjCardData", "BjActions", "StoreController", "BjCard", "BjCardContainer", "BjCardScoreHint", "BjChip", "BjChipSelect", "BjChipsContainer", "BjChipsSelectContainer", "BjGameField", "BjHands", "BjHistory", "BjInsureMessage", "BjPlayerAction", "BjSelectBet", "BjWinMessage", "BGConfig", "BGGame", "BGTableBetMenu", "BGGameStates", "BGSpriteFactory", "BGAction", "BGGameCore", "BGServerLogicAdapter", "BGViewAdapterBase", "BGActionTexts", "BGGamePlayerData", "BGPlayerActionConfig", "BGTableConfig", "BGBankView", "BGCard", "BGCardView", "BGChipDrawer", "BGMainPlayerCardView", "BGPlayerTimerView", "BGPlayerView", "BGBetItem", "BGGameMenu", "BGTopPlayerMenu", "BGInfoWindow", "DDGame", "DDSounds", "DDAction", "DDGameCore", "DDServerCard", "DDServerLogicAdapter", "DDViewAdapterBase", "DouDizhuBaseCombination", "DouDizhuRules", "BombCombination", "HighCardCombination", "PairCombination", "QuardWithCardsCombination", "QuardWithPairsCombination", "RocketCombination", "SequenceCombination", "SequenceOfPairsCombination", "SequenceOfQuardsCombination", "SequenceOfTripletsCombination", "SequenceOfTripletsWithCardCombination", "SequenceOfTripletsWithPairCombination", "TripletCombination", "TripletWithCardCombination", "TripletWithPairCombination", "DDPlayerData", "DDBetItem", "DDBetTables", "DDCardView", "DDPlayerView", "PromptComponent", "SettingsComponent", "DDCoin", "DDCoinGroup", "PKGame", "PKGameController", "PKGameModel", "PKGameTimer", "PKSounds", "PKAction", "PKGameCore", "PKServerLogicAdapter", "PKViewAdapterBase", "PKPool", "PKChipView", "PKChipsView", "PKRoundTimer", "PKCenterPanel", "PKHostsPanel", "PKPlayersAvatarsPanel", "PKSettingsPanel", "PKUserInfoPanel", "PKPlayersListPopup", "PKPlayersListPopupItem", "PKRoundResultPopup", "PKRulesPopup", "PKSoundSettingsPopup", "PKResultInfo", "PKRoundResult", "PKGameStatistic", "PKPersonalStatistic", "PKResultsStatistic", "PKRoadmapStatistic", "PKSettingsCheckbox", "PKSlider", "PKToggleContainer", "animOnButt", "betsControl", "gameControl", "historyControl", "ratesControl", "spinCGlobalScript", "userControl", "TDCellStats", "TDSidesGameControl", "TDStatisticControl", "TDStats", "TDTableImagesHolder", "TDBotButton", "TDBotLogic", "TDConfig", "TDGameCore", "TDGamePlayerData", "TDLocalLogic", "TDLogicAdapterBase", "TDPlayersActions", "TDViewAdapterBase", "THGame", "THInterval", "THButtonsController", "THCardsController", "THChipsController", "THPlayerController", "THPlayerDataController", "THAction", "THGameCore", "THServerLogicAdapter", "THViewAdapterBase", "THGetText", "THTexts", "THCommonTypes", "THTableConfig", "THAltSetting", "THBetItem", "THBetTables", "THButtons", "THCard", "THCards", "THChip", "THChipsContainer", "THPlayerView", "THRadialShadow", "AutofontComponent", "BaseAvatarComponent", "BaseGameChip", "Button", "DebugTouchComponent", "GameViewComponent", "PhoneStatusComponent", "PrefabLoader", "SolidBackground", "TableGameChipHolder", "WaitingPlayersComponent", "mainActions", "mainReducers", "general", "model", "ApplicationScene", "GameScene", "SelectTableSceneBase" ]);